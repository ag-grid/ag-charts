---
import Layout from '@layouts/Layout.astro';
import { PagesNavigationFromLocalStorage } from '@components/pages-navigation/components/PagesNavigationFromLocalStorage';
import { parseVersion } from '@ag-website-shared/utils/parseVersion';
import { Version, type VersionProps } from '../components/Version';
import type { Framework, MenuSection, Library } from '@ag-grid-types';
import styles from '../WhatsNew.module.scss';
import whatsNewData from '@ag-website-shared/content/whats-new/data.json';

interface Props {
    site: Library;
    versionsData: VersionProps[];
    allMenuSections: MenuSection[];
}

const { site, versionsData, allMenuSections } = Astro.props;
const pageName = Astro.params.pageName as Framework;

const { name, blogPrefix } = whatsNewData[site];
---

<Layout title={"What's new"} showDocsNav={true} showSearchBar={true}>
    <div class:list={['contentViewport layout-grid']}>
        <PagesNavigationFromLocalStorage client:load allMenuSections={allMenuSections} pageName={pageName} />

        <div class={styles.whatsNewContainer}>
            <h1>What's New in {name}</h1>
            <p class={styles.description}>See what's new in recent {name} versions.</p>
            <div class={styles.versions}>
                {
                    versionsData.slice(0, 9).map((versionInfo, index) => {
                        if (versionInfo.highlights) {
                            const { major, minor } = parseVersion(versionInfo.version);
                            const blogUrl = `${minor ? `${blogPrefix}${major}-${minor}` : major}/`;
                            return (
                                <Version
                                    client:load
                                    isLatest={index === 0}
                                    blogUrl={blogUrl}
                                    version={versionInfo.version}
                                    date={versionInfo.date}
                                    highlights={versionInfo.highlights}
                                    notesPath={versionInfo.notesPath}
                                />
                            );
                        }
                    })
                }
            </div>
        </div>
    </div>
</Layout>
