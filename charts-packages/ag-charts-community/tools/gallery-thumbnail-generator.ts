import * as fs from 'fs';
import { JSDOM } from 'jsdom';

import * as mockCanvas from '../src/chart/test/mock-canvas';
import * as examples from '../src/chart/test/examples';
import { AgChartV2 } from '../src/chart/agChartV2';

const galleryJson = `${__dirname}/../../../grid-packages/ag-grid-docs/documentation/doc-pages/charts-overview/gallery.json`;
const outputPath = `${__dirname}/../../../grid-packages/ag-grid-docs/documentation/src/components/chart-gallery/thumbnails`;
const galleryExamplesPath = `${__dirname}/../../../grid-packages/ag-grid-docs/documentation/doc-pages/charts-overview/examples`;
const galleryMdPath = `${__dirname}/../../../grid-packages/ag-grid-docs/documentation/doc-pages/charts-overview/_gallery.md`;

const galleryOpts = JSON.parse(fs.readFileSync(galleryJson).toString());
const examplesToGenerate: string[] = [];

for (const group of Object.values(galleryOpts)) {
    for (const { example } of Object.values(group as Record<string, { example?: string }>)) {
        if (example) {
            examplesToGenerate.push(example);
        }
    }
}

const genThumbnails = async () => {
    const width = 800;
    const height = 570;

    for (const thumbnail of examplesToGenerate) {
        const example = examples.DOCS_EXAMPLES[thumbnail];
        if (example == null) {
            console.error(`Didn't find example for ['${thumbnail}']!`);
            process.exitCode = 5;
            continue;
        }

        console.log(`Generating thumbnail for ['${thumbnail}']...`);

        const {
            window,
            window: { document, HTMLElement, navigator },
        } = new JSDOM('<html><body></body></html>');
        const globalNsValues = { window, document, HTMLElement, navigator };
        Object.assign(global, globalNsValues);

        const mockCtx = mockCanvas.setup({ width, height });

        const options = { ...example, autoSize: false, width, height };
        const chart = AgChartV2.create<any>(options);
        await chart.waitForUpdate(5_000);

        fs.writeFileSync(`${outputPath}/${thumbnail}.png`, mockCtx.ctx.nodeCanvas?.toBuffer());

        chart.destroy();
        mockCanvas.teardown(mockCtx);

        Object.keys(globalNsValues).forEach((k) => delete global[k]);
    }
};

const updateGalleryMd = async () => {
    const moduleName = __filename.split('/').pop();
    const fileContent = `
---
title: "AG Charts Gallery"
comment: "This page is auto-generated by ${moduleName} to allow the chart gallery examples to be generated. It is ignored by the website."
---
`
        .trim()
        .split('\n')
        .concat('');

    for (const example of examplesToGenerate) {
        let type = 'generated';
        if (fs.existsSync(`${galleryExamplesPath}/${example}/provided`)) {
            type = 'mixed';
        }

        fileContent.push(
            `<chart-example name='${example}' type='${type}' options='{ "exampleHeight": "60vh" }'></chart-example>`
        );
    }

    fs.writeFileSync(galleryMdPath, fileContent.join('\n'));
};

Promise.all([genThumbnails(), updateGalleryMd()])
    .then(() => {
        process.exit();
    })
    .catch((e) => {
        console.error(e);
        process.exit(10);
    });
