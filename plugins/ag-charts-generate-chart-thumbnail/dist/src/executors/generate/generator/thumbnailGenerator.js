"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "generateExample", {
    enumerable: true,
    get: function() {
        return generateExample;
    }
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _canvas = require("canvas");
const _jsdom = require("jsdom");
const _path = /*#__PURE__*/ _interop_require_default._(require("path"));
const _sharp = /*#__PURE__*/ _interop_require_default._(require("sharp"));
const _agchartscommunity = require("ag-charts-community");
require("ag-charts-enterprise");
const _agchartstest = require("ag-charts-test");
const _constants = require("./constants");
const _getChartLayout = require("./getChartLayout");
const _patchOptions = require("./patchOptions");
const _transformPlainEntryFile = require("./transformPlainEntryFile");
async function generateExample({ example, theme, outputPath, dpi }) {
    const { entryFileName, files = {} } = example;
    const entryFile = files[entryFileName];
    const { optionsById } = (0, _transformPlainEntryFile.transformPlainEntryFile)(entryFile, files['data.js']);
    const { rows, columns, charts } = (0, _getChartLayout.getChartLayout)(files['index.html']);
    let output;
    if (charts.length > 1) {
        const canvas = new _canvas.Canvas(_constants.DEFAULT_THUMBNAIL_WIDTH * dpi, _constants.DEFAULT_THUMBNAIL_HEIGHT * dpi);
        const ctx = canvas.getContext('2d');
        ctx.fillStyle = _constants.BACKGROUND_COLORS[theme];
        ctx.fillRect(0, 0, _constants.DEFAULT_THUMBNAIL_WIDTH * dpi, _constants.DEFAULT_THUMBNAIL_HEIGHT * dpi);
        output = {
            multiple: true,
            canvas,
            ctx
        };
    } else {
        output = {
            multiple: false,
            buffer: undefined
        };
    }
    for (const { id, row, column } of charts){
        /* TODO: Initialize these once */ const { window, window: { document } } = new _jsdom.JSDOM(`<html><head><style></style></head><body></body></html>`);
        // Note - we'll need one instance per DPI setting
        const mockCtx = _agchartstest.mockCanvas.setup({
            width: _constants.DEFAULT_THUMBNAIL_WIDTH * dpi,
            height: _constants.DEFAULT_THUMBNAIL_HEIGHT * dpi,
            document,
            window: window,
            mockText: false
        });
        const chartProxy = _agchartscommunity.AgCharts.create({
            animation: {
                enabled: false
            },
            document,
            window,
            width: _constants.DEFAULT_THUMBNAIL_WIDTH,
            height: _constants.DEFAULT_THUMBNAIL_HEIGHT,
            overrideDevicePixelRatio: dpi
        });
        /* End TODO */ const options = optionsById.get(id);
        if (options == null) {
            throw new Error(`No options found for container with id "${id}"`);
        }
        (0, _patchOptions.patchOptions)(options, theme);
        const containerWidth = _constants.DEFAULT_THUMBNAIL_WIDTH / columns | 0;
        const containerHeight = _constants.DEFAULT_THUMBNAIL_HEIGHT / rows | 0;
        let width;
        let height;
        if (options.width != null) {
            const detailContainerHeight = _constants.DETAIL_FULL_HEIGHT / rows;
            let aspectRatio = options.width / detailContainerHeight;
            aspectRatio = Math.min(Math.max(aspectRatio, _constants.MIN_ASPECT_RATIO), _constants.MAX_ASPECT_RATIO);
            width = Math.min(containerHeight * aspectRatio, containerWidth);
            height = containerHeight;
        } else if (options.height != null) {
            const detailContainerWidth = _constants.DETAIL_FULL_WIDTH / columns;
            let aspectRatio = detailContainerWidth / options.height;
            aspectRatio = Math.min(Math.max(aspectRatio, _constants.MIN_ASPECT_RATIO), _constants.MAX_ASPECT_RATIO);
            width = containerWidth;
            height = Math.min(containerWidth / aspectRatio, containerHeight);
        } else {
            width = containerWidth;
            height = containerHeight;
        }
        const x0 = containerWidth * column + (containerWidth - width) / 2 | 0;
        const y0 = containerHeight * row + (containerHeight - height) / 2 | 0;
        _agchartscommunity.AgCharts.update(chartProxy, {
            ...options,
            animation: {
                enabled: false
            },
            document,
            window,
            width,
            height,
            overrideDevicePixelRatio: dpi
        });
        const chart = chartProxy.chart;
        await chart.waitForUpdate(5_000);
        if (output.multiple === true) {
            output.ctx.drawImage(mockCtx.ctx.nodeCanvas, 0, 0, width * dpi, height * dpi, x0 * dpi, y0 * dpi, width * dpi, height * dpi);
        } else {
            output.buffer = mockCtx.ctx.nodeCanvas.toBuffer('image/png');
        }
    }
    const buffer = output.multiple === true ? output.canvas.toBuffer('image/png') : output.buffer;
    const s = (0, _sharp.default)(buffer);
    const dpiExt = dpi !== 1 ? `@${dpi}x` : '';
    await Promise.all([
        s.clone().png().toFile(_path.default.join(outputPath, `${theme}${dpiExt}.png`)),
        s.clone().webp().toFile(_path.default.join(outputPath, `${theme}${dpiExt}.webp`))
    ]);
}

//# sourceMappingURL=data:application/json;base64,