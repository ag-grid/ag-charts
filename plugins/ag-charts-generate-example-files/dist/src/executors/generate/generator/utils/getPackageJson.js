"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getPackageJson", {
    enumerable: true,
    get: function() {
        return getPackageJson;
    }
});
const _extends = require("@swc/helpers/_/_extends");
const _fs = require("fs");
const _constants = require("../constants");
function getPackageJsonVersion(packageName) {
    const path = `${process.cwd()}/packages/${packageName}/package.json`;
    const packageJsonStr = (0, _fs.readFileSync)(path, 'utf-8');
    const packageJson = JSON.parse(packageJsonStr);
    return '^' + packageJson.version;
}
function getFrameworkDependencies(internalFramework) {
    const frameworkDependencies = _extends._({}, _constants.INTERNAL_FRAMEWORK_DEPENDENCIES[internalFramework]);
    if (internalFramework === 'angular') {
        frameworkDependencies['ag-charts-angular'] = getPackageJsonVersion('ag-charts-angular');
    } else if (internalFramework === 'reactFunctional' || internalFramework === 'reactFunctionalTs') {
        frameworkDependencies['ag-charts-react'] = getPackageJsonVersion('ag-charts-react');
    } else if (internalFramework === 'vue') {
        frameworkDependencies['ag-charts-vue'] = getPackageJsonVersion('ag-charts-vue');
    } else if (internalFramework === 'vue3') {
        frameworkDependencies['ag-charts-vue3'] = getPackageJsonVersion('ag-charts-vue3');
    }
    return frameworkDependencies;
}
function getPackageJson({ isEnterprise, internalFramework }) {
    const agChartsCommunityVersion = getPackageJsonVersion('ag-charts-community');
    const agChartsEnterpriseVersion = getPackageJsonVersion('ag-charts-enterprise');
    const chartsLibary = isEnterprise ? {
        'ag-charts-enterprise': agChartsEnterpriseVersion
    } : {
        'ag-charts-community': agChartsCommunityVersion
    };
    const frameworkDependencies = getFrameworkDependencies(internalFramework);
    const dependencies = _extends._({}, frameworkDependencies, chartsLibary);
    const packageJson = {
        name: `ag-charts-example`,
        dependencies
    };
    return packageJson;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9leGVjdXRvcnMvZ2VuZXJhdGUvZ2VuZXJhdG9yL3V0aWxzL2dldFBhY2thZ2VKc29uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRGaWxlU3luYyB9IGZyb20gJ2ZzJztcblxuaW1wb3J0IHsgSU5URVJOQUxfRlJBTUVXT1JLX0RFUEVOREVOQ0lFUyB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgdHlwZSB7IEludGVybmFsRnJhbWV3b3JrIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgUGFyYW1zIHtcbiAgICBpc0VudGVycHJpc2U6IGJvb2xlYW47XG4gICAgaW50ZXJuYWxGcmFtZXdvcms6IEludGVybmFsRnJhbWV3b3JrO1xufVxuXG5mdW5jdGlvbiBnZXRQYWNrYWdlSnNvblZlcnNpb24ocGFja2FnZU5hbWU6IHN0cmluZykge1xuICAgIGNvbnN0IHBhdGggPSBgJHtwcm9jZXNzLmN3ZCgpfS9wYWNrYWdlcy8ke3BhY2thZ2VOYW1lfS9wYWNrYWdlLmpzb25gO1xuICAgIGNvbnN0IHBhY2thZ2VKc29uU3RyID0gcmVhZEZpbGVTeW5jKHBhdGgsICd1dGYtOCcpO1xuICAgIGNvbnN0IHBhY2thZ2VKc29uID0gSlNPTi5wYXJzZShwYWNrYWdlSnNvblN0cik7XG4gICAgcmV0dXJuICdeJyArIHBhY2thZ2VKc29uLnZlcnNpb247XG59XG5cbmZ1bmN0aW9uIGdldEZyYW1ld29ya0RlcGVuZGVuY2llcyhpbnRlcm5hbEZyYW1ld29yazogSW50ZXJuYWxGcmFtZXdvcmspIHtcbiAgICBjb25zdCBmcmFtZXdvcmtEZXBlbmRlbmNpZXMgPSB7XG4gICAgICAgIC4uLklOVEVSTkFMX0ZSQU1FV09SS19ERVBFTkRFTkNJRVNbaW50ZXJuYWxGcmFtZXdvcmtdLFxuICAgIH07XG5cbiAgICBpZiAoaW50ZXJuYWxGcmFtZXdvcmsgPT09ICdhbmd1bGFyJykge1xuICAgICAgICBmcmFtZXdvcmtEZXBlbmRlbmNpZXNbJ2FnLWNoYXJ0cy1hbmd1bGFyJ10gPSBnZXRQYWNrYWdlSnNvblZlcnNpb24oJ2FnLWNoYXJ0cy1hbmd1bGFyJyk7XG4gICAgfSBlbHNlIGlmIChpbnRlcm5hbEZyYW1ld29yayA9PT0gJ3JlYWN0RnVuY3Rpb25hbCcgfHwgaW50ZXJuYWxGcmFtZXdvcmsgPT09ICdyZWFjdEZ1bmN0aW9uYWxUcycpIHtcbiAgICAgICAgZnJhbWV3b3JrRGVwZW5kZW5jaWVzWydhZy1jaGFydHMtcmVhY3QnXSA9IGdldFBhY2thZ2VKc29uVmVyc2lvbignYWctY2hhcnRzLXJlYWN0Jyk7XG4gICAgfSBlbHNlIGlmIChpbnRlcm5hbEZyYW1ld29yayA9PT0gJ3Z1ZScpIHtcbiAgICAgICAgZnJhbWV3b3JrRGVwZW5kZW5jaWVzWydhZy1jaGFydHMtdnVlJ10gPSBnZXRQYWNrYWdlSnNvblZlcnNpb24oJ2FnLWNoYXJ0cy12dWUnKTtcbiAgICB9IGVsc2UgaWYgKGludGVybmFsRnJhbWV3b3JrID09PSAndnVlMycpIHtcbiAgICAgICAgZnJhbWV3b3JrRGVwZW5kZW5jaWVzWydhZy1jaGFydHMtdnVlMyddID0gZ2V0UGFja2FnZUpzb25WZXJzaW9uKCdhZy1jaGFydHMtdnVlMycpO1xuICAgIH1cblxuICAgIHJldHVybiBmcmFtZXdvcmtEZXBlbmRlbmNpZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYWNrYWdlSnNvbih7IGlzRW50ZXJwcmlzZSwgaW50ZXJuYWxGcmFtZXdvcmsgfTogUGFyYW1zKSB7XG4gICAgY29uc3QgYWdDaGFydHNDb21tdW5pdHlWZXJzaW9uID0gZ2V0UGFja2FnZUpzb25WZXJzaW9uKCdhZy1jaGFydHMtY29tbXVuaXR5Jyk7XG4gICAgY29uc3QgYWdDaGFydHNFbnRlcnByaXNlVmVyc2lvbiA9IGdldFBhY2thZ2VKc29uVmVyc2lvbignYWctY2hhcnRzLWVudGVycHJpc2UnKTtcbiAgICBjb25zdCBjaGFydHNMaWJhcnkgPSBpc0VudGVycHJpc2VcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAgICdhZy1jaGFydHMtZW50ZXJwcmlzZSc6IGFnQ2hhcnRzRW50ZXJwcmlzZVZlcnNpb24sXG4gICAgICAgICAgfVxuICAgICAgICA6IHtcbiAgICAgICAgICAgICAgJ2FnLWNoYXJ0cy1jb21tdW5pdHknOiBhZ0NoYXJ0c0NvbW11bml0eVZlcnNpb24sXG4gICAgICAgICAgfTtcblxuICAgIGNvbnN0IGZyYW1ld29ya0RlcGVuZGVuY2llcyA9IGdldEZyYW1ld29ya0RlcGVuZGVuY2llcyhpbnRlcm5hbEZyYW1ld29yayk7XG4gICAgY29uc3QgZGVwZW5kZW5jaWVzID0ge1xuICAgICAgICAuLi5mcmFtZXdvcmtEZXBlbmRlbmNpZXMsXG4gICAgICAgIC4uLmNoYXJ0c0xpYmFyeSxcbiAgICB9O1xuXG4gICAgY29uc3QgcGFja2FnZUpzb24gPSB7XG4gICAgICAgIG5hbWU6IGBhZy1jaGFydHMtZXhhbXBsZWAsXG4gICAgICAgIGRlcGVuZGVuY2llcyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHBhY2thZ2VKc29uO1xufVxuIl0sIm5hbWVzIjpbImdldFBhY2thZ2VKc29uIiwiZ2V0UGFja2FnZUpzb25WZXJzaW9uIiwicGFja2FnZU5hbWUiLCJwYXRoIiwicHJvY2VzcyIsImN3ZCIsInBhY2thZ2VKc29uU3RyIiwicmVhZEZpbGVTeW5jIiwicGFja2FnZUpzb24iLCJKU09OIiwicGFyc2UiLCJ2ZXJzaW9uIiwiZ2V0RnJhbWV3b3JrRGVwZW5kZW5jaWVzIiwiaW50ZXJuYWxGcmFtZXdvcmsiLCJmcmFtZXdvcmtEZXBlbmRlbmNpZXMiLCJJTlRFUk5BTF9GUkFNRVdPUktfREVQRU5ERU5DSUVTIiwiaXNFbnRlcnByaXNlIiwiYWdDaGFydHNDb21tdW5pdHlWZXJzaW9uIiwiYWdDaGFydHNFbnRlcnByaXNlVmVyc2lvbiIsImNoYXJ0c0xpYmFyeSIsImRlcGVuZGVuY2llcyIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7K0JBbUNnQkE7OztlQUFBQTs7OztvQkFuQ2E7MkJBRW1CO0FBUWhELFNBQVNDLHNCQUFzQkMsV0FBbUI7SUFDOUMsTUFBTUMsT0FBTyxDQUFDLEVBQUVDLFFBQVFDLEdBQUcsR0FBRyxVQUFVLEVBQUVILFlBQVksYUFBYSxDQUFDO0lBQ3BFLE1BQU1JLGlCQUFpQkMsSUFBQUEsZ0JBQVksRUFBQ0osTUFBTTtJQUMxQyxNQUFNSyxjQUFjQyxLQUFLQyxLQUFLLENBQUNKO0lBQy9CLE9BQU8sTUFBTUUsWUFBWUcsT0FBTztBQUNwQztBQUVBLFNBQVNDLHlCQUF5QkMsaUJBQW9DO0lBQ2xFLE1BQU1DLHdCQUF3QixlQUN2QkMsMENBQStCLENBQUNGLGtCQUFrQjtJQUd6RCxJQUFJQSxzQkFBc0IsV0FBVztRQUNqQ0MscUJBQXFCLENBQUMsb0JBQW9CLEdBQUdiLHNCQUFzQjtJQUN2RSxPQUFPLElBQUlZLHNCQUFzQixxQkFBcUJBLHNCQUFzQixxQkFBcUI7UUFDN0ZDLHFCQUFxQixDQUFDLGtCQUFrQixHQUFHYixzQkFBc0I7SUFDckUsT0FBTyxJQUFJWSxzQkFBc0IsT0FBTztRQUNwQ0MscUJBQXFCLENBQUMsZ0JBQWdCLEdBQUdiLHNCQUFzQjtJQUNuRSxPQUFPLElBQUlZLHNCQUFzQixRQUFRO1FBQ3JDQyxxQkFBcUIsQ0FBQyxpQkFBaUIsR0FBR2Isc0JBQXNCO0lBQ3BFO0lBRUEsT0FBT2E7QUFDWDtBQUVPLFNBQVNkLGVBQWUsRUFBRWdCLFlBQVksRUFBRUgsaUJBQWlCLEVBQVU7SUFDdEUsTUFBTUksMkJBQTJCaEIsc0JBQXNCO0lBQ3ZELE1BQU1pQiw0QkFBNEJqQixzQkFBc0I7SUFDeEQsTUFBTWtCLGVBQWVILGVBQ2Y7UUFDSSx3QkFBd0JFO0lBQzVCLElBQ0E7UUFDSSx1QkFBdUJEO0lBQzNCO0lBRU4sTUFBTUgsd0JBQXdCRix5QkFBeUJDO0lBQ3ZELE1BQU1PLGVBQWUsZUFDZE4sdUJBQ0FLO0lBR1AsTUFBTVgsY0FBYztRQUNoQmEsTUFBTSxDQUFDLGlCQUFpQixDQUFDO1FBQ3pCRDtJQUNKO0lBRUEsT0FBT1o7QUFDWCJ9