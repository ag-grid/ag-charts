"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "getOtherScriptFiles", {
    enumerable: true,
    get: function() {
        return getOtherScriptFiles;
    }
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _prettier = /*#__PURE__*/ _interop_require_default._(require("prettier"));
const _constants = require("../constants");
const _parserutils = require("../transformation-scripts/parser-utils");
const _fileUtils = require("./fileUtils");
const getOtherTsGeneratedFiles = async ({ folderPath, sourceFileList, transformTsFileExt })=>{
    const otherTsFiles = sourceFileList.filter((fileName)=>fileName.endsWith('.ts'))// Exclude source entry file, as it is used to generate framework entry file
    .filter((fileName)=>fileName !== _constants.SOURCE_ENTRY_FILE_NAME);
    const tsFileContents = await (0, _fileUtils.getFileList)({
        folderPath,
        fileList: otherTsFiles
    });
    const generatedFiles = {};
    Object.keys(tsFileContents).forEach((tsFileName)=>{
        const srcFile = tsFileContents[tsFileName];
        if (transformTsFileExt === '.tsx') {
            const tsxFileName = tsFileName.replace('.ts', '.tsx');
            generatedFiles[tsxFileName] = srcFile;
        } else if (transformTsFileExt === undefined) {
            generatedFiles[tsFileName] = srcFile;
        } else {
            const jsFileName = tsFileName.replace('.ts', transformTsFileExt);
            generatedFiles[jsFileName] = (0, _parserutils.readAsJsFile)(srcFile);
        }
    });
    return generatedFiles;
};
const getOtherJsFiles = ({ folderPath, sourceFileList })=>{
    const otherJsFiles = sourceFileList.filter((fileName)=>fileName.endsWith('.js'));
    return (0, _fileUtils.getFileList)({
        folderPath,
        fileList: otherJsFiles
    });
};
const getOtherScriptFiles = async ({ folderPath, sourceFileList, transformTsFileExt })=>{
    const otherTsGeneratedFileContents = await getOtherTsGeneratedFiles({
        folderPath,
        sourceFileList,
        transformTsFileExt
    });
    const otherJsFileContents = await getOtherJsFiles({
        folderPath,
        sourceFileList
    });
    const contents = {};
    for (const [filename, content] of Object.entries(otherTsGeneratedFileContents)){
        contents[filename] = await _prettier.default.format(content, {
            parser: 'typescript'
        });
    }
    for (const [filename, content] of Object.entries(otherJsFileContents)){
        contents[filename] = await _prettier.default.format(content, {
            parser: 'typescript'
        });
    }
    return contents;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9leGVjdXRvcnMvZ2VuZXJhdGUvZ2VuZXJhdG9yL3V0aWxzL2dldE90aGVyU2NyaXB0RmlsZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHByZXR0aWVyIGZyb20gJ3ByZXR0aWVyJztcblxuaW1wb3J0IHsgU09VUkNFX0VOVFJZX0ZJTEVfTkFNRSB9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5pbXBvcnQgeyByZWFkQXNKc0ZpbGUgfSBmcm9tICcuLi90cmFuc2Zvcm1hdGlvbi1zY3JpcHRzL3BhcnNlci11dGlscyc7XG5pbXBvcnQgdHlwZSB7IEZpbGVDb250ZW50cywgVHJhbnNmb3JtVHNGaWxlRXh0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0RmlsZUxpc3QgfSBmcm9tICcuL2ZpbGVVdGlscyc7XG5cbmNvbnN0IGdldE90aGVyVHNHZW5lcmF0ZWRGaWxlcyA9IGFzeW5jICh7XG4gICAgZm9sZGVyUGF0aCxcbiAgICBzb3VyY2VGaWxlTGlzdCxcbiAgICB0cmFuc2Zvcm1Uc0ZpbGVFeHQsXG59OiB7XG4gICAgZm9sZGVyUGF0aDogc3RyaW5nO1xuICAgIHNvdXJjZUZpbGVMaXN0OiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBGaWxlIGV4dGVuc2lvbiBmb3IgLnRzIGZpbGVzIHRvIGJlIGNvbnZlcnRlZCB0b1xuICAgICAqL1xuICAgIHRyYW5zZm9ybVRzRmlsZUV4dD86IFRyYW5zZm9ybVRzRmlsZUV4dDtcbn0pID0+IHtcbiAgICBjb25zdCBvdGhlclRzRmlsZXMgPSBzb3VyY2VGaWxlTGlzdFxuICAgICAgICAuZmlsdGVyKChmaWxlTmFtZSkgPT4gZmlsZU5hbWUuZW5kc1dpdGgoJy50cycpKVxuICAgICAgICAvLyBFeGNsdWRlIHNvdXJjZSBlbnRyeSBmaWxlLCBhcyBpdCBpcyB1c2VkIHRvIGdlbmVyYXRlIGZyYW1ld29yayBlbnRyeSBmaWxlXG4gICAgICAgIC5maWx0ZXIoKGZpbGVOYW1lKSA9PiBmaWxlTmFtZSAhPT0gU09VUkNFX0VOVFJZX0ZJTEVfTkFNRSk7XG5cbiAgICBjb25zdCB0c0ZpbGVDb250ZW50cyA9IGF3YWl0IGdldEZpbGVMaXN0KHtcbiAgICAgICAgZm9sZGVyUGF0aCxcbiAgICAgICAgZmlsZUxpc3Q6IG90aGVyVHNGaWxlcyxcbiAgICB9KTtcblxuICAgIGNvbnN0IGdlbmVyYXRlZEZpbGVzID0ge30gYXMgRmlsZUNvbnRlbnRzO1xuICAgIE9iamVjdC5rZXlzKHRzRmlsZUNvbnRlbnRzKS5mb3JFYWNoKCh0c0ZpbGVOYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHNyY0ZpbGUgPSB0c0ZpbGVDb250ZW50c1t0c0ZpbGVOYW1lXTtcbiAgICAgICAgaWYgKHRyYW5zZm9ybVRzRmlsZUV4dCA9PT0gJy50c3gnKSB7XG4gICAgICAgICAgICBjb25zdCB0c3hGaWxlTmFtZSA9IHRzRmlsZU5hbWUucmVwbGFjZSgnLnRzJywgJy50c3gnKTtcbiAgICAgICAgICAgIGdlbmVyYXRlZEZpbGVzW3RzeEZpbGVOYW1lXSA9IHNyY0ZpbGU7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtVHNGaWxlRXh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGdlbmVyYXRlZEZpbGVzW3RzRmlsZU5hbWVdID0gc3JjRmlsZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGpzRmlsZU5hbWUgPSB0c0ZpbGVOYW1lLnJlcGxhY2UoJy50cycsIHRyYW5zZm9ybVRzRmlsZUV4dCk7XG4gICAgICAgICAgICBnZW5lcmF0ZWRGaWxlc1tqc0ZpbGVOYW1lXSA9IHJlYWRBc0pzRmlsZShzcmNGaWxlKTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRlZEZpbGVzO1xufTtcblxuY29uc3QgZ2V0T3RoZXJKc0ZpbGVzID0gKHtcbiAgICBmb2xkZXJQYXRoLFxuICAgIHNvdXJjZUZpbGVMaXN0LFxufToge1xuICAgIGZvbGRlclBhdGg6IHN0cmluZztcbiAgICBzb3VyY2VGaWxlTGlzdDogc3RyaW5nW107XG59KTogUHJvbWlzZTxGaWxlQ29udGVudHM+ID0+IHtcbiAgICBjb25zdCBvdGhlckpzRmlsZXMgPSBzb3VyY2VGaWxlTGlzdC5maWx0ZXIoKGZpbGVOYW1lKSA9PiBmaWxlTmFtZS5lbmRzV2l0aCgnLmpzJykpO1xuICAgIHJldHVybiBnZXRGaWxlTGlzdCh7XG4gICAgICAgIGZvbGRlclBhdGgsXG4gICAgICAgIGZpbGVMaXN0OiBvdGhlckpzRmlsZXMsXG4gICAgfSk7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0T3RoZXJTY3JpcHRGaWxlcyA9IGFzeW5jICh7XG4gICAgZm9sZGVyUGF0aCxcbiAgICBzb3VyY2VGaWxlTGlzdCxcbiAgICB0cmFuc2Zvcm1Uc0ZpbGVFeHQsXG59OiB7XG4gICAgZm9sZGVyUGF0aDogc3RyaW5nO1xuICAgIHNvdXJjZUZpbGVMaXN0OiBzdHJpbmdbXTtcbiAgICB0cmFuc2Zvcm1Uc0ZpbGVFeHQ/OiBUcmFuc2Zvcm1Uc0ZpbGVFeHQ7XG59KSA9PiB7XG4gICAgY29uc3Qgb3RoZXJUc0dlbmVyYXRlZEZpbGVDb250ZW50cyA9IGF3YWl0IGdldE90aGVyVHNHZW5lcmF0ZWRGaWxlcyh7XG4gICAgICAgIGZvbGRlclBhdGgsXG4gICAgICAgIHNvdXJjZUZpbGVMaXN0LFxuICAgICAgICB0cmFuc2Zvcm1Uc0ZpbGVFeHQsXG4gICAgfSk7XG4gICAgY29uc3Qgb3RoZXJKc0ZpbGVDb250ZW50cyA9IGF3YWl0IGdldE90aGVySnNGaWxlcyh7XG4gICAgICAgIGZvbGRlclBhdGgsXG4gICAgICAgIHNvdXJjZUZpbGVMaXN0LFxuICAgIH0pO1xuXG4gICAgY29uc3QgY29udGVudHM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcbiAgICBmb3IgKGNvbnN0IFtmaWxlbmFtZSwgY29udGVudF0gb2YgT2JqZWN0LmVudHJpZXMob3RoZXJUc0dlbmVyYXRlZEZpbGVDb250ZW50cykpIHtcbiAgICAgICAgY29udGVudHNbZmlsZW5hbWVdID0gYXdhaXQgcHJldHRpZXIuZm9ybWF0KGNvbnRlbnQsIHsgcGFyc2VyOiAndHlwZXNjcmlwdCcgfSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBbZmlsZW5hbWUsIGNvbnRlbnRdIG9mIE9iamVjdC5lbnRyaWVzKG90aGVySnNGaWxlQ29udGVudHMpKSB7XG4gICAgICAgIGNvbnRlbnRzW2ZpbGVuYW1lXSA9IGF3YWl0IHByZXR0aWVyLmZvcm1hdChjb250ZW50LCB7IHBhcnNlcjogJ3R5cGVzY3JpcHQnIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBjb250ZW50cztcbn07XG4iXSwibmFtZXMiOlsiZ2V0T3RoZXJTY3JpcHRGaWxlcyIsImdldE90aGVyVHNHZW5lcmF0ZWRGaWxlcyIsImZvbGRlclBhdGgiLCJzb3VyY2VGaWxlTGlzdCIsInRyYW5zZm9ybVRzRmlsZUV4dCIsIm90aGVyVHNGaWxlcyIsImZpbHRlciIsImZpbGVOYW1lIiwiZW5kc1dpdGgiLCJTT1VSQ0VfRU5UUllfRklMRV9OQU1FIiwidHNGaWxlQ29udGVudHMiLCJnZXRGaWxlTGlzdCIsImZpbGVMaXN0IiwiZ2VuZXJhdGVkRmlsZXMiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsInRzRmlsZU5hbWUiLCJzcmNGaWxlIiwidHN4RmlsZU5hbWUiLCJyZXBsYWNlIiwidW5kZWZpbmVkIiwianNGaWxlTmFtZSIsInJlYWRBc0pzRmlsZSIsImdldE90aGVySnNGaWxlcyIsIm90aGVySnNGaWxlcyIsIm90aGVyVHNHZW5lcmF0ZWRGaWxlQ29udGVudHMiLCJvdGhlckpzRmlsZUNvbnRlbnRzIiwiY29udGVudHMiLCJmaWxlbmFtZSIsImNvbnRlbnQiLCJlbnRyaWVzIiwicHJldHRpZXIiLCJmb3JtYXQiLCJwYXJzZXIiXSwibWFwcGluZ3MiOiI7Ozs7K0JBNERhQTs7O2VBQUFBOzs7O21FQTVEUTsyQkFFa0I7NkJBQ1Y7MkJBRUQ7QUFFNUIsTUFBTUMsMkJBQTJCLE9BQU8sRUFDcENDLFVBQVUsRUFDVkMsY0FBYyxFQUNkQyxrQkFBa0IsRUFRckI7SUFDRyxNQUFNQyxlQUFlRixlQUNoQkcsTUFBTSxDQUFDLENBQUNDLFdBQWFBLFNBQVNDLFFBQVEsQ0FBQyxPQUN4Qyw0RUFBNEU7S0FDM0VGLE1BQU0sQ0FBQyxDQUFDQyxXQUFhQSxhQUFhRSxpQ0FBc0I7SUFFN0QsTUFBTUMsaUJBQWlCLE1BQU1DLElBQUFBLHNCQUFXLEVBQUM7UUFDckNUO1FBQ0FVLFVBQVVQO0lBQ2Q7SUFFQSxNQUFNUSxpQkFBaUIsQ0FBQztJQUN4QkMsT0FBT0MsSUFBSSxDQUFDTCxnQkFBZ0JNLE9BQU8sQ0FBQyxDQUFDQztRQUNqQyxNQUFNQyxVQUFVUixjQUFjLENBQUNPLFdBQVc7UUFDMUMsSUFBSWIsdUJBQXVCLFFBQVE7WUFDL0IsTUFBTWUsY0FBY0YsV0FBV0csT0FBTyxDQUFDLE9BQU87WUFDOUNQLGNBQWMsQ0FBQ00sWUFBWSxHQUFHRDtRQUNsQyxPQUFPLElBQUlkLHVCQUF1QmlCLFdBQVc7WUFDekNSLGNBQWMsQ0FBQ0ksV0FBVyxHQUFHQztRQUNqQyxPQUFPO1lBQ0gsTUFBTUksYUFBYUwsV0FBV0csT0FBTyxDQUFDLE9BQU9oQjtZQUM3Q1MsY0FBYyxDQUFDUyxXQUFXLEdBQUdDLElBQUFBLHlCQUFZLEVBQUNMO1FBQzlDO0lBQ0o7SUFFQSxPQUFPTDtBQUNYO0FBRUEsTUFBTVcsa0JBQWtCLENBQUMsRUFDckJ0QixVQUFVLEVBQ1ZDLGNBQWMsRUFJakI7SUFDRyxNQUFNc0IsZUFBZXRCLGVBQWVHLE1BQU0sQ0FBQyxDQUFDQyxXQUFhQSxTQUFTQyxRQUFRLENBQUM7SUFDM0UsT0FBT0csSUFBQUEsc0JBQVcsRUFBQztRQUNmVDtRQUNBVSxVQUFVYTtJQUNkO0FBQ0o7QUFFTyxNQUFNekIsc0JBQXNCLE9BQU8sRUFDdENFLFVBQVUsRUFDVkMsY0FBYyxFQUNkQyxrQkFBa0IsRUFLckI7SUFDRyxNQUFNc0IsK0JBQStCLE1BQU16Qix5QkFBeUI7UUFDaEVDO1FBQ0FDO1FBQ0FDO0lBQ0o7SUFDQSxNQUFNdUIsc0JBQXNCLE1BQU1ILGdCQUFnQjtRQUM5Q3RCO1FBQ0FDO0lBQ0o7SUFFQSxNQUFNeUIsV0FBbUMsQ0FBQztJQUMxQyxLQUFLLE1BQU0sQ0FBQ0MsVUFBVUMsUUFBUSxJQUFJaEIsT0FBT2lCLE9BQU8sQ0FBQ0wsOEJBQStCO1FBQzVFRSxRQUFRLENBQUNDLFNBQVMsR0FBRyxNQUFNRyxpQkFBUSxDQUFDQyxNQUFNLENBQUNILFNBQVM7WUFBRUksUUFBUTtRQUFhO0lBQy9FO0lBRUEsS0FBSyxNQUFNLENBQUNMLFVBQVVDLFFBQVEsSUFBSWhCLE9BQU9pQixPQUFPLENBQUNKLHFCQUFzQjtRQUNuRUMsUUFBUSxDQUFDQyxTQUFTLEdBQUcsTUFBTUcsaUJBQVEsQ0FBQ0MsTUFBTSxDQUFDSCxTQUFTO1lBQUVJLFFBQVE7UUFBYTtJQUMvRTtJQUVBLE9BQU9OO0FBQ1gifQ==