"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    getGeneratedContents: function() {
        return getGeneratedContents;
    },
    getGeneratedContentsFileList: function() {
        return getGeneratedContentsFileList;
    }
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _promises = /*#__PURE__*/ _interop_require_default._(require("fs/promises"));
const _path = /*#__PURE__*/ _interop_require_default._(require("path"));
const _executorsutils = require("../../../executors-utils");
const _constants = require("./constants");
const _chartvanillasrcparser = /*#__PURE__*/ _interop_require_default._(require("./transformation-scripts/chart-vanilla-src-parser"));
const _fileUtils = require("./utils/fileUtils");
const _frameworkFilesGenerator = require("./utils/frameworkFilesGenerator");
const _getDarkModeSnippet = require("./utils/getDarkModeSnippet");
const _getOtherScriptFiles = require("./utils/getOtherScriptFiles");
const _getPackageJson = require("./utils/getPackageJson");
const _getStyleFiles = require("./utils/getStyleFiles");
const getGeneratedContentsFileList = async (params)=>{
    const { internalFramework, folderPath } = params;
    const entryFileName = (0, _fileUtils.getEntryFileName)(internalFramework);
    const sourceFileList = await _promises.default.readdir(folderPath);
    const scriptFiles = await (0, _getOtherScriptFiles.getOtherScriptFiles)({
        folderPath,
        sourceFileList,
        transformTsFileExt: (0, _fileUtils.getTransformTsFileExt)(internalFramework)
    });
    const styleFiles = await (0, _getStyleFiles.getStyleFiles)({
        folderPath,
        sourceFileList
    });
    // Angular is a special case where the `main.ts` entry file is a boilerplate file
    // and another file is generated from the source file `main.ts`.
    // Both the boilerplate entry file and the generated file need to
    // be added to the generated file list
    const angularFiles = internalFramework === 'angular' ? [
        _constants.ANGULAR_GENERATED_MAIN_FILE_NAME
    ] : [];
    const generatedFileList = [
        'index.html',
        entryFileName
    ].concat(angularFiles).concat(Object.keys(scriptFiles)).concat(Object.keys(styleFiles));
    return generatedFileList;
};
const getGeneratedContents = async (params)=>{
    const { internalFramework, folderPath, ignoreDarkMode, isDev = false } = params;
    const sourceFileList = await _promises.default.readdir(folderPath);
    if (!sourceFileList.includes(_constants.SOURCE_ENTRY_FILE_NAME)) {
        throw new Error('Unable to find example entry-point at: ' + folderPath);
    }
    const entryFile = await (0, _executorsutils.readFile)(_path.default.join(folderPath, _constants.SOURCE_ENTRY_FILE_NAME));
    const indexHtml = await (0, _executorsutils.readFile)(_path.default.join(folderPath, 'index.html'));
    const otherScriptFiles = await (0, _getOtherScriptFiles.getOtherScriptFiles)({
        folderPath,
        sourceFileList,
        transformTsFileExt: (0, _fileUtils.getTransformTsFileExt)(internalFramework)
    });
    const providedExampleFileNames = (0, _fileUtils.getProvidedExampleFiles)({
        folderPath,
        internalFramework
    });
    const providedExampleBasePath = (0, _fileUtils.getProvidedExampleFolder)({
        folderPath,
        internalFramework
    });
    const mainEntryFilename = (0, _fileUtils.getEntryFileName)(internalFramework);
    const providedExampleEntries = await Promise.all(providedExampleFileNames.map(async (fileName)=>{
        let contents = (await _promises.default.readFile(_path.default.join(providedExampleBasePath, fileName))).toString('utf-8');
        if (fileName === mainEntryFilename && !ignoreDarkMode) {
            contents = contents + '\n' + (0, _getDarkModeSnippet.getDarkModeSnippet)();
        }
        return [
            fileName,
            contents
        ];
    }));
    const providedExamples = Object.fromEntries(providedExampleEntries);
    const styleFiles = await (0, _getStyleFiles.getStyleFiles)({
        folderPath,
        sourceFileList
    });
    const isEnterprise = (0, _fileUtils.getIsEnterprise)({
        entryFile
    });
    const { bindings, typedBindings } = (0, _chartvanillasrcparser.default)({
        srcFile: entryFile,
        html: indexHtml,
        exampleSettings: {
            enterprise: isEnterprise
        }
    });
    const getFrameworkFiles = _frameworkFilesGenerator.frameworkFilesGenerator[internalFramework];
    if (!getFrameworkFiles) {
        throw new Error(`No entry file config generator for '${internalFramework}'`);
    }
    const packageJson = (0, _getPackageJson.getPackageJson)({
        isEnterprise,
        internalFramework
    });
    const { files, boilerPlateFiles, scriptFiles, entryFileName, mainFileName } = await getFrameworkFiles({
        entryFile,
        indexHtml,
        isEnterprise,
        bindings,
        typedBindings,
        otherScriptFiles,
        ignoreDarkMode,
        isDev
    });
    const result = {
        isEnterprise,
        scriptFiles: scriptFiles,
        styleFiles: Object.keys(styleFiles),
        sourceFileList,
        // Replace files with provided examples
        files: Object.assign(styleFiles, files, providedExamples),
        // Files without provided examples
        generatedFiles: files,
        boilerPlateFiles: boilerPlateFiles,
        providedExamples,
        entryFileName,
        mainFileName,
        packageJson
    };
    return result;
};

//# sourceMappingURL=data:application/json;base64,