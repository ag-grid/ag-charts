export class AgChartsBase {
    chart;
    _nativeElement;
    _initialised = false;
    ngZone;
    ngAfterViewInit() {
        const options = this.patchChartOptions(this.options);
        this.chart = this.runOutsideAngular(() => this.createChart(options));
        this._initialised = true;
        this.chart.chart.waitForUpdate().then(() => {
            this.onChartReady.emit(this.chart);
        });
    }
    // noinspection JSUnusedGlobalSymbols,JSUnusedLocalSymbols
    ngOnChanges(_changes) {
        this.runOutsideAngular(() => {
            if (!this._initialised || !this.chart) {
                return;
            }
            this.chart.update(this.patchChartOptions(this.options));
        });
    }
    ngOnDestroy() {
        if (this._initialised && this.chart) {
            this.chart.destroy();
            this.chart = undefined;
            this._initialised = false;
        }
    }
    patchChartOptions(propsOptions) {
        const patchListeners = (listenerConfig) => {
            const config = listenerConfig ?? {};
            for (const [listenerName, listener] of Object.entries(config)) {
                if (typeof listener !== 'function')
                    continue;
                config[listenerName] = (...args) => {
                    this.runInsideAngular(() => listener(...args));
                };
            }
        };
        patchListeners(propsOptions?.legend?.listeners);
        patchListeners(propsOptions?.listeners);
        propsOptions.series?.forEach((series) => {
            patchListeners(series.listeners);
        });
        if (propsOptions.container) {
            return propsOptions;
        }
        return { ...propsOptions, container: this._nativeElement };
    }
    runOutsideAngular(callback) {
        return this.ngZone ? this.ngZone.runOutsideAngular(callback) : callback();
    }
    runInsideAngular(callback) {
        return this.ngZone ? this.ngZone.run(callback) : callback();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWctY2hhcnRzLWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9hZy1jaGFydHMtYW5ndWxhci9zcmMvbGliL2FnLWNoYXJ0cy1iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sT0FBZ0IsWUFBWTtJQUN2QixLQUFLLENBQW1CO0lBSXJCLGNBQWMsQ0FBTTtJQUNwQixZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQ3JCLE1BQU0sQ0FBVTtJQUkxQixlQUFlO1FBQ1gsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUVyRCxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDckUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7UUFFeEIsSUFBSSxDQUFDLEtBQWEsQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsMERBQTBEO0lBQzFELFdBQVcsQ0FBQyxRQUFhO1FBQ3JCLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDeEIsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUNuQyxPQUFPO2FBQ1Y7WUFDRCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sV0FBVztRQUNkLElBQUksSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUM7WUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7U0FDN0I7SUFDTCxDQUFDO0lBRU8saUJBQWlCLENBQUMsWUFBaUI7UUFDdkMsTUFBTSxjQUFjLEdBQUcsQ0FDbkIsY0FBdUcsRUFDekcsRUFBRTtZQUNBLE1BQU0sTUFBTSxHQUFHLGNBQWMsSUFBSyxFQUFVLENBQUM7WUFDN0MsS0FBSyxNQUFNLENBQUMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzNELElBQUksT0FBTyxRQUFRLEtBQUssVUFBVTtvQkFBRSxTQUFTO2dCQUU3QyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQVMsRUFBRSxFQUFFO29CQUNwQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbkQsQ0FBQyxDQUFDO2FBQ0w7UUFDTCxDQUFDLENBQUM7UUFFRixjQUFjLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNoRCxjQUFjLENBQUMsWUFBWSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3hDLFlBQVksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsTUFBVyxFQUFFLEVBQUU7WUFDekMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRTtZQUN4QixPQUFPLFlBQVksQ0FBQztTQUN2QjtRQUVELE9BQU8sRUFBRSxHQUFHLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQy9ELENBQUM7SUFFTyxpQkFBaUIsQ0FBSSxRQUFpQjtRQUMxQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzlFLENBQUM7SUFFTyxnQkFBZ0IsQ0FBSSxRQUFpQjtRQUN6QyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRSxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBOZ1pvbmUsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQWdCYXNlQ2hhcnRMaXN0ZW5lcnMsIEFnQ2hhcnRJbnN0YW5jZSwgQWdDaGFydExlZ2VuZExpc3RlbmVycywgQWdTZXJpZXNMaXN0ZW5lcnMgfSBmcm9tICdhZy1jaGFydHMtY29tbXVuaXR5JztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFnQ2hhcnRzQmFzZTxPcHRpb25zIGV4dGVuZHMge30+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xuICAgIHB1YmxpYyBjaGFydD86IEFnQ2hhcnRJbnN0YW5jZTtcbiAgICBwdWJsaWMgYWJzdHJhY3Qgb3B0aW9uczogT3B0aW9ucztcbiAgICBwdWJsaWMgYWJzdHJhY3Qgb25DaGFydFJlYWR5OiBFdmVudEVtaXR0ZXI8QWdDaGFydEluc3RhbmNlPjtcblxuICAgIHByb3RlY3RlZCBfbmF0aXZlRWxlbWVudDogYW55O1xuICAgIHByb3RlY3RlZCBfaW5pdGlhbGlzZWQgPSBmYWxzZTtcbiAgICBwcm90ZWN0ZWQgbmdab25lITogTmdab25lO1xuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IGNyZWF0ZUNoYXJ0KG9wdGlvbnM6IE9wdGlvbnMpOiBhbnk7XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnBhdGNoQ2hhcnRPcHRpb25zKHRoaXMub3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5jaGFydCA9IHRoaXMucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5jcmVhdGVDaGFydChvcHRpb25zKSk7XG4gICAgICAgIHRoaXMuX2luaXRpYWxpc2VkID0gdHJ1ZTtcblxuICAgICAgICAodGhpcy5jaGFydCBhcyBhbnkpLmNoYXJ0LndhaXRGb3JVcGRhdGUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25DaGFydFJlYWR5LmVtaXQodGhpcy5jaGFydCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIG5vaW5zcGVjdGlvbiBKU1VudXNlZEdsb2JhbFN5bWJvbHMsSlNVbnVzZWRMb2NhbFN5bWJvbHNcbiAgICBuZ09uQ2hhbmdlcyhfY2hhbmdlczogYW55KTogdm9pZCB7XG4gICAgICAgIHRoaXMucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9pbml0aWFsaXNlZCB8fCAhdGhpcy5jaGFydCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY2hhcnQudXBkYXRlKHRoaXMucGF0Y2hDaGFydE9wdGlvbnModGhpcy5vcHRpb25zKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuX2luaXRpYWxpc2VkICYmIHRoaXMuY2hhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuY2hhcnQuZGVzdHJveSgpO1xuICAgICAgICAgICAgdGhpcy5jaGFydCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpc2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHBhdGNoQ2hhcnRPcHRpb25zKHByb3BzT3B0aW9uczogYW55KTogYW55IHtcbiAgICAgICAgY29uc3QgcGF0Y2hMaXN0ZW5lcnMgPSAoXG4gICAgICAgICAgICBsaXN0ZW5lckNvbmZpZzogdW5kZWZpbmVkIHwgQWdDaGFydExlZ2VuZExpc3RlbmVycyB8IEFnU2VyaWVzTGlzdGVuZXJzPGFueT4gfCBBZ0Jhc2VDaGFydExpc3RlbmVyczxhbnk+XG4gICAgICAgICkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY29uZmlnID0gbGlzdGVuZXJDb25maWcgPz8gKHt9IGFzIGFueSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtsaXN0ZW5lck5hbWUsIGxpc3RlbmVyXSBvZiBPYmplY3QuZW50cmllcyhjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJykgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBjb25maWdbbGlzdGVuZXJOYW1lXSA9ICguLi5hcmdzOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5JbnNpZGVBbmd1bGFyKCgpID0+IGxpc3RlbmVyKC4uLmFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHBhdGNoTGlzdGVuZXJzKHByb3BzT3B0aW9ucz8ubGVnZW5kPy5saXN0ZW5lcnMpO1xuICAgICAgICBwYXRjaExpc3RlbmVycyhwcm9wc09wdGlvbnM/Lmxpc3RlbmVycyk7XG4gICAgICAgIHByb3BzT3B0aW9ucy5zZXJpZXM/LmZvckVhY2goKHNlcmllczogYW55KSA9PiB7XG4gICAgICAgICAgICBwYXRjaExpc3RlbmVycyhzZXJpZXMubGlzdGVuZXJzKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHByb3BzT3B0aW9ucy5jb250YWluZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wc09wdGlvbnM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyAuLi5wcm9wc09wdGlvbnMsIGNvbnRhaW5lcjogdGhpcy5fbmF0aXZlRWxlbWVudCB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgcnVuT3V0c2lkZUFuZ3VsYXI8VD4oY2FsbGJhY2s6ICgpID0+IFQpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmdab25lID8gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoY2FsbGJhY2spIDogY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJ1bkluc2lkZUFuZ3VsYXI8VD4oY2FsbGJhY2s6ICgpID0+IFQpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubmdab25lID8gdGhpcy5uZ1pvbmUucnVuKGNhbGxiYWNrKSA6IGNhbGxiYWNrKCk7XG4gICAgfVxufVxuIl19