import type { ModuleContext } from '../module/moduleContext';
import type { ChartOptions } from '../module/optionsModule';
import type { AgChartInstance, AgChartOptions } from '../options/chart/chartBuilderOptions';
import { BBox } from '../scene/bbox';
import { Group } from '../scene/group';
import { Scene } from '../scene/scene';
import type { PlacedLabel } from '../scene/util/labelPlacement';
import { CallbackCache } from '../util/callbackCache';
import { Observable } from '../util/observable';
import { Padding } from '../util/padding';
import { BaseProperties } from '../util/properties';
import { Caption } from './caption';
import type { ChartAnimationPhase } from './chartAnimationPhase';
import type { ChartAxis } from './chartAxis';
import { ChartHighlight } from './chartHighlight';
import type { ChartMode } from './chartMode';
import { ChartUpdateType } from './chartUpdateType';
import { DataService } from './data/dataService';
import { AnimationManager } from './interaction/animationManager';
import { ChartEventManager } from './interaction/chartEventManager';
import { ContextMenuRegistry } from './interaction/contextMenuRegistry';
import { CursorManager } from './interaction/cursorManager';
import { GestureDetector } from './interaction/gestureDetector';
import type { HighlightChangeEvent } from './interaction/highlightManager';
import { HighlightManager } from './interaction/highlightManager';
import type { InteractionEvent, PointerOffsets } from './interaction/interactionManager';
import { InteractionManager } from './interaction/interactionManager';
import { RegionManager } from './interaction/regionManager';
import { SyncManager } from './interaction/syncManager';
import { ToolbarManager } from './interaction/toolbarManager';
import { TooltipManager } from './interaction/tooltipManager';
import { ZoomManager } from './interaction/zoomManager';
import { LayoutService } from './layout/layoutService';
import { type SeriesOptionsTypes } from './mapping/types';
import { ModulesManager } from './modulesManager';
import { ChartOverlays } from './overlay/chartOverlays';
import { type Series } from './series/series';
import { SeriesLayerManager } from './series/seriesLayerManager';
import { SeriesStateManager } from './series/seriesStateManager';
import { Tooltip } from './tooltip/tooltip';
import { UpdateOpts, UpdateService } from './updateService';
export type TransferableResources = {
    container?: HTMLElement;
    scene: Scene;
    element: HTMLElement;
};
export interface ChartSpecialOverrides {
    document?: Document;
    window?: Window;
    overrideDevicePixelRatio?: number;
    sceneMode?: 'simple';
}
export type ChartExtendedOptions = AgChartOptions & ChartSpecialOverrides;
type PointerEvent = PointerOffsets & Pick<Partial<InteractionEvent>, 'pointerHistory'>;
declare class SeriesArea extends BaseProperties {
    clip?: boolean;
    padding: Padding;
}
export declare abstract class Chart extends Observable implements AgChartInstance {
    private static readonly chartsInstances;
    static getInstance(element: HTMLElement): Chart | undefined;
    readonly id: string;
    className?: string;
    readonly scene: Scene;
    readonly seriesRoot: Group;
    readonly tooltip: Tooltip;
    readonly overlays: ChartOverlays;
    readonly highlight: ChartHighlight;
    private readonly debug;
    private extraDebugStats;
    container?: HTMLElement;
    data: any;
    width?: number;
    height?: number;
    autoSize: boolean;
    private _lastAutoSize?;
    private _firstAutoSize;
    private onAutoSizeChange;
    download(fileName?: string, fileFormat?: string): void;
    readonly padding: Padding;
    readonly seriesArea: SeriesArea;
    readonly title: Caption;
    readonly subtitle: Caption;
    readonly footnote: Caption;
    mode: ChartMode;
    destroyed: boolean;
    private _skipSync;
    private readonly _destroyFns;
    chartAnimationPhase: ChartAnimationPhase;
    readonly highlightManager: HighlightManager;
    readonly modulesManager: ModulesManager;
    readonly syncManager: SyncManager;
    readonly tooltipManager: TooltipManager;
    readonly zoomManager: ZoomManager;
    protected readonly animationManager: AnimationManager;
    protected readonly chartEventManager: ChartEventManager;
    protected readonly contextMenuRegistry: ContextMenuRegistry;
    protected readonly cursorManager: CursorManager;
    protected readonly interactionManager: InteractionManager;
    protected readonly regionManager: RegionManager;
    protected readonly toolbarManager: ToolbarManager;
    protected readonly gestureDetector: GestureDetector;
    protected readonly dataService: DataService<any>;
    protected readonly layoutService: LayoutService;
    protected readonly updateService: UpdateService;
    protected readonly axisGridGroup: Group;
    protected readonly axisGroup: Group;
    protected readonly callbackCache: CallbackCache;
    protected readonly seriesStateManager: SeriesStateManager;
    protected readonly seriesLayerManager: SeriesLayerManager;
    private readonly sizeMonitor;
    private readonly processors;
    processedOptions: AgChartOptions & {
        type?: SeriesOptionsTypes['type'];
    };
    userOptions: AgChartOptions;
    queuedUserOptions: AgChartOptions[];
    chartOptions: ChartOptions;
    getOptions(): AgChartOptions;
    protected constructor(options: ChartOptions, resources?: TransferableResources);
    getModuleContext(): ModuleContext;
    resetAnimations(): void;
    skipAnimations(): void;
    destroy(opts?: {
        keepTransferableResources: boolean;
    }): TransferableResources | undefined;
    resetPointer(highlightOnly?: boolean): void;
    requestFactoryUpdate(cb: (chart: Chart) => Promise<void> | void): void;
    private _pendingFactoryUpdatesCount;
    private _performUpdateNoRenderCount;
    private _performUpdateSkipAnimations;
    private performUpdateType;
    private updateShortcutCount;
    private seriesToUpdate;
    private updateMutex;
    private updateRequestors;
    private performUpdateTrigger;
    update(type?: ChartUpdateType, opts?: UpdateOpts): void;
    private performUpdate;
    private checkUpdateShortcut;
    private checkFirstAutoSize;
    readonly element: HTMLElement;
    axes: ChartAxis[];
    series: Series<any, any>[];
    private onSeriesChange;
    protected destroySeries(allSeries: Series<any, any>[]): void;
    private addSeriesListeners;
    updateAllSeriesListeners(): void;
    protected assignSeriesToAxes(): void;
    protected assignAxesToSeries(): void;
    private rawResize;
    private resize;
    updateData(): Promise<void>;
    processData(): Promise<void>;
    placeLabels(): Map<Series<any, any>, PlacedLabel[]>;
    private getLegendData;
    private processLayout;
    protected performLayout(): Promise<BBox>;
    protected hoverRect?: BBox;
    protected seriesRect?: BBox;
    protected animationRect?: BBox;
    private pickSeriesNode;
    private lastPick?;
    protected onMouseMove(event: InteractionEvent<'hover'>): void;
    protected onLeave(event: InteractionEvent<'leave'>): void;
    private onContextMenu;
    private lastInteractionEvent?;
    private pointerScheduler;
    protected handlePointer(event: PointerOffsets, redisplay: boolean): void;
    protected handlePointerTooltip(event: PointerOffsets, disablePointer: (highlightOnly?: boolean) => void): void;
    protected handlePointerNode(event: PointerEvent): void;
    protected onClick(event: InteractionEvent<'click'>): void;
    protected onDoubleClick(event: InteractionEvent<'dblclick'>): void;
    private checkSeriesNodeClick;
    private checkSeriesNodeDoubleClick;
    private checkSeriesNodeRange;
    private onSeriesNodeClick;
    private onSeriesNodeDoubleClick;
    private seriesGroupingChanged;
    changeHighlightDatum(event: HighlightChangeEvent): void;
    waitForUpdate(timeoutMs?: number, failOnTimeout?: boolean): Promise<void>;
    private dataProcessListeners;
    waitForDataProcess(timeout?: number): Promise<void>;
    protected getMinRects(): {
        minRect: BBox;
        minVisibleRect: BBox;
    } | undefined;
    private filterMiniChartSeries;
    applyOptions(chartOptions: ChartOptions): void;
    private maybeResetAnimations;
    private shouldForceNodeDataRefresh;
    private applyMiniChartOptions;
    private applyModules;
    private applySeries;
    private applyAxes;
    private createSeries;
    private applySeriesOptionModules;
    private applySeriesValues;
    private createAxis;
    private applyAxisModules;
    private registerListeners;
}
export {};
