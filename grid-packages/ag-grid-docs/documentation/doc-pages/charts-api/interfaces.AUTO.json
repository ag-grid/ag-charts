{
  "Tags": {
    "meta": { "isEnum": true },
    "type": ["Tick", "GridLine"],
    "docs": [null, null]
  },
  "GridStyle": {
    "meta": {},
    "type": { "stroke?": "string", "lineDash?": "number[]" }
  },
  "AxisLabelFormatterParams": {
    "meta": {},
    "type": {
      "value": "any",
      "index": "number",
      "fractionDigits?": "number",
      "formatter?": "(x: any) => string",
      "axis?": "any"
    }
  },
  "Size": {
    "meta": { "isTypeAlias": true },
    "type": "{ width: number; height: number; }"
  },
  "FontStyle": {
    "meta": { "isTypeAlias": true },
    "type": "'normal' | 'italic' | 'oblique'"
  },
  "FontWeight": {
    "meta": { "isTypeAlias": true },
    "type": "'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'"
  },
  "FontFamily": { "meta": { "isTypeAlias": true }, "type": "string" },
  "FontSize": { "meta": { "isTypeAlias": true }, "type": "number" },
  "AgChartThemeName": {
    "meta": { "isTypeAlias": true },
    "type": "'ag-default' | 'ag-default-dark' | 'ag-material' | 'ag-material-dark' | 'ag-pastel' | 'ag-pastel-dark' | 'ag-solar' | 'ag-solar-dark' | 'ag-vivid' | 'ag-vivid-dark'"
  },
  "MarkerShape": {
    "meta": { "isTypeAlias": true },
    "type": "'circle' | 'cross' | 'diamond' | 'heart' | 'plus' | 'triangle' | any"
  },
  "CssColor": { "meta": { "isTypeAlias": true }, "type": "string" },
  "Opacity": { "meta": { "isTypeAlias": true }, "type": "number" },
  "PixelSize": { "meta": { "isTypeAlias": true }, "type": "number" },
  "AgChartThemePalette": {
    "meta": {},
    "type": { "fills": "string[]", "strokes": "string[]" },
    "docs": {
      "fills": "/** The array of fills to be used. */",
      "strokes": "/** The array of strokes to be used. */"
    }
  },
  "AgChartThemeOptions": {
    "meta": {},
    "type": {
      "palette?": "AgChartThemePalette",
      "overrides?": "AgChartThemeOverrides"
    },
    "docs": {
      "palette?": "/** The palette to use. If specified, this replaces the palette from the base theme. */",
      "overrides?": "/** Configuration from this object is merged over the defaults specified in the base theme. */"
    }
  },
  "AgChartTheme": {
    "meta": {
      "doc": "/** This object is used to define the configuration for a custom chart theme. */"
    },
    "type": {
      "baseTheme?": "AgChartThemeName",
      "palette?": "AgChartThemePalette",
      "overrides?": "AgChartThemeOverrides"
    },
    "docs": {
      "baseTheme?": "/** The name of the theme to base your theme on. Your custom theme will inherit all of the configuration from \n * the base theme, allowing you to override just the settings you wish to change using the `overrides` config (see \n * below). */",
      "palette?": "/** The palette to use. If specified, this replaces the palette from the base theme. */",
      "overrides?": "/** Configuration from this object is merged over the defaults specified in the base theme. */"
    }
  },
  "AgChartThemeOverrides": {
    "meta": {},
    "type": {
      "cartesian?": "AgCartesianThemeOptions<AgCartesianSeriesTheme>",
      "column?": "AgCartesianThemeOptions<AgBarSeriesOptions>",
      "bar?": "AgCartesianThemeOptions<AgBarSeriesOptions>",
      "line?": "AgCartesianThemeOptions<AgLineSeriesOptions>",
      "area?": "AgCartesianThemeOptions<AgAreaSeriesOptions>",
      "scatter?": "AgCartesianThemeOptions<AgScatterSeriesOptions>",
      "histogram?": "AgCartesianThemeOptions<AgHistogramSeriesOptions>",
      "polar?": "AgPolarThemeOptions<AgPolarSeriesTheme>",
      "pie?": "AgPolarThemeOptions<AgPieSeriesOptions>",
      "hierarchy?": "AgHierarchyThemeOptions<AgHierarchySeriesTheme>",
      "treemap?": "AgHierarchyThemeOptions<AgHierarchySeriesOptions>",
      "common?": "any"
    },
    "docs": {
      "cartesian?": "/** Specifies defaults for all cartesian charts (used for bar, column, histogram, line, scatter and area series) */",
      "column?": "/** Specifies defaults for column charts. */",
      "bar?": "/** Specifies defaults for bar charts. */",
      "line?": "/** Specifies defaults for line charts. */",
      "area?": "/** Specifies defaults for area charts. */",
      "scatter?": "/** Specifies defaults for scatter/bubble charts. */",
      "histogram?": "/** Specifies defaults for histogram charts. */",
      "polar?": "/** Specifies defaults for all polar charts (used for pie series) */",
      "pie?": "/** Specifies defaults for pie/doughnut charts. */",
      "hierarchy?": "/** Specifies defaults for all hierarchy charts (used for treemap series) */",
      "treemap?": "/** Specifies defaults for all treemap charts. */",
      "common?": "/** Specifies defaults for all chart types. Be careful to only use properties that apply to all chart types here. For example, don't specify `navigator` configuration here as navigators are only available in cartesian charts. */"
    }
  },
  "AgCartesianAxisThemeOptions": {
    "meta": {
      "typeParams": ["T"],
      "doc": "/** This is the configuration shared by all types of axis. */"
    },
    "type": {
      "top?": "Omit<T, 'position' | 'type'>",
      "right?": "Omit<T, 'position' | 'type'>",
      "bottom?": "Omit<T, 'position' | 'type'>",
      "left?": "Omit<T, 'position' | 'type'>"
    },
    "docs": {
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */"
    }
  },
  "AgCartesianThemeOptions": {
    "meta": { "typeParams": ["S"] },
    "type": {
      "axes?": "AgCartesianAxesTheme",
      "series?": "S",
      "navigator?": "AgNavigatorOptions",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "theme?": "string | AgChartTheme"
    },
    "docs": {
      "axes?": "/** Axis configurations. */",
      "series?": "/** Series configurations. */",
      "navigator?": "/** Configuration for the chart navigator. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */"
    }
  },
  "AgPolarThemeOptions": {
    "meta": { "typeParams": ["S"] },
    "type": {
      "series?": "S",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "theme?": "string | AgChartTheme"
    },
    "docs": {
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */"
    }
  },
  "AgHierarchyThemeOptions": {
    "meta": { "typeParams": ["S"] },
    "type": {
      "series?": "S",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "theme?": "string | AgChartTheme"
    },
    "docs": {
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */"
    }
  },
  "AgNumberAxisThemeOptions": {
    "meta": {},
    "type": {
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "top?": "Omit<AgNumberAxisOptions, 'position' | 'type'>",
      "right?": "Omit<AgNumberAxisOptions, 'position' | 'type'>",
      "bottom?": "Omit<AgNumberAxisOptions, 'position' | 'type'>",
      "left?": "Omit<AgNumberAxisOptions, 'position' | 'type'>",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgLogAxisThemeOptions": {
    "meta": {},
    "type": {
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "base?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "top?": "Omit<AgLogAxisOptions, 'position' | 'type'>",
      "right?": "Omit<AgLogAxisOptions, 'position' | 'type'>",
      "bottom?": "Omit<AgLogAxisOptions, 'position' | 'type'>",
      "left?": "Omit<AgLogAxisOptions, 'position' | 'type'>",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "base?": "/** The base of the logarithm used. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCategoryAxisThemeOptions": {
    "meta": {},
    "type": {
      "paddingInner?": "number",
      "paddingOuter?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "top?": "Omit<AgCategoryAxisOptions, 'position' | 'type'>",
      "right?": "Omit<AgCategoryAxisOptions, 'position' | 'type'>",
      "bottom?": "Omit<AgCategoryAxisOptions, 'position' | 'type'>",
      "left?": "Omit<AgCategoryAxisOptions, 'position' | 'type'>",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgGroupedCategoryAxisThemeOptions": {
    "meta": {},
    "type": {
      "tick?": "AgAxisNumberTickOptions",
      "top?": "Omit<AgGroupedCategoryAxisOptions, 'position' | 'type'>",
      "right?": "Omit<AgGroupedCategoryAxisOptions, 'position' | 'type'>",
      "bottom?": "Omit<AgGroupedCategoryAxisOptions, 'position' | 'type'>",
      "left?": "Omit<AgGroupedCategoryAxisOptions, 'position' | 'type'>",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgTimeAxisThemeOptions": {
    "meta": {},
    "type": {
      "nice?": "boolean",
      "tick?": "AgAxisTimeTickOptions",
      "top?": "Omit<AgTimeAxisOptions, 'position' | 'type'>",
      "right?": "Omit<AgTimeAxisOptions, 'position' | 'type'>",
      "bottom?": "Omit<AgTimeAxisOptions, 'position' | 'type'>",
      "left?": "Omit<AgTimeAxisOptions, 'position' | 'type'>",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCartesianAxesTheme": {
    "meta": {},
    "type": {
      "number?": "AgNumberAxisThemeOptions",
      "log?": "AgLogAxisThemeOptions",
      "category?": "AgCategoryAxisThemeOptions",
      "groupedCategory?": "AgGroupedCategoryAxisThemeOptions",
      "time?": "AgTimeAxisThemeOptions"
    },
    "docs": {
      "number?": "/** This extends the common axis configuration with options specific to number axes. */",
      "log?": "/** This extends the common axis configuration with options specific to number axes. */",
      "category?": "/** This extends the common axis configuration with options specific to category axes. */",
      "groupedCategory?": "/** This extends the common axis configuration with options specific to grouped category axes. Currently there are no additional options beyond the common configuration. */",
      "time?": "/** This extends the common axis configuration with options specific to time axes. */"
    }
  },
  "AgCartesianSeriesTheme": {
    "meta": {},
    "type": {
      "line?": "AgLineSeriesOptions",
      "scatter?": "AgScatterSeriesOptions",
      "area?": "AgAreaSeriesOptions",
      "bar?": "AgBarSeriesOptions",
      "column?": "AgBarSeriesOptions",
      "histogram?": "AgHistogramSeriesOptions"
    }
  },
  "AgPolarSeriesTheme": {
    "meta": {},
    "type": { "pie?": "AgPieSeriesOptions" }
  },
  "AgHierarchySeriesTheme": {
    "meta": {},
    "type": { "treemap?": "AgTreemapSeriesOptions" }
  },
  "AgChartPaddingOptions": {
    "meta": {},
    "type": {
      "top?": "PixelSize",
      "right?": "PixelSize",
      "bottom?": "PixelSize",
      "left?": "PixelSize"
    },
    "docs": {
      "top?": "/** The number of pixels of padding at the top of the chart area. */",
      "right?": "/** The number of pixels of padding at the right of the chart area. */",
      "bottom?": "/** The number of pixels of padding at the bottom of the chart area. */",
      "left?": "/** The number of pixels of padding at the left of the chart area. */"
    }
  },
  "AgChartLabelOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgDropShadowOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "color?": "CssColor",
      "xOffset?": "PixelSize",
      "yOffset?": "PixelSize",
      "blur?": "PixelSize"
    },
    "docs": {
      "enabled?": "/** Whether or not the shadow is visible. */",
      "color?": "/** The colour of the shadow. */",
      "xOffset?": "/** The horizontal offset in pixels for the shadow. */",
      "yOffset?": "/** The vertical offset in pixels for the shadow. */",
      "blur?": "/** The radius of the shadow's blur, given in pixels. */"
    }
  },
  "AgChartCaptionOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "text?": "string",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "enabled?": "/** Whether or not the title should be shown. */",
      "text?": "/** The text to show in the title. */",
      "fontStyle?": "/** The font style to use for the title. */",
      "fontWeight?": "/** The font weight to use for the title. */",
      "fontSize?": "/** The font size in pixels to use for the title. */",
      "fontFamily?": "/** The font family to use for the title. */",
      "color?": "/** The colour to use for the title. */"
    }
  },
  "AgNavigatorMaskOptions": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity"
    },
    "docs": {
      "fill?": "/** The fill colour used by the mask. */",
      "stroke?": "/** The stroke colour used by the mask. */",
      "strokeWidth?": "/** The stroke width used by the mask. */",
      "fillOpacity?": "/** The opacity of the mask's fill in the `[0, 1]` interval, where `0` is effectively no masking. */"
    }
  },
  "AgNavigatorHandleOptions": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "gripLineGap?": "PixelSize",
      "gripLineLength?": "PixelSize"
    },
    "docs": {
      "fill?": "/** The fill colour used by the handle. */",
      "stroke?": "/** The stroke colour used by the handle. */",
      "strokeWidth?": "/** The stroke width used by the handle. */",
      "width?": "/** The width of the handle. */",
      "height?": "/** The height of the handle. */",
      "gripLineGap?": "/** The distance between the handle's grip lines. */",
      "gripLineLength?": "/** The length of the handle's grip lines. */"
    }
  },
  "AgNavigatorOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "height?": "PixelSize",
      "margin?": "PixelSize",
      "min?": "number",
      "max?": "number",
      "mask?": "AgNavigatorMaskOptions",
      "minHandle?": "AgNavigatorHandleOptions",
      "maxHandle?": "AgNavigatorHandleOptions"
    },
    "docs": {
      "enabled?": "/** Whether or not to show the navigator. */",
      "height?": "/** The height of the navigator. */",
      "margin?": "/** The distance between the navigator and the bottom axis. */",
      "min?": "/** The start of the visible range in the `[0, 1]` interval. */",
      "max?": "/** The end of the visible range in the `[0, 1]` interval. */",
      "mask?": "/** Configuration for the navigator's visible range mask. */",
      "minHandle?": "/** Configuration for the navigator's left handle. */",
      "maxHandle?": "/** Configuration for the navigator's right handle. */"
    }
  },
  "AgChartLegendPosition": {
    "meta": { "isTypeAlias": true },
    "type": "'top' | 'right' | 'bottom' | 'left'"
  },
  "AgChartLegendMarkerOptions": {
    "meta": {},
    "type": {
      "size?": "PixelSize",
      "shape?": "MarkerShape",
      "padding?": "PixelSize",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "size?": "/** The size in pixels of the markers in the legend. */",
      "shape?": "/** If set, overrides the marker shape from the series and the legend will show the specified marker shape instead. If not set, will use a marker shape matching the shape from the series, or fall back to `'square'` if there is none. */",
      "padding?": "/** The padding in pixels between a legend marker and the corresponding label. */",
      "strokeWidth?": "/** The width in pixels of the stroke for markers in the legend. */"
    }
  },
  "AgChartLegendLabelOptions": {
    "meta": {},
    "type": {
      "color?": "CssColor",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "formatter?": "(id: string, itemId: any, value: string) => string"
    },
    "docs": {
      "color?": "/** The colour of the text. */",
      "fontStyle?": "/** The font style to use for the legend. */",
      "fontWeight?": "/** The font weight to use for the legend. */",
      "fontSize?": "/** The font size in pixels to use for the legend. */",
      "fontFamily?": "/** The font family to use for the legend. */",
      "formatter?": "/** Function used to render legend labels. Where `id` is a series ID, `itemId` is component ID within a series, such as a field name or an item index. */"
    }
  },
  "AgChartLegendItemOptions": {
    "meta": {},
    "type": {
      "marker?": "AgChartLegendMarkerOptions",
      "label?": "AgChartLegendLabelOptions",
      "paddingX?": "PixelSize",
      "paddingY?": "PixelSize"
    },
    "docs": {
      "marker?": "/** Configuration for the legend markers. */",
      "label?": "/** Configuration for the legend labels. */",
      "paddingX?": "/** The horizontal spacing in pixels to use between legend items. */",
      "paddingY?": "/** The vertical spacing in pixels to use between legend items. */"
    }
  },
  "AgChartLegendOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "position?": "AgChartLegendPosition",
      "spacing?": "PixelSize",
      "item?": "AgChartLegendItemOptions"
    },
    "docs": {
      "enabled?": "/** Whether or not to show the legend. */",
      "position?": "/** Where the legend should show in relation to the chart. */",
      "spacing?": "/** The spacing in pixels to use outside the legend. */",
      "item?": "/** Configuration for the legend items that consist of a marker and a label. */"
    }
  },
  "AgChartTooltipOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "class?": "string",
      "tracking?": "boolean",
      "delay?": "number"
    },
    "docs": {
      "enabled?": "/** Set to false to disable tooltips for all series in the chart. */",
      "class?": "/** A class name to be added to the tooltip element of the chart. */",
      "tracking?": "/** If true, for series with markers the tooltip will be shown to the closest marker. */",
      "delay?": "/** The time interval (in milliseconds) after which the tooltip is shown. */"
    }
  },
  "AgChartBackground": {
    "meta": {},
    "type": { "visible?": "boolean", "fill?": "CssColor" },
    "docs": {
      "visible?": "/** Whether or not the background should be visible. */",
      "fill?": "/** Colour of the chart background. */"
    }
  },
  "AgBaseChartListeners": {
    "meta": {},
    "type": {
      "seriesNodeClick": "(type: 'seriesNodeClick', series: any, datum: any, xKey: string, yKey: string) => any",
      "[key: string]": "Function"
    },
    "docs": {
      "seriesNodeClick": "/** The listener to call when a node (marker, column, bar, tile or a pie slice) in any series is clicked. In case a chart has multiple series, the chart's `seriesNodeClick` event can be used to listen to `nodeClick` events of all the series at once. */",
      "[key: string]": "/** Generic listeners. */"
    }
  },
  "AgBaseChartOptions": {
    "meta": { "doc": "/** Configuration common to all charts. */" },
    "type": {
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "theme?": "string | AgChartTheme"
    },
    "docs": {
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */"
    }
  },
  "AgBaseAxisOptions": {
    "meta": {},
    "type": { "keys?": "string[]", "thickness?": "PixelSize" },
    "docs": {
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCartesianAxisPosition": {
    "meta": { "isTypeAlias": true },
    "type": "'top' | 'right' | 'bottom' | 'left'"
  },
  "AgAxisLineOptions": {
    "meta": {},
    "type": { "width?": "PixelSize", "color?": "CssColor" },
    "docs": {
      "width?": "/** The width in pixels of the axis line. */",
      "color?": "/** The colour of the axis line. */"
    }
  },
  "AgAxisBaseTickOptions": {
    "meta": {},
    "type": {
      "width?": "PixelSize",
      "size?": "PixelSize",
      "color?": "CssColor"
    },
    "docs": {
      "width?": "/** The width in pixels of the axis ticks (and corresponding grid line). */",
      "size?": "/** The length in pixels of the axis ticks. */",
      "color?": "/** The colour of the axis ticks. */"
    }
  },
  "AgAxisNumberTickOptions": {
    "meta": {},
    "type": {
      "count?": "number",
      "width?": "PixelSize",
      "size?": "PixelSize",
      "color?": "CssColor"
    },
    "docs": {
      "count?": "/** A hint of how many ticks to use across an axis. The axis is not guaranteed to use exactly this number of ticks, but will try to use a number of ticks that is close to the number given. */",
      "width?": "/** The width in pixels of the axis ticks (and corresponding grid line). */",
      "size?": "/** The length in pixels of the axis ticks. */",
      "color?": "/** The colour of the axis ticks. */"
    }
  },
  "AgAxisTimeTickOptions": {
    "meta": {},
    "type": {
      "count?": "any",
      "width?": "PixelSize",
      "size?": "PixelSize",
      "color?": "CssColor"
    },
    "docs": {
      "count?": "/** A hint of how many ticks to use across an axis. The axis is not guaranteed to use exactly this number of ticks, but will try to use a number of ticks that is close to the number given.<br/><br/>The following intervals from the `agCharts.time` namespace can be used: `millisecond, second, minute, hour, day, sunday, monday, tuesday, wednesday, thursday, friday, saturday, month, year, utcMinute, utcHour, utcDay, utcMonth, utcYear`. And derived intervals can be created by using the `every` method on the default ones. For example, `agCharts.time.month.every(2)` will return a derived interval that will make the axis place ticks for every other month.<br/><br/> */",
      "width?": "/** The width in pixels of the axis ticks (and corresponding grid line). */",
      "size?": "/** The length in pixels of the axis ticks. */",
      "color?": "/** The colour of the axis ticks. */"
    }
  },
  "AgAxisLabelFormatterParams": {
    "meta": {},
    "type": {
      "value": "any",
      "index": "number",
      "fractionDigits?": "number",
      "formatter?": "(x: any) => string"
    }
  },
  "AgAxisLabelOptions": {
    "meta": {},
    "type": {
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "padding?": "PixelSize",
      "color?": "CssColor",
      "rotation?": "number",
      "format?": "string",
      "formatter?": "(params: AgAxisLabelFormatterParams) => string"
    },
    "docs": {
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels */",
      "padding?": "/** Padding in pixels between the axis label and the tick. */",
      "color?": "/** The colour to use for the labels */",
      "rotation?": "/** The rotation of the axis labels in degrees. Note: for integrated charts the default is 335 degrees, unless the axis shows grouped or default categories (indexes). The first row of labels in a grouped category axis is rotated perpendicular to the axis line. */",
      "format?": "/** Format string used when rendering labels for time axes. */",
      "formatter?": "/** Function used to render axis labels. If `value` is a number, `fractionDigits` will also be provided, which indicates the number of fractional digits used in the step between ticks; for example, a tick step of `0.0005` would have `fractionDigits` set to `4` */"
    }
  },
  "AgAxisGridStyle": {
    "meta": {},
    "type": { "stroke?": "CssColor", "lineDash?": "PixelSize[]" },
    "docs": {
      "stroke?": "/** The colour of the grid line. */",
      "lineDash?": "/** Defines how the gridlines are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */"
    }
  },
  "AgCartesianAxisType": {
    "meta": { "isTypeAlias": true },
    "type": "'category' | 'groupedCategory' | 'number' | 'log' | 'time'"
  },
  "AgBaseCartesianAxisOptions": {
    "meta": { "doc": "/** Configuration for axes in cartesian charts. */" },
    "type": {
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgNumberAxisOptions": {
    "meta": {},
    "type": {
      "type": "'number'",
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgLogAxisOptions": {
    "meta": {},
    "type": {
      "type": "'log'",
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "base?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "base?": "/** The base of the logarithm used. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCategoryAxisOptions": {
    "meta": {},
    "type": {
      "type": "'category'",
      "paddingInner?": "number",
      "paddingOuter?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgGroupedCategoryAxisOptions": {
    "meta": {},
    "type": {
      "type": "'groupedCategory'",
      "tick?": "AgAxisNumberTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgTimeAxisOptions": {
    "meta": {},
    "type": {
      "type": "'time'",
      "nice?": "boolean",
      "tick?": "AgAxisTimeTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgChartCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCartesianAxisOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgNumberAxisOptions | AgLogAxisOptions | AgCategoryAxisOptions | AgGroupedCategoryAxisOptions | AgTimeAxisOptions"
  },
  "AgSeriesHighlightMarkerStyle": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "fill?": "/** The fill colour of a marker when tapped or hovered over. Use `undefined` for no highlight. */",
      "stroke?": "/** The stroke colour of a marker when tapped or hovered over. Use `undefined` for no highlight. */",
      "strokeWidth?": "/** The stroke width of a marker when tapped or hovered over. Use `undefined` for no highlight. */"
    }
  },
  "AgSeriesHighlightSeriesStyle": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "dimOpacity?": "Opacity",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "dimOpacity?": "/** The opacity of the whole series (area line, area fill, labels and markers, if any) when another chart series or another stack level in the same area series is highlighted by hovering a data point or a legend item. Use `undefined` or `1` for no dimming. */",
      "strokeWidth?": "/** The stroke width of the area line when one of the markers is tapped or hovered over, or when a tooltip is shown for a data point, even when series markers are disabled. Use `undefined` for no highlight. */"
    }
  },
  "AgSeriesHighlightStyle": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "item?": "AgSeriesHighlightMarkerStyle",
      "series?": "AgSeriesHighlightSeriesStyle"
    },
    "docs": {
      "fill?": "/** The fill colour of a marker when tapped or hovered over. Use `undefined` for no highlight.\n * @deprecated Use item.fill instead.\n */",
      "stroke?": "/** The stroke colour of a marker when tapped or hovered over. Use `undefined` for no highlight.\n * @deprecated Use item.stroke instead.\n */",
      "strokeWidth?": "/** The stroke width of a marker when tapped or hovered over. Use `undefined` for no highlight.\n * @deprecated Use item.strokeWidth instead.\n */",
      "item?": "/** Highlight style used for an individual marker when tapped or hovered over. */",
      "series?": "/** Highlight style used for whole series when one of its markers is tapped or hovered over. */"
    }
  },
  "AgBaseSeriesListeners": {
    "meta": {},
    "type": {
      "nodeClick": "(params: { type: 'nodeClick'; series: any; datum: any; xKey: string; yKey: string; }) => any"
    },
    "docs": {
      "nodeClick": "/** The listener to call when a node (marker, column, bar, tile or a pie slice) in the series is clicked. */"
    }
  },
  "AgBaseSeriesOptions": {
    "meta": {},
    "type": {
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgTooltipRendererResult": {
    "meta": {},
    "type": { "title?": "string", "content?": "string" }
  },
  "AgSeriesTooltipRendererParams": {
    "meta": {},
    "type": { "datum": "any", "title?": "string", "color?": "CssColor" }
  },
  "AgCartesianSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "xKey": "string",
      "xValue?": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue?": "any",
      "yName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor"
    }
  },
  "AgPolarSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "angleKey": "string",
      "angleValue?": "any",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusValue?": "any",
      "radiusName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor"
    }
  },
  "AgScatterSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "sizeKey?": "string",
      "sizeName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "xKey": "string",
      "xValue?": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue?": "any",
      "yName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor"
    }
  },
  "AgSeriesMarker": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "shape?": "MarkerShape",
      "size?": "PixelSize",
      "maxSize?": "PixelSize",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "enabled?": "/** Whether or not to show markers. */",
      "shape?": "/** The shape to use for the markers. You can also supply a custom marker by providing a `Marker` subclass. */",
      "size?": "/** The size in pixels of the markers. */",
      "maxSize?": "/** For series where the size of the marker is determined by the data, this determines the largest size a marker can be in pixels. */",
      "fill?": "/** The colour to use for marker fills. If this is not specified, the markers will take their fill from the series. */",
      "stroke?": "/** The colour to use for marker strokes. If this is not specified, the markers will take their stroke from the series. */",
      "strokeWidth?": "/** The width in pixels of the marker stroke. If this is not specified, the markers will take their stroke width from the series. */",
      "fillOpacity?": "/** */",
      "strokeOpacity?": "/** */"
    }
  },
  "AgSeriesMarkerFormatterParams": {
    "meta": {},
    "type": {
      "datum": "any",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "size": "number",
      "highlighted": "boolean"
    }
  },
  "AgCartesianSeriesMarkerFormatterParams": {
    "meta": {},
    "type": {
      "xKey": "string",
      "yKey": "string",
      "datum": "any",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "size": "number",
      "highlighted": "boolean"
    }
  },
  "AgCartesianSeriesMarkerFormat": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "size?": "PixelSize"
    }
  },
  "AgCartesianSeriesMarkerFormatter": {
    "meta": { "isTypeAlias": true },
    "type": "(params: AgCartesianSeriesMarkerFormatterParams) => AgCartesianSeriesMarkerFormat | undefined"
  },
  "AgCartesianSeriesMarker": {
    "meta": {},
    "type": {
      "formatter?": "AgCartesianSeriesMarkerFormatter",
      "enabled?": "boolean",
      "shape?": "MarkerShape",
      "size?": "PixelSize",
      "maxSize?": "PixelSize",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "formatter?": "/** Function used to return formatting for individual markers, based on the supplied information. If the current marker is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */",
      "enabled?": "/** Whether or not to show markers. */",
      "shape?": "/** The shape to use for the markers. You can also supply a custom marker by providing a `Marker` subclass. */",
      "size?": "/** The size in pixels of the markers. */",
      "maxSize?": "/** For series where the size of the marker is determined by the data, this determines the largest size a marker can be in pixels. */",
      "fill?": "/** The colour to use for marker fills. If this is not specified, the markers will take their fill from the series. */",
      "stroke?": "/** The colour to use for marker strokes. If this is not specified, the markers will take their stroke from the series. */",
      "strokeWidth?": "/** The width in pixels of the marker stroke. If this is not specified, the markers will take their stroke width from the series. */",
      "fillOpacity?": "/** */",
      "strokeOpacity?": "/** */"
    }
  },
  "AgAreaSeriesMarker": {
    "meta": {},
    "type": {
      "formatter?": "AgCartesianSeriesMarkerFormatter",
      "enabled?": "boolean",
      "shape?": "MarkerShape",
      "size?": "PixelSize",
      "maxSize?": "PixelSize",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "formatter?": "/** Function used to return formatting for individual markers, based on the supplied information. If the current marker is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */",
      "enabled?": "/** Whether or not to show markers. */",
      "shape?": "/** The shape to use for the markers. You can also supply a custom marker by providing a `Marker` subclass. */",
      "size?": "/** The size in pixels of the markers. */",
      "maxSize?": "/** For series where the size of the marker is determined by the data, this determines the largest size a marker can be in pixels. */",
      "fill?": "/** The colour to use for marker fills. If this is not specified, the markers will take their fill from the series. */",
      "stroke?": "/** The colour to use for marker strokes. If this is not specified, the markers will take their stroke from the series. */",
      "strokeWidth?": "/** The width in pixels of the marker stroke. If this is not specified, the markers will take their stroke width from the series. */",
      "fillOpacity?": "/** */",
      "strokeOpacity?": "/** */"
    }
  },
  "AgSeriesTooltip": {
    "meta": {},
    "type": { "enabled?": "boolean" },
    "docs": {
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgLineSeriesLabelOptions": {
    "meta": {},
    "type": {
      "formatter?": "(params: { value: any; }) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "formatter?": "/** Function used to turn 'yKey' values into text to be displayed by a label. Be default the values are simply stringified. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgLineSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "format?": "string",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgLineSeriesOptions": {
    "meta": { "doc": "/** Configuration for line series. */" },
    "type": {
      "type?": "'line'",
      "marker?": "AgCartesianSeriesMarker",
      "xKey?": "string",
      "yKey?": "string",
      "xName?": "string",
      "yName?": "string",
      "title?": "string",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "label?": "AgLineSeriesLabelOptions",
      "tooltip?": "AgLineSeriesTooltip",
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "yKey?": "/** The key to use to retrieve y-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yName?": "/** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "title?": "/** The title to use for the series. Defaults to `yName` if it exists, or `yKey` if not. */",
      "stroke?": "/** The colour of the stroke for the lines. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the lines. */",
      "strokeOpacity?": "/** The opacity of the stroke for the lines. */",
      "lineDash?": "/** Defines how the line stroke is rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "label?": "/** Configuration for the labels shown on top of data points. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgScatterSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgScatterSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgScatterSeriesLabelOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgScatterSeriesOptions": {
    "meta": { "doc": "/** Configuration for scatter/bubble series. */" },
    "type": {
      "type?": "'scatter'",
      "marker?": "AgCartesianSeriesMarker",
      "label?": "AgScatterSeriesLabelOptions",
      "xKey?": "string",
      "yKey?": "string",
      "xName?": "string",
      "yName?": "string",
      "sizeKey?": "string",
      "sizeName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "title?": "string",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "tooltip?": "AgScatterSeriesTooltip",
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "type?": "/** Configuration for the treemap series. */",
      "marker?": "/** Configuration for the markers used in the series. */",
      "label?": "/** Configuration for the labels shown on top of data points. */",
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "yKey?": "/** The key to use to retrieve y-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yName?": "/** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "sizeKey?": "/** The key to use to retrieve size values from the data, used to control the size of the markers in bubble charts. */",
      "sizeName?": "/** A human-readable description of the size values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "labelKey?": "/** The key to use to retrieve values from the data to use as labels for the markers. */",
      "labelName?": "/** A human-readable description of the label values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "title?": "/** The title to use for the series. Defaults to `yName` if it exists, or `yKey` if not. */",
      "fill?": "/** @deprecated Use {@link marker.fill} instead.\n */",
      "stroke?": "/** @deprecated Use {@link marker.stroke} instead.\n */",
      "strokeWidth?": "/** @deprecated Use {@link marker.strokeWidth} instead.\n */",
      "fillOpacity?": "/** @deprecated Use {@link marker.fillOpacity} instead.\n */",
      "strokeOpacity?": "/** @deprecated Use {@link marker.strokeOpacity} instead.\n */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgAreaSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "format?": "string",
      "enabled?": "boolean"
    },
    "docs": {
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgAreaSeriesLabelOptions": {
    "meta": {},
    "type": {
      "formatter?": "(params: { value: any; }) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "formatter?": "/** Function used to turn 'yKey' values into text to be displayed by a label. Be default the values are simply stringified. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgAreaSeriesOptions": {
    "meta": { "doc": "/** Configuration for area series. */" },
    "type": {
      "type?": "'area'",
      "marker?": "AgAreaSeriesMarker",
      "normalizedTo?": "number",
      "xKey?": "string",
      "yKeys?": "string[]",
      "yKey?": "string",
      "xName?": "string",
      "yNames?": "string[]",
      "yName?": "string",
      "fills?": "CssColor[]",
      "fill?": "CssColor",
      "strokes?": "string[]",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "shadow?": "AgDropShadowOptions",
      "label?": "AgAreaSeriesLabelOptions",
      "tooltip?": "AgAreaSeriesTooltip",
      "stacked?": "boolean",
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "marker?": "/** Configuration for the markers used in the series. */",
      "normalizedTo?": "/** The number to normalise the area stacks to. For example, if `normalizedTo` is set to `100`, the stacks will all be scaled proportionally so that their total height is always 100. */",
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "yKeys?": "/** The keys to use to retrieve y-values from the data.\n * @deprecated use yKey and multiple series instead\n */",
      "yKey?": "/** The key to use to retrieve y-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yNames?": "/** Human-readable descriptions of the y-values. If supplied, a corresponding `yName` will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters.\n * @deprecated use yName and multiple series instead\n */",
      "fills?": "/** The colours to cycle through for the fills of the areas.\n * @deprecated use fill and multiple series instead\n */",
      "fill?": "/** The colour to use for the fill of the area. */",
      "strokes?": "/** The colours to cycle through for the strokes of the areas.\n * @deprecated use stroke and multiple series instead\n */",
      "stroke?": "/** The colours to use for the stroke of the areas. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the areas. */",
      "fillOpacity?": "/** The opacity of the fill for the area. */",
      "strokeOpacity?": "/** The opacity of the stroke for the areas. */",
      "lineDash?": "/** Defines how the area strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "label?": "/** Configuration for the labels shown on top of data points. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgBarSeriesLabelOptions": {
    "meta": {},
    "type": {
      "formatter?": "(params: { value: number; }) => string",
      "placement?": "'inside' | 'outside'",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "formatter?": "/** Function used to turn 'yKey' values into text to be displayed by a label. Be default the values are simply stringified. */",
      "placement?": "/** Where to render series labels relative to the segments. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgBarSeriesFormatterParams": {
    "meta": {},
    "type": {
      "datum": "any",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "highlighted": "boolean",
      "xKey": "string",
      "yKey": "string"
    }
  },
  "AgBarSeriesFormat": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize"
    }
  },
  "AgBarSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgBarSeriesOptions": {
    "meta": { "doc": "/** Configuration for bar/column series. */" },
    "type": {
      "type?": "'bar' | 'column'",
      "grouped?": "boolean",
      "stacked?": "boolean",
      "normalizedTo?": "number",
      "xKey?": "string",
      "yKey?": "string",
      "yKeys?": "string[] | string[][]",
      "xName?": "string",
      "yName?": "string",
      "yNames?": "string[] | { [key in string]: string; }",
      "flipXY?": "boolean",
      "fills?": "CssColor[]",
      "fill?": "CssColor",
      "strokes?": "string[]",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "shadow?": "AgDropShadowOptions",
      "label?": "AgBarSeriesLabelOptions",
      "tooltip?": "AgBarSeriesTooltip",
      "formatter?": "(params: AgBarSeriesFormatterParams) => AgBarSeriesFormat",
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "grouped?": "/** Whether to show different y-values as separate bars (grouped) or not (stacked). */",
      "normalizedTo?": "/** The number to normalise the bar stacks to. Has no effect when `grouped` is `true`. For example, if `normalizedTo` is set to `100`, the bar stacks will all be scaled proportionally so that each of their totals is 100. */",
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "yKey?": "/** The keys to use to retrieve y-values from the data. */",
      "yKeys?": "/** The keys to use to retrieve y-values from the data.\n * @deprecated use yKey and multiple series instead\n */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yName?": "/** Human-readable description of the y-values. If supplied, a corresponding `yName` will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yNames?": "/** Human-readable descriptions of the y-values. If supplied, a corresponding `yName` will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters.\n * @deprecated use yName and multiple series instead\n */",
      "fills?": "/** The colours to cycle through for the fills of the bars.\n * @deprecated use fill and multiple series instead\n */",
      "fill?": "/** The colour to use for the fill of the area. */",
      "strokes?": "/** The colours to cycle through for the strokes of the bars.\n * @deprecated use stroke and multiple series instead\n */",
      "stroke?": "/** The colours to use for the stroke of the bars. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the bars. */",
      "fillOpacity?": "/** The opacity of the fill for the bars. */",
      "strokeOpacity?": "/** The opacity of the stroke for the bars. */",
      "lineDash?": "/** Defines how the bar/column strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "label?": "/** Configuration for the labels shown on bars. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "formatter?": "/** Function used to return formatting for individual bars/columns, based on the given parameters. If the current bar/column is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgHistogramSeriesLabelOptions": {
    "meta": {},
    "type": {
      "formatter?": "(params: { value: number; }) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "formatter?": "/** Function used to turn 'yKey' values into text to be displayed by a label. Be default the values are simply stringified. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgHistogramSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgHistogramSeriesOptions": {
    "meta": { "doc": "/** Configuration for histogram series. */" },
    "type": {
      "type?": "'histogram'",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "strokeWidth?": "PixelSize",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "xKey?": "string",
      "xName?": "string",
      "yKey?": "string",
      "yName?": "string",
      "areaPlot?": "boolean",
      "bins?": "[number, number][]",
      "binCount?": "number",
      "aggregation?": "'count' | 'sum' | 'mean'",
      "shadow?": "AgDropShadowOptions",
      "label?": "AgHistogramSeriesLabelOptions",
      "tooltip?": "AgHistogramSeriesTooltip",
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "fill?": "/** The colour of the fill for the histogram bars. */",
      "stroke?": "/** The colour of the stroke for the histogram bars. */",
      "fillOpacity?": "/** The opacity of the fill for the histogram bars. */",
      "strokeOpacity?": "/** The opacity of the stroke for the histogram bars. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the histogram bars. */",
      "lineDash?": "/** Defines how the column strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yKey?": "/** The key to use to retrieve y-values from the data. */",
      "yName?": "/** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "areaPlot?": "/** For variable width bins, if true the histogram will represent the aggregated `yKey` values using the area of the bar. Otherwise, the height of the var represents the value as per a normal bar chart. This is useful for keeping an undistorted curve displayed when using variable-width bins. */",
      "bins?": "/** Set the bins explicitly. The bins need not be of equal width. Clashes with the `binCount` setting. */",
      "binCount?": "/** The number of bins to try to split the x axis into. Clashes with the `bins` setting. */",
      "aggregation?": "/** Dictates how the bins are aggregated. If set to 'sum', the value shown for the bins will be the total of the yKey values. If set to 'mean', it will display the average yKey value of the bin. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "label?": "/** Configuration for the labels shown on bars. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgPieSeriesLabelOptions": {
    "meta": {},
    "type": {
      "offset?": "PixelSize",
      "minAngle?": "number",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "offset?": "/** Distance in pixels between the callout line and the label text. */",
      "minAngle?": "/** Minimum angle in degrees required for a segment to show a label. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgPieSeriesFormatterParams": {
    "meta": {},
    "type": {
      "datum": "any",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "highlighted": "boolean",
      "angleKey": "string",
      "radiusKey?": "string"
    }
  },
  "AgPieSeriesFormat": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize"
    }
  },
  "AgPieSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgPieSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgPieTitleOptions": {
    "meta": {},
    "type": {
      "showInLegend?": "boolean",
      "enabled?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "text?": "string",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "enabled?": "/** Whether or not the title should be shown. */",
      "text?": "/** The text to show in the title. */",
      "fontStyle?": "/** The font style to use for the title. */",
      "fontWeight?": "/** The font weight to use for the title. */",
      "fontSize?": "/** The font size in pixels to use for the title. */",
      "fontFamily?": "/** The font family to use for the title. */",
      "color?": "/** The colour to use for the title. */"
    }
  },
  "AgPieSeriesCalloutOptions": {
    "meta": {},
    "type": {
      "colors?": "CssColor[]",
      "length?": "PixelSize",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "colors?": "/** The colours to cycle through for the strokes of the callouts. */",
      "length?": "/** The length in pixels of the callout lines. */",
      "strokeWidth?": "/** The width in pixels of the stroke for callout lines. */"
    }
  },
  "AgPieSeriesOptions": {
    "meta": { "doc": "/** Configuration for pie/doughnut series. */" },
    "type": {
      "type?": "'pie'",
      "title?": "AgPieTitleOptions",
      "label?": "AgPieSeriesLabelOptions",
      "callout?": "AgPieSeriesCalloutOptions",
      "angleKey?": "string",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "fills?": "CssColor[]",
      "strokes?": "CssColor[]",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "strokeWidth?": "PixelSize",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "rotation?": "number",
      "outerRadiusOffset?": "PixelSize",
      "innerRadiusOffset?": "PixelSize",
      "shadow?": "AgDropShadowOptions",
      "tooltip?": "AgPieSeriesTooltip",
      "formatter?": "(params: AgPieSeriesFormatterParams) => AgPieSeriesFormat",
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "title?": "/** Configuration for the series title. */",
      "label?": "/** Configuration for the labels used for the segments. */",
      "callout?": "/** Configuration for the callouts used with the labels for the segments. */",
      "angleKey?": "/** The key to use to retrieve angle values from the data. */",
      "angleName?": "/** A human-readable description of the angle values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "radiusKey?": "/** The key to use to retrieve radius values from the data. */",
      "radiusName?": "/** A human-readable description of the radius values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "labelKey?": "/** The key to use to retrieve label values from the data. */",
      "labelName?": "/** A human-readable description of the label values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "fills?": "/** The colours to cycle through for the fills of the segments. */",
      "strokes?": "/** The colours to cycle through for the strokes of the segments. */",
      "fillOpacity?": "/** The opacity of the fill for the segments. */",
      "strokeOpacity?": "/** The opacity of the stroke for the segments. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the segments. */",
      "lineDash?": "/** Defines how the pie sector strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "rotation?": "/** The rotation of the pie series in degrees. */",
      "outerRadiusOffset?": "/** The offset in pixels of the outer radius of the series. Used to construct doughnut charts. */",
      "innerRadiusOffset?": "/** The offset in pixels of the inner radius of the series. Used to construct doughnut charts. If this is not given, or a value of zero is given, a pie chart will be rendered. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgPieSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "labelKey?": "string",
      "labelName?": "string",
      "angleKey": "string",
      "angleValue?": "any",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusValue?": "any",
      "radiusName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor"
    }
  },
  "AgTreemapSeriesLabelOptions": {
    "meta": {},
    "type": {
      "padding?": "number",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "padding?": "/** The amount of the tile's vertical space to reserve for the label. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgTreemapNodeDatum": {
    "meta": {},
    "type": {
      "datum": "any",
      "parent?": "AgTreemapNodeDatum",
      "children?": "AgTreemapNodeDatum[]",
      "depth": "number",
      "colorValue": "number",
      "fill": "CssColor",
      "label": "string",
      "hasTitle": "boolean"
    }
  },
  "AgTreemapSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "datum": "AgTreemapNodeDatum",
      "sizeKey": "string",
      "labelKey": "string",
      "valueKey": "string",
      "color": "string"
    }
  },
  "AgTreemapSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgTreemapSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgTreemapSeriesLabelsOptions": {
    "meta": {},
    "type": {
      "large?": "AgChartLabelOptions",
      "medium?": "AgChartLabelOptions",
      "small?": "AgChartLabelOptions",
      "color?": "AgChartLabelOptions"
    },
    "docs": {
      "large?": "/** The label configuration for the large leaf tiles. */",
      "medium?": "/** The label configuration for the medium-sized leaf tiles. */",
      "small?": "/** The label configuration for the small leaf tiles. */",
      "color?": "/** The configuration for the labels showing the value of the 'colorKey'. */"
    }
  },
  "AgTreemapSeriesOptions": {
    "meta": { "doc": "/** Configuration for the treemap series. */" },
    "type": {
      "type?": "'treemap'",
      "title?": "AgTreemapSeriesLabelOptions",
      "subtitle?": "AgTreemapSeriesLabelOptions",
      "labels?": "AgTreemapSeriesLabelsOptions",
      "labelKey?": "string",
      "sizeKey?": "string",
      "colorKey?": "string",
      "colorDomain?": "number[]",
      "colorRange?": "string[]",
      "colorParents?": "boolean",
      "tooltip?": "AgTreemapSeriesTooltip",
      "nodePadding?": "PixelSize",
      "gradient?": "boolean",
      "data?": "any[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgBaseSeriesListeners | { [key: string]: Function; }",
      "highlightStyle?": "AgSeriesHighlightStyle"
    },
    "docs": {
      "title?": "/** The label configuration for the top-level tiles. */",
      "subtitle?": "/** The label configuration for the children of the top-level parent tiles. */",
      "labels?": "/** Configuration for the tile labels. */",
      "labelKey?": "/** The name of the node key containing the label. */",
      "sizeKey?": "/** The name of the node key containing the size value. */",
      "colorKey?": "/** The name of the node key containing the color value. This value (along with `colorDomain` and `colorRange` configs) will be used to determine the tile color. */",
      "colorDomain?": "/** The domain the 'colorKey' values belong to. The domain can contain more than two stops, for example `[-5, 0, -5]`. In that case the 'colorRange' should also use a matching number of colors. */",
      "colorRange?": "/** The color range to interpolate the numeric `colorDomain` into. For example, if the `colorDomain` is `[-5, 5]` and `colorRange` is `['red', 'green']`, a `colorKey` value of `-5` will be assigned the 'red' color, `5` - 'green' color and `0` a blend of 'red' and 'green'. */",
      "colorParents?": "/** Whether or not to assign colors to non-leaf nodes based on 'colorKey'. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "nodePadding?": "/** The amount of padding in pixels inside of each treemap tile. Increasing `nodePadding` will reserve more space for parent labels. */",
      "gradient?": "/** Whether or not to use gradients for treemap tiles. */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */"
    }
  },
  "AgCartesianSeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgLineSeriesOptions | AgScatterSeriesOptions | AgAreaSeriesOptions | AgBarSeriesOptions | AgHistogramSeriesOptions"
  },
  "AgPolarSeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgPieSeriesOptions"
  },
  "AgHierarchySeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgTreemapSeriesOptions"
  },
  "AgCartesianChartOptions": {
    "meta": {},
    "type": {
      "type?": "'cartesian' | 'groupedCategory' | 'line' | 'bar' | 'column' | 'area' | 'scatter' | 'histogram'",
      "axes?": "AgCartesianAxisOptions[]",
      "series?": "AgCartesianSeriesOptions[]",
      "navigator?": "AgNavigatorOptions",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "theme?": "string | AgChartTheme"
    },
    "docs": {
      "type?": "/** Type of chart to render. Inherited from the first declared series if unspecified. */",
      "axes?": "/** Axis configurations. */",
      "series?": "/** Series configurations. */",
      "navigator?": "/** Configuration for the chart navigator. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */"
    }
  },
  "AgPolarChartOptions": {
    "meta": {},
    "type": {
      "type?": "'polar' | 'pie'",
      "series?": "AgPolarSeriesOptions[]",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "theme?": "string | AgChartTheme"
    },
    "docs": {
      "type?": "/** Type of chart to render. Inherited from the first declared series if unspecified. */",
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */"
    }
  },
  "AgHierarchyChartOptions": {
    "meta": {},
    "type": {
      "type?": "'hierarchy' | 'treemap'",
      "data?": "any",
      "series?": "AgHierarchySeriesOptions[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "theme?": "string | AgChartTheme"
    },
    "docs": {
      "type?": "/** Type of chart to render. Inherited from the first declared series if unspecified. */",
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */"
    }
  },
  "AgChartOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgCartesianChartOptions | AgPolarChartOptions | AgHierarchyChartOptions"
  },
  "ChartType": {
    "meta": { "isTypeAlias": true },
    "type": "CartesianChart | PolarChart | HierarchyChart"
  },
  "AgChartType": {
    "meta": { "isTypeAlias": true, "typeParams": ["T"] },
    "type": "T extends AgCartesianChartOptions ? CartesianChart : T extends AgPolarChartOptions ? PolarChart : T extends AgHierarchyChartOptions ? HierarchyChart : never"
  },
  "ChartOptionType": {
    "meta": { "isTypeAlias": true, "typeParams": ["T extends ChartType"] },
    "type": "T extends GroupedCategoryChart ? AgCartesianChartOptions : T extends CartesianChart ? AgCartesianChartOptions : T extends PolarChart ? AgPolarChartOptions : T extends HierarchyChart ? AgHierarchyChartOptions : never"
  },
  "SeriesOptionType": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<SeriesOptions['type']>"
  },
  "AxisOptionType": {
    "meta": { "isTypeAlias": true, "typeParams": ["T extends Axis<any, any>"] },
    "type": "T extends LogAxis ? AgLogAxisOptions : T extends NumberAxis ? AgNumberAxisOptions : T extends CategoryAxis ? AgCategoryAxisOptions : T extends GroupedCategoryAxis ? AgGroupedCategoryAxisOptions : T extends TimeAxis ? AgTimeAxisOptions : never"
  },
  "ChartClickEvent": {
    "meta": {},
    "type": { "event": "MouseEvent", "source": "Chart", "type": "string" }
  },
  "TooltipMeta": {
    "meta": {},
    "type": { "pageX": "number", "pageY": "number" }
  },
  "TooltipRendererResult": {
    "meta": {},
    "type": {
      "content?": "string",
      "title?": "string",
      "color?": "string",
      "backgroundColor?": "string"
    }
  },
  "Point": {
    "meta": { "isTypeAlias": true },
    "type": "{ x: number; y: number; }"
  },
  "ChartAxisDirection": {
    "meta": { "isEnum": true },
    "type": ["X = 'x'", "Y = 'y'"],
    "docs": [null, null]
  },
  "ChartAxisPosition": {
    "meta": { "isEnum": true },
    "type": [
      "Top = 'top'",
      "Right = 'right'",
      "Bottom = 'bottom'",
      "Left = 'left'",
      "Angle = 'angle'",
      "Radius = 'radius'"
    ],
    "docs": [null, null, null, null, null, null]
  },
  "ChartAxisMeta": {
    "meta": {},
    "type": {
      "id": "string",
      "direction": "ChartAxisDirection",
      "boundSeries": "Series[]"
    }
  },
  "GroupedCategoryChartAxis": {
    "meta": { "isTypeAlias": true },
    "type": "GroupedCategoryAxis | ChartAxis"
  },
  "LegendDatum": {
    "meta": {},
    "type": {
      "id": "string",
      "itemId": "any",
      "enabled": "boolean",
      "marker": "{ shape?: string | (new () => Marker); fill: string; stroke: string; fillOpacity: number; strokeOpacity: number; }",
      "label": "{ text: string; }"
    }
  },
  "LegendClickEvent": {
    "meta": {},
    "type": {
      "event": "MouseEvent",
      "itemId": "string",
      "enabled": "boolean",
      "source": "Legend",
      "type": "string"
    }
  },
  "LegendOrientation": {
    "meta": { "isEnum": true },
    "type": ["Vertical", "Horizontal"],
    "docs": [null, null]
  },
  "LegendPosition": {
    "meta": { "isEnum": true },
    "type": [
      "Top = 'top'",
      "Right = 'right'",
      "Bottom = 'bottom'",
      "Left = 'left'"
    ],
    "docs": [null, null, null, null]
  },
  "LegendLabelFormatterParams": {
    "meta": {},
    "type": { "id": "string", "itemId": "any", "value": "string" }
  },
  "SeriesOptionsTypes": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<AgChartOptions['series']>[number]"
  },
  "AxesOptionsTypes": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<AgCartesianChartOptions['axes']>[number]"
  },
  "PreparationContext": {
    "meta": {},
    "type": { "colourIndex": "number", "palette": "AgChartThemePalette" }
  },
  "SeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgCartesianSeriesOptions | AgPolarSeriesOptions | AgHierarchySeriesOptions"
  },
  "ThemeMap": {
    "meta": { "isTypeAlias": true },
    "type": "{[key in AgChartThemeName | 'undefined' | 'null']?: ChartTheme}"
  },
  "Transforms": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": [
        "Source",
        "Result extends {\n    [R in keyof Source]?: any;\n}",
        "Keys extends keyof Source & keyof Result = keyof Source & keyof Result"
      ]
    },
    "type": "{[Property in Keys]: (p: Source[Property], src: Source) => Result[Property]}"
  },
  "SeriesTypes": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<AgChartOptions['series']>[number]"
  },
  "SeriesType": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": ["T extends SeriesTypes['type']"]
    },
    "type": "T extends 'area' ? AgAreaSeriesOptions : T extends 'bar' ? AgBarSeriesOptions : T extends 'column' ? AgBarSeriesOptions : T extends 'histogram' ? AgHistogramSeriesOptions : T extends 'line' ? AgLineSeriesOptions : T extends 'pie' ? AgPieSeriesOptions : T extends 'scatter' ? AgScatterSeriesOptions : T extends 'treemap' ? AgTreemapSeriesOptions : never"
  },
  "Offset": {
    "meta": {},
    "type": { "offsetX": "number", "offsetY": "number" }
  },
  "FillSelectionDatum": {
    "meta": {},
    "type": { "itemId": "string", "points": "{ x: number; y: number; }[]" }
  },
  "StrokeSelectionDatum": {
    "meta": {},
    "type": {
      "yValues": "(number | undefined)[]",
      "itemId": "string",
      "points": "{ x: number; y: number; }[]"
    }
  },
  "AreaSeriesNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "'nodeClick'",
      "event": "MouseEvent",
      "series": "AreaSeries",
      "datum": "any",
      "xKey": "string",
      "yKey": "string"
    }
  },
  "MarkerSelectionDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "point": "{ readonly x: number; readonly y: number; }",
      "fill?": "string",
      "stroke?": "string",
      "yKey": "string",
      "yValue": "number",
      "series": "Series",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "LabelSelectionDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "itemId": "any",
      "point": "{ readonly x: number; readonly y: number; }",
      "label?": "{ readonly text: string; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; readonly fill: string; }"
    }
  },
  "Coordinate": {
    "meta": { "isTypeAlias": true },
    "type": "{ x: number; y: number; }"
  },
  "CumulativeValue": {
    "meta": { "isTypeAlias": true },
    "type": "{ left: number; right: number; }"
  },
  "ProcessedXDatum": {
    "meta": { "isTypeAlias": true },
    "type": "{ xDatum: any; seriesDatum: any; }"
  },
  "BarSeriesNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "'nodeClick'",
      "event": "MouseEvent",
      "series": "BarSeries",
      "datum": "any",
      "xKey": "string",
      "yKey": "string"
    }
  },
  "BarTooltipRendererParams": {
    "meta": {},
    "type": {
      "processedYValue": "any",
      "xKey": "string",
      "xValue": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue": "any",
      "yName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "string"
    }
  },
  "BarNodeDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "yKey": "string",
      "yValue": "number",
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "label?": "{ readonly x: number; readonly y: number; readonly text: string; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; readonly fill: string; }",
      "series": "Series",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "BarSeriesNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Bar", "Label"],
    "docs": [null, null]
  },
  "BarLabelPlacement": {
    "meta": { "isEnum": true },
    "type": ["Inside = 'inside'", "Outside = 'outside'"],
    "docs": [null, null]
  },
  "BarSeriesFormatterParams": {
    "meta": {},
    "type": {
      "datum": "any",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "highlighted": "boolean",
      "xKey": "string",
      "yKey": "string"
    }
  },
  "BarSeriesFormat": {
    "meta": {},
    "type": { "fill?": "string", "stroke?": "string", "strokeWidth?": "number" }
  },
  "CartesianSeriesMarkerFormat": {
    "meta": {},
    "type": {
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth?": "number",
      "size?": "number"
    }
  },
  "CartesianSeriesMarkerFormatterParams": {
    "meta": {},
    "type": {
      "xKey": "string",
      "yKey": "string",
      "datum": "any",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "size": "number",
      "highlighted": "boolean"
    }
  },
  "HistogramSeriesNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Bin", "Label"],
    "docs": [null, null]
  },
  "HistogramNodeDatum": {
    "meta": {},
    "type": {
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "label?": "{ readonly text: string; readonly x: number; readonly y: number; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly fill: string; }",
      "series": "Series",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "HistogramSeriesNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "'nodeClick'",
      "event": "MouseEvent",
      "series": "HistogramSeries",
      "datum": "any",
      "xKey": "string"
    }
  },
  "HistogramAggregation": {
    "meta": { "isTypeAlias": true },
    "type": "'count' | 'sum' | 'mean'"
  },
  "AggregationFunction": {
    "meta": { "isTypeAlias": true },
    "type": "(bin: HistogramBin, yKey: string) => number"
  },
  "LineNodeDatum": {
    "meta": {},
    "type": {
      "point": "{ readonly x: number; readonly y: number; }",
      "label?": "{ readonly text: string; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; readonly fill: string; }",
      "series": "Series",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "LineSeriesNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "'nodeClick'",
      "event": "MouseEvent",
      "series": "LineSeries",
      "datum": "any",
      "xKey": "string",
      "yKey": "string"
    }
  },
  "ScatterNodeDatum": {
    "meta": {},
    "type": {
      "point": "{ readonly x: number; readonly y: number; }",
      "size": "number",
      "label": "MeasuredLabel",
      "series": "Series",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "ScatterSeriesNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "'nodeClick'",
      "event": "MouseEvent",
      "series": "ScatterSeries",
      "datum": "any",
      "xKey": "string",
      "yKey": "string",
      "sizeKey?": "string"
    }
  },
  "ScatterTooltipRendererParams": {
    "meta": {},
    "type": {
      "sizeKey?": "string",
      "sizeName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "xKey": "string",
      "xValue": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue": "any",
      "yName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "string"
    }
  },
  "TreemapNodeDatum": {
    "meta": {},
    "type": {
      "parent?": "TreemapNodeDatum",
      "children?": "TreemapNodeDatum[]",
      "value": "number",
      "x0": "number",
      "x1": "number",
      "y0": "number",
      "y1": "number",
      "depth": "number",
      "series": "TreemapSeries",
      "fill": "string",
      "label": "string",
      "hasTitle": "boolean",
      "colorValue": "number",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "TreemapTooltipRendererParams": {
    "meta": {},
    "type": {
      "datum": "TreemapNodeDatum",
      "labelKey": "string",
      "sizeKey?": "string",
      "colorKey?": "string",
      "title?": "string",
      "color?": "string"
    }
  },
  "TreemapSeriesNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "'nodeClick'",
      "event": "MouseEvent",
      "series": "TreemapSeries",
      "datum": "any",
      "labelKey": "string",
      "sizeKey?": "string",
      "colorKey?": "string"
    }
  },
  "TextNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Name", "Value"],
    "docs": [null, null]
  },
  "PieSeriesNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "'nodeClick'",
      "event": "MouseEvent",
      "series": "PieSeries",
      "datum": "any",
      "angleKey": "string",
      "labelKey?": "string",
      "radiusKey?": "string"
    }
  },
  "PieNodeDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "radius": "number",
      "startAngle": "number",
      "endAngle": "number",
      "midAngle": "number",
      "midCos": "number",
      "midSin": "number",
      "label?": "{ readonly text: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; }",
      "series": "Series",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "PieTooltipRendererParams": {
    "meta": {},
    "type": {
      "labelKey?": "string",
      "labelName?": "string",
      "angleKey": "string",
      "angleValue": "any",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusValue?": "any",
      "radiusName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "string"
    }
  },
  "PieNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Sector", "Callout", "Label"],
    "docs": [null, null, null]
  },
  "PieSeriesFormatterParams": {
    "meta": {},
    "type": {
      "datum": "any",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "highlighted": "boolean",
      "angleKey": "string",
      "radiusKey?": "string"
    }
  },
  "PieSeriesFormat": {
    "meta": {},
    "type": { "fill?": "string", "stroke?": "string", "strokeWidth?": "number" }
  },
  "PolarSeriesMarkerFormatterParams": {
    "meta": {},
    "type": {
      "angleKey": "string",
      "radiusKey": "string",
      "datum": "any",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "size": "number",
      "highlighted": "boolean"
    }
  },
  "SeriesNodeDatum": {
    "meta": {
      "doc": "/** Processed series datum used in node selections,\n * contains information used to render pie sectors, bars, markers, etc. */"
    },
    "type": {
      "series": "Series",
      "itemId?": "any",
      "datum": "any",
      "point?": "{ readonly x: number; readonly y: number; }"
    }
  },
  "TooltipRendererParams": {
    "meta": {},
    "type": { "datum": "any", "title?": "string", "color?": "string" }
  },
  "CartesianTooltipRendererParams": {
    "meta": {},
    "type": {
      "xKey": "string",
      "xValue": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue": "any",
      "yName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "string"
    }
  },
  "PolarTooltipRendererParams": {
    "meta": {},
    "type": {
      "angleKey": "string",
      "angleValue": "any",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusValue?": "any",
      "radiusName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "string"
    }
  },
  "SeriesMarkerFormatterParams": {
    "meta": {},
    "type": {
      "datum": "any",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "size": "number",
      "highlighted": "boolean"
    }
  },
  "ChartThemeDefaults": {
    "meta": { "isTypeAlias": true },
    "type": "{ cartesian: AgCartesianThemeOptions; groupedCategory: AgCartesianThemeOptions; polar: AgPolarThemeOptions; hierarchy: AgHierarchyThemeOptions; } & { [key in keyof AgCartesianSeriesTheme]?: AgCartesianThemeOptions; } & { [key in keyof AgPolarSeriesTheme]?: AgPolarThemeOptions; } & { [key in keyof AgHierarchySeriesTheme]?: AgHierarchyThemeOptions; }"
  },
  "Tick": { "meta": {}, "type": { "labels": "string[]" } },
  "Node": {
    "meta": {},
    "type": {
      "children": "Node[]",
      "value": "number",
      "x0": "number",
      "x1": "number",
      "y0": "number",
      "y1": "number"
    }
  },
  "InterpolatorFactory": {
    "meta": {
      "isCallSignature": true,
      "typeParams": ["T", "U"],
      "doc": "/** An Interpolator factory returns an interpolator function.\n * \n * The first generic corresponds to the data type of the interpolation boundaries.\n * The second generic corresponds to the data type of the return type of the interpolator. */"
    },
    "type": {
      "arguments": { "a": "T", "b": "T" },
      "returnType": "((t: number) => U)"
    }
  },
  "Scale": {
    "meta": { "typeParams": ["D", "R"] },
    "type": {
      "domain": "D[]",
      "range": "R[]",
      "convert(value: D, clamper?: (values: D[]) => (x: D) => D)": "R",
      "invert?(value: R)": "D",
      "ticks?(count: any)": "D[]",
      "tickFormat?(count: any, specifier?: any)": "(x: any) => string",
      "nice?(count?: number)": "void",
      "bandwidth?": "number"
    }
  },
  "Reinterpolator": {
    "meta": { "isTypeAlias": true, "typeParams": ["T"] },
    "type": "(t: number) => T"
  },
  "Deinterpolator": {
    "meta": { "isTypeAlias": true, "typeParams": ["T"] },
    "type": "(v: T) => number"
  },
  "GradientColorStop": {
    "meta": {},
    "type": { "offset": "number", "color": "string" }
  },
  "PointerEvents": {
    "meta": { "isEnum": true },
    "type": ["All", "None"],
    "docs": [null, null]
  },
  "DebugOptions": {
    "meta": {},
    "type": { "renderFrameIndex": "boolean", "renderBoundingBoxes": "boolean" }
  },
  "ValueFn": {
    "meta": { "isTypeAlias": true, "typeParams": ["P", "GDatum", "PDatum"] },
    "type": "(parent: P, data: PDatum, index: number, groups: (P | undefined)[]) => GDatum[]"
  },
  "KeyFn": {
    "meta": { "isTypeAlias": true, "typeParams": ["N", "G", "GDatum"] },
    "type": "(node: N, datum: GDatum, index: number, groups: (G | undefined)[]) => string"
  },
  "NodeCallback": {
    "meta": { "isTypeAlias": true, "typeParams": ["G", "GDatum"] },
    "type": "(node: G, datum: GDatum, index: number, group: (G | undefined)[]) => void"
  },
  "NodeSelector": {
    "meta": { "isTypeAlias": true, "typeParams": ["N", "G", "GDatum"] },
    "type": "(node: G, datum: GDatum, index: number, group: (G | undefined)[]) => N"
  },
  "NodeSelectorAll": {
    "meta": { "isTypeAlias": true, "typeParams": ["N", "G", "GDatum"] },
    "type": "(node: G, datum: GDatum, index: number, group: (G | undefined)[]) => N[]"
  },
  "ArcType": {
    "meta": { "isEnum": true },
    "type": ["Open", "Chord", "Round"],
    "docs": [null, null, null]
  },
  "RectSizing": {
    "meta": { "isEnum": true },
    "type": ["Content", "Border"],
    "docs": [null, null]
  },
  "ShapeLineCap": {
    "meta": { "isTypeAlias": true },
    "type": "undefined | 'round' | 'square'"
  },
  "ShapeLineJoin": {
    "meta": { "isTypeAlias": true },
    "type": "undefined | 'round' | 'bevel'"
  },
  "Comparator": {
    "meta": { "isTypeAlias": true, "typeParams": ["T"] },
    "type": "(a: T, b: T) => number"
  },
  "LiteralProperties": {
    "meta": { "isTypeAlias": true },
    "type": "'shape' | 'data'"
  },
  "SkippableProperties": {
    "meta": { "isTypeAlias": true },
    "type": "'axes' | 'series' | 'container' | 'customChartThemes'"
  },
  "IsLiteralProperty": {
    "meta": { "isTypeAlias": true, "typeParams": ["T", "K extends keyof T"] },
    "type": "K extends LiteralProperties ? true : T[K] extends Array<infer E> ? true : false"
  },
  "IsSkippableProperty": {
    "meta": { "isTypeAlias": true, "typeParams": ["T", "K extends keyof T"] },
    "type": "K extends SkippableProperties ? true : false"
  },
  "DeepPartial": {
    "meta": { "isTypeAlias": true, "typeParams": ["T"] },
    "type": "{[P1 in keyof T]?: IsSkippableProperty<T, P1> extends true ? any : IsLiteralProperty<T, P1> extends true ? T[P1] : { [P2 in keyof T[P1]]?: IsSkippableProperty<T[P1], P2> extends true ? any : IsLiteralProperty<T[P1], P2> extends true ? T[P1][P2] : { [P3 in keyof T[P1][P2]]?: IsSkippableProperty<T[P1][P2], P3> extends true ? any : IsLiteralProperty<T[P1][P2], P3> extends true ? T[P1][P2][P3] : { [P4 in keyof T[P1][P2][P3]]?: IsSkippableProperty<T[P1][P2][P3], P4> extends true ? any : IsLiteralProperty<T[P1][P2][P3], P4> extends true ? T[P1][P2][P3][P4] : Partial<T[P1][P2][P3][P4]>; }; }; }}"
  },
  "Classification": {
    "meta": { "isTypeAlias": true },
    "type": "'array' | 'object' | 'primitive'"
  },
  "MeasuredLabel": {
    "meta": {},
    "type": { "text": "string", "width": "number", "height": "number" }
  },
  "PlacedLabel": {
    "meta": {},
    "type": {
      "index": "number",
      "x": "number",
      "y": "number",
      "text": "string",
      "width": "number",
      "height": "number"
    }
  },
  "PointLabelDatum": {
    "meta": {},
    "type": {
      "point": "{ readonly x: number; readonly y: number; }",
      "size": "number",
      "label": "MeasuredLabel"
    }
  },
  "Bounds": {
    "meta": {},
    "type": {
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number"
    }
  },
  "FormatType": {
    "meta": { "isTypeAlias": true },
    "type": "'' | '%' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'o' | 'p' | 'r' | 's' | 'X' | 'x'"
  },
  "FormatSpecifierOptions": {
    "meta": {},
    "type": {
      "fill?": "string",
      "align?": "string",
      "sign?": "string",
      "symbol?": "string",
      "zero?": "string",
      "width?": "string",
      "comma?": "string",
      "precision?": "string",
      "trim?": "string",
      "type?": "FormatType",
      "string?": "string"
    }
  },
  "FormatLocaleOptions": {
    "meta": {},
    "type": {
      "decimal": "string",
      "thousands": "string",
      "grouping": "number[]",
      "currency": "[string, string]",
      "numerals?": "string[]",
      "percent?": "string",
      "minus?": "string",
      "nan?": "string"
    },
    "docs": {
      "decimal": "/** The decimal point (e.g., '.') */",
      "thousands": "/** The group separator (e.g., ','). Note that the thousands property is a misnomer,\n * as the grouping definition allows groups other than thousands. */",
      "grouping": "/** The array of group sizes (e.g., [3]), cycled as needed. */",
      "currency": "/** The currency prefix and suffix (e.g., ['$', '']). */",
      "numerals?": "/** Array of ten strings to replace the numerals 0-9. */",
      "percent?": "/** Symbol to replace the `percent` suffix; the percent suffix (defaults to '%'). */",
      "minus?": "/** The minus sign (defaults to '−'). */",
      "nan?": "/** The not-a-number value (defaults 'NaN'). */"
    }
  },
  "FormatLocale": {
    "meta": {},
    "type": {
      "format(specifier: string | FormatSpecifier)": "(n: number | { valueOf(): number; }) => string",
      "formatPrefix(specifier: string | FormatSpecifier, value: number)": "(n: number | { valueOf(): number; }) => string"
    },
    "docs": {
      "format(specifier: string | FormatSpecifier)": "/** Returns a new format function for the given string specifier. The returned function\n * takes a number as the only argument, and returns a string representing the formatted number.\n * @param specifier A Specifier string.\n * @throws Error on invalid format specifier.\n */",
      "formatPrefix(specifier: string | FormatSpecifier, value: number)": "/** Returns a new format function for the given string specifier. The returned function\n * takes a number as the only argument, and returns a string representing the formatted number.\n * The returned function will convert values to the units of the appropriate SI prefix for the\n * specified numeric reference value before formatting in fixed point notation.\n * @param specifier A Specifier string.\n * @param value The reference value to determine the appropriate SI prefix.\n * @throws Error on invalid format specifier.\n */"
    }
  },
  "TypedEvent": { "meta": {}, "type": { "type": "string" } },
  "SourceEvent": {
    "meta": { "typeParams": ["S"] },
    "type": { "source": "S", "type": "string" }
  },
  "PropertyChangeEvent": {
    "meta": { "typeParams": ["S", "V"] },
    "type": { "value": "V", "oldValue": "V", "source": "S", "type": "string" }
  },
  "SourceEventListener": {
    "meta": { "isTypeAlias": true, "typeParams": ["S"] },
    "type": "(event: SourceEvent<S>) => any"
  },
  "PropertyChangeEventListener": {
    "meta": { "isTypeAlias": true, "typeParams": ["S", "V"] },
    "type": "(event: PropertyChangeEvent<S, V>) => any"
  },
  "OnSizeChange": {
    "meta": { "isTypeAlias": true },
    "type": "(size: Size, element: HTMLElement) => void"
  },
  "Entry": {
    "meta": { "isTypeAlias": true },
    "type": "{ cb: OnSizeChange; size?: Size; }"
  },
  "NumberFormat": {
    "meta": { "isTypeAlias": true },
    "type": "(date: Date) => number"
  },
  "DateFormat": { "meta": { "isTypeAlias": true }, "type": "string" },
  "ValueFormat": {
    "meta": { "isTypeAlias": true },
    "type": "NumberFormat | DateFormat"
  },
  "FormatKeys": {
    "meta": { "isTypeAlias": true },
    "type": "'a' | 'A' | 'b' | 'B' | 'c' | 'd' | 'e' | 'f' | 'H' | 'I' | 'j' | 'L' | 'm' | 'M' | 'p' | 'Q' | 's' | 'S' | 'u' | 'U' | 'V' | 'w' | 'W' | 'x' | 'X' | 'y' | 'Y' | 'Z' | '%'"
  },
  "ParsedDate": {
    "meta": { "isTypeAlias": true },
    "type": "{[key in string]: number}"
  },
  "Parse": {
    "meta": { "isTypeAlias": true },
    "type": "(d: ParsedDate, string: string, i: number) => number"
  },
  "StringFormat": {
    "meta": { "isTypeAlias": true },
    "type": "(date: Date, fill: string) => string"
  },
  "FormatMap": {
    "meta": { "isTypeAlias": true },
    "type": "{[key in FormatKeys]?: StringFormat | NumberFormat}"
  },
  "TimeLocaleDefinition": {
    "meta": {
      "doc": "/** Specification of time locale to use when creating a new TimeLocaleObject. */"
    },
    "type": {
      "dateTime": "string",
      "date": "string",
      "time": "string",
      "periods": "[string, string]",
      "days": "[string, string, string, string, string, string, string]",
      "shortDays": "[string, string, string, string, string, string, string]",
      "months": "[string, string, string, string, string, string, string, string, string, string, string, string]",
      "shortMonths": "[string, string, string, string, string, string, string, string, string, string, string, string]"
    },
    "docs": {
      "dateTime": "/** The date and time (%c) format specifier (e.g., \"%a %b %e %X %Y\"). */",
      "date": "/** The date (%x) format specifier (e.g., \"%m/%d/%Y\"). */",
      "time": "/** The time (%X) format specifier (e.g., \"%H:%M:%S\"). */",
      "periods": "/** The A.M. and P.M. equivalents (e.g., [\"AM\", \"PM\"]). */",
      "days": "/** The full names of the weekdays, starting with Sunday. */",
      "shortDays": "/** The abbreviated names of the weekdays, starting with Sunday. */",
      "months": "/** The full names of the months (starting with January). */",
      "shortMonths": "/** The abbreviated names of the months (starting with January). */"
    }
  },
  "TimeLocaleObject": {
    "meta": {
      "doc": "/** Interface describing a time-locale-based object which exposes time-formatting/parsing\n * methods for a specified locale definition. */"
    },
    "type": {
      "format(specifier: string)": "(date: Date | number) => string",
      "parse(specifier: string)": "(dateString: string) => (Date | undefined)",
      "utcFormat(specifier: string)": "(date: Date | number) => string",
      "utcParse(specifier: string)": "(dateString: string) => (Date | undefined)"
    },
    "docs": {
      "format(specifier: string)": "/** Returns a new formatter for the given string specifier. The specifier string may contain the following directives:\n * - %a - abbreviated weekday name.*\n * - %A - full weekday name.*\n * - %b - abbreviated month name.*\n * - %B - full month name.*\n * - %c - the locale’s date and time, such as %x, %X.*\n * - %d - zero-padded day of the month as a decimal number [01,31].\n * - %e - space-padded day of the month as a decimal number [ 1,31]; equivalent to %_d.\n * - %f - microseconds as a decimal number [000000, 999999].\n * - %H - hour (24-hour clock) as a decimal number [00,23].\n * - %I - hour (12-hour clock) as a decimal number [01,12].\n * - %j - day of the year as a decimal number [001,366].\n * - %m - month as a decimal number [01,12].\n * - %M - minute as a decimal number [00,59].\n * - %L - milliseconds as a decimal number [000, 999].\n * - %p - either AM or PM.*\n * - %Q - milliseconds since UNIX epoch.\n * - %s - seconds since UNIX epoch.\n * - %S - second as a decimal number [00,61].\n * - %u - Monday-based (ISO) weekday as a decimal number [1,7].\n * - %U - Sunday-based week of the year as a decimal number [00,53].\n * - %V - ISO 8601 week number of the year as a decimal number [01, 53].\n * - %w - Sunday-based weekday as a decimal number [0,6].\n * - %W - Monday-based week of the year as a decimal number [00,53].\n * - %x - the locale’s date, such as %-m/%-d/%Y.*\n * - %X - the locale’s time, such as %-I:%M:%S %p.*\n * - %y - year without century as a decimal number [00,99].\n * - %Y - year with century as a decimal number.\n * - %Z - time zone offset, such as -0700, -07:00, -07, or Z.\n * - %% - a literal percent sign (%).\n * \n * Directives marked with an asterisk (*) may be affected by the locale definition.\n * \n * For %U, all days in a new year preceding the first Sunday are considered to be in week 0.\n * For %W, all days in a new year preceding the first Monday are considered to be in week 0.\n * Week numbers are computed using interval.count. For example, 2015-52 and 2016-00 represent\n * Monday, December 28, 2015, while 2015-53 and 2016-01 represent Monday, January 4, 2016.\n * This differs from the ISO week date specification (%V), which uses a more complicated definition!\n * \n * For %V, per the strftime man page:\n * \n * In this system, weeks start on a Monday, and are numbered from 01, for the first week, up to 52 or 53, for the last week.\n * Week 1 is the first week where four or more days fall within the new year (or, synonymously,\n * week 01 is: the first week of the year that contains a Thursday; or, the week that has 4 January in it).\n * \n * The % sign indicating a directive may be immediately followed by a padding modifier:\n * \n * 1) 0 - zero-padding\n * 2) _ - space-padding\n * 3) - disable padding\n * \n * If no padding modifier is specified, the default is 0 for all directives except %e, which defaults to _.\n * (In some implementations of strftime and strptime, a directive may include an optional field width or precision;\n * this feature is not yet implemented.)\n * \n * The returned function formats a specified date, returning the corresponding string.\n * @param specifier A specifier string for the date format.\n */",
      "parse(specifier: string)": "/** Returns a new parser for the given string specifier.\n * The specifier string may contain the same directives as locale.format (TimeLocaleObject.format).\n * The %d and %e directives are considered equivalent for parsing.\n * \n * The returned function parses a specified string, returning the corresponding date or undefined\n * if the string could not be parsed according to this format’s specifier.\n * Parsing is strict: if the specified string does not exactly match the associated specifier, this method returns undefined.\n * \n * For example, if the associated specifier is %Y-%m-%dT%H:%M:%SZ, then the string \"2011-07-01T19:15:28Z\"\n * will be parsed as expected, but \"2011-07-01T19:15:28\", \"2011-07-01 19:15:28\" and \"2011-07-01\" will return undefined.\n * (Note that the literal Z here is different from the time zone offset directive %Z.)\n * If a more flexible parser is desired, try multiple formats sequentially until one returns non-undefined.\n * @param specifier A specifier string for the date format.\n */",
      "utcFormat(specifier: string)": "/** Equivalent to locale.format (TimeLocaleObject.format),\n * except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time.\n * @param specifier A specifier string for the date format.\n */",
      "utcParse(specifier: string)": "/** Equivalent to locale.parse (TimeLocaleObject.parse),\n * except all directives are interpreted as Coordinated Universal Time (UTC) rather than local time.\n * @param specifier A specifier string for the date format.\n */"
    }
  },
  "FloorFn": {
    "meta": { "isTypeAlias": true },
    "type": "(date: Date) => void"
  },
  "OffsetFn": {
    "meta": { "isTypeAlias": true },
    "type": "(date: Date, step: number) => void"
  },
  "CountFn": {
    "meta": { "isTypeAlias": true },
    "type": "(start: Date, end: Date) => number"
  },
  "FieldFn": {
    "meta": { "isTypeAlias": true },
    "type": "(date: Date) => number"
  }
}
