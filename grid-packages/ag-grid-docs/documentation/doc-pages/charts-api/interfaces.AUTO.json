{
  "Tags": {
    "meta": { "isEnum": true },
    "type": ["TickLine", "TickLabel", "GridLine", "GridArc", "AxisLine"],
    "docs": [null, null, null, null, null]
  },
  "TickCount": {
    "meta": { "isTypeAlias": true, "typeParams": ["S"] },
    "type": "S extends TimeScale ? number | TimeInterval : number"
  },
  "TickInterval": {
    "meta": { "isTypeAlias": true, "typeParams": ["S"] },
    "type": "S extends TimeScale ? number | TimeInterval : number"
  },
  "Size": {
    "meta": { "isTypeAlias": true },
    "type": "{ width: number; height: number; }"
  },
  "OffscreenCanvasRenderingContext2D": {
    "meta": { "isTypeAlias": true },
    "type": "any"
  },
  "OffscreenCanvas": { "meta": { "isTypeAlias": true }, "type": "any" },
  "FontStyle": {
    "meta": { "isTypeAlias": true },
    "type": "'normal' | 'italic' | 'oblique'"
  },
  "FontWeight": {
    "meta": { "isTypeAlias": true },
    "type": "'normal' | 'bold' | 'bolder' | 'lighter' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900'"
  },
  "FontFamily": { "meta": { "isTypeAlias": true }, "type": "string" },
  "FontSize": { "meta": { "isTypeAlias": true }, "type": "number" },
  "AgChartThemeName": {
    "meta": { "isTypeAlias": true },
    "type": "'ag-default' | 'ag-default-dark' | 'ag-material' | 'ag-material-dark' | 'ag-pastel' | 'ag-pastel-dark' | 'ag-solar' | 'ag-solar-dark' | 'ag-vivid' | 'ag-vivid-dark'"
  },
  "MarkerShape": {
    "meta": { "isTypeAlias": true },
    "type": "'circle' | 'cross' | 'diamond' | 'heart' | 'plus' | 'triangle' | any"
  },
  "CssColor": { "meta": { "isTypeAlias": true }, "type": "string" },
  "Opacity": { "meta": { "isTypeAlias": true }, "type": "number" },
  "PixelSize": { "meta": { "isTypeAlias": true }, "type": "number" },
  "Ratio": { "meta": { "isTypeAlias": true }, "type": "number" },
  "DataValue": { "meta": { "isTypeAlias": true }, "type": "any" },
  "AgChartInteractionRange": {
    "meta": { "isTypeAlias": true },
    "type": "PixelSize | 'exact' | 'nearest'"
  },
  "AgChartThemePalette": {
    "meta": {},
    "type": { "fills": "string[]", "strokes": "string[]" },
    "docs": {
      "fills": "/** The array of fills to be used. */",
      "strokes": "/** The array of strokes to be used. */"
    }
  },
  "AgChartThemeOptions": {
    "meta": {},
    "type": {
      "palette?": "AgChartThemePalette",
      "overrides?": "AgChartThemeOverrides"
    },
    "docs": {
      "palette?": "/** The palette to use. If specified, this replaces the palette from the base theme. */",
      "overrides?": "/** Configuration from this object is merged over the defaults specified in the base theme. */"
    }
  },
  "AgChartTheme": {
    "meta": {
      "doc": "/** This object is used to define the configuration for a custom chart theme. */"
    },
    "type": {
      "baseTheme?": "AgChartThemeName",
      "palette?": "AgChartThemePalette",
      "overrides?": "AgChartThemeOverrides"
    },
    "docs": {
      "baseTheme?": "/** The name of the theme to base your theme on. Your custom theme will inherit all of the configuration from\n     * the base theme, allowing you to override just the settings you wish to change using the `overrides` config (see\n     * below).\n     */",
      "palette?": "/** The palette to use. If specified, this replaces the palette from the base theme. */",
      "overrides?": "/** Configuration from this object is merged over the defaults specified in the base theme. */"
    }
  },
  "AgChartThemeOverrides": {
    "meta": {},
    "type": {
      "cartesian?": "AgCartesianThemeOptions<AgCartesianSeriesTheme>",
      "column?": "AgCartesianThemeOptions<AgBarSeriesOptions>",
      "bar?": "AgCartesianThemeOptions<AgBarSeriesOptions>",
      "line?": "AgCartesianThemeOptions<AgLineSeriesOptions>",
      "area?": "AgCartesianThemeOptions<AgAreaSeriesOptions>",
      "scatter?": "AgCartesianThemeOptions<AgScatterSeriesOptions>",
      "histogram?": "AgCartesianThemeOptions<AgHistogramSeriesOptions>",
      "polar?": "AgPolarThemeOptions<AgPolarSeriesTheme>",
      "pie?": "AgPolarThemeOptions<AgPieSeriesOptions>",
      "hierarchy?": "AgHierarchyThemeOptions<AgHierarchySeriesTheme>",
      "treemap?": "AgHierarchyThemeOptions<AgHierarchySeriesOptions>",
      "common?": "any"
    },
    "docs": {
      "cartesian?": "/** Specifies defaults for all cartesian charts (used for bar, column, histogram, line, scatter and area series) */",
      "column?": "/** Specifies defaults for column charts. */",
      "bar?": "/** Specifies defaults for bar charts. */",
      "line?": "/** Specifies defaults for line charts. */",
      "area?": "/** Specifies defaults for area charts. */",
      "scatter?": "/** Specifies defaults for scatter/bubble charts. */",
      "histogram?": "/** Specifies defaults for histogram charts. */",
      "polar?": "/** Specifies defaults for all polar charts (used for pie series) */",
      "pie?": "/** Specifies defaults for pie/doughnut charts. */",
      "hierarchy?": "/** Specifies defaults for all hierarchy charts (used for treemap series) */",
      "treemap?": "/** Specifies defaults for all treemap charts. */",
      "common?": "/** Specifies defaults for all chart types. Be careful to only use properties that apply to all chart types here. For example, don't specify `navigator` configuration here as navigators are only available in cartesian charts. */"
    }
  },
  "AgCartesianAxisThemeSpecialOptions": {
    "meta": { "isTypeAlias": true },
    "type": "'position' | 'type' | 'crossLines'"
  },
  "AgCartesianAxisThemeOptions": {
    "meta": {
      "typeParams": ["T"],
      "doc": "/** This is the configuration shared by all types of axis. */"
    },
    "type": {
      "top?": "Omit<T, AgCartesianAxisThemeSpecialOptions>",
      "right?": "Omit<T, AgCartesianAxisThemeSpecialOptions>",
      "bottom?": "Omit<T, AgCartesianAxisThemeSpecialOptions>",
      "left?": "Omit<T, AgCartesianAxisThemeSpecialOptions>"
    },
    "docs": {
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */"
    }
  },
  "AgCartesianThemeOptions": {
    "meta": { "typeParams": ["S = AgCartesianSeriesTheme"] },
    "type": {
      "axes?": "AgCartesianAxesTheme",
      "series?": "S",
      "navigator?": "AgNavigatorOptions",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "seriesPadding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "footnote?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "highlightRange?": "'tooltip' | 'node'",
      "theme?": "string | AgChartTheme",
      "overlays?": "AgChartOverlaysOptions"
    },
    "docs": {
      "axes?": "/** Axis configurations. */",
      "series?": "/** Series configurations. */",
      "navigator?": "/** Configuration for the chart navigator. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "seriesPadding?": "/** Configuration for the padding around the series. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "footnote?": "/** Configuration for the footnote shown at the bottom of the chart. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightRange?": "/** By default, nodes will be highlighted when the cursor is within the `tooltip.range`. Set this to `'node'` to highlight nodes when within the `series[].nodeClickRange`. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */",
      "overlays?": "/** HTML overlays */"
    }
  },
  "AgPolarThemeOptions": {
    "meta": { "typeParams": ["S = AgPolarSeriesTheme"] },
    "type": {
      "series?": "S",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "seriesPadding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "footnote?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "highlightRange?": "'tooltip' | 'node'",
      "theme?": "string | AgChartTheme",
      "overlays?": "AgChartOverlaysOptions"
    },
    "docs": {
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "seriesPadding?": "/** Configuration for the padding around the series. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "footnote?": "/** Configuration for the footnote shown at the bottom of the chart. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightRange?": "/** By default, nodes will be highlighted when the cursor is within the `tooltip.range`. Set this to `'node'` to highlight nodes when within the `series[].nodeClickRange`. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */",
      "overlays?": "/** HTML overlays */"
    }
  },
  "AgHierarchyThemeOptions": {
    "meta": { "typeParams": ["S = AgHierarchySeriesTheme"] },
    "type": {
      "series?": "S",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "seriesPadding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "footnote?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "highlightRange?": "'tooltip' | 'node'",
      "theme?": "string | AgChartTheme",
      "overlays?": "AgChartOverlaysOptions"
    },
    "docs": {
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "seriesPadding?": "/** Configuration for the padding around the series. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "footnote?": "/** Configuration for the footnote shown at the bottom of the chart. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightRange?": "/** By default, nodes will be highlighted when the cursor is within the `tooltip.range`. Set this to `'node'` to highlight nodes when within the `series[].nodeClickRange`. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */",
      "overlays?": "/** HTML overlays */"
    }
  },
  "AgCrossLineThemeOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "value?": "DataValue",
      "range?": "[ DataValue, DataValue ]",
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "label?": "AgCrossLineLabelOptions"
    },
    "docs": {
      "enabled?": "/** Whether or not to show the cross line. */",
      "value?": "/** The data value at which the line should be positioned. This property is used if the crossLine type is `line`. */",
      "range?": "/** The range of values from the data used to display lines at a desired chart region. This property is only used for crossLine type `range`. */",
      "fill?": "/** The colour to use for the fill of the range. */",
      "fillOpacity?": "/** The opacity of the fill for the range. */",
      "stroke?": "/** The colour of the stroke for the lines. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the lines. */",
      "strokeOpacity?": "/** The opacity of the stroke for the lines. */",
      "lineDash?": "/** Defines how the line stroke is rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "label?": "/** Configuration for the crossLine label. */"
    }
  },
  "AgCartesianAxesCrossLineThemeOptions": {
    "meta": {},
    "type": { "crossLines?": "AgCrossLineThemeOptions" }
  },
  "AgNumberAxisThemeOptions": {
    "meta": {},
    "type": {
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "top?": "Omit<AgNumberAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "right?": "Omit<AgNumberAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "bottom?": "Omit<AgNumberAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "left?": "Omit<AgNumberAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "crossLines?": "AgCrossLineThemeOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgLogAxisThemeOptions": {
    "meta": {},
    "type": {
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "base?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "top?": "Omit<AgLogAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "right?": "Omit<AgLogAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "bottom?": "Omit<AgLogAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "left?": "Omit<AgLogAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "crossLines?": "AgCrossLineThemeOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). This value can be any non-zero number less than the configured `max` value. */",
      "max?": "/** User override for the automatically determined max value (based on series data). This value can be any non-zero number more than the configured `min` value. */",
      "base?": "/** The base of the logarithm used. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCategoryAxisThemeOptions": {
    "meta": {},
    "type": {
      "paddingInner?": "Ratio",
      "paddingOuter?": "Ratio",
      "groupPaddingInner?": "Ratio",
      "tick?": "AgAxisCategoryTickOptions",
      "top?": "Omit<AgCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "right?": "Omit<AgCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "bottom?": "Omit<AgCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "left?": "Omit<AgCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "crossLines?": "AgCrossLineThemeOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "paddingInner?": "/** The size of the gap between the categories as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.2`\n     */",
      "paddingOuter?": "/** The padding on the outside i.e. left and right of the first and last category. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.3`\n     */",
      "groupPaddingInner?": "/** This property is for grouped column/bar series plotted on a category axis. It is a proportion between 0 and 1 which determines the size of the gap between the bars or columns within a single group along the axis.\n     * Default: `0.2`\n     */",
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgGroupedCategoryAxisThemeOptions": {
    "meta": {},
    "type": {
      "tick?": "AgAxisCategoryTickOptions",
      "top?": "Omit<AgGroupedCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "right?": "Omit<AgGroupedCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "bottom?": "Omit<AgGroupedCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "left?": "Omit<AgGroupedCategoryAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "crossLines?": "AgCrossLineThemeOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "tick?": "/** Configuration for the axis ticks. */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgTimeAxisThemeOptions": {
    "meta": {},
    "type": {
      "nice?": "boolean",
      "tick?": "AgAxisTimeTickOptions",
      "min?": "Date | number",
      "max?": "Date | number",
      "top?": "Omit<AgTimeAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "right?": "Omit<AgTimeAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "bottom?": "Omit<AgTimeAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "left?": "Omit<AgTimeAxisOptions, AgCartesianAxisThemeSpecialOptions>",
      "crossLines?": "AgCrossLineThemeOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "top?": "/** An object with axis theme overrides for the `top` positioned axes. Same configs apply here as one level above. For example, to rotate labels by 45 degrees in 'top' positioned axes one can use `top: { label: { rotation: 45 } } }`. */",
      "right?": "/** An object with axis theme overrides for the `right` positioned axes. Same configs apply here as one level above. */",
      "bottom?": "/** An object with axis theme overrides for the `bottom` positioned axes. Same configs apply here as one level above. */",
      "left?": "/** An object with axis theme overrides for the `left` positioned axes. Same configs apply here as one level above. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCartesianAxesTheme": {
    "meta": {},
    "type": {
      "number?": "AgNumberAxisThemeOptions",
      "log?": "AgLogAxisThemeOptions",
      "category?": "AgCategoryAxisThemeOptions",
      "groupedCategory?": "AgGroupedCategoryAxisThemeOptions",
      "time?": "AgTimeAxisThemeOptions"
    },
    "docs": {
      "number?": "/** This extends the common axis configuration with options specific to number axes. */",
      "log?": "/** This extends the common axis configuration with options specific to number axes. */",
      "category?": "/** This extends the common axis configuration with options specific to category axes. */",
      "groupedCategory?": "/** This extends the common axis configuration with options specific to grouped category axes. Currently there are no additional options beyond the common configuration. */",
      "time?": "/** This extends the common axis configuration with options specific to time axes. */"
    }
  },
  "AgCartesianSeriesTheme": {
    "meta": {},
    "type": {
      "line?": "AgLineSeriesOptions",
      "scatter?": "AgScatterSeriesOptions",
      "area?": "AgAreaSeriesOptions",
      "bar?": "AgBarSeriesOptions",
      "column?": "AgBarSeriesOptions",
      "histogram?": "AgHistogramSeriesOptions"
    }
  },
  "AgPolarSeriesTheme": { "meta": {}, "type": { "pie?": "AgPieSeriesTheme" } },
  "AgPieSeriesTheme": {
    "meta": {},
    "type": {
      "innerLabels?": "AgDoughnutInnerLabelThemeOptions",
      "type?": "'pie'",
      "title?": "AgPieTitleOptions",
      "label?": "AgPieSeriesLabelOptions<DatumType>",
      "calloutLabel?": "AgPieSeriesLabelOptions<DatumType>",
      "sectorLabel?": "AgPieSeriesSectorLabelOptions<DatumType>",
      "callout?": "AgPieSeriesCalloutOptions",
      "calloutLine?": "AgPieSeriesCalloutOptions",
      "angleKey?": "string",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "calloutLabelKey?": "string",
      "calloutLabelName?": "string",
      "sectorLabelKey?": "string",
      "sectorLabelName?": "string",
      "fills?": "CssColor[]",
      "strokes?": "CssColor[]",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "strokeWidth?": "PixelSize",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "rotation?": "number",
      "outerRadiusOffset?": "PixelSize",
      "outerRadiusRatio?": "Ratio",
      "innerRadiusOffset?": "PixelSize",
      "innerRadiusRatio?": "Ratio",
      "radiusMin?": "number",
      "radiusMax?": "number",
      "shadow?": "AgDropShadowOptions",
      "tooltip?": "AgPieSeriesTooltip",
      "innerCircle?": "AgDoughnutInnerCircle",
      "formatter?": "(params: AgPieSeriesFormatterParams<DatumType>) => AgPieSeriesFormat",
      "listeners?": "AgSeriesListeners<DatumType>",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "title?": "/** Configuration for the series title. */",
      "label?": "/** Configuration for the labels used outside of the sectors.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabel instead.\n     */",
      "calloutLabel?": "/** Configuration for the labels used outside of the sectors. */",
      "sectorLabel?": "/** Configuration for the labels used inside the sectors. */",
      "callout?": "/** Configuration for the callout lines used with the labels for the sectors.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLine instead.\n     */",
      "calloutLine?": "/** Configuration for the callout lines used with the labels for the sectors. */",
      "angleKey?": "/** The key to use to retrieve angle values from the data. */",
      "angleName?": "/** A human-readable description of the angle values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "radiusKey?": "/** The key to use to retrieve radius values from the data. */",
      "radiusName?": "/** A human-readable description of the radius values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "labelKey?": "/** The key to use to retrieve label values from the data.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabelKey or series.sectorLabelKey instead.\n     */",
      "labelName?": "/** A human-readable description of the label values. If supplied, this will be passed to the tooltip renderer as one of the parameters.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabelName or series.sectorLabelName instead.\n     */",
      "calloutLabelKey?": "/** The key to use to retrieve label values from the data. */",
      "calloutLabelName?": "/** A human-readable description of the label values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "sectorLabelKey?": "/** The key to use to retrieve sector label values from the data. */",
      "sectorLabelName?": "/** A human-readable description of the sector label values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "fills?": "/** The colours to cycle through for the fills of the sectors. */",
      "strokes?": "/** The colours to cycle through for the strokes of the sectors. */",
      "fillOpacity?": "/** The opacity of the fill for the sectors. */",
      "strokeOpacity?": "/** The opacity of the stroke for the sectors. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the sectors. */",
      "lineDash?": "/** Defines how the pie sector strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "rotation?": "/** The rotation of the pie series in degrees. */",
      "outerRadiusOffset?": "/** The offset in pixels of the outer radius of the series. Used to construct doughnut charts. */",
      "outerRadiusRatio?": "/** The ratio of the outer radius of the series. Used to adjust the outer radius proportionally to the automatically calculated value. */",
      "innerRadiusOffset?": "/** The offset in pixels of the inner radius of the series. Used to construct doughnut charts. If this is not provided, or innerRadiusRatio is unset, or a value of zero is given, a pie chart will be rendered. */",
      "innerRadiusRatio?": "/** The ratio of the inner radius of the series. Used to construct doughnut charts. If this is not provided, or innerRadiusOffset is unset, or a value of zero or one is given, a pie chart will be rendered. */",
      "radiusMin?": "/** Override of the automatically determined minimum radiusKey value from the data. */",
      "radiusMax?": "/** Override of the automatically determined maximum radiusKey value from the data. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "innerLabels?": "/** Configuration for the text lines to display inside the series, typically used when rendering a doughnut chart */",
      "innerCircle?": "/** Configuration for the area inside the series, only visible when rendering a doughnut chart by using innerRadiusOffset or innerRadiusRatio */",
      "formatter?": "/** A formatter function for adjusting the styling of the pie sectors. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgHierarchySeriesTheme": {
    "meta": {},
    "type": { "treemap?": "AgTreemapSeriesOptions" }
  },
  "AgChartPaddingOptions": {
    "meta": {},
    "type": {
      "top?": "PixelSize",
      "right?": "PixelSize",
      "bottom?": "PixelSize",
      "left?": "PixelSize"
    },
    "docs": {
      "top?": "/** The number of pixels of padding at the top of the chart area. */",
      "right?": "/** The number of pixels of padding at the right of the chart area. */",
      "bottom?": "/** The number of pixels of padding at the bottom of the chart area. */",
      "left?": "/** The number of pixels of padding at the left of the chart area. */"
    }
  },
  "AgChartOverlayOptions": {
    "meta": {},
    "type": { "renderer?": "() => string" },
    "docs": {
      "renderer?": "/** A function for generating HTML string for overlay content. */"
    }
  },
  "AgChartOverlaysOptions": {
    "meta": {},
    "type": { "noData?": "AgChartOverlayOptions" },
    "docs": {
      "noData?": "/** An overlay to be displayed when there is no data, */"
    }
  },
  "AgChartLabelOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgDropShadowOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "color?": "CssColor",
      "xOffset?": "PixelSize",
      "yOffset?": "PixelSize",
      "blur?": "PixelSize"
    },
    "docs": {
      "enabled?": "/** Whether or not the shadow is visible. */",
      "color?": "/** The colour of the shadow. */",
      "xOffset?": "/** The horizontal offset in pixels for the shadow. */",
      "yOffset?": "/** The vertical offset in pixels for the shadow. */",
      "blur?": "/** The radius of the shadow's blur, given in pixels. */"
    }
  },
  "AgChartCaptionOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "text?": "string",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor",
      "spacing?": "number"
    },
    "docs": {
      "enabled?": "/** Whether or not the text should be shown. */",
      "text?": "/** The text to display. */",
      "fontStyle?": "/** The font style to use for the text. */",
      "fontWeight?": "/** The font weight to use for the text. */",
      "fontSize?": "/** The font size in pixels to use for the text. */",
      "fontFamily?": "/** The font family to use for the text. */",
      "color?": "/** The colour to use for the text. */",
      "spacing?": "/** Spacing added to help position the text. */"
    }
  },
  "AgAxisCaptionOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "text?": "string",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "enabled?": "/** Whether or not the title should be shown. */",
      "text?": "/** The text to show in the title. */",
      "fontStyle?": "/** The font style to use for the title. */",
      "fontWeight?": "/** The font weight to use for the title. */",
      "fontSize?": "/** The font size in pixels to use for the title. */",
      "fontFamily?": "/** The font family to use for the title. */",
      "color?": "/** The colour to use for the title. */"
    }
  },
  "AgNavigatorMaskOptions": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity"
    },
    "docs": {
      "fill?": "/** The fill colour used by the mask. */",
      "stroke?": "/** The stroke colour used by the mask. */",
      "strokeWidth?": "/** The stroke width used by the mask. */",
      "fillOpacity?": "/** The opacity of the mask's fill in the `[0, 1]` interval, where `0` is effectively no masking. */"
    }
  },
  "AgNavigatorHandleOptions": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "gripLineGap?": "PixelSize",
      "gripLineLength?": "PixelSize"
    },
    "docs": {
      "fill?": "/** The fill colour used by the handle. */",
      "stroke?": "/** The stroke colour used by the handle. */",
      "strokeWidth?": "/** The stroke width used by the handle. */",
      "width?": "/** The width of the handle. */",
      "height?": "/** The height of the handle. */",
      "gripLineGap?": "/** The distance between the handle's grip lines. */",
      "gripLineLength?": "/** The length of the handle's grip lines. */"
    }
  },
  "AgNavigatorOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "height?": "PixelSize",
      "margin?": "PixelSize",
      "min?": "number",
      "max?": "number",
      "mask?": "AgNavigatorMaskOptions",
      "minHandle?": "AgNavigatorHandleOptions",
      "maxHandle?": "AgNavigatorHandleOptions"
    },
    "docs": {
      "enabled?": "/** Whether or not to show the navigator. */",
      "height?": "/** The height of the navigator. */",
      "margin?": "/** The distance between the navigator and the bottom axis. */",
      "min?": "/** The start of the visible range in the `[0, 1]` interval. */",
      "max?": "/** The end of the visible range in the `[0, 1]` interval. */",
      "mask?": "/** Configuration for the navigator's visible range mask. */",
      "minHandle?": "/** Configuration for the navigator's left handle. */",
      "maxHandle?": "/** Configuration for the navigator's right handle. */"
    }
  },
  "AgChartLegendPosition": {
    "meta": { "isTypeAlias": true },
    "type": "'top' | 'right' | 'bottom' | 'left'"
  },
  "AgChartOrientation": {
    "meta": { "isTypeAlias": true },
    "type": "'horizontal' | 'vertical'"
  },
  "AgChartLegendMarkerOptions": {
    "meta": {},
    "type": {
      "size?": "PixelSize",
      "shape?": "MarkerShape",
      "padding?": "PixelSize",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "size?": "/** The size in pixels of the markers in the legend. */",
      "shape?": "/** If set, overrides the marker shape from the series and the legend will show the specified marker shape instead. If not set, will use a marker shape matching the shape from the series, or fall back to `'square'` if there is none. */",
      "padding?": "/** The padding in pixels between a legend marker and the corresponding label. */",
      "strokeWidth?": "/** The width in pixels of the stroke for markers in the legend. */"
    }
  },
  "AgChartLegendLabelFormatterParams": {
    "meta": {},
    "type": {
      "id": "string",
      "seriesId": "string",
      "itemId": "any",
      "value": "string"
    },
    "docs": {
      "id": "/** @deprecated since v6.2.1 (ag-grid v28.2.1) Use seriesId. */"
    }
  },
  "AgChartLegendLabelOptions": {
    "meta": {},
    "type": {
      "maxLength?": "number",
      "color?": "CssColor",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "formatter?": "(params: AgChartLegendLabelFormatterParams) => string"
    },
    "docs": {
      "maxLength?": "/** If the label text exceeds the maximum length, it will be truncated and an ellipsis will be appended to indicate this. */",
      "color?": "/** The colour of the text. */",
      "fontStyle?": "/** The font style to use for the legend. */",
      "fontWeight?": "/** The font weight to use for the legend. */",
      "fontSize?": "/** The font size in pixels to use for the legend. */",
      "fontFamily?": "/** The font family to use for the legend. */",
      "formatter?": "/** Function used to render legend labels. Where `id` is a series ID, `itemId` is component ID within a series, such as a field name or an item index. */"
    }
  },
  "AgChartLegendItemOptions": {
    "meta": {},
    "type": {
      "marker?": "AgChartLegendMarkerOptions",
      "label?": "AgChartLegendLabelOptions",
      "maxWidth?": "PixelSize",
      "paddingX?": "PixelSize",
      "paddingY?": "PixelSize",
      "toggleSeriesVisible?": "boolean"
    },
    "docs": {
      "marker?": "/** Configuration for the legend markers. */",
      "label?": "/** Configuration for the legend labels. */",
      "maxWidth?": "/** Used to constrain the width of legend items. */",
      "paddingX?": "/** The horizontal spacing in pixels to use between legend items. */",
      "paddingY?": "/** The vertical spacing in pixels to use between legend items. */",
      "toggleSeriesVisible?": "/** Set to `false` to turn off toggling of the series visibility in the chart when the legend item is clicked. */"
    }
  },
  "AgChartLegendEvent": {
    "meta": { "typeParams": ["T extends string"] },
    "type": {
      "type": "T",
      "seriesId": "string",
      "itemId": "string",
      "enabled": "boolean"
    },
    "docs": {
      "seriesId": "/** Series id */",
      "itemId": "/** Legend item id - usually yKey value for cartesian series. */",
      "enabled": "/** Whether the legend item is currently enabled or not. */"
    }
  },
  "AgChartLegendClickEvent": {
    "meta": {},
    "type": {
      "type": "T",
      "seriesId": "string",
      "itemId": "string",
      "enabled": "boolean"
    },
    "docs": {
      "seriesId": "/** Series id */",
      "itemId": "/** Legend item id - usually yKey value for cartesian series. */",
      "enabled": "/** Whether the legend item is currently enabled or not. */"
    }
  },
  "AgChartLegendDoubleClickEvent": {
    "meta": {},
    "type": {
      "type": "T",
      "seriesId": "string",
      "itemId": "string",
      "enabled": "boolean"
    },
    "docs": {
      "seriesId": "/** Series id */",
      "itemId": "/** Legend item id - usually yKey value for cartesian series. */",
      "enabled": "/** Whether the legend item is currently enabled or not. */"
    }
  },
  "AgChartLegendListeners": {
    "meta": {},
    "type": {
      "legendItemClick?": "(event: AgChartLegendClickEvent) => void",
      "legendItemDoubleClick?": "(event: AgChartLegendDoubleClickEvent) => void"
    },
    "docs": {
      "legendItemClick?": "/** The listener to call when a legend item is clicked. */",
      "legendItemDoubleClick?": "/** The listener to call when a legend item is double clicked. */"
    }
  },
  "AgChartLegendOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "position?": "AgChartLegendPosition",
      "orientation?": "AgChartOrientation",
      "maxWidth?": "PixelSize",
      "maxHeight?": "PixelSize",
      "spacing?": "PixelSize",
      "item?": "AgChartLegendItemOptions",
      "reverseOrder?": "boolean",
      "listeners?": "AgChartLegendListeners",
      "pagination?": "AgChartLegendPaginationOptions"
    },
    "docs": {
      "enabled?": "/** Whether or not to show the legend. */",
      "position?": "/** Where the legend should show in relation to the chart. */",
      "orientation?": "/** How the legend items should be arranged. */",
      "maxWidth?": "/** Used to constrain the width of the legend. */",
      "maxHeight?": "/** Used to constrain the height of the legend. */",
      "spacing?": "/** The spacing in pixels to use outside the legend. */",
      "item?": "/** Configuration for the legend items that consist of a marker and a label. */",
      "reverseOrder?": "/** Reverse the display order of legend items if `true`. */",
      "listeners?": "/** Optional callbacks for specific legend-related events. */"
    }
  },
  "AgChartLegendPaginationOptions": {
    "meta": {},
    "type": {
      "marker?": "AgPaginationMarkerOptions",
      "activeStyle?": "AgPaginationMarkerStyle",
      "inactiveStyle?": "AgPaginationMarkerStyle",
      "highlightStyle?": "AgPaginationMarkerStyle",
      "label?": "AgPaginationLabelOptions"
    },
    "docs": {
      "marker?": "/** Configuration for the pagination markers. */",
      "activeStyle?": "/** Configuration for pagination buttons when a button is active. */",
      "inactiveStyle?": "/** Configuration for pagination buttons when a button is inactive. */",
      "highlightStyle?": "/** Configuration for pagination buttons when a button is hovered over. */",
      "label?": "/** Configuration for the pagination label. */"
    }
  },
  "AgPaginationMarkerOptions": {
    "meta": {},
    "type": {
      "size?": "PixelSize",
      "shape?": "MarkerShape",
      "padding?": "PixelSize"
    },
    "docs": {
      "size?": "/** The size in pixels of the pagination buttons. */",
      "shape?": "/** If set, overrides the marker shape for the pagination buttons. If not set, the pagination buttons will default to the `'triangle'` marker shape. */",
      "padding?": "/** The inner padding in pixels between a pagination button and the pagination label. */"
    }
  },
  "AgPaginationMarkerStyle": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "fill?": "/** The fill colour to use for the pagination button markers. */",
      "fillOpacity?": "/** Opacity of the pagination buttons. */",
      "stroke?": "/** The colour to use for the button strokes. */",
      "strokeWidth?": "/** The width in pixels of the button strokes. */",
      "strokeOpacity?": "/** Opacity of the button strokes. */"
    }
  },
  "AgPaginationLabelOptions": {
    "meta": {},
    "type": {
      "color?": "CssColor",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily"
    },
    "docs": {
      "color?": "/** The colour of the text. */",
      "fontStyle?": "/** The font style to use for the pagination label. */",
      "fontWeight?": "/** The font weight to use for the pagination label. */",
      "fontSize?": "/** The font size in pixels to use for the pagination label. */",
      "fontFamily?": "/** The font family to use for the pagination label. */"
    }
  },
  "AgChartTooltipOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "class?": "string",
      "tracking?": "boolean | undefined",
      "range?": "AgChartInteractionRange",
      "delay?": "number"
    },
    "docs": {
      "enabled?": "/** Set to false to disable tooltips for all series in the chart. */",
      "class?": "/** A class name to be added to the tooltip element of the chart. */",
      "tracking?": "/** @deprecated since v7.2.0 (ag-grid v29.2.0) If true, for series with markers the tooltip will be shown to the closest marker. */",
      "range?": "/** Range from a point that triggers the tooltip to show. */",
      "delay?": "/** The time interval (in milliseconds) after which the tooltip is shown. */"
    }
  },
  "AgChartBackground": {
    "meta": {},
    "type": { "visible?": "boolean", "fill?": "CssColor" },
    "docs": {
      "visible?": "/** Whether or not the background should be visible. */",
      "fill?": "/** Colour of the chart background. */"
    }
  },
  "AgChartEvent": {
    "meta": { "typeParams": ["T extends string"] },
    "type": { "type": "T", "event": "Event" }
  },
  "AgNodeBaseClickEvent": {
    "meta": { "typeParams": ["T extends string"] },
    "type": {
      "type": "T",
      "series": "any",
      "seriesId": "string",
      "datum": "any",
      "xKey?": "string",
      "yKey?": "string",
      "sizeKey?": "string",
      "labelKey?": "string",
      "colorKey?": "string",
      "angleKey?": "string",
      "calloutLabelKey?": "string",
      "sectorLabelKey?": "string",
      "radiusKey?": "string",
      "event": "Event"
    },
    "docs": {
      "type": "/** Event type. */",
      "series": "/** @deprecated since v6.2.1 (ag-grid v28.2.1) Use seriesId to get the series ID. */",
      "seriesId": "/** Series ID, as specified in series.id (or generated if not specified) */",
      "datum": "/** Datum from the chart or series data array. */",
      "xKey?": "/** xKey as specified on series options */",
      "yKey?": "/** yKey as specified on series options */",
      "sizeKey?": "/** sizeKey as specified on series options */",
      "labelKey?": "/** labelKey as specified on series options */",
      "colorKey?": "/** colorKey as specified on series options */",
      "angleKey?": "/** angleKey as specified on series options */",
      "calloutLabelKey?": "/** calloutLabelKey as specified on series options */",
      "sectorLabelKey?": "/** sectorLabelKey as specified on series options */",
      "radiusKey?": "/** radiusKey as specified on series options */"
    }
  },
  "AgNodeClickEvent": {
    "meta": {},
    "type": {
      "type": "T",
      "series": "any",
      "seriesId": "string",
      "datum": "any",
      "xKey?": "string",
      "yKey?": "string",
      "sizeKey?": "string",
      "labelKey?": "string",
      "colorKey?": "string",
      "angleKey?": "string",
      "calloutLabelKey?": "string",
      "sectorLabelKey?": "string",
      "radiusKey?": "string",
      "event": "Event"
    },
    "docs": {
      "type": "/** Event type. */",
      "series": "/** @deprecated since v6.2.1 (ag-grid v28.2.1) Use seriesId to get the series ID. */",
      "seriesId": "/** Series ID, as specified in series.id (or generated if not specified) */",
      "datum": "/** Datum from the chart or series data array. */",
      "xKey?": "/** xKey as specified on series options */",
      "yKey?": "/** yKey as specified on series options */",
      "sizeKey?": "/** sizeKey as specified on series options */",
      "labelKey?": "/** labelKey as specified on series options */",
      "colorKey?": "/** colorKey as specified on series options */",
      "angleKey?": "/** angleKey as specified on series options */",
      "calloutLabelKey?": "/** calloutLabelKey as specified on series options */",
      "sectorLabelKey?": "/** sectorLabelKey as specified on series options */",
      "radiusKey?": "/** radiusKey as specified on series options */"
    }
  },
  "AgNodeDoubleClickEvent": {
    "meta": {},
    "type": {
      "type": "T",
      "series": "any",
      "seriesId": "string",
      "datum": "any",
      "xKey?": "string",
      "yKey?": "string",
      "sizeKey?": "string",
      "labelKey?": "string",
      "colorKey?": "string",
      "angleKey?": "string",
      "calloutLabelKey?": "string",
      "sectorLabelKey?": "string",
      "radiusKey?": "string",
      "event": "Event"
    },
    "docs": {
      "type": "/** Event type. */",
      "series": "/** @deprecated since v6.2.1 (ag-grid v28.2.1) Use seriesId to get the series ID. */",
      "seriesId": "/** Series ID, as specified in series.id (or generated if not specified) */",
      "datum": "/** Datum from the chart or series data array. */",
      "xKey?": "/** xKey as specified on series options */",
      "yKey?": "/** yKey as specified on series options */",
      "sizeKey?": "/** sizeKey as specified on series options */",
      "labelKey?": "/** labelKey as specified on series options */",
      "colorKey?": "/** colorKey as specified on series options */",
      "angleKey?": "/** angleKey as specified on series options */",
      "calloutLabelKey?": "/** calloutLabelKey as specified on series options */",
      "sectorLabelKey?": "/** sectorLabelKey as specified on series options */",
      "radiusKey?": "/** radiusKey as specified on series options */"
    }
  },
  "AgChartClickEvent": {
    "meta": {},
    "type": { "type": "T", "event": "Event" }
  },
  "AgChartDoubleClickEvent": {
    "meta": {},
    "type": { "type": "T", "event": "Event" }
  },
  "AgBaseChartListeners": {
    "meta": {},
    "type": {
      "seriesNodeClick?": "(event: AgNodeClickEvent) => any",
      "seriesNodeDoubleClick?": "(event: AgNodeDoubleClickEvent) => any",
      "click?": "(event: AgChartClickEvent) => any",
      "doubleClick?": "(event: AgChartDoubleClickEvent) => any"
    },
    "docs": {
      "seriesNodeClick?": "/** The listener to call when a node (marker, column, bar, tile or a pie sector) in any series is clicked. In case a chart has multiple series, the chart's `seriesNodeClick` event can be used to listen to `nodeClick` events of all the series at once. */",
      "seriesNodeDoubleClick?": "/** The listener to call when a node (marker, column, bar, tile or a pie sector) in any series is double clicked. In case a chart has multiple series, the chart's `seriesNodeDoubleClick` event can be used to listen to `nodeDoubleClick` events of all the series at once. */",
      "click?": "/** The listener to call to signify a general click on the chart by the user. */",
      "doubleClick?": "/** The listener to call to signify a double click on the chart by the user. */"
    }
  },
  "AgBaseChartOptions": {
    "meta": { "doc": "/** Configuration common to all charts.  */" },
    "type": {
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "seriesPadding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "footnote?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "highlightRange?": "'tooltip' | 'node'",
      "theme?": "string | AgChartTheme",
      "overlays?": "AgChartOverlaysOptions"
    },
    "docs": {
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "seriesPadding?": "/** Configuration for the padding around the series. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "footnote?": "/** Configuration for the footnote shown at the bottom of the chart. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightRange?": "/** By default, nodes will be highlighted when the cursor is within the `tooltip.range`. Set this to `'node'` to highlight nodes when within the `series[].nodeClickRange`. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */",
      "overlays?": "/** HTML overlays */"
    }
  },
  "AgBaseAxisOptions": {
    "meta": {},
    "type": { "keys?": "string[]", "thickness?": "PixelSize" },
    "docs": {
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCartesianAxisPosition": {
    "meta": { "isTypeAlias": true },
    "type": "'top' | 'right' | 'bottom' | 'left'"
  },
  "AgAxisLineOptions": {
    "meta": {},
    "type": { "width?": "PixelSize", "color?": "CssColor" },
    "docs": {
      "width?": "/** The width in pixels of the axis line. */",
      "color?": "/** The colour of the axis line. */"
    }
  },
  "AgAxisBaseTickOptions": {
    "meta": {},
    "type": {
      "width?": "PixelSize",
      "size?": "PixelSize",
      "color?": "CssColor",
      "values?": "any[]",
      "minSpacing?": "number",
      "maxSpacing?": "number"
    },
    "docs": {
      "width?": "/** The width in pixels of the axis ticks (and corresponding grid line). */",
      "size?": "/** The length in pixels of the axis ticks. */",
      "color?": "/** The colour of the axis ticks. */",
      "values?": "/** Array of values in axis units to display as ticks along the axis.\n     * The values in this array must be compatible with the axis type.\n     */",
      "minSpacing?": "/** Minimum gap in pixels between tick lines.\n     */",
      "maxSpacing?": "/** Maximum gap in pixels between tick lines.\n     */"
    }
  },
  "AgAxisCategoryTickOptions": {
    "meta": {},
    "type": {
      "width?": "PixelSize",
      "size?": "PixelSize",
      "color?": "CssColor",
      "values?": "any[]",
      "minSpacing?": "number",
      "maxSpacing?": "number"
    },
    "docs": {
      "width?": "/** The width in pixels of the axis ticks (and corresponding grid line). */",
      "size?": "/** The length in pixels of the axis ticks. */",
      "color?": "/** The colour of the axis ticks. */",
      "values?": "/** Array of values in axis units to display as ticks along the axis.\n     * The values in this array must be compatible with the axis type.\n     */",
      "minSpacing?": "/** Minimum gap in pixels between tick lines.\n     */",
      "maxSpacing?": "/** Maximum gap in pixels between tick lines.\n     */"
    }
  },
  "AgAxisNumberTickOptions": {
    "meta": {},
    "type": {
      "count?": "number",
      "interval?": "number",
      "width?": "PixelSize",
      "size?": "PixelSize",
      "color?": "CssColor",
      "values?": "any[]",
      "minSpacing?": "number",
      "maxSpacing?": "number"
    },
    "docs": {
      "count?": "/** A hint of how many ticks to use across an axis.\n     * The axis is not guaranteed to use exactly this number of ticks, but will try to use a number of ticks that is close to the number given.\n     * @deprecated since v7.1.0 (ag-grid v29.1.0) Use tick.interval or tick.minSpacing and tick.maxSpacing instead.\n     */",
      "interval?": "/** The step value between ticks specified as a number. If the configured interval results in too many ticks given the chart size, it will be ignored.\n     */",
      "width?": "/** The width in pixels of the axis ticks (and corresponding grid line). */",
      "size?": "/** The length in pixels of the axis ticks. */",
      "color?": "/** The colour of the axis ticks. */",
      "values?": "/** Array of values in axis units to display as ticks along the axis.\n     * The values in this array must be compatible with the axis type.\n     */",
      "minSpacing?": "/** Minimum gap in pixels between tick lines.\n     */",
      "maxSpacing?": "/** Maximum gap in pixels between tick lines.\n     */"
    }
  },
  "AgAxisTimeTickOptions": {
    "meta": {},
    "type": {
      "count?": "any",
      "interval?": "any",
      "width?": "PixelSize",
      "size?": "PixelSize",
      "color?": "CssColor",
      "values?": "any[]",
      "minSpacing?": "number",
      "maxSpacing?": "number"
    },
    "docs": {
      "count?": "/** A hint of how many ticks to use across an axis.\n     * The axis is not guaranteed to use exactly this number of ticks, but will try to use a number of ticks that is close to the number given.\n     * The following intervals from the `agCharts.time` namespace can be used:\n     * `millisecond, second, minute, hour, day, sunday, monday, tuesday, wednesday, thursday, friday, saturday, month, year, utcMinute, utcHour, utcDay, utcMonth, utcYear`.\n     * Derived intervals can be created by using the `every` method on the default ones. For example, `agCharts.time.month.every(2)` will return a derived interval that will make the axis place ticks for every other month. */",
      "interval?": "/** The step value between ticks specified as a TimeInterval or a number. If the configured interval results in dense ticks given the data domain, the ticks will be removed.\n     */",
      "width?": "/** The width in pixels of the axis ticks (and corresponding grid line). */",
      "size?": "/** The length in pixels of the axis ticks. */",
      "color?": "/** The colour of the axis ticks. */",
      "values?": "/** Array of values in axis units to display as ticks along the axis.\n     * The values in this array must be compatible with the axis type.\n     */",
      "minSpacing?": "/** Minimum gap in pixels between tick lines.\n     */",
      "maxSpacing?": "/** Maximum gap in pixels between tick lines.\n     */"
    }
  },
  "AgAxisLabelFormatterParams": {
    "meta": {},
    "type": {
      "value": "any",
      "index": "number",
      "fractionDigits?": "number",
      "formatter?": "(x: any) => string"
    }
  },
  "AgAxisLabelOptions": {
    "meta": {},
    "type": {
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "padding?": "PixelSize",
      "color?": "CssColor",
      "rotation?": "number",
      "autoRotate?": "boolean",
      "autoRotateAngle?": "number",
      "avoidCollisions?": "boolean",
      "minSpacing?": "PixelSize",
      "format?": "string",
      "formatter?": "(params: AgAxisLabelFormatterParams) => string | undefined"
    },
    "docs": {
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels */",
      "padding?": "/** Padding in pixels between the axis label and the tick. */",
      "color?": "/** The colour to use for the labels */",
      "rotation?": "/** The rotation of the axis labels in degrees. Note: for integrated charts the default is 335 degrees, unless the axis shows grouped or default categories (indexes). The first row of labels in a grouped category axis is rotated perpendicular to the axis line. */",
      "autoRotate?": "/** If specified and axis labels may collide, they are rotated so that they are positioned at the supplied angle. This is enabled by default for category. If the `rotation` property is specified, it takes precedence. */",
      "autoRotateAngle?": "/** If autoRotate is enabled, specifies the rotation angle to use when autoRotate is activated. Defaults to an angle of 335 degrees if unspecified. */",
      "avoidCollisions?": "/** Avoid axis label collision by automatically reducing the number of ticks displayed. If set to `false`, axis labels may collide. */",
      "minSpacing?": "/** Minimum gap in pixels between the axis labels before being removed to avoid collisions. */",
      "format?": "/** Format string used when rendering labels. */",
      "formatter?": "/** Function used to render axis labels. If `value` is a number, `fractionDigits` will also be provided, which indicates the number of fractional digits used in the step between ticks; for example, a tick step of `0.0005` would have `fractionDigits` set to `4` */"
    }
  },
  "AgAxisGridStyle": {
    "meta": {},
    "type": { "stroke?": "CssColor", "lineDash?": "PixelSize[]" },
    "docs": {
      "stroke?": "/** The colour of the grid line. */",
      "lineDash?": "/** Defines how the gridlines are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */"
    }
  },
  "AgCartesianAxisType": {
    "meta": { "isTypeAlias": true },
    "type": "'category' | 'groupedCategory' | 'number' | 'log' | 'time'"
  },
  "AgBaseCartesianAxisOptions": {
    "meta": { "doc": "/** Configuration for axes in cartesian charts. */" },
    "type": {
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "crossLines?": "AgCrossLineOptions[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCrossLineOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "type": "'line' | 'range'",
      "value?": "DataValue",
      "range?": "[ DataValue, DataValue ]",
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "label?": "AgCrossLineLabelOptions"
    },
    "docs": {
      "enabled?": "/** Whether or not to show the cross line. */",
      "type": "/** Type of cross line to render. */",
      "value?": "/** The data value at which the line should be positioned. This property is used if the crossLine type is `line`. */",
      "range?": "/** The range of values from the data used to display lines at a desired chart region. This property is only used for crossLine type `range`. */",
      "fill?": "/** The colour to use for the fill of the range. */",
      "fillOpacity?": "/** The opacity of the fill for the range. */",
      "stroke?": "/** The colour of the stroke for the lines. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the lines. */",
      "strokeOpacity?": "/** The opacity of the stroke for the lines. */",
      "lineDash?": "/** Defines how the line stroke is rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "label?": "/** Configuration for the crossLine label. */"
    }
  },
  "AgCrossLineLabelOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "text?": "string",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "padding?": "PixelSize",
      "color?": "CssColor",
      "position?": "AgCrossLineLabelPosition",
      "rotation?": "number"
    },
    "docs": {
      "enabled?": "/** Whether or not to show the cross line label. */",
      "text?": "/** The text to show in the label. */",
      "fontStyle?": "/** The font style to use for the label. */",
      "fontWeight?": "/** The font weight to use for the label. */",
      "fontSize?": "/** The font size in pixels to use for the label. */",
      "fontFamily?": "/** The font family to use for the label. */",
      "padding?": "/** Padding in pixels between the label and the edge of the crossLine. */",
      "color?": "/** The colour to use for the label. */",
      "position?": "/** The position of the crossLine label. */",
      "rotation?": "/** The rotation of the crossLine label in degrees. */"
    }
  },
  "AgCrossLineLabelPosition": {
    "meta": { "isTypeAlias": true },
    "type": "'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'inside' | 'insideLeft' | 'insideRight' | 'insideTop' | 'insideBottom' | 'insideTopLeft' | 'insideBottomLeft' | 'insideTopRight' | 'insideBottomRight'"
  },
  "AgNumberAxisOptions": {
    "meta": {},
    "type": {
      "type": "'number'",
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "crossLines?": "AgCrossLineOptions[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgLogAxisOptions": {
    "meta": {},
    "type": {
      "type": "'log'",
      "nice?": "boolean",
      "min?": "number",
      "max?": "number",
      "base?": "number",
      "tick?": "AgAxisNumberTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "crossLines?": "AgCrossLineOptions[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). This value can be any non-zero number less than the configured `max` value. */",
      "max?": "/** User override for the automatically determined max value (based on series data). This value can be any non-zero number more than the configured `min` value. */",
      "base?": "/** The base of the logarithm used. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCategoryAxisOptions": {
    "meta": {},
    "type": {
      "type": "'category'",
      "paddingInner?": "Ratio",
      "paddingOuter?": "Ratio",
      "groupPaddingInner?": "Ratio",
      "tick?": "AgAxisCategoryTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "crossLines?": "AgCrossLineOptions[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "paddingInner?": "/** The size of the gap between the categories as a proportion, between 0 and 1. This value is a fraction of the “step”, which is the interval between the start of a band and the start of the next band.\n     * Default: `0.2`\n     */",
      "paddingOuter?": "/** The padding on the outside i.e. left and right of the first and last category. In association with `paddingInner`, this value can be between 0 and 1.\n     * Default: `0.3`\n     */",
      "groupPaddingInner?": "/** This property is for grouped column/bar series plotted on a category axis. It is a proportion between 0 and 1 which determines the size of the gap between the bars or columns within a single group along the axis.\n     * Default: `0.2`\n     */",
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgGroupedCategoryAxisOptions": {
    "meta": {},
    "type": {
      "type": "'groupedCategory'",
      "tick?": "AgAxisCategoryTickOptions",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "crossLines?": "AgCrossLineOptions[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "tick?": "/** Configuration for the axis ticks. */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgTimeAxisOptions": {
    "meta": {},
    "type": {
      "type": "'time'",
      "nice?": "boolean",
      "tick?": "AgAxisTimeTickOptions",
      "min?": "Date | number",
      "max?": "Date | number",
      "position?": "AgCartesianAxisPosition",
      "title?": "AgAxisCaptionOptions",
      "line?": "AgAxisLineOptions",
      "label?": "AgAxisLabelOptions",
      "gridStyle?": "AgAxisGridStyle[]",
      "crossLines?": "AgCrossLineOptions[]",
      "keys?": "string[]",
      "thickness?": "PixelSize"
    },
    "docs": {
      "nice?": "/** If 'true', the range will be rounded up to ensure nice equal spacing between the ticks. */",
      "tick?": "/** Configuration for the axis ticks. */",
      "min?": "/** User override for the automatically determined min value (based on series data). */",
      "max?": "/** User override for the automatically determined max value (based on series data). */",
      "position?": "/** The position on the chart where the axis should be rendered. */",
      "title?": "/** Configuration for the title shown next to the axis. */",
      "line?": "/** Configuration for the axis line. */",
      "label?": "/** Configuration for the axis labels, shown next to the ticks. */",
      "gridStyle?": "/** Configuration of the lines used to form the grid in the chart area. */",
      "crossLines?": "/** Add cross lines or regions corresponding to data values. */",
      "thickness?": "/** If set to a non-zero value, the axis will have the specified thickness regardless of label size. */"
    }
  },
  "AgCartesianAxisOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgNumberAxisOptions | AgLogAxisOptions | AgCategoryAxisOptions | AgGroupedCategoryAxisOptions | AgTimeAxisOptions"
  },
  "AgSeriesHighlightMarkerStyle": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "fill?": "/** The fill colour of a marker when tapped or hovered over. Use `undefined` for no highlight. */",
      "fillOpacity?": "/** The opacity of the fill for the highlighted item. */",
      "stroke?": "/** The stroke colour of a marker when tapped or hovered over. Use `undefined` for no highlight. */",
      "strokeWidth?": "/** The stroke width of a marker when tapped or hovered over. Use `undefined` for no highlight. */"
    }
  },
  "AgSeriesHighlightSeriesStyle": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "dimOpacity?": "Opacity",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "dimOpacity?": "/** The opacity of the whole series (area line, area fill, labels and markers, if any) when another chart series or another stack level in the same area series is highlighted by hovering a data point or a legend item. Use `undefined` or `1` for no dimming. */",
      "strokeWidth?": "/** The stroke width of the area line when one of the markers is tapped or hovered over, or when a tooltip is shown for a data point, even when series markers are disabled. Use `undefined` for no highlight. */"
    }
  },
  "AgSeriesHighlightStyle": {
    "meta": {},
    "type": {
      "item?": "AgSeriesHighlightMarkerStyle",
      "series?": "AgSeriesHighlightSeriesStyle"
    },
    "docs": {
      "item?": "/** Highlight style used for an individual marker when tapped or hovered over. */",
      "series?": "/** Highlight style used for whole series when one of its markers is tapped or hovered over. */"
    }
  },
  "AgSeriesNodeClickParams": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "type": "'nodeClick'",
      "series": "any",
      "seriesId": "string",
      "datum": "DatumType",
      "xKey?": "string",
      "yKey?": "string",
      "sizeKey?": "string",
      "labelKey?": "string",
      "colorKey?": "string",
      "angleKey?": "string",
      "calloutLabelKey?": "string",
      "sectorLabelKey?": "string",
      "radiusKey?": "string"
    },
    "docs": {
      "type": "/** Event type. */",
      "series": "/** @deprecated since v6.2.1 (ag-grid v28.2.1) Use seriesId to get the series ID. */",
      "seriesId": "/** Series ID, as specified in series.id (or generated if not specified) */",
      "datum": "/** Datum from the series data array. */",
      "xKey?": "/** xKey as specified on series options */",
      "yKey?": "/** yKey as specified on series options */",
      "sizeKey?": "/** sizeKey as specified on series options */",
      "labelKey?": "/** labelKey as specified on series options */",
      "colorKey?": "/** colorKey as specified on series options */",
      "angleKey?": "/** angleKey as specified on series options */",
      "calloutLabelKey?": "/** calloutLabelKey as specified on series options */",
      "sectorLabelKey?": "/** sectorLabelKey as specified on series options */",
      "radiusKey?": "/** radiusKey as specified on series options */"
    }
  },
  "AgSeriesListeners": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "nodeClick?": "(params: AgSeriesNodeClickParams<DatumType>) => void",
      "nodeDoubleClick?": "(params: AgSeriesNodeClickParams<DatumType>) => void"
    },
    "docs": {
      "nodeClick?": "/** The listener to call when a node (marker, column, bar, tile or a pie sector) in the series is clicked. */",
      "nodeDoubleClick?": "/** The listener to call when a node (marker, column, bar, tile or a pie sector) in the series is double clicked. */"
    }
  },
  "AgBaseSeriesOptions": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgSeriesListeners<DatumType>",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgTooltipRendererResult": {
    "meta": {},
    "type": {
      "title?": "string",
      "content?": "string",
      "color?": "string",
      "backgroundColor?": "string"
    },
    "docs": {
      "title?": "/** Title text for the tooltip header. */",
      "content?": "/** Content text for the tooltip body. */",
      "color?": "/** Tooltip title text color. */",
      "backgroundColor?": "/** Tooltip title background color. */"
    }
  },
  "AgSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "datum": "any",
      "title?": "string",
      "color?": "CssColor",
      "seriesId": "string"
    },
    "docs": {
      "datum": "/** Datum from the series data array that the tooltip is being rendered for. */",
      "title?": "/** Series title or yName depending on series configuration. */",
      "color?": "/** Series primary colour, as selected from the active theme, series options or formatter. */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgCartesianSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "xKey": "string",
      "xValue?": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue?": "any",
      "yName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor",
      "seriesId": "string"
    },
    "docs": {
      "xKey": "/** xKey as specified on series options. */",
      "xValue?": "/** xValue as read from series data via the xKey property. */",
      "xName?": "/** xName as specified on series options. */",
      "yKey": "/** yKey as specified on series options. */",
      "yValue?": "/** yValue as read from series data via the yKey property. */",
      "yName?": "/** yName as specified on series options. */",
      "datum": "/** Datum from the series data array that the tooltip is being rendered for. */",
      "title?": "/** Series title or yName depending on series configuration. */",
      "color?": "/** Series primary colour, as selected from the active theme, series options or formatter. */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgPolarSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "angleKey": "string",
      "angleValue?": "any",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusValue?": "any",
      "radiusName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor",
      "seriesId": "string"
    },
    "docs": {
      "angleKey": "/** angleKey as specified on series options. */",
      "angleValue?": "/** angleValue as read from series data via the angleKey property. */",
      "angleName?": "/** angleName as specified on series options. */",
      "radiusKey?": "/** radiusKey as specified on series options. */",
      "radiusValue?": "/** radiusValue as read from series data via the radiusKey property. */",
      "radiusName?": "/** radiusName as specified on series options. */",
      "datum": "/** Datum from the series data array that the tooltip is being rendered for. */",
      "title?": "/** Series title or yName depending on series configuration. */",
      "color?": "/** Series primary colour, as selected from the active theme, series options or formatter. */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgScatterSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "sizeKey?": "string",
      "sizeName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "xKey": "string",
      "xValue?": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue?": "any",
      "yName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor",
      "seriesId": "string"
    },
    "docs": {
      "sizeKey?": "/** sizeKey as specified on series options. */",
      "sizeName?": "/** sizeName as specified on series options. */",
      "labelKey?": "/** labelKey as specified on series options. */",
      "labelName?": "/** labelName as specified on series options. */",
      "xKey": "/** xKey as specified on series options. */",
      "xValue?": "/** xValue as read from series data via the xKey property. */",
      "xName?": "/** xName as specified on series options. */",
      "yKey": "/** yKey as specified on series options. */",
      "yValue?": "/** yValue as read from series data via the yKey property. */",
      "yName?": "/** yName as specified on series options. */",
      "datum": "/** Datum from the series data array that the tooltip is being rendered for. */",
      "title?": "/** Series title or yName depending on series configuration. */",
      "color?": "/** Series primary colour, as selected from the active theme, series options or formatter. */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgSeriesMarker": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "shape?": "MarkerShape",
      "size?": "PixelSize",
      "maxSize?": "PixelSize",
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "enabled?": "/** Whether or not to show markers. */",
      "shape?": "/** The shape to use for the markers. You can also supply a custom marker by providing a `Marker` subclass. */",
      "size?": "/** The size in pixels of the markers. */",
      "maxSize?": "/** For series where the size of the marker is determined by the data, this determines the largest size a marker can be in pixels. */",
      "fill?": "/** The colour to use for marker fills. If this is not specified, the markers will take their fill from the series. */",
      "fillOpacity?": "/** Opacity of the marker fills. */",
      "stroke?": "/** The colour to use for marker strokes. If this is not specified, the markers will take their stroke from the series. */",
      "strokeWidth?": "/** The width in pixels of the marker stroke. If this is not specified, the markers will take their stroke width from the series. */",
      "strokeOpacity?": "/** Opacity of the marker strokes. */"
    }
  },
  "AgSeriesMarkerFormatterParams": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "datum": "DatumType",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "size": "number",
      "highlighted": "boolean",
      "seriesId": "string"
    }
  },
  "AgCartesianSeriesMarkerFormatterParams": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "xKey": "string",
      "yKey": "string",
      "datum": "DatumType",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "size": "number",
      "highlighted": "boolean",
      "seriesId": "string"
    }
  },
  "AgCartesianSeriesMarkerFormat": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "size?": "PixelSize"
    }
  },
  "AgCartesianSeriesMarkerFormatter": {
    "meta": { "isTypeAlias": true, "typeParams": ["DatumType"] },
    "type": "(params: AgCartesianSeriesMarkerFormatterParams<DatumType>) => AgCartesianSeriesMarkerFormat | undefined"
  },
  "AgCartesianSeriesMarker": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "formatter?": "AgCartesianSeriesMarkerFormatter<DatumType>",
      "enabled?": "boolean",
      "shape?": "MarkerShape",
      "size?": "PixelSize",
      "maxSize?": "PixelSize",
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "formatter?": "/** Function used to return formatting for individual markers, based on the supplied information. If the current marker is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */",
      "enabled?": "/** Whether or not to show markers. */",
      "shape?": "/** The shape to use for the markers. You can also supply a custom marker by providing a `Marker` subclass. */",
      "size?": "/** The size in pixels of the markers. */",
      "maxSize?": "/** For series where the size of the marker is determined by the data, this determines the largest size a marker can be in pixels. */",
      "fill?": "/** The colour to use for marker fills. If this is not specified, the markers will take their fill from the series. */",
      "fillOpacity?": "/** Opacity of the marker fills. */",
      "stroke?": "/** The colour to use for marker strokes. If this is not specified, the markers will take their stroke from the series. */",
      "strokeWidth?": "/** The width in pixels of the marker stroke. If this is not specified, the markers will take their stroke width from the series. */",
      "strokeOpacity?": "/** Opacity of the marker strokes. */"
    }
  },
  "AgAreaSeriesMarker": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "formatter?": "AgCartesianSeriesMarkerFormatter<DatumType>",
      "enabled?": "boolean",
      "shape?": "MarkerShape",
      "size?": "PixelSize",
      "maxSize?": "PixelSize",
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "formatter?": "/** Function used to return formatting for individual markers, based on the supplied information. If the current marker is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */",
      "enabled?": "/** Whether or not to show markers. */",
      "shape?": "/** The shape to use for the markers. You can also supply a custom marker by providing a `Marker` subclass. */",
      "size?": "/** The size in pixels of the markers. */",
      "maxSize?": "/** For series where the size of the marker is determined by the data, this determines the largest size a marker can be in pixels. */",
      "fill?": "/** The colour to use for marker fills. If this is not specified, the markers will take their fill from the series. */",
      "fillOpacity?": "/** Opacity of the marker fills. */",
      "stroke?": "/** The colour to use for marker strokes. If this is not specified, the markers will take their stroke from the series. */",
      "strokeWidth?": "/** The width in pixels of the marker stroke. If this is not specified, the markers will take their stroke width from the series. */",
      "strokeOpacity?": "/** Opacity of the marker strokes. */"
    }
  },
  "AgSeriesTooltip": {
    "meta": {},
    "type": { "enabled?": "boolean" },
    "docs": {
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgCartesianSeriesLabelFormatterParams": {
    "meta": {},
    "type": { "seriesId": "string", "value": "number" },
    "docs": {
      "seriesId": "/** The ID of the series. */",
      "value": "/** The value of yKey as specified on series options. */"
    }
  },
  "AgCartesianSeriesLabelOptions": {
    "meta": {},
    "type": {
      "formatter?": "(params: AgCartesianSeriesLabelFormatterParams) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "formatter?": "/** Function used to turn 'yKey' values into text to be displayed by a label. By default the values are simply stringified. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgLineSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "format?": "string",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgLineSeriesOptions": {
    "meta": {
      "typeParams": ["DatumType = any"],
      "doc": "/** Configuration for line series. */"
    },
    "type": {
      "type?": "'line'",
      "marker?": "AgCartesianSeriesMarker<DatumType>",
      "xKey?": "string",
      "yKey?": "string",
      "xName?": "string",
      "yName?": "string",
      "title?": "string",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "label?": "AgCartesianSeriesLabelOptions",
      "tooltip?": "AgLineSeriesTooltip",
      "listeners?": "AgSeriesListeners<DatumType>",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "yKey?": "/** The key to use to retrieve y-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yName?": "/** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "title?": "/** The title to use for the series. Defaults to `yName` if it exists, or `yKey` if not. */",
      "stroke?": "/** The colour of the stroke for the lines. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the lines. */",
      "strokeOpacity?": "/** The opacity of the stroke for the lines. */",
      "lineDash?": "/** Defines how the line stroke is rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "label?": "/** Configuration for the labels shown on top of data points. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgScatterSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgScatterSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgScatterSeriesLabelOptions": {
    "meta": {},
    "type": {
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgScatterSeriesMarker": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "domain?": "[ number, number ]",
      "formatter?": "AgCartesianSeriesMarkerFormatter<DatumType>",
      "enabled?": "boolean",
      "shape?": "MarkerShape",
      "size?": "PixelSize",
      "maxSize?": "PixelSize",
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "strokeOpacity?": "Opacity"
    },
    "docs": {
      "domain?": "/** If sizeKey is used, explicitly specifies the extent of the domain of it's values. */",
      "formatter?": "/** Function used to return formatting for individual markers, based on the supplied information. If the current marker is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */",
      "enabled?": "/** Whether or not to show markers. */",
      "shape?": "/** The shape to use for the markers. You can also supply a custom marker by providing a `Marker` subclass. */",
      "size?": "/** The size in pixels of the markers. */",
      "maxSize?": "/** For series where the size of the marker is determined by the data, this determines the largest size a marker can be in pixels. */",
      "fill?": "/** The colour to use for marker fills. If this is not specified, the markers will take their fill from the series. */",
      "fillOpacity?": "/** Opacity of the marker fills. */",
      "stroke?": "/** The colour to use for marker strokes. If this is not specified, the markers will take their stroke from the series. */",
      "strokeWidth?": "/** The width in pixels of the marker stroke. If this is not specified, the markers will take their stroke width from the series. */",
      "strokeOpacity?": "/** Opacity of the marker strokes. */"
    }
  },
  "AgScatterSeriesOptions": {
    "meta": {
      "typeParams": ["DatumType = any"],
      "doc": "/** Configuration for scatter/bubble series. */"
    },
    "type": {
      "type?": "'scatter'",
      "marker?": "AgScatterSeriesMarker<DatumType>",
      "label?": "AgScatterSeriesLabelOptions",
      "xKey?": "string",
      "yKey?": "string",
      "xName?": "string",
      "yName?": "string",
      "sizeKey?": "string",
      "sizeName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "title?": "string",
      "tooltip?": "AgScatterSeriesTooltip",
      "listeners?": "AgSeriesListeners<DatumType>",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "type?": "/** Configuration for the treemap series.  */",
      "marker?": "/** Configuration for the markers used in the series.  */",
      "label?": "/** Configuration for the labels shown on top of data points.  */",
      "xKey?": "/** The key to use to retrieve x-values from the data.  */",
      "yKey?": "/** The key to use to retrieve y-values from the data.  */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters.  */",
      "yName?": "/** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters.  */",
      "sizeKey?": "/** The key to use to retrieve size values from the data, used to control the size of the markers in bubble charts.  */",
      "sizeName?": "/** A human-readable description of the size values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters.  */",
      "labelKey?": "/** The key to use to retrieve values from the data to use as labels for the markers.  */",
      "labelName?": "/** A human-readable description of the label values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters.  */",
      "title?": "/** The title to use for the series. Defaults to `yName` if it exists, or `yKey` if not.  */",
      "tooltip?": "/** Series-specific tooltip configuration.  */",
      "listeners?": "/** A map of event names to event listeners. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgAreaSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "format?": "string",
      "enabled?": "boolean"
    },
    "docs": {
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgAreaSeriesOptions": {
    "meta": {
      "typeParams": ["DatumType = any"],
      "doc": "/** Configuration for area series. */"
    },
    "type": {
      "type?": "'area'",
      "marker?": "AgAreaSeriesMarker<DatumType>",
      "normalizedTo?": "number",
      "xKey?": "string",
      "yKey?": "string",
      "xName?": "string",
      "yName?": "string",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "shadow?": "AgDropShadowOptions",
      "label?": "AgCartesianSeriesLabelOptions",
      "tooltip?": "AgAreaSeriesTooltip",
      "stacked?": "boolean",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "listeners?": "AgSeriesListeners<DatumType>",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "marker?": "/** Configuration for the markers used in the series. */",
      "normalizedTo?": "/** The number to normalise the area stacks to. For example, if `normalizedTo` is set to `100`, the stacks will all be scaled proportionally so that their total height is always 100. */",
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "yKey?": "/** The key to use to retrieve y-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yName?": "/** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "fill?": "/** The colour to use for the fill of the area. */",
      "stroke?": "/** The colours to use for the stroke of the areas. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the areas. */",
      "fillOpacity?": "/** The opacity of the fill for the area. */",
      "strokeOpacity?": "/** The opacity of the stroke for the areas. */",
      "lineDash?": "/** Defines how the area strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "label?": "/** Configuration for the labels shown on top of data points. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgBarSeriesLabelPlacement": {
    "meta": { "isTypeAlias": true },
    "type": "'inside' | 'outside'"
  },
  "AgBarSeriesLabelOptions": {
    "meta": {},
    "type": {
      "placement?": "AgBarSeriesLabelPlacement",
      "formatter?": "(params: AgCartesianSeriesLabelFormatterParams) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "placement?": "/** Where to render series labels relative to the segments. */",
      "formatter?": "/** Function used to turn 'yKey' values into text to be displayed by a label. By default the values are simply stringified. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgBarSeriesFormatterParams": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "datum": "DatumType",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "highlighted": "boolean",
      "xKey": "string",
      "yKey": "string",
      "seriesId": "string"
    }
  },
  "AgBarSeriesFormat": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize"
    }
  },
  "AgBarSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgCartesianSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgBarSeriesOptions": {
    "meta": {
      "typeParams": ["DatumType = any"],
      "doc": "/** Configuration for bar/column series. */"
    },
    "type": {
      "type?": "'bar' | 'column'",
      "grouped?": "boolean",
      "stacked?": "boolean",
      "stackGroup?": "string",
      "normalizedTo?": "number",
      "xKey?": "string",
      "yKey?": "string",
      "xName?": "string",
      "yName?": "string",
      "flipXY?": "boolean",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "shadow?": "AgDropShadowOptions",
      "label?": "AgBarSeriesLabelOptions",
      "tooltip?": "AgBarSeriesTooltip",
      "formatter?": "(params: AgBarSeriesFormatterParams<DatumType>) => AgBarSeriesFormat",
      "listeners?": "AgSeriesListeners<DatumType>",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "grouped?": "/** Whether to show different y-values as separate bars (grouped) or not (stacked). */",
      "stacked?": "/** An option indicating if the bars/columns should be stacked. */",
      "stackGroup?": "/** An ID to be used to make stacked items appear in separate groups. */",
      "normalizedTo?": "/** The number to normalise the bar stacks to. Has no effect when `grouped` is `true`. For example, if `normalizedTo` is set to `100`, the bar stacks will all be scaled proportionally so that each of their totals is 100. */",
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "yKey?": "/** The keys to use to retrieve y-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yName?": "/** Human-readable description of the y-values. If supplied, a corresponding `yName` will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "fill?": "/** The colour to use for the fill of the area. */",
      "stroke?": "/** The colours to use for the stroke of the bars. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the bars. */",
      "fillOpacity?": "/** The opacity of the fill for the bars. */",
      "strokeOpacity?": "/** The opacity of the stroke for the bars. */",
      "lineDash?": "/** Defines how the bar/column strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "label?": "/** Configuration for the labels shown on bars. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "formatter?": "/** Function used to return formatting for individual bars/columns, based on the given parameters. If the current bar/column is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgHistogramSeriesLabelOptions": {
    "meta": {},
    "type": {
      "formatter?": "(params: AgCartesianSeriesLabelFormatterParams) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "formatter?": "/** Function used to turn 'yKey' values into text to be displayed by a label. By default the values are simply stringified. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgHistogramSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "datum": "AgHistogramBinDatum<any>",
      "xKey": "string",
      "xValue?": "any",
      "xName?": "string",
      "yKey": "string",
      "yValue?": "any",
      "yName?": "string",
      "title?": "string",
      "color?": "CssColor",
      "seriesId": "string"
    },
    "docs": {
      "xKey": "/** xKey as specified on series options. */",
      "xValue?": "/** xValue as read from series data via the xKey property. */",
      "xName?": "/** xName as specified on series options. */",
      "yKey": "/** yKey as specified on series options. */",
      "yValue?": "/** yValue as read from series data via the yKey property. */",
      "yName?": "/** yName as specified on series options. */",
      "datum": "/** Datum from the series data array that the tooltip is being rendered for. */",
      "title?": "/** Series title or yName depending on series configuration. */",
      "color?": "/** Series primary colour, as selected from the active theme, series options or formatter. */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgHistogramSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgHistogramSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgHistogramBinDatum": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "data": "DatumType[]",
      "aggregatedValue": "number",
      "frequency": "number",
      "domain": "[ number, number ]"
    }
  },
  "AgHistogramSeriesOptions": {
    "meta": {
      "typeParams": ["DatumType = any"],
      "doc": "/** Configuration for histogram series. */"
    },
    "type": {
      "type?": "'histogram'",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "strokeWidth?": "PixelSize",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "xKey?": "string",
      "xName?": "string",
      "yKey?": "string",
      "yName?": "string",
      "areaPlot?": "boolean",
      "bins?": "[ number, number ][]",
      "binCount?": "number",
      "aggregation?": "'count' | 'sum' | 'mean'",
      "shadow?": "AgDropShadowOptions",
      "label?": "AgHistogramSeriesLabelOptions",
      "tooltip?": "AgHistogramSeriesTooltip",
      "listeners?": "AgSeriesListeners<DatumType>",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "fill?": "/** The colour of the fill for the histogram bars. */",
      "stroke?": "/** The colour of the stroke for the histogram bars. */",
      "fillOpacity?": "/** The opacity of the fill for the histogram bars. */",
      "strokeOpacity?": "/** The opacity of the stroke for the histogram bars. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the histogram bars. */",
      "lineDash?": "/** Defines how the column strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "xKey?": "/** The key to use to retrieve x-values from the data. */",
      "xName?": "/** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "yKey?": "/** The key to use to retrieve y-values from the data. */",
      "yName?": "/** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */",
      "areaPlot?": "/** For variable width bins, if true the histogram will represent the aggregated `yKey` values using the area of the bar. Otherwise, the height of the var represents the value as per a normal bar chart. This is useful for keeping an undistorted curve displayed when using variable-width bins. */",
      "bins?": "/** Set the bins explicitly. The bins need not be of equal width. Note that `bins` is ignored if `binCount` is also supplied. */",
      "binCount?": "/** The number of bins to try to split the x axis into. Clashes with the `bins` setting. */",
      "aggregation?": "/** Dictates how the bins are aggregated. If set to 'sum', the value shown for the bins will be the total of the yKey values. If set to 'mean', it will display the average yKey value of the bin. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "label?": "/** Configuration for the labels shown on bars. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgPieSeriesLabelOptions": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "offset?": "PixelSize",
      "minAngle?": "number",
      "formatter?": "(params: AgPieSeriesLabelFormatterParams<DatumType>) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "offset?": "/** Distance in pixels between the callout line and the label text. */",
      "minAngle?": "/** Minimum angle in degrees required for a sector to show a label. */",
      "formatter?": "/** A function that allows the modification of the label text based on input parameters. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgPieSeriesSectorLabelOptions": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "positionOffset?": "PixelSize",
      "positionRatio?": "Ratio",
      "formatter?": "(params: AgPieSeriesLabelFormatterParams<DatumType>) => string",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "positionOffset?": "/** Distance in pixels, used to make the label text closer to or further from the center. This offset is applied after positionRatio. */",
      "positionRatio?": "/** Position of labels as a ratio proportional to pie radius (or doughnut thickness). Additional offset in pixels can be applied by using positionOffset. */",
      "formatter?": "/** A function that allows the modification of the label text based on input parameters. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgPieSeriesFormatterParams": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "datum": "DatumType",
      "fill?": "CssColor",
      "stroke?": "CssColor",
      "strokeWidth": "PixelSize",
      "highlighted": "boolean",
      "angleKey": "string",
      "radiusKey?": "string",
      "sectorLabelKey?": "string",
      "seriesId": "string"
    }
  },
  "AgPieSeriesFormat": {
    "meta": {},
    "type": {
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeWidth?": "PixelSize"
    }
  },
  "AgPieSeriesTooltip": {
    "meta": {},
    "type": {
      "renderer?": "(params: AgPieSeriesTooltipRendererParams) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgPieTitleOptions": {
    "meta": {},
    "type": {
      "showInLegend?": "boolean",
      "enabled?": "boolean",
      "text?": "string",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor",
      "spacing?": "number"
    },
    "docs": {
      "enabled?": "/** Whether or not the text should be shown. */",
      "text?": "/** The text to display. */",
      "fontStyle?": "/** The font style to use for the text. */",
      "fontWeight?": "/** The font weight to use for the text. */",
      "fontSize?": "/** The font size in pixels to use for the text. */",
      "fontFamily?": "/** The font family to use for the text. */",
      "color?": "/** The colour to use for the text. */",
      "spacing?": "/** Spacing added to help position the text. */"
    }
  },
  "AgPieSeriesCalloutOptions": {
    "meta": {},
    "type": {
      "colors?": "CssColor[]",
      "length?": "PixelSize",
      "strokeWidth?": "PixelSize"
    },
    "docs": {
      "colors?": "/** The colours to cycle through for the strokes of the callouts. */",
      "length?": "/** The length in pixels of the callout lines. */",
      "strokeWidth?": "/** The width in pixels of the stroke for callout lines. */"
    }
  },
  "AgDoughnutInnerLabel": {
    "meta": {},
    "type": {
      "text": "string",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor",
      "margin?": "PixelSize"
    },
    "docs": {
      "text": "/** The text to show in the inner label. */",
      "fontStyle?": "/** The font style to use for the inner label. */",
      "fontWeight?": "/** The font weight to use for the inner label. */",
      "fontSize?": "/** The font size in pixels to use for the inner label. */",
      "fontFamily?": "/** The font family to use for the inner label. */",
      "color?": "/** The colour to use for the inner label. */",
      "margin?": "/** The margin in pixels before and after the inner label. */"
    }
  },
  "AgDoughnutInnerLabelThemeOptions": {
    "meta": {},
    "type": {
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor",
      "margin?": "PixelSize"
    },
    "docs": {
      "fontStyle?": "/** The font style to use for the inner label. */",
      "fontWeight?": "/** The font weight to use for the inner label. */",
      "fontSize?": "/** The font size in pixels to use for the inner label. */",
      "fontFamily?": "/** The font family to use for the inner label. */",
      "color?": "/** The colour to use for the inner label. */",
      "margin?": "/** The margin in pixels before and after the inner label. */"
    }
  },
  "AgDoughnutInnerCircle": {
    "meta": {},
    "type": { "fill": "CssColor", "fillOpacity?": "Opacity" },
    "docs": {
      "fill": "/** The colour of the fill for the inner circle. */",
      "fillOpacity?": "/** The opacity of the fill for the inner circle. */"
    }
  },
  "AgPieSeriesOptions": {
    "meta": {
      "typeParams": ["DatumType = any"],
      "doc": "/** Configuration for pie/doughnut series. */"
    },
    "type": {
      "type?": "'pie'",
      "title?": "AgPieTitleOptions",
      "label?": "AgPieSeriesLabelOptions<DatumType>",
      "calloutLabel?": "AgPieSeriesLabelOptions<DatumType>",
      "sectorLabel?": "AgPieSeriesSectorLabelOptions<DatumType>",
      "callout?": "AgPieSeriesCalloutOptions",
      "calloutLine?": "AgPieSeriesCalloutOptions",
      "angleKey?": "string",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusName?": "string",
      "labelKey?": "string",
      "labelName?": "string",
      "calloutLabelKey?": "string",
      "calloutLabelName?": "string",
      "sectorLabelKey?": "string",
      "sectorLabelName?": "string",
      "fills?": "CssColor[]",
      "strokes?": "CssColor[]",
      "fillOpacity?": "Opacity",
      "strokeOpacity?": "Opacity",
      "strokeWidth?": "PixelSize",
      "lineDash?": "PixelSize[]",
      "lineDashOffset?": "PixelSize",
      "rotation?": "number",
      "outerRadiusOffset?": "PixelSize",
      "outerRadiusRatio?": "Ratio",
      "innerRadiusOffset?": "PixelSize",
      "innerRadiusRatio?": "Ratio",
      "radiusMin?": "number",
      "radiusMax?": "number",
      "shadow?": "AgDropShadowOptions",
      "tooltip?": "AgPieSeriesTooltip",
      "innerLabels?": "AgDoughnutInnerLabel[]",
      "innerCircle?": "AgDoughnutInnerCircle",
      "formatter?": "(params: AgPieSeriesFormatterParams<DatumType>) => AgPieSeriesFormat",
      "listeners?": "AgSeriesListeners<DatumType>",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "highlightStyle?": "AgSeriesHighlightStyle",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "title?": "/** Configuration for the series title. */",
      "label?": "/** Configuration for the labels used outside of the sectors.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabel instead.\n     */",
      "calloutLabel?": "/** Configuration for the labels used outside of the sectors. */",
      "sectorLabel?": "/** Configuration for the labels used inside the sectors. */",
      "callout?": "/** Configuration for the callout lines used with the labels for the sectors.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLine instead.\n     */",
      "calloutLine?": "/** Configuration for the callout lines used with the labels for the sectors. */",
      "angleKey?": "/** The key to use to retrieve angle values from the data. */",
      "angleName?": "/** A human-readable description of the angle values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "radiusKey?": "/** The key to use to retrieve radius values from the data. */",
      "radiusName?": "/** A human-readable description of the radius values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "labelKey?": "/** The key to use to retrieve label values from the data.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabelKey or series.sectorLabelKey instead.\n     */",
      "labelName?": "/** A human-readable description of the label values. If supplied, this will be passed to the tooltip renderer as one of the parameters.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabelName or series.sectorLabelName instead.\n     */",
      "calloutLabelKey?": "/** The key to use to retrieve label values from the data. */",
      "calloutLabelName?": "/** A human-readable description of the label values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "sectorLabelKey?": "/** The key to use to retrieve sector label values from the data. */",
      "sectorLabelName?": "/** A human-readable description of the sector label values. If supplied, this will be passed to the tooltip renderer as one of the parameters. */",
      "fills?": "/** The colours to cycle through for the fills of the sectors. */",
      "strokes?": "/** The colours to cycle through for the strokes of the sectors. */",
      "fillOpacity?": "/** The opacity of the fill for the sectors. */",
      "strokeOpacity?": "/** The opacity of the stroke for the sectors. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the sectors. */",
      "lineDash?": "/** Defines how the pie sector strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */",
      "lineDashOffset?": "/** The initial offset of the dashed line in pixels. */",
      "rotation?": "/** The rotation of the pie series in degrees. */",
      "outerRadiusOffset?": "/** The offset in pixels of the outer radius of the series. Used to construct doughnut charts. */",
      "outerRadiusRatio?": "/** The ratio of the outer radius of the series. Used to adjust the outer radius proportionally to the automatically calculated value. */",
      "innerRadiusOffset?": "/** The offset in pixels of the inner radius of the series. Used to construct doughnut charts. If this is not provided, or innerRadiusRatio is unset, or a value of zero is given, a pie chart will be rendered. */",
      "innerRadiusRatio?": "/** The ratio of the inner radius of the series. Used to construct doughnut charts. If this is not provided, or innerRadiusOffset is unset, or a value of zero or one is given, a pie chart will be rendered. */",
      "radiusMin?": "/** Override of the automatically determined minimum radiusKey value from the data. */",
      "radiusMax?": "/** Override of the automatically determined maximum radiusKey value from the data. */",
      "shadow?": "/** Configuration for the shadow used behind the chart series. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "innerLabels?": "/** Configuration for the text lines to display inside the series, typically used when rendering a doughnut chart */",
      "innerCircle?": "/** Configuration for the area inside the series, only visible when rendering a doughnut chart by using innerRadiusOffset or innerRadiusRatio */",
      "formatter?": "/** A formatter function for adjusting the styling of the pie sectors. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "highlightStyle?": "/** Configuration for series markers and series line highlighting when a marker / data point or a legend item is hovered over. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgPieSeriesTooltipRendererParams": {
    "meta": {},
    "type": {
      "labelKey?": "string",
      "labelName?": "string",
      "calloutLabelKey?": "string",
      "calloutLabelName?": "string",
      "sectorLabelKey?": "string",
      "sectorLabelName?": "string",
      "angleKey": "string",
      "angleValue?": "any",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusValue?": "any",
      "radiusName?": "string",
      "datum": "any",
      "title?": "string",
      "color?": "CssColor",
      "seriesId": "string"
    },
    "docs": {
      "labelKey?": "/** labelKey as specified on series options.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabelKey or series.sectorLabelKey instead.\n     */",
      "labelName?": "/** labelName as specified on series options.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use series.calloutLabelName or series.sectorLabelName instead.\n     */",
      "calloutLabelKey?": "/** calloutLabelKey as specified on series options. */",
      "calloutLabelName?": "/** calloutLabelName as specified on series options. */",
      "sectorLabelKey?": "/** sectorLabelKey as specified on series options. */",
      "sectorLabelName?": "/** sectorLabelName as specified on series options. */",
      "angleKey": "/** angleKey as specified on series options. */",
      "angleValue?": "/** angleValue as read from series data via the angleKey property. */",
      "angleName?": "/** angleName as specified on series options. */",
      "radiusKey?": "/** radiusKey as specified on series options. */",
      "radiusValue?": "/** radiusValue as read from series data via the radiusKey property. */",
      "radiusName?": "/** radiusName as specified on series options. */",
      "datum": "/** Datum from the series data array that the tooltip is being rendered for. */",
      "title?": "/** Series title or yName depending on series configuration. */",
      "color?": "/** Series primary colour, as selected from the active theme, series options or formatter. */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgPieSeriesLabelFormatterParams": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "datum": "DatumType",
      "labelKey?": "string",
      "labelValue?": "string",
      "labelName?": "string",
      "calloutLabelKey?": "string",
      "calloutLabelValue?": "string",
      "calloutLabelName?": "string",
      "sectorLabelKey?": "string",
      "sectorLabelValue?": "string",
      "sectorLabelName?": "string",
      "angleKey": "string",
      "angleValue?": "any",
      "angleName?": "string",
      "radiusKey?": "string",
      "radiusValue?": "any",
      "radiusName?": "string",
      "value?": "any",
      "seriesId": "string"
    },
    "docs": {
      "datum": "/** Datum from the series data array that the label is being rendered for. */",
      "labelKey?": "/** labelKey as specified on series options.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use calloutLabelKey instead.\n     */",
      "labelValue?": "/** labelValue as read from series data via the labelKey property.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use calloutLabelValue instead.\n     */",
      "labelName?": "/** labelName as specified on series options.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use calloutLabelName instead.\n     */",
      "calloutLabelKey?": "/** calloutLabelKey as specified on series options. */",
      "calloutLabelValue?": "/** calloutLabelValue as read from series data via the calloutLabelKey property. */",
      "calloutLabelName?": "/** calloutLabelName as specified on series options. */",
      "sectorLabelKey?": "/** sectorLabelKey as specified on series options. */",
      "sectorLabelValue?": "/** sectorLabelValue as read from series data via the sectorLabelKey property. */",
      "sectorLabelName?": "/** sectorLabelName as specified on series options. */",
      "angleKey": "/** angleKey as specified on series options. */",
      "angleValue?": "/** angleValue as read from series data via the angleKey property. */",
      "angleName?": "/** angleName as specified on series options. */",
      "radiusKey?": "/** radiusKey as specified on series options. */",
      "radiusValue?": "/** radiusValue as read from series data via the radiusKey property. */",
      "radiusName?": "/** radiusName as specified on series options. */",
      "value?": "/** The value of labelKey as specified on series options.\n     *\n     * @deprecated since v6.2.0 (ag-grid v28.2.0) Use item.datum instead.\n     */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgTreemapSeriesLabelOptions": {
    "meta": {},
    "type": {
      "padding?": "number",
      "enabled?": "boolean",
      "fontStyle?": "FontStyle",
      "fontWeight?": "FontWeight",
      "fontSize?": "FontSize",
      "fontFamily?": "FontFamily",
      "color?": "CssColor"
    },
    "docs": {
      "padding?": "/** The amount of the tile's vertical space to reserve for the label. */",
      "enabled?": "/** Whether or not the labels should be shown. */",
      "fontStyle?": "/** The font style to use for the labels. */",
      "fontWeight?": "/** The font weight to use for the labels. */",
      "fontSize?": "/** The font size in pixels to use for the labels. */",
      "fontFamily?": "/** The font family to use for the labels. */",
      "color?": "/** The colour to use for the labels. */"
    }
  },
  "AgTreemapSeriesTooltipRendererParams": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "datum": "DatumType",
      "parent?": "DataValue",
      "depth": "number",
      "sizeKey?": "string",
      "labelKey?": "string",
      "colorKey?": "string",
      "color?": "string",
      "title?": "string",
      "seriesId": "string"
    },
    "docs": {
      "datum": "/** Datum from the series data that the treemap tile is being rendered for. */",
      "parent?": "/** The parent of the datum from the treemap data. */",
      "depth": "/** The depth of the datum in the hierarchy. */",
      "sizeKey?": "/** sizeKey as specified on series options. */",
      "labelKey?": "/** labelKey as specified on series options. */",
      "colorKey?": "/** colorKey as specified on series options. */",
      "color?": "/** The computed fill colour of the treemap tile. */",
      "title?": "/** The title of the treemap tile */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgTreemapSeriesTooltip": {
    "meta": { "typeParams": ["DatumType"] },
    "type": {
      "renderer?": "(params: AgTreemapSeriesTooltipRendererParams<DatumType>) => string | AgTooltipRendererResult",
      "enabled?": "boolean"
    },
    "docs": {
      "renderer?": "/** Function used to create the content for tooltips. */",
      "enabled?": "/** Whether or not to show tooltips when the series are hovered over. */"
    }
  },
  "AgTreemapSeriesLabelsOptions": {
    "meta": {},
    "type": {
      "large?": "AgChartLabelOptions",
      "medium?": "AgChartLabelOptions",
      "small?": "AgChartLabelOptions",
      "value?": "{ key?: string; name?: string; formatter?: (params: { datum: any; }) => string | undefined; style?: AgChartLabelOptions; }"
    },
    "docs": {
      "large?": "/** The label configuration for the large leaf tiles. */",
      "medium?": "/** The label configuration for the medium-sized leaf tiles. */",
      "small?": "/** The label configuration for the small leaf tiles. */",
      "value?": "/** The configuration for the cell value label. */"
    }
  },
  "AgTreemapSeriesHighlightTextStyle": {
    "meta": {},
    "type": { "color?": "CssColor" },
    "docs": {
      "color?": "/** The colour of an item's text when tapped or hovered over. Use `undefined` for no highlight. */"
    }
  },
  "AgTreemapSeriesHighlightStyle": {
    "meta": {},
    "type": {
      "text?": "AgTreemapSeriesHighlightTextStyle",
      "item?": "AgSeriesHighlightMarkerStyle",
      "series?": "AgSeriesHighlightSeriesStyle"
    },
    "docs": {
      "text?": "/** Highlight style used for a text when item is tapped or hovered over. */",
      "item?": "/** Highlight style used for an individual marker when tapped or hovered over. */",
      "series?": "/** Highlight style used for whole series when one of its markers is tapped or hovered over. */"
    }
  },
  "AgTreemapSeriesOptions": {
    "meta": {
      "typeParams": ["DatumType = any"],
      "doc": "/** Configuration for the treemap series. */"
    },
    "type": {
      "type?": "'treemap'",
      "title?": "AgTreemapSeriesLabelOptions",
      "subtitle?": "AgTreemapSeriesLabelOptions",
      "labels?": "AgTreemapSeriesLabelsOptions",
      "labelKey?": "string",
      "sizeKey?": "string",
      "colorKey?": "string",
      "colorDomain?": "number[]",
      "colorRange?": "string[]",
      "groupFill?": "string",
      "groupStroke?": "string",
      "groupStrokeWidth?": "number",
      "tileStroke?": "string",
      "tileStrokeWidth?": "number",
      "tooltip?": "AgTreemapSeriesTooltip<DatumType>",
      "nodePadding?": "PixelSize",
      "gradient?": "boolean",
      "tileShadow?": "AgDropShadowOptions",
      "labelShadow?": "AgDropShadowOptions",
      "highlightGroups?": "boolean",
      "highlightStyle?": "AgTreemapSeriesHighlightStyle",
      "formatter?": "(params: AgTreemapSeriesFormatterParams<DataValue>) => AgTreemapSeriesFormat",
      "listeners?": "AgSeriesListeners<DatumType>",
      "id?": "string",
      "data?": "DatumType[]",
      "visible?": "boolean",
      "showInLegend?": "boolean",
      "cursor?": "string",
      "nodeClickRange?": "AgChartInteractionRange"
    },
    "docs": {
      "title?": "/** The label configuration for the top-level tiles. */",
      "subtitle?": "/** The label configuration for the children of the top-level parent tiles. */",
      "labels?": "/** Configuration for the tile labels. */",
      "labelKey?": "/** The name of the node key containing the label. */",
      "sizeKey?": "/** The name of the node key containing the size value. */",
      "colorKey?": "/** The name of the node key containing the color value. This value (along with `colorDomain` and `colorRange` configs) will be used to determine the tile color. */",
      "colorDomain?": "/** The domain the 'colorKey' values belong to. The domain can contain more than two stops, for example `[-5, 0, -5]`. In that case the 'colorRange' should also use a matching number of colors. */",
      "colorRange?": "/** The color range to interpolate the numeric `colorDomain` into. For example, if the `colorDomain` is `[-5, 5]` and `colorRange` is `['red', 'green']`, a `colorKey` value of `-5` will be assigned the 'red' color, `5` - 'green' color and `0` a blend of 'red' and 'green'. */",
      "groupFill?": "/** The group fill color. If undefined the value based on `colorKey` will be used. */",
      "groupStroke?": "/** The group's stroke color. */",
      "groupStrokeWidth?": "/** The group's stroke width. */",
      "tileStroke?": "/** The tile's stroke color. */",
      "tileStrokeWidth?": "/** The tile's stroke width. */",
      "tooltip?": "/** Series-specific tooltip configuration. */",
      "nodePadding?": "/** The amount of padding in pixels inside of each treemap tile. Increasing `nodePadding` will reserve more space for parent labels. */",
      "gradient?": "/** Whether or not to use gradients for treemap tiles. */",
      "tileShadow?": "/** Configuration for the shadow used behind the treemap tiles. */",
      "labelShadow?": "/** Configuration for the shadow used behind the treemap labels. */",
      "highlightGroups?": "/** Determines whether the groups will be highlighted by cursor. */",
      "highlightStyle?": "/** Configuration for treemap tiles when they are hovered over. */",
      "formatter?": "/** A callback function for adjusting the styles of a particular treemap tile based on the input parameters */",
      "listeners?": "/** A map of event names to event listeners. */",
      "id?": "/** Primary identifier for the series. This is provided as `seriesId` in user callbacks to differentiate multiple\n     * series. Auto-generated ids are subject to future change without warning, if your callbacks need to vary behaviour\n     * by series please supply your own unique `id` value.\n     *\n     * Default: auto-generated value\n     */",
      "data?": "/** The data to use when rendering the series. If this is not supplied, data must be set on the chart instead. */",
      "visible?": "/** Whether or not to display the series. */",
      "showInLegend?": "/** Whether or not to include the series in the legend. */",
      "cursor?": "/** The cursor to use for hovered area markers. This config is identical to the CSS `cursor` property. */",
      "nodeClickRange?": "/** Range from a node a click triggers the listener. */"
    }
  },
  "AgTreemapSeriesFormatterParams": {
    "meta": {
      "typeParams": ["DataValue = any"],
      "doc": "/** The parameters of the treemap series formatter function */"
    },
    "type": {
      "datum": "DataValue",
      "parent?": "DataValue",
      "depth": "number",
      "labelKey": "string",
      "sizeKey?": "string",
      "colorKey?": "string",
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeOpacity?": "Opacity",
      "strokeWidth?": "PixelSize",
      "gradient?": "boolean",
      "highlighted": "boolean",
      "seriesId": "string"
    },
    "docs": {
      "datum": "/** Datum from the series data that the treemap tile is being rendered for. */",
      "parent?": "/** The parent of the datum from the treemap data. */",
      "depth": "/** The depth of the datum in the hierarchy. */",
      "labelKey": "/** labelKey as specified on series options. */",
      "sizeKey?": "/** sizeKey as specified on series options. */",
      "colorKey?": "/** colorKey as specified on series options. */",
      "fill?": "/** The colour of the fill for the treemap tile. */",
      "fillOpacity?": "/** The opacity of the fill for the treemap tile. */",
      "stroke?": "/** The colour of the stroke for the treemap tile. */",
      "strokeOpacity?": "/** The opacity of the stroke for the treemap tile. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the treemap tile. */",
      "gradient?": "/** Whether or not the gradients are used for treemap tiles. */",
      "highlighted": "/** `true` if the tile is highlighted by hovering */",
      "seriesId": "/** The ID of the series. */"
    }
  },
  "AgTreemapSeriesFormat": {
    "meta": { "doc": "/** The formatted style of a treemap tile */" },
    "type": {
      "fill?": "CssColor",
      "fillOpacity?": "Opacity",
      "stroke?": "CssColor",
      "strokeOpacity?": "Opacity",
      "strokeWidth?": "PixelSize",
      "gradient?": "boolean"
    },
    "docs": {
      "fill?": "/** The colour of the fill for the treemap tile. */",
      "fillOpacity?": "/** The opacity of the fill for the treemap tile. */",
      "stroke?": "/** The colour of the stroke for the treemap tile. */",
      "strokeOpacity?": "/** The opacity of the stroke for the treemap tile. */",
      "strokeWidth?": "/** The width in pixels of the stroke for the treemap tile. */",
      "gradient?": "/** Whether or not the gradient is used for the treemap tile. */"
    }
  },
  "AgCartesianSeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgLineSeriesOptions | AgScatterSeriesOptions | AgAreaSeriesOptions | AgBarSeriesOptions | AgHistogramSeriesOptions"
  },
  "AgPolarSeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgPieSeriesOptions"
  },
  "AgHierarchySeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgTreemapSeriesOptions"
  },
  "AgCartesianChartOptions": {
    "meta": {},
    "type": {
      "type?": "'line' | 'bar' | 'column' | 'area' | 'scatter' | 'histogram'",
      "axes?": "AgCartesianAxisOptions[]",
      "series?": "AgCartesianSeriesOptions[]",
      "navigator?": "AgNavigatorOptions",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "seriesPadding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "footnote?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "highlightRange?": "'tooltip' | 'node'",
      "theme?": "string | AgChartTheme",
      "overlays?": "AgChartOverlaysOptions"
    },
    "docs": {
      "type?": "/** If specified overrides the default series type. */",
      "axes?": "/** Axis configurations. */",
      "series?": "/** Series configurations. */",
      "navigator?": "/** Configuration for the chart navigator. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "seriesPadding?": "/** Configuration for the padding around the series. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "footnote?": "/** Configuration for the footnote shown at the bottom of the chart. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightRange?": "/** By default, nodes will be highlighted when the cursor is within the `tooltip.range`. Set this to `'node'` to highlight nodes when within the `series[].nodeClickRange`. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */",
      "overlays?": "/** HTML overlays */"
    }
  },
  "AgPolarChartOptions": {
    "meta": {},
    "type": {
      "type?": "'pie'",
      "series?": "AgPolarSeriesOptions[]",
      "data?": "any[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "seriesPadding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "footnote?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "highlightRange?": "'tooltip' | 'node'",
      "theme?": "string | AgChartTheme",
      "overlays?": "AgChartOverlaysOptions"
    },
    "docs": {
      "type?": "/** If specified overrides the default series type. */",
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "seriesPadding?": "/** Configuration for the padding around the series. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "footnote?": "/** Configuration for the footnote shown at the bottom of the chart. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightRange?": "/** By default, nodes will be highlighted when the cursor is within the `tooltip.range`. Set this to `'node'` to highlight nodes when within the `series[].nodeClickRange`. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */",
      "overlays?": "/** HTML overlays */"
    }
  },
  "AgHierarchyChartOptions": {
    "meta": {},
    "type": {
      "type?": "'treemap'",
      "data?": "any",
      "series?": "AgHierarchySeriesOptions[]",
      "container?": "HTMLElement | null",
      "width?": "PixelSize",
      "height?": "PixelSize",
      "autoSize?": "boolean",
      "padding?": "AgChartPaddingOptions",
      "seriesPadding?": "AgChartPaddingOptions",
      "background?": "AgChartBackground",
      "title?": "AgChartCaptionOptions",
      "subtitle?": "AgChartCaptionOptions",
      "footnote?": "AgChartCaptionOptions",
      "tooltip?": "AgChartTooltipOptions",
      "legend?": "AgChartLegendOptions",
      "listeners?": "AgBaseChartListeners",
      "highlightRange?": "'tooltip' | 'node'",
      "theme?": "string | AgChartTheme",
      "overlays?": "AgChartOverlaysOptions"
    },
    "docs": {
      "type?": "/** If specified overrides the default series type. */",
      "series?": "/** Series configurations. */",
      "data?": "/** The data to render the chart from. If this is not specified, it must be set on individual series instead. */",
      "container?": "/** The element to place the rendered chart into.<br/><strong>Important:</strong> make sure to read the `autoSize` config description for information on how the container element affects the chart size (by default). */",
      "width?": "/** The width of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "height?": "/** The height of the chart in pixels. Has no effect if `autoSize` is set to `true`. */",
      "autoSize?": "/** By default, the chart will resize automatically to fill the container element. Set this to `false` to disable this behaviour. If either the `width` or `height` are set, auto-sizing will be disabled unless this is explicitly set to `true`.<br/><strong>Important:</strong> if this config is set to `true`, make sure to give the chart's `container` element an explicit size, otherwise you will run into a chicken and egg situation where the container expects to size itself according to the content and the chart expects to size itself according to the container. */",
      "padding?": "/** Configuration for the padding shown around the chart. */",
      "seriesPadding?": "/** Configuration for the padding around the series. */",
      "background?": "/** Configuration for the background shown behind the chart. */",
      "title?": "/** Configuration for the title shown at the top of the chart. */",
      "subtitle?": "/** Configuration for the subtitle shown beneath the chart title. Note: a subtitle will only be shown if a title is also present. */",
      "footnote?": "/** Configuration for the footnote shown at the bottom of the chart. */",
      "tooltip?": "/** Global configuration that applies to all tooltips in the chart. */",
      "legend?": "/** Configuration for the chart legend. */",
      "listeners?": "/** A map of event names to event listeners. */",
      "highlightRange?": "/** By default, nodes will be highlighted when the cursor is within the `tooltip.range`. Set this to `'node'` to highlight nodes when within the `series[].nodeClickRange`. */",
      "theme?": "/** Theme to use for rendering of the chart. Specify an inbuilt theme name, or provide an `AgChartTheme` instance to customise. */",
      "overlays?": "/** HTML overlays */"
    }
  },
  "AgChartOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgCartesianChartOptions | AgPolarChartOptions | AgHierarchyChartOptions"
  },
  "AgChartInstance": {
    "meta": {},
    "type": { "getOptions()": "AgChartOptions", "destroy()": "void" },
    "docs": {
      "getOptions()": "/** Get the `AgChartOptions` representing the current chart configuration. */",
      "destroy()": "/** Destroy the chart instance and any allocated resources to support its rendering. */"
    }
  },
  "ChartType": {
    "meta": { "isTypeAlias": true },
    "type": "CartesianChart | PolarChart | HierarchyChart"
  },
  "ChartOptionType": {
    "meta": { "isTypeAlias": true, "typeParams": ["T extends ChartType"] },
    "type": "T extends CartesianChart ? AgCartesianChartOptions : T extends PolarChart ? AgPolarChartOptions : T extends HierarchyChart ? AgHierarchyChartOptions : never"
  },
  "SeriesOptionType": {
    "meta": { "isTypeAlias": true, "typeParams": ["T extends Series"] },
    "type": "T extends LineSeries ? AgLineSeriesOptions : T extends BarSeries ? AgBarSeriesOptions : T extends AreaSeries ? AgAreaSeriesOptions : T extends ScatterSeries ? AgScatterSeriesOptions : T extends HistogramSeries ? AgHistogramSeriesOptions : T extends PieSeries ? AgPieSeriesOptions : T extends TreemapSeries ? AgTreemapSeriesOptions : never"
  },
  "DownloadOptions": {
    "meta": {},
    "type": {
      "fileName?": "string",
      "width?": "number",
      "height?": "number",
      "fileFormat?": "string"
    },
    "docs": {
      "fileName?": "/** Name of downloaded image file. Defaults to `image`.  */",
      "width?": "/** Width of downloaded chart image in pixels. Defaults to current chart width. */",
      "height?": "/** Height of downloaded chart image in pixels. Defaults to current chart height. */",
      "fileFormat?": "/** A MIME-type string indicating the image format. The default format type is `image/png`. Options: `image/png`, `image/jpeg`.  */"
    }
  },
  "ImageDataUrlOptions": {
    "meta": {},
    "type": {
      "width?": "number",
      "height?": "number",
      "fileFormat?": "string"
    },
    "docs": {
      "width?": "/** Width of downloaded chart image in pixels. Defaults to current chart width. */",
      "height?": "/** Height of downloaded chart image in pixels. Defaults to current chart height. */",
      "fileFormat?": "/** A MIME-type string indicating the image format. The default format type is `image/png`. Options: `image/png`, `image/jpeg`.  */"
    }
  },
  "DeepPartialDepth": {
    "meta": { "isTypeAlias": true },
    "type": "[ never, 0, 1, 2, 3, 4, 5, 6 ]"
  },
  "DeepPartial": {
    "meta": { "isTypeAlias": true, "typeParams": ["T"] },
    "type": "{[P1 in keyof T]?: IsSkippableProperty<T, P1> extends true ? any : IsLiteralProperty<T, P1> extends true ? T[P1] : { [P2 in keyof T[P1]]?: IsSkippableProperty<T[P1], P2> extends true ? any : IsLiteralProperty<T[P1], P2> extends true ? T[P1][P2] : { [P3 in keyof T[P1][P2]]?: IsSkippableProperty<T[P1][P2], P3> extends true ? any : IsLiteralProperty<T[P1][P2], P3> extends true ? T[P1][P2][P3] : { [P4 in keyof T[P1][P2][P3]]?: IsSkippableProperty<T[P1][P2][P3], P4> extends true ? any : IsLiteralProperty<T[P1][P2][P3], P4> extends true ? T[P1][P2][P3][P4] : Partial<T[P1][P2][P3][P4]>; }; }; }}"
  },
  "AgChart": {
    "meta": {
      "doc": "/** Factory for creating and updating instances of AgChartInstance.\n *\n * @docsInterface\n */"
    },
    "type": {
      "public static create(options: AgChartOptions): AgChartInstance { return AgChartInternal.createOrUpdate(options as any); }": "AgChartInstance",
      "public static getImageDataURL(chart: AgChartInstance, options?: ImageDataUrlOptions): Promise<string> { if (!(chart instanceof AgChartInstanceProxy)) { throw new Error('AG Charts - invalid chart reference passed'); } return AgChartInternal.getImageDataURL(chart, options); }": "Promise<string>"
    },
    "docs": {
      "public static create(options: AgChartOptions): AgChartInstance { return AgChartInternal.createOrUpdate(options as any); }": "/** Create a new `AgChartInstance` based upon the given configuration options.\n     */",
      "public static update(chart: AgChartInstance, options: AgChartOptions) { if (!AgChartInstanceProxy.isInstance(chart)) { throw new Error('AG Charts - invalid chart reference passed'); } AgChartInternal.createOrUpdate(options as any, chart); }": "/** Update an existing `AgChartInstance`. Options provided should be complete and not\n     * partial.\n     * <br/>\n     * <br/>\n     * **NOTE**: As each call could trigger a chart redraw, multiple calls to update options in\n     * quick succession could result in undesirable flickering, so callers should batch up and/or\n     * debounce changes to avoid unintended partial update renderings.\n     */",
      "public static updateDelta(chart: AgChartInstance, deltaOptions: DeepPartial<AgChartOptions>) { if (!AgChartInstanceProxy.isInstance(chart)) { throw new Error('AG Charts - invalid chart reference passed'); } return AgChartInternal.updateUserDelta(chart, deltaOptions as any); }": "/** Update an existing `AgChartInstance` by applying a partial set of option changes.\n     * <br/>\n     * <br/>\n     * **NOTE**: As each call could trigger a chart redraw, each individual delta options update\n     * should leave the chart in a valid options state. Also, multiple calls to update options in\n     * quick succession could result in undesirable flickering, so callers should batch up and/or\n     * debounce changes to avoid unintended partial update renderings.\n     */",
      "public static download(chart: AgChartInstance, options?: DownloadOptions) { if (!(chart instanceof AgChartInstanceProxy)) { throw new Error('AG Charts - invalid chart reference passed'); } return AgChartInternal.download(chart, options); }": "/** Starts a browser-based image download for the given `AgChartInstance`.\n     */",
      "public static getImageDataURL(chart: AgChartInstance, options?: ImageDataUrlOptions): Promise<string> { if (!(chart instanceof AgChartInstanceProxy)) { throw new Error('AG Charts - invalid chart reference passed'); } return AgChartInternal.getImageDataURL(chart, options); }": "/** Returns a base64-encoded image data URL for the given `AgChartInstance`.\n     */"
    }
  },
  "ObservableLike": {
    "meta": { "isTypeAlias": true },
    "type": "{ addEventListener(key: string, cb: TypedEventListener): void; clearEventListeners(): void; }"
  },
  "VisibilityMap": {
    "meta": { "isTypeAlias": true },
    "type": "{ crossLines: boolean; series: boolean; }"
  },
  "OptionalHTMLElement": {
    "meta": { "isTypeAlias": true },
    "type": "HTMLElement | undefined | null"
  },
  "TransferableResources": {
    "meta": { "isTypeAlias": true },
    "type": "{ container?: OptionalHTMLElement; scene: Scene; element: HTMLElement; }"
  },
  "PickedNode": {
    "meta": { "isTypeAlias": true },
    "type": "{ series: Series<any>; datum: SeriesNodeDatum; distance: number; }"
  },
  "BoundSeries": {
    "meta": {},
    "type": {
      "type": "string",
      "getDomain(direction: ChartAxisDirection)": "any[]",
      "isEnabled()": "boolean",
      "visible": "boolean"
    }
  },
  "ChartAxisDirection": {
    "meta": { "isEnum": true },
    "type": ["X = 'x'", "Y = 'y'"],
    "docs": [null, null]
  },
  "ChartUpdateType": {
    "meta": { "isEnum": true },
    "type": [
      "FULL",
      "PROCESS_DATA",
      "PERFORM_LAYOUT",
      "SERIES_UPDATE",
      "TOOLTIP_RECALCULATION",
      "SCENE_RENDER",
      "NONE"
    ],
    "docs": [null, null, null, null, null, null, null]
  },
  "NodeData": { "meta": { "isTypeAlias": true }, "type": "number[]" },
  "CrossLineType": {
    "meta": { "isTypeAlias": true },
    "type": "'line' | 'range'"
  },
  "CrossLineLabelPosition": {
    "meta": { "isTypeAlias": true },
    "type": "'top' | 'left' | 'right' | 'bottom' | 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight' | 'inside' | 'insideLeft' | 'insideRight' | 'insideTop' | 'insideBottom' | 'insideTopLeft' | 'insideBottomLeft' | 'insideTopRight' | 'insideBottomRight'"
  },
  "CoordinatesFnOpts": {
    "meta": { "isTypeAlias": true },
    "type": "{ yDirection: boolean; xStart: number; xEnd: number; yStart: number; yEnd: number; }"
  },
  "CoordinatesFn": {
    "meta": { "isTypeAlias": true },
    "type": "({ yDirection, xStart, xEnd, yStart, yEnd }: CoordinatesFnOpts) => Point"
  },
  "PositionCalcFns": {
    "meta": { "isTypeAlias": true },
    "type": "{ c: CoordinatesFn; }"
  },
  "LabelTranslationDirection": {
    "meta": { "isTypeAlias": true },
    "type": "1 | -1 | 0"
  },
  "CrossLineTranslationDirection": {
    "meta": { "isTypeAlias": true },
    "type": "{ xTranslationDirection: LabelTranslationDirection; yTranslationDirection: LabelTranslationDirection; }"
  },
  "CrossLinesRangeConfig": {
    "meta": { "isTypeAlias": true },
    "type": "Record<string, { vertical: [ Date, Date ]; horizontal: [ number, number ]; }>"
  },
  "Page": {
    "meta": { "isTypeAlias": true },
    "type": "{ columns: Column[]; pageWidth: number; pageHeight: number; startIndex: number; endIndex: number; }"
  },
  "Column": {
    "meta": { "isTypeAlias": true },
    "type": "{ columnWidth: number; columnHeight: number; indices: number[]; bboxes: BBox[]; }"
  },
  "DimensionProps": {
    "meta": {},
    "type": {
      "max": "number",
      "fn": "(bbox: BBox) => number",
      "padding": "number"
    }
  },
  "CursorState": { "meta": {}, "type": { "style": "string" } },
  "HighlightState": {
    "meta": {},
    "type": { "highlightedDatum": "HighlightNodeDatum" }
  },
  "HighlightNodeDatum": {
    "meta": {},
    "type": {
      "series": "any",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "HighlightChangeEvent": {
    "meta": {},
    "type": {
      "type": "'highlight-change'",
      "previousHighlight?": "HighlightNodeDatum",
      "currentHighlight?": "HighlightNodeDatum"
    }
  },
  "InteractionTypes": {
    "meta": { "isTypeAlias": true },
    "type": "'click' | 'dblclick' | 'hover' | 'drag-start' | 'drag' | 'drag-end' | 'leave' | 'page-left' | 'wheel'"
  },
  "SUPPORTED_EVENTS": {
    "meta": { "isTypeAlias": true },
    "type": "'click' | 'dblclick' | 'mousedown' | 'mousemove' | 'mouseup' | 'mouseout' | 'mouseenter' | 'touchstart' | 'touchmove' | 'touchend' | 'touchcancel' | 'pagehide' | 'wheel'"
  },
  "InteractionEvent": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": ["T extends InteractionTypes"]
    },
    "type": "{ type: T; offsetX: number; offsetY: number; pageX: number; pageY: number; sourceEvent: Event; consume(): void; }"
  },
  "Coords": {
    "meta": {},
    "type": {
      "clientX": "number",
      "clientY": "number",
      "pageX": "number",
      "pageY": "number",
      "offsetX": "number",
      "offsetY": "number"
    }
  },
  "SupportedEvent": {
    "meta": { "isTypeAlias": true },
    "type": "MouseEvent | TouchEvent | Event"
  },
  "TooltipState": {
    "meta": {},
    "type": { "content": "string", "meta": "TooltipMeta" }
  },
  "ZoomState": { "meta": {}, "type": { "min": "number", "max": "number" } },
  "AxisZoomState": {
    "meta": {},
    "type": { "x?": "ZoomState", "y?": "ZoomState" }
  },
  "ZoomChangeEvent": {
    "meta": {},
    "type": { "type": "'zoom-change'", "x?": "ZoomState", "y?": "ZoomState" }
  },
  "Layers": {
    "meta": { "isEnum": true },
    "type": [
      "SERIES_BACKGROUND_ZINDEX = -10",
      "AXIS_GRID_ZINDEX = 0",
      "AXIS_ZINDEX = 20",
      "SERIES_CROSSLINE_RANGE_ZINDEX = 30",
      "SERIES_LAYER_ZINDEX = 500",
      "SERIES_LABEL_ZINDEX = 1000",
      "SERIES_CROSSLINE_LINE_ZINDEX = 2500",
      "LEGEND_ZINDEX = 3000"
    ],
    "docs": [null, null, null, null, null, null, null, null]
  },
  "LayoutStage": { "meta": { "isTypeAlias": true }, "type": "'before-series'" },
  "AxisLayout": {
    "meta": {},
    "type": {
      "rect": "BBox",
      "label": "{ baseline: 'hanging' | 'bottom' | 'middle'; align: 'start' | 'end' | 'center'; }"
    }
  },
  "LayoutCompleteEvent": {
    "meta": {},
    "type": {
      "type": "'layout-complete'",
      "series": "{ rect: BBox; visible: boolean; }",
      "axes?": "(AxisLayout & { id: string; })[]"
    }
  },
  "LayoutContext": { "meta": {}, "type": { "shrinkRect": "BBox" } },
  "LayoutResult": { "meta": {}, "type": { "shrinkRect": "BBox" } },
  "EventTypes": {
    "meta": { "isTypeAlias": true },
    "type": "LayoutStage | 'layout-complete'"
  },
  "LayoutListener": {
    "meta": { "isTypeAlias": true },
    "type": "(event: LayoutCompleteEvent) => void"
  },
  "LayoutProcessor": {
    "meta": { "isTypeAlias": true },
    "type": "(ctx: LayoutContext) => LayoutResult"
  },
  "Handler": {
    "meta": { "isTypeAlias": true, "typeParams": ["T extends EventTypes"] },
    "type": "T extends LayoutStage ? LayoutProcessor : LayoutListener"
  },
  "LegendDatum": {
    "meta": {},
    "type": {
      "id": "string",
      "itemId": "any",
      "seriesId": "string",
      "enabled": "boolean",
      "marker": "{ shape?: string | (new () => Marker); fill: string; stroke: string; fillOpacity: number; strokeOpacity: number; }",
      "label": "{ text: string; }"
    }
  },
  "SeriesOptionsTypes": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<AgChartOptions['series']>[number]"
  },
  "AxesOptionsTypes": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<AgCartesianChartOptions['axes']>[number]"
  },
  "PreparationContext": {
    "meta": {},
    "type": { "colourIndex": "number", "palette": "AgChartThemePalette" }
  },
  "SeriesOptions": {
    "meta": { "isTypeAlias": true },
    "type": "AgCartesianSeriesOptions | AgPolarSeriesOptions | AgHierarchySeriesOptions"
  },
  "ReduceConfig": {
    "meta": { "typeParams": ["T"] },
    "type": {
      "outputProp": "string",
      "reducer": "(r: T, n: any, idx: number, length: number) => T",
      "start": "T",
      "seriesType?": "string[]"
    }
  },
  "ThemeMap": {
    "meta": { "isTypeAlias": true },
    "type": "{[key in AgChartThemeName | 'undefined' | 'null']?: ChartTheme}"
  },
  "Transforms": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": [
        "Source",
        "Result extends {\n    [R in keyof Source]?: any;\n}",
        "Keys extends keyof Source & keyof Result = keyof Source & keyof Result"
      ]
    },
    "type": "{[Property in Keys]: (p: Source[Property], src: Source) => Result[Property]}"
  },
  "SeriesTypes": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<AgChartOptions['series']>[number]"
  },
  "SeriesType": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": ["T extends SeriesTypes['type']"]
    },
    "type": "T extends 'area' ? AgAreaSeriesOptions : T extends 'bar' ? AgBarSeriesOptions : T extends 'column' ? AgBarSeriesOptions : T extends 'histogram' ? AgHistogramSeriesOptions : T extends 'line' ? AgLineSeriesOptions : T extends 'pie' ? AgPieSeriesOptions : T extends 'scatter' ? AgScatterSeriesOptions : T extends 'treemap' ? AgTreemapSeriesOptions : never"
  },
  "MarkerPathMove": {
    "meta": { "isTypeAlias": true },
    "type": "{ x: number; y: number; t?: 'move'; }"
  },
  "Offset": {
    "meta": {},
    "type": { "offsetX": "number", "offsetY": "number" }
  },
  "FillSelectionDatum": {
    "meta": {},
    "type": { "itemId": "string", "points": "{ x: number; y: number; }[]" }
  },
  "StrokeSelectionDatum": {
    "meta": {},
    "type": {
      "yValues": "(number | undefined)[]",
      "itemId": "string",
      "points": "{ x: number; y: number; }[]"
    }
  },
  "MarkerSelectionDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "fill?": "string",
      "stroke?": "string",
      "yKey": "string",
      "yValue": "number",
      "series": "Series<any>",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "LabelSelectionDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "itemId": "any",
      "point": "Readonly<Point>",
      "label?": "{ readonly text: string; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; readonly fill: string; }"
    }
  },
  "CumulativeValue": {
    "meta": { "isTypeAlias": true },
    "type": "{ left: number; right: number; }"
  },
  "ProcessedXDatum": {
    "meta": { "isTypeAlias": true },
    "type": "{ xDatum: any; seriesDatum: any; }"
  },
  "AreaSeriesTag": {
    "meta": { "isEnum": true },
    "type": ["Fill", "Stroke", "Marker", "Label"],
    "docs": [null, null, null, null]
  },
  "AreaSeriesNodeDataContext": {
    "meta": { "isTypeAlias": true },
    "type": "SeriesNodeDataContext<MarkerSelectionDatum, LabelSelectionDatum> & { fillSelectionData: FillSelectionDatum; strokeSelectionData: StrokeSelectionDatum; }"
  },
  "BarNodeDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "yKey": "string",
      "yValue": "number",
      "width": "number",
      "height": "number",
      "fill?": "string",
      "stroke?": "string",
      "colorIndex": "number",
      "strokeWidth": "number",
      "label?": "Readonly<Point> & { readonly text: string; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; readonly fill: string; }",
      "series": "Series<any>",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>",
      "x": "number",
      "y": "number"
    }
  },
  "BarSeriesNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Bar", "Label"],
    "docs": [null, null]
  },
  "NodeDataSelection": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": [
        "N extends Node",
        "ContextType extends SeriesNodeDataContext"
      ]
    },
    "type": "Selection<N, ContextType['nodeData'][number]>"
  },
  "LabelDataSelection": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": [
        "N extends Node",
        "ContextType extends SeriesNodeDataContext"
      ]
    },
    "type": "Selection<N, ContextType['labelData'][number]>"
  },
  "SubGroup": {
    "meta": {
      "typeParams": [
        "C extends SeriesNodeDataContext",
        "SceneNodeType extends Node"
      ]
    },
    "type": {
      "paths": "Path[]",
      "dataNodeGroup": "Group",
      "labelGroup": "Group",
      "markerGroup?": "Group",
      "datumSelection": "NodeDataSelection<SceneNodeType, C>",
      "labelSelection": "LabelDataSelection<Text, C>",
      "markerSelection?": "NodeDataSelection<Marker, C>"
    }
  },
  "SeriesOpts": {
    "meta": {},
    "type": {
      "pathsPerSeries": "number",
      "pathsZIndexSubOrderOffset": "number[]",
      "hasMarkers": "boolean",
      "renderLayerPerSubSeries": "boolean"
    }
  },
  "HistogramSeriesNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Bin", "Label"],
    "docs": [null, null]
  },
  "HistogramNodeDatum": {
    "meta": {},
    "type": {
      "x": "number",
      "y": "number",
      "width": "number",
      "height": "number",
      "fill?": "string",
      "stroke?": "string",
      "strokeWidth": "number",
      "label?": "{ readonly text: string; readonly x: number; readonly y: number; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly fill: string; }",
      "series": "Series<any>",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "HistogramAggregation": {
    "meta": { "isTypeAlias": true },
    "type": "NonNullable<AgHistogramSeriesOptions['aggregation']>"
  },
  "AggregationFunction": {
    "meta": { "isTypeAlias": true },
    "type": "(bin: HistogramBin, yKey: string) => number"
  },
  "LineNodeDatum": {
    "meta": {},
    "type": {
      "point": "SeriesNodeDatum['point'] & { readonly moveTo: boolean; }",
      "label?": "{ readonly text: string; readonly fontStyle?: FontStyle; readonly fontWeight?: FontWeight; readonly fontSize: number; readonly fontFamily: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; readonly fill: string; }",
      "series": "Series<any>",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "PointDatum": {
    "meta": {},
    "type": { "xDatum": "any", "yDatum": "any", "datum": "any" }
  },
  "LineContext": {
    "meta": { "isTypeAlias": true },
    "type": "SeriesNodeDataContext<LineNodeDatum>"
  },
  "ScatterNodeDatum": {
    "meta": {},
    "type": {
      "label": "MeasuredLabel",
      "series": "Series<any>",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "TreeDatum": {
    "meta": { "isTypeAlias": true },
    "type": "{ [prop: string]: any; children?: TreeDatum[]; }"
  },
  "TreemapNodeDatum": {
    "meta": {},
    "type": {
      "datum": "TreeDatum",
      "value": "number",
      "depth": "number",
      "label": "string",
      "fill": "string",
      "parent?": "TreemapNodeDatum",
      "isLeaf": "boolean",
      "children": "TreemapNodeDatum[]",
      "series": "Series<any>",
      "itemId?": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "TextNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Name", "Value"],
    "docs": [null, null]
  },
  "TextMeta": {
    "meta": { "isTypeAlias": true },
    "type": "{ text: string; style: Label; x: number; y: number; hAlign: CanvasTextAlign; vAlign: CanvasTextBaseline; }"
  },
  "LabelMeta": {
    "meta": { "isTypeAlias": true },
    "type": "{ label?: TextMeta; value?: TextMeta; }"
  },
  "PieNodeDatum": {
    "meta": {},
    "type": {
      "index": "number",
      "radius": "number",
      "startAngle": "number",
      "endAngle": "number",
      "midAngle": "number",
      "midCos": "number",
      "midSin": "number",
      "calloutLabel?": "{ readonly text: string; readonly textAlign: CanvasTextAlign; readonly textBaseline: CanvasTextBaseline; hidden: boolean; }",
      "sectorLabel?": "{ readonly text: string; }",
      "sectorFormat": "AgPieSeriesFormat",
      "series": "Series<any>",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "PieNodeTag": {
    "meta": { "isEnum": true },
    "type": ["Sector", "Callout", "Label"],
    "docs": [null, null, null]
  },
  "SectorBoundaries": {
    "meta": {},
    "type": {
      "startAngle": "number",
      "endAngle": "number",
      "innerRadius": "number",
      "outerRadius": "number"
    }
  },
  "SeriesNodeDatum": {
    "meta": {
      "doc": "/** Processed series datum used in node selections,\n * contains information used to render pie sectors, bars, markers, etc.\n */"
    },
    "type": {
      "series": "Series<any>",
      "itemId?": "any",
      "datum": "any",
      "point?": "Readonly<SizedPoint>"
    }
  },
  "SeriesNodePickMode": {
    "meta": { "isEnum": true },
    "type": [
      "EXACT_SHAPE_MATCH",
      "NEAREST_BY_MAIN_AXIS_FIRST",
      "NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST",
      "NEAREST_NODE"
    ],
    "docs": [
      "/** Pick matches based upon pick coordinates being inside a matching shape/marker. */",
      "/** Pick matches by nearest category/X-axis value, then distance within that category/X-value. */",
      "/** Pick matches by nearest category value, then distance within that category. */",
      "/** Pick matches based upon distance to ideal position */"
    ]
  },
  "SeriesNodePickMatch": {
    "meta": { "isTypeAlias": true },
    "type": "{ datum: SeriesNodeDatum; distance: number; }"
  },
  "SeriesNodeDataContext": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": ["S = SeriesNodeDatum", "L = S"]
    },
    "type": "{ itemId: string; nodeData: S[]; labelData: L[]; }"
  },
  "TestCase": {
    "meta": {},
    "type": {
      "options": "AgChartOptions",
      "assertions": "(chart: AgChartInstance) => Promise<void>",
      "extraScreenshotActions?": "(chart: AgChartInstance) => Promise<void>"
    }
  },
  "CartesianTestCase": {
    "meta": {},
    "type": {
      "options": "AgCartesianChartOptions",
      "assertions": "(chart: AgChartInstance) => Promise<void>",
      "extraScreenshotActions?": "(chart: AgChartInstance) => Promise<void>"
    }
  },
  "PolarTestCase": {
    "meta": {},
    "type": {
      "options": "AgPolarChartOptions",
      "assertions": "(chart: AgChartInstance) => Promise<void>",
      "extraScreenshotActions?": "(chart: AgChartInstance) => Promise<void>"
    }
  },
  "ChartThemeDefaults": {
    "meta": { "isTypeAlias": true },
    "type": "{ cartesian: AgCartesianThemeOptions; groupedCategory: AgCartesianThemeOptions; polar: AgPolarThemeOptions; hierarchy: AgHierarchyThemeOptions; } & { [key in keyof AgCartesianSeriesTheme]?: AgCartesianThemeOptions; } & { [key in keyof AgPolarSeriesTheme]?: AgPolarThemeOptions; } & { [key in keyof AgHierarchySeriesTheme]?: AgHierarchyThemeOptions; }"
  },
  "TooltipMeta": {
    "meta": {},
    "type": {
      "pageX": "number",
      "pageY": "number",
      "offsetX": "number",
      "offsetY": "number",
      "event": "Event | InteractionEvent<any>"
    }
  },
  "Tick": { "meta": {}, "type": { "labels": "string[]" } },
  "ScaleClampParams": {
    "meta": {},
    "type": { "strict": "boolean" },
    "docs": {
      "strict": "/** If `true` the values outside of the domain will become `NaN`.\n     * If `false` such values will be clamped to the domain edges.\n     */"
    }
  },
  "ScaleTickFormatParams": {
    "meta": {},
    "type": { "ticks?": "any[]", "specifier?": "any" }
  },
  "Scale": {
    "meta": { "typeParams": ["D", "R", "I = number"] },
    "type": {
      "domain": "D[]",
      "range": "R[]",
      "nice?": "boolean",
      "tickCount?": "number",
      "interval?": "I",
      "convert(value: D, params?: ScaleClampParams)": "R",
      "invert?(value: R)": "D",
      "ticks?()": "D[]",
      "tickFormat?(params: ScaleTickFormatParams)": "(x: any) => string",
      "bandwidth?": "number"
    }
  },
  "DefaultTimeFormats": {
    "meta": { "isEnum": true },
    "type": [
      "MILLISECOND",
      "SECOND",
      "MINUTE",
      "HOUR",
      "WEEK_DAY",
      "SHORT_MONTH",
      "MONTH",
      "SHORT_YEAR",
      "YEAR"
    ],
    "docs": [null, null, null, null, null, null, null, null, null]
  },
  "RedrawType": {
    "meta": { "isEnum": true },
    "type": ["NONE", "TRIVIAL", "MINOR", "MAJOR"],
    "docs": [null, null, null, null]
  },
  "SceneChangeDetectionOptions": {
    "meta": { "isTypeAlias": true },
    "type": "{ redraw?: RedrawType; type?: 'normal' | 'transform' | 'path' | 'font'; convertor?: (o: any) => any; changeCb?: (o: any) => any; checkDirtyOnAssignment?: boolean; }"
  },
  "GradientColorStop": {
    "meta": {},
    "type": { "offset": "number", "color": "string" }
  },
  "PointerEvents": {
    "meta": { "isEnum": true },
    "type": ["All", "None"],
    "docs": [null, null]
  },
  "RenderContext": {
    "meta": { "isTypeAlias": true },
    "type": "{ ctx: CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D; forceRender: boolean; resized: boolean; clipBBox?: BBox; stats?: { nodesRendered: number; nodesSkipped: number; layersRendered: number; layersSkipped: number; }; debugNodes: Record<string, Node>; }"
  },
  "Layer": {
    "meta": { "isTypeAlias": true },
    "type": "HdpiCanvas | HdpiOffscreenCanvas"
  },
  "LayerManager": {
    "meta": {},
    "type": {
      "debug": "SceneDebugOptions",
      "canvas": "Layer",
      "markDirty()": "void",
      "addLayer(opts: { zIndex?: number; zIndexSubOrder?: [ string, number ]; name?: string; getComputedOpacity: () => number; getVisibility: () => boolean; })": "Layer | undefined",
      "moveLayer(canvas: Layer, zIndex: number, zIndexSubOrder?: [ string, number ])": "void",
      "removeLayer(canvas: Layer)": "void"
    }
  },
  "Command": {
    "meta": { "isEnum": true },
    "type": ["Move", "Line", "Arc", "Curve", "ClosePath"],
    "docs": [null, null, null, null, null]
  },
  "Point": { "meta": {}, "type": { "x": "number", "y": "number" } },
  "SizedPoint": {
    "meta": {},
    "type": { "size": "number", "x": "number", "y": "number" }
  },
  "SceneOptions": {
    "meta": {},
    "type": {
      "document": "Document",
      "mode": "'simple' | 'composite' | 'dom-composite' | 'adv-composite'"
    }
  },
  "SceneLayer": {
    "meta": {},
    "type": {
      "id": "number",
      "name?": "string",
      "zIndex": "number",
      "zIndexSubOrder?": "[ string, number ]",
      "canvas": "HdpiOffscreenCanvas | HdpiCanvas",
      "getComputedOpacity": "() => number",
      "getVisibility": "() => boolean"
    }
  },
  "SceneDebugOptions": {
    "meta": {},
    "type": {
      "stats": "false | 'basic' | 'detailed'",
      "dirtyTree": "boolean",
      "renderBoundingBoxes": "boolean",
      "consoleLog": "boolean",
      "sceneNodeHighlight": "(string | RegExp)[]"
    }
  },
  "NodeConstructor": {
    "meta": { "isTypeAlias": true, "typeParams": ["TNode extends Node"] },
    "type": "new () => TNode"
  },
  "NodeFactory": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": ["TNode extends Node", "TDatum"]
    },
    "type": "(datum: TDatum) => TNode"
  },
  "NodeConstructorOrFactory": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": ["TNode extends Node", "TDatum"]
    },
    "type": "NodeConstructor<TNode> | NodeFactory<TNode, TDatum>"
  },
  "ArcType": {
    "meta": { "isEnum": true },
    "type": ["Open", "Chord", "Round"],
    "docs": [null, null, null]
  },
  "ShapeLineCap": {
    "meta": { "isTypeAlias": true },
    "type": "'butt' | 'round' | 'square'"
  },
  "ShapeLineJoin": {
    "meta": { "isTypeAlias": true },
    "type": "'round' | 'bevel' | 'miter'"
  },
  "Comparator": {
    "meta": { "isTypeAlias": true, "typeParams": ["T"] },
    "type": "(a: T, b: T) => number"
  },
  "TransformFn": {
    "meta": { "isTypeAlias": true },
    "type": "(target: any, key: string | symbol, value: any, oldValue?: any) => any | typeof BREAK_TRANSFORM_CHAIN"
  },
  "TransformConfig": {
    "meta": { "isTypeAlias": true },
    "type": "{ setters: TransformFn[]; getters: TransformFn[]; }"
  },
  "LiteralProperties": {
    "meta": { "isTypeAlias": true },
    "type": "'shape' | 'data'"
  },
  "SkippableProperties": {
    "meta": { "isTypeAlias": true },
    "type": "'axes' | 'series' | 'container' | 'customChartThemes'"
  },
  "IsLiteralProperty": {
    "meta": { "isTypeAlias": true, "typeParams": ["T", "K extends keyof T"] },
    "type": "K extends LiteralProperties ? true : T[K] extends Array<any> ? true : false"
  },
  "IsSkippableProperty": {
    "meta": { "isTypeAlias": true, "typeParams": ["T", "K extends keyof T"] },
    "type": "K extends SkippableProperties ? true : false"
  },
  "JsonMergeOptions": {
    "meta": {},
    "type": { "avoidDeepClone": "string[]" },
    "docs": {
      "avoidDeepClone": "/** Contains a list of properties where deep clones should be avoided\n     */"
    }
  },
  "Classification": {
    "meta": { "isTypeAlias": true },
    "type": "'array' | 'object' | 'primitive'"
  },
  "MeasuredLabel": {
    "meta": {},
    "type": { "text": "string", "width": "number", "height": "number" }
  },
  "PlacedLabel": {
    "meta": { "typeParams": ["PLD = PointLabelDatum"] },
    "type": {
      "index": "number",
      "datum": "PLD",
      "text": "string",
      "width": "number",
      "height": "number",
      "x": "number",
      "y": "number"
    }
  },
  "PointLabelDatum": {
    "meta": {},
    "type": { "point": "Readonly<SizedPoint>", "label": "MeasuredLabel" }
  },
  "Bounds": {
    "meta": {},
    "type": {
      "width": "number",
      "height": "number",
      "x": "number",
      "y": "number"
    }
  },
  "Listener": {
    "meta": { "isTypeAlias": true, "typeParams": ["H extends Function"] },
    "type": "{ symbol?: Symbol; handler: H; }"
  },
  "ModuleContext": {
    "meta": {},
    "type": {
      "scene": "Scene",
      "interactionManager": "InteractionManager",
      "highlightManager": "HighlightManager",
      "cursorManager": "CursorManager",
      "zoomManager": "ZoomManager",
      "tooltipManager": "TooltipManager",
      "layoutService": "Pick<LayoutService, 'addListener' | 'removeListener'>"
    }
  },
  "ModuleContextWithParent": {
    "meta": { "typeParams": ["P"] },
    "type": {
      "parent": "P",
      "scene": "Scene",
      "interactionManager": "InteractionManager",
      "highlightManager": "HighlightManager",
      "cursorManager": "CursorManager",
      "zoomManager": "ZoomManager",
      "tooltipManager": "TooltipManager",
      "layoutService": "Pick<LayoutService, 'addListener' | 'removeListener'>"
    }
  },
  "AxisContext": {
    "meta": {},
    "type": {
      "axisId": "string",
      "position": "AgCartesianAxisPosition",
      "direction": "'x' | 'y'",
      "scaleConvert(val: any)": "number",
      "scaleInvert(position: number)": "any"
    }
  },
  "ModuleInstance": {
    "meta": {},
    "type": { "update()": "void", "destroy()": "void" }
  },
  "ModuleInstanceMeta": {
    "meta": { "typeParams": ["M extends ModuleInstance = ModuleInstance"] },
    "type": { "instance": "M" }
  },
  "BaseModule": {
    "meta": {},
    "type": {
      "optionsKey": "string",
      "chartTypes": "('cartesian' | 'polar' | 'hierarchy')[]"
    }
  },
  "RootModule": {
    "meta": { "typeParams": ["M extends ModuleInstance = ModuleInstance"] },
    "type": {
      "type": "'root'",
      "initialiseModule(ctx: ModuleContext)": "ModuleInstanceMeta<M>",
      "optionsKey": "string",
      "chartTypes": "('cartesian' | 'polar' | 'hierarchy')[]"
    }
  },
  "AxisModule": {
    "meta": { "typeParams": ["M extends ModuleInstance = ModuleInstance"] },
    "type": {
      "type": "'axis'",
      "initialiseModule(ctx: ModuleContextWithParent<AxisContext>)": "ModuleInstanceMeta<M>",
      "optionsKey": "string",
      "chartTypes": "('cartesian' | 'polar' | 'hierarchy')[]"
    }
  },
  "Module": {
    "meta": {
      "isTypeAlias": true,
      "typeParams": ["M extends ModuleInstance = ModuleInstance"]
    },
    "type": "RootModule<M> | AxisModule<M>"
  },
  "FormatterOptions": {
    "meta": {},
    "type": {
      "prefix?": "string",
      "fill?": "string",
      "align?": "string",
      "sign?": "string",
      "symbol?": "string",
      "zero?": "string",
      "width?": "number",
      "comma?": "string",
      "precision?": "number",
      "trim?": "boolean",
      "type?": "string",
      "suffix?": "string"
    }
  },
  "TypedEvent": { "meta": {}, "type": { "type": "string" } },
  "TypedEventListener": {
    "meta": { "isTypeAlias": true },
    "type": "(event: TypedEvent) => any"
  },
  "Callback": {
    "meta": { "isTypeAlias": true },
    "type": "(params: { count: number; }) => Promise<void> | void"
  },
  "OnSizeChange": {
    "meta": { "isTypeAlias": true },
    "type": "(size: Size, element: HTMLElement) => void"
  },
  "Entry": {
    "meta": { "isTypeAlias": true },
    "type": "{ cb: OnSizeChange; size?: Size; }"
  },
  "NumberFormat": {
    "meta": { "isTypeAlias": true },
    "type": "{ locales?: string | string[]; options?: any; }"
  },
  "DateFormat": { "meta": { "isTypeAlias": true }, "type": "string" },
  "ValueFormat": {
    "meta": { "isTypeAlias": true },
    "type": "NumberFormat | DateFormat"
  },
  "EncodeFn": {
    "meta": { "isTypeAlias": true },
    "type": "(date: Date) => number"
  },
  "DecodeFn": {
    "meta": { "isTypeAlias": true },
    "type": "(encoded: number) => Date"
  },
  "RangeFn": {
    "meta": { "isTypeAlias": true },
    "type": "(start: Date, end: Date) => () => void"
  },
  "CountableTimeIntervalOptions": {
    "meta": {},
    "type": { "snapTo?": "Date | number | 'start' | 'end'" }
  },
  "FormattingFn": {
    "meta": { "isTypeAlias": true },
    "type": "(dateTime: Date, paddingChar?: string) => string"
  },
  "PaddingString": {
    "meta": { "isTypeAlias": true },
    "type": "' ' | '0' | ''"
  },
  "FormattingString": { "meta": { "isTypeAlias": true }, "type": "string" },
  "LiteralString": { "meta": { "isTypeAlias": true }, "type": "string" },
  "ValidationContext": {
    "meta": { "isTypeAlias": true },
    "type": "{ target: any; }"
  },
  "ValidatePredicate": {
    "meta": { "isTypeAlias": true },
    "type": "{ (v: any, ctx: ValidationContext): boolean; message?: string; }"
  }
}
