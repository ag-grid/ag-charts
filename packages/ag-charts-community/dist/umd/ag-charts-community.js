(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.agCharts = {}));
})(this, (function (exports) { 'use strict';

    const AgErrorBarSupportedSeriesTypes = ['bar', 'line', 'scatter'];

    /**
     * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7
     */
    const __FORCE_MODULE_DETECTION$1 = 0;

    /**
     * The interval methods don't mutate Date parameters.
     */
    class TimeInterval {
        constructor(_encode, _decode, _rangeCallback) {
            this._encode = _encode;
            this._decode = _decode;
            this._rangeCallback = _rangeCallback;
        }
        /**
         * Returns a new date representing the latest interval boundary date before or equal to date.
         * For example, `day.floor(date)` typically returns 12:00 AM local time on the given date.
         * @param date
         */
        floor(date) {
            const d = new Date(date);
            const e = this._encode(d);
            return this._decode(e);
        }
        /**
         * Returns a new date representing the earliest interval boundary date after or equal to date.
         * @param date
         */
        ceil(date) {
            const d = new Date(Number(date) - 1);
            const e = this._encode(d);
            return this._decode(e + 1);
        }
        /**
         * Returns an array of dates representing every interval boundary after or equal to start (inclusive) and before stop (exclusive).
         * @param start Range start.
         * @param stop Range end.
         * @param extend If specified, the requested range will be extended to the closest "nice" values.
         */
        range(start, stop, extend) {
            var _a;
            const rangeCallback = (_a = this._rangeCallback) === null || _a === void 0 ? void 0 : _a.call(this, start, stop);
            const e0 = this._encode(extend ? this.floor(start) : this.ceil(start));
            const e1 = this._encode(extend ? this.ceil(stop) : this.floor(stop));
            if (e1 < e0) {
                return [];
            }
            const range = [];
            for (let e = e0; e <= e1; e++) {
                const d = this._decode(e);
                range.push(d);
            }
            rangeCallback === null || rangeCallback === void 0 ? void 0 : rangeCallback();
            return range;
        }
    }
    class CountableTimeInterval extends TimeInterval {
        getOffset(snapTo, step) {
            const s = typeof snapTo === 'number' || snapTo instanceof Date ? this._encode(new Date(snapTo)) : 0;
            return Math.floor(s) % step;
        }
        /**
         * Returns a filtered view of this interval representing every step'th date.
         * It can be a number of minutes, hours, days etc.
         * Must be a positive integer.
         * @param step
         */
        every(step, options) {
            let offset = 0;
            let rangeCallback;
            const { snapTo = 'start' } = options !== null && options !== void 0 ? options : {};
            if (typeof snapTo === 'string') {
                const initialOffset = offset;
                rangeCallback = (start, stop) => {
                    const s = snapTo === 'start' ? start : stop;
                    offset = this.getOffset(s, step);
                    return () => (offset = initialOffset);
                };
            }
            else if (typeof snapTo === 'number') {
                offset = this.getOffset(new Date(snapTo), step);
            }
            else if (snapTo instanceof Date) {
                offset = this.getOffset(snapTo, step);
            }
            const encode = (date) => {
                const e = this._encode(date);
                return Math.floor((e - offset) / step);
            };
            const decode = (encoded) => {
                return this._decode(encoded * step + offset);
            };
            return new TimeInterval(encode, decode, rangeCallback);
        }
    }

    function encode$b(date) {
        return date.getTime();
    }
    function decode$b(encoded) {
        return new Date(encoded);
    }
    const millisecond = new CountableTimeInterval(encode$b, decode$b);

    // Common time unit sizes in milliseconds.
    new Date(0).getFullYear();
    const durationSecond = 1000;
    const durationMinute = durationSecond * 60;
    const durationHour = durationMinute * 60;
    const durationDay = durationHour * 24;
    const durationWeek = durationDay * 7;
    const durationMonth = durationDay * 30;
    const durationYear = durationDay * 365;

    const offset$2 = new Date().getTimezoneOffset() * durationMinute;
    function encode$a(date) {
        return Math.floor((date.getTime() - offset$2) / durationSecond);
    }
    function decode$a(encoded) {
        return new Date(offset$2 + encoded * durationSecond);
    }
    const second = new CountableTimeInterval(encode$a, decode$a);

    const offset$1 = new Date().getTimezoneOffset() * durationMinute;
    function encode$9(date) {
        return Math.floor((date.getTime() - offset$1) / durationMinute);
    }
    function decode$9(encoded) {
        return new Date(offset$1 + encoded * durationMinute);
    }
    const minute = new CountableTimeInterval(encode$9, decode$9);

    const offset = new Date().getTimezoneOffset() * durationMinute;
    function encode$8(date) {
        return Math.floor((date.getTime() - offset) / durationHour);
    }
    function decode$8(encoded) {
        return new Date(offset + encoded * durationHour);
    }
    const hour = new CountableTimeInterval(encode$8, decode$8);

    function encode$7(date) {
        const tzOffsetMs = date.getTimezoneOffset() * 60000;
        return Math.floor((date.getTime() - tzOffsetMs) / durationDay);
    }
    function decode$7(encoded) {
        const d = new Date(1970, 0, 1);
        d.setDate(d.getDate() + encoded);
        return d;
    }
    const day = new CountableTimeInterval(encode$7, decode$7);

    // Set date to n-th day of the week.
    function weekday(n) {
        const base = new Date(2023, 0, 1 + n).getTime();
        function encode(date) {
            const dateMs = date.getTime();
            return Math.floor((dateMs - base) / durationWeek);
        }
        function decode(encoded) {
            const d = new Date(base);
            d.setDate(d.getDate() + encoded * 7);
            return d;
        }
        return new CountableTimeInterval(encode, decode);
    }
    const sunday = weekday(0);
    const monday = weekday(1);
    const tuesday = weekday(2);
    const wednesday = weekday(3);
    const thursday = weekday(4);
    const friday = weekday(5);
    const saturday = weekday(6);

    function encode$6(date) {
        return date.getFullYear() * 12 + date.getMonth();
    }
    function decode$6(encoded) {
        const year = Math.floor(encoded / 12);
        const month = encoded - year * 12;
        return new Date(year, month, 1);
    }
    const month = new CountableTimeInterval(encode$6, decode$6);

    function encode$5(date) {
        return date.getFullYear();
    }
    function decode$5(encoded) {
        // Note: assigning years through the constructor
        // will break for years 0 - 99 AD (will turn 1900's).
        const d = new Date();
        d.setFullYear(encoded);
        d.setMonth(0, 1);
        d.setHours(0, 0, 0, 0);
        return d;
    }
    const year = new CountableTimeInterval(encode$5, decode$5);

    function encode$4(date) {
        return Math.floor(date.getTime() / durationMinute);
    }
    function decode$4(encoded) {
        return new Date(encoded * durationMinute);
    }
    const utcMinute = new CountableTimeInterval(encode$4, decode$4);

    function encode$3(date) {
        return Math.floor(date.getTime() / durationHour);
    }
    function decode$3(encoded) {
        return new Date(encoded * durationHour);
    }
    const utcHour = new CountableTimeInterval(encode$3, decode$3);

    function encode$2(date) {
        return Math.floor(date.getTime() / durationDay);
    }
    function decode$2(encoded) {
        const d = new Date(0);
        d.setUTCDate(d.getUTCDate() + encoded);
        d.setUTCHours(0, 0, 0, 0);
        return d;
    }
    const utcDay = new CountableTimeInterval(encode$2, decode$2);

    function encode$1(date) {
        return date.getUTCFullYear() * 12 + date.getUTCMonth();
    }
    function decode$1(encoded) {
        const year = Math.floor(encoded / 12);
        const month = encoded - year * 12;
        return new Date(Date.UTC(year, month, 1));
    }
    const utcMonth = new CountableTimeInterval(encode$1, decode$1);

    function encode(date) {
        return date.getUTCFullYear();
    }
    function decode(encoded) {
        // Note: assigning years through the constructor
        // will break for years 0 - 99 AD (will turn 1900's).
        const d = new Date();
        d.setUTCFullYear(encoded);
        d.setUTCMonth(0, 1);
        d.setUTCHours(0, 0, 0, 0);
        return d;
    }
    const utcYear = new CountableTimeInterval(encode, decode);

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        millisecond: millisecond,
        second: second,
        minute: minute,
        hour: hour,
        day: day,
        sunday: sunday,
        monday: monday,
        tuesday: tuesday,
        wednesday: wednesday,
        thursday: thursday,
        friday: friday,
        saturday: saturday,
        month: month,
        year: year,
        utcMinute: utcMinute,
        utcHour: utcHour,
        utcDay: utcDay,
        utcMonth: utcMonth,
        utcYear: utcYear
    });

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    const enterpriseModule = {
        isEnterprise: false,
    };

    class BaseModuleInstance {
        constructor() {
            this.destroyFns = [];
        }
        destroy() {
            for (const destroyFn of this.destroyFns) {
                destroyFn();
            }
        }
    }
    const REGISTERED_MODULES = [];
    function registerModule(module) {
        const otherModule = REGISTERED_MODULES.find((other) => {
            return (module.type === other.type &&
                module.optionsKey === other.optionsKey &&
                module.identifier === other.identifier);
        });
        if (otherModule) {
            if (module.packageType === 'enterprise' && otherModule.packageType === 'community') {
                // Replace the community module with an enterprise version
                const index = REGISTERED_MODULES.indexOf(otherModule);
                REGISTERED_MODULES.splice(index, 1, module);
            }
        }
        else {
            // Simply register the module
            REGISTERED_MODULES.push(module);
        }
    }
    function hasRegisteredEnterpriseModules() {
        return REGISTERED_MODULES.some((m) => m.packageType === 'enterprise');
    }
    const MODULE_CONFLICTS = new Map();
    function registerModuleConflicts(source, targets) {
        MODULE_CONFLICTS.set(source, targets);
    }

    function extent(values) {
        const { length } = values;
        if (length === 0) {
            return undefined;
        }
        let min = Infinity;
        let max = -Infinity;
        for (let i = 0; i < length; i++) {
            let v = values[i];
            if (v instanceof Date) {
                v = v.getTime();
            }
            if (typeof v !== 'number') {
                continue;
            }
            if (v < min) {
                min = v;
            }
            if (v > max) {
                max = v;
            }
        }
        const extent = [min, max];
        if (extent.some((v) => !isFinite(v))) {
            return undefined;
        }
        return extent;
    }
    function normalisedExtent(d, min, max) {
        return normalisedExtentWithMetadata(d, min, max).extent;
    }
    function normalisedExtentWithMetadata(d, min, max) {
        var _a;
        let clipped = false;
        if (d.length > 2) {
            d = (_a = extent(d)) !== null && _a !== void 0 ? _a : [NaN, NaN];
        }
        if (!isNaN(min)) {
            clipped || (clipped = min > d[0]);
            d = [min, d[1]];
        }
        if (!isNaN(max)) {
            clipped || (clipped = max < d[1]);
            d = [d[0], max];
        }
        if (d[0] > d[1]) {
            d = [];
        }
        return { extent: d, clipped };
    }
    function arraysEqual(a, b) {
        if (a == null || b == null || a.length !== b.length) {
            return false;
        }
        for (let i = 0; i < a.length; i++) {
            if (Array.isArray(a[i]) && Array.isArray(b[i])) {
                if (!arraysEqual(a[i], b[i])) {
                    return false;
                }
            }
            else if (a[i] !== b[i]) {
                return false;
            }
        }
        return true;
    }
    function toArray(value) {
        if (typeof value === 'undefined') {
            return [];
        }
        return Array.isArray(value) ? value : [value];
    }

    const doOnceFlags = {};
    /**
     * If the key was passed before, then doesn't execute the func
     */
    function doOnce(func, key) {
        if (doOnceFlags[key]) {
            return;
        }
        func();
        doOnceFlags[key] = true;
    }

    /* eslint-disable no-console */
    const Logger = {
        log(...logContent) {
            console.log(...logContent);
        },
        warn(message, ...logContent) {
            console.warn(`AG Charts - ${message}`, ...logContent);
        },
        error(message, ...logContent) {
            if (typeof message === 'object') {
                console.error(`AG Charts error`, message, ...logContent);
            }
            else {
                console.error(`AG Charts - ${message}`, ...logContent);
            }
        },
        table(...logContent) {
            console.table(...logContent);
        },
        warnOnce(message, ...logContent) {
            doOnce(() => Logger.warn(message, ...logContent), `Logger.warn: ${message}`);
        },
        errorOnce(message, ...logContent) {
            doOnce(() => Logger.error(message, ...logContent), `Logger.warn: ${message}`);
        },
    };

    function windowValue(name) {
        /**
         * Redeclaration of window that is safe for use with Gatsby server-side (webpack) compilation.
         */
        const WINDOW = typeof window !== 'undefined'
            ? window
            : // typeof global !== 'undefined' ? (global as any) :
                undefined;
        return WINDOW === null || WINDOW === void 0 ? void 0 : WINDOW[name];
    }

    const LONG_TIME_PERIOD_THRESHOLD = 2000;
    let timeOfLastLog = Date.now();
    const logTimeGap = () => {
        const timeSinceLastLog = Date.now() - timeOfLastLog;
        if (timeSinceLastLog > LONG_TIME_PERIOD_THRESHOLD) {
            const prettyDuration = (Math.floor(timeSinceLastLog / 100) / 10).toFixed(1);
            Logger.log(`**** ${prettyDuration}s since last log message ****`);
        }
        timeOfLastLog = Date.now();
    };
    const Debug = {
        create(...debugSelectors) {
            return (...logContent) => {
                if (Debug.check(...debugSelectors)) {
                    if (typeof logContent[0] === 'function') {
                        logContent = toArray(logContent[0]());
                    }
                    logTimeGap();
                    Logger.log(...logContent);
                }
            };
        },
        check(...debugSelectors) {
            if (debugSelectors.length === 0) {
                debugSelectors.push(true);
            }
            const chartDebug = toArray(windowValue('agChartsDebug'));
            return chartDebug.some((selector) => debugSelectors.includes(selector));
        },
    };

    const BREAK_TRANSFORM_CHAIN = Symbol('BREAK');
    const CONFIG_KEY = '__decorator_config';
    function initialiseConfig(target, propertyKeyOrSymbol, propertyKey, valueStoreKey) {
        if (Object.getOwnPropertyDescriptor(target, CONFIG_KEY) == null) {
            Object.defineProperty(target, CONFIG_KEY, { value: {} });
        }
        const config = target[CONFIG_KEY];
        if (config[propertyKey] != null) {
            return config[propertyKey];
        }
        config[propertyKey] = { setters: [], getters: [] };
        const descriptor = Object.getOwnPropertyDescriptor(target, propertyKeyOrSymbol);
        const prevSet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set;
        const prevGet = descriptor === null || descriptor === void 0 ? void 0 : descriptor.get;
        const getter = function () {
            var _a, _b;
            let value = prevGet ? prevGet.call(this) : this[valueStoreKey];
            for (const transformFn of (_b = (_a = config[propertyKey]) === null || _a === void 0 ? void 0 : _a.getters) !== null && _b !== void 0 ? _b : []) {
                value = transformFn(this, propertyKeyOrSymbol, value);
                if (value === BREAK_TRANSFORM_CHAIN) {
                    return undefined;
                }
            }
            return value;
        };
        const setter = function (value) {
            var _a, _b;
            const setters = (_b = (_a = config[propertyKey]) === null || _a === void 0 ? void 0 : _a.setters) !== null && _b !== void 0 ? _b : [];
            let oldValue;
            if (setters.some((f) => f.length > 2)) {
                // Lazily retrieve old value.
                oldValue = prevGet ? prevGet.call(this) : this[valueStoreKey];
            }
            for (const transformFn of setters) {
                value = transformFn(this, propertyKeyOrSymbol, value, oldValue);
                if (value === BREAK_TRANSFORM_CHAIN) {
                    return;
                }
            }
            if (prevSet) {
                prevSet.call(this, value);
            }
            else {
                this[valueStoreKey] = value;
            }
        };
        Object.defineProperty(target, propertyKeyOrSymbol, {
            set: setter,
            get: getter,
            enumerable: true,
            configurable: false,
        });
        return config[propertyKey];
    }
    function addTransformToInstanceProperty(setTransform, getTransform) {
        return (target, propertyKeyOrSymbol) => {
            const propertyKey = propertyKeyOrSymbol.toString();
            const valueStoreKey = `__${propertyKey}`;
            const { getters, setters } = initialiseConfig(target, propertyKeyOrSymbol, propertyKey, valueStoreKey);
            setters.push(setTransform);
            if (getTransform) {
                getters.unshift(getTransform);
            }
        };
    }
    function isDecoratedObject(target) {
        return typeof target !== 'undefined' && CONFIG_KEY in target;
    }
    function listDecoratedProperties(target) {
        const targets = new Set();
        while (isDecoratedObject(target)) {
            targets.add(target === null || target === void 0 ? void 0 : target[CONFIG_KEY]);
            target = Object.getPrototypeOf(target);
        }
        return Array.from(targets).flatMap((configMap) => Object.keys(configMap));
    }
    function extractDecoratedProperties(target) {
        return listDecoratedProperties(target).reduce((result, key) => {
            var _a;
            result[key] = (_a = target[key]) !== null && _a !== void 0 ? _a : null;
            return result;
        }, {});
    }

    function createDeprecationWarning() {
        return (key, message) => {
            const msg = [`Property [${key}] is deprecated.`, message].filter((v) => v != null).join(' ');
            Logger.warnOnce(msg);
        };
    }

    const CLASS_INSTANCE_TYPE = 'class-instance';
    /**
     * Performs a JSON-diff between a source and target JSON structure.
     *
     * On a per property basis, takes the target property value where:
     * - types are different.
     * - type is primitive.
     * - type is array and length or content have changed.
     *
     * Recurses for object types.
     *
     * @param source starting point for diff
     * @param target target for diff vs. source
     *
     * @returns `null` if no differences, or an object with the subset of properties that have changed.
     */
    function jsonDiff(source, target) {
        const sourceType = classify(source);
        const targetType = classify(target);
        if (targetType === 'array') {
            const targetArray = target;
            if (sourceType !== 'array' || source.length !== targetArray.length) {
                return [...targetArray];
            }
            if (targetArray.some((targetElement, i) => jsonDiff(source === null || source === void 0 ? void 0 : source[i], targetElement) != null)) {
                return [...targetArray];
            }
            return null;
        }
        if (targetType === 'primitive') {
            if (sourceType !== 'primitive') {
                return Object.assign({}, target);
            }
            if (source !== target) {
                return target;
            }
            return null;
        }
        const lhs = source || {};
        const rhs = target || {};
        const allProps = new Set([...Object.keys(lhs), ...Object.keys(rhs)]);
        let propsChangedCount = 0;
        const result = {};
        for (const prop of allProps) {
            // Cheap-and-easy equality check.
            if (lhs[prop] === rhs[prop]) {
                continue;
            }
            const take = (v) => {
                result[prop] = v;
                propsChangedCount++;
            };
            const lhsType = classify(lhs[prop]);
            const rhsType = classify(rhs[prop]);
            if (lhsType !== rhsType) {
                // Types changed, just take RHS.
                take(rhs[prop]);
                continue;
            }
            if (rhsType === 'primitive' || rhsType === null) {
                take(rhs[prop]);
                continue;
            }
            if (rhsType === 'array' && lhs[prop].length !== rhs[prop].length) {
                // Arrays are different sizes, so just take target array.
                take(rhs[prop]);
                continue;
            }
            if (rhsType === CLASS_INSTANCE_TYPE) {
                // Don't try to do anything tricky with array diffs!
                take(rhs[prop]);
                continue;
            }
            if (rhsType === 'function' && lhs[prop] !== rhs[prop]) {
                take(rhs[prop]);
                continue;
            }
            const diff = jsonDiff(lhs[prop], rhs[prop]);
            if (diff !== null) {
                take(diff);
            }
        }
        return propsChangedCount === 0 ? null : result;
    }
    /**
     * Special value used by `jsonMerge` to signal that a property should be removed from the merged
     * output.
     */
    const DELETE = Symbol('<delete-property>');
    const NOT_SPECIFIED = Symbol('<unspecified-property>');
    /**
     * Merge together the provide JSON object structures, with the precedence of application running
     * from higher indexes to lower indexes.
     *
     * Deep-clones all objects to avoid mutation of the inputs changing the output object. For arrays,
     * just performs a deep-clone of the entire array, no merging of elements attempted.
     *
     * @param json all json objects to merge
     * @param opts merge options
     * @param opts.avoidDeepClone contains a list of properties where deep clones should be avoided
     *
     * @returns the combination of all the json inputs
     */
    function jsonMerge(json, opts) {
        var _a;
        const avoidDeepClone = (_a = opts === null || opts === void 0 ? void 0 : opts.avoidDeepClone) !== null && _a !== void 0 ? _a : [];
        const jsonTypes = json.map((v) => classify(v));
        if (jsonTypes.some((v) => v === 'array')) {
            // Clone final array.
            const finalValue = json[json.length - 1];
            if (Array.isArray(finalValue)) {
                return finalValue.map((v) => {
                    const type = classify(v);
                    if (type === 'array')
                        return jsonMerge([[], v], opts);
                    if (type === 'object')
                        return jsonMerge([{}, v], opts);
                    return v;
                });
            }
            return finalValue;
        }
        const result = {};
        const props = new Set(json.map((v) => (v != null ? Object.keys(v) : [])).reduce((r, n) => r.concat(n), []));
        for (const nextProp of props) {
            const values = json
                .map((j) => {
                if (j != null && typeof j === 'object' && nextProp in j) {
                    return j[nextProp];
                }
                return NOT_SPECIFIED;
            })
                .filter((v) => v !== NOT_SPECIFIED);
            if (values.length === 0) {
                continue;
            }
            const lastValue = values[values.length - 1];
            if (lastValue === DELETE) {
                continue;
            }
            const types = values.map((v) => classify(v));
            const type = types[0];
            if (types.some((t) => t !== type)) {
                // Short-circuit if mismatching types.
                result[nextProp] = lastValue;
                continue;
            }
            if ((type === 'array' || type === 'object') && !avoidDeepClone.includes(nextProp)) {
                result[nextProp] = jsonMerge(values, opts);
            }
            else if (type === 'array') {
                // Arrays need to be shallow copied to avoid external mutation and allow jsonDiff to
                // detect changes.
                result[nextProp] = [...lastValue];
            }
            else {
                // Just directly assign/overwrite.
                result[nextProp] = lastValue;
            }
        }
        return result;
    }
    /**
     * Recursively apply a JSON object into a class-hierarchy, optionally instantiating certain classes
     * by property name.
     *
     * @param target to apply source JSON properties into
     * @param source to be applied
     * @param params
     * @param params.path path for logging/error purposes, to aid with pinpointing problems
     * @param params.matcherPath path for pattern matching, to lookup allowedTypes override.
     * @param params.skip property names to skip from the source
     * @param params.constructors dictionary of property name to class constructors for properties that
     *                            require object construction
     * @param params.constructedArrays map stores arrays which items should be initialised
     *                                 using a class constructor
     * @param params.allowedTypes overrides by path for allowed property types
     */
    function jsonApply(target, source, params = {}) {
        var _a, _b, _c;
        const { path = undefined, matcherPath = path ? path.replace(/(\[[0-9+]+])/i, '[]') : undefined, skip = [], constructors = {}, constructedArrays = new WeakMap(), allowedTypes = {}, idx, } = params;
        if (target == null) {
            throw new Error(`AG Charts - target is uninitialised: ${path !== null && path !== void 0 ? path : '<root>'}`);
        }
        if (source == null) {
            return target;
        }
        const targetAny = target;
        if (idx != null && '_declarationOrder' in targetAny) {
            targetAny['_declarationOrder'] = idx;
        }
        const targetType = classify(target);
        for (const property in source) {
            const propertyMatcherPath = `${matcherPath ? matcherPath + '.' : ''}${property}`;
            if (skip.indexOf(propertyMatcherPath) >= 0) {
                continue;
            }
            const newValue = source[property];
            const propertyPath = `${path ? path + '.' : ''}${property}`;
            const targetClass = targetAny.constructor;
            const currentValue = targetAny[property];
            let ctr = (_a = constructors[propertyMatcherPath]) !== null && _a !== void 0 ? _a : constructors[property];
            try {
                const currentValueType = classify(currentValue);
                const newValueType = classify(newValue);
                if (targetType === CLASS_INSTANCE_TYPE &&
                    !(property in target || Object.prototype.hasOwnProperty.call(targetAny, property))) {
                    Logger.warn(`unable to set [${propertyPath}] in ${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name} - property is unknown`);
                    continue;
                }
                const allowableTypes = (_b = allowedTypes[propertyMatcherPath]) !== null && _b !== void 0 ? _b : [currentValueType];
                if (currentValueType === CLASS_INSTANCE_TYPE && newValueType === 'object') {
                    // Allowed, this is the common case! - do not error.
                }
                else if (currentValueType != null && newValueType != null && !allowableTypes.includes(newValueType)) {
                    Logger.warn(`unable to set [${propertyPath}] in ${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name} - can't apply type of [${newValueType}], allowed types are: [${allowableTypes}]`);
                    continue;
                }
                if (newValueType === 'array') {
                    ctr = (_c = ctr !== null && ctr !== void 0 ? ctr : constructedArrays.get(currentValue)) !== null && _c !== void 0 ? _c : constructors[`${propertyMatcherPath}[]`];
                    if (ctr != null) {
                        const newValueArray = newValue;
                        targetAny[property] = newValueArray.map((v, idx) => jsonApply(new ctr(), v, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath + '[]', idx })));
                    }
                    else {
                        targetAny[property] = newValue;
                    }
                }
                else if (newValueType === CLASS_INSTANCE_TYPE) {
                    targetAny[property] = newValue;
                }
                else if (newValueType === 'object') {
                    if (currentValue != null) {
                        jsonApply(currentValue, newValue, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: undefined }));
                    }
                    else if (ctr != null) {
                        targetAny[property] = jsonApply(new ctr(), newValue, Object.assign(Object.assign({}, params), { path: propertyPath, matcherPath: propertyMatcherPath, idx: undefined }));
                    }
                    else {
                        targetAny[property] = newValue;
                    }
                }
                else {
                    targetAny[property] = newValue;
                }
            }
            catch (error) {
                Logger.warn(`unable to set [${propertyPath}] in [${targetClass === null || targetClass === void 0 ? void 0 : targetClass.name}]; nested error is: ${error.message}`);
            }
        }
        return target;
    }
    /**
     * Walk the given JSON object graphs, invoking the visit() callback for every object encountered.
     * Arrays are descended into without a callback, however their elements will have the visit()
     * callback invoked if they are objects.
     *
     * @param json to traverse
     * @param visit callback for each non-primitive and non-array object found
     * @param opts
     * @param opts.skip property names to skip when walking
     * @param jsons to traverse in parallel
     */
    function jsonWalk(json, visit, opts, ...jsons) {
        const jsonType = classify(json);
        const { skip = [] } = opts !== null && opts !== void 0 ? opts : {};
        if (jsonType === 'array') {
            visit(jsonType, json, ...jsons);
            json.forEach((element, index) => {
                jsonWalk(element, visit, opts, ...(jsons !== null && jsons !== void 0 ? jsons : []).map((o) => o === null || o === void 0 ? void 0 : o[index]));
            });
            return;
        }
        if (jsonType !== 'object') {
            return;
        }
        visit(jsonType, json, ...jsons);
        for (const property in json) {
            if (skip.includes(property)) {
                continue;
            }
            const value = json[property];
            const otherValues = jsons === null || jsons === void 0 ? void 0 : jsons.map((o) => o === null || o === void 0 ? void 0 : o[property]);
            const valueType = classify(value);
            if (valueType === 'object' || valueType === 'array') {
                jsonWalk(value, visit, opts, ...otherValues);
            }
        }
    }
    const isBrowser = typeof window !== 'undefined';
    /**
     * Classify the type of value to assist with handling for merge purposes.
     */
    function classify(value) {
        if (value == null) {
            return null;
        }
        if (isBrowser && value instanceof HTMLElement) {
            return 'primitive';
        }
        if (Array.isArray(value)) {
            return 'array';
        }
        if (value instanceof Date) {
            return 'primitive';
        }
        if (typeof value === 'object' && value.constructor === Object) {
            return 'object';
        }
        if (typeof value === 'function') {
            return 'function';
        }
        if (typeof value === 'object' && value.constructor != null) {
            return CLASS_INSTANCE_TYPE;
        }
        return 'primitive';
    }

    const twoPi = Math.PI * 2;
    /**
     * Normalize the given angle to be in the [0, 2π) interval.
     * @param radians Angle in radians.
     */
    function normalizeAngle360(radians) {
        radians %= twoPi;
        radians += twoPi;
        radians %= twoPi;
        return radians;
    }
    function normalizeAngle360Inclusive(radians) {
        radians %= twoPi;
        radians += twoPi;
        if (radians !== twoPi) {
            radians %= twoPi;
        }
        return radians;
    }
    /**
     * Normalize the given angle to be in the [-π, π) interval.
     * @param radians Angle in radians.
     */
    function normalizeAngle180(radians) {
        radians %= twoPi;
        if (radians < -Math.PI) {
            radians += twoPi;
        }
        else if (radians >= Math.PI) {
            radians -= twoPi;
        }
        return radians;
    }
    function toRadians(degrees) {
        return (degrees / 180) * Math.PI;
    }
    function toDegrees(radians) {
        return (radians / Math.PI) * 180;
    }
    /**
     * Returns a rotation angle between two other angles.
     * @param angle0 Angle in radians.
     * @param angle1 Angle in radians.
     * @returns Angle in radians.
     */
    function angleBetween(angle0, angle1) {
        angle0 = normalizeAngle360(angle0);
        angle1 = normalizeAngle360(angle1);
        return angle1 - angle0 + (angle0 > angle1 ? 2 * Math.PI : 0);
    }

    function clamp$1(x, min, max) {
        return Math.max(min, Math.min(max, x));
    }
    /**
     * Maps a discrete domain to a continuous numeric range.
     */
    class BandScale {
        constructor() {
            this.type = 'band';
            this.cache = null;
            this.cacheProps = ['_domain', 'range', '_paddingInner', '_paddingOuter', 'round', 'interval'];
            /**
             * Maps datum to its index in the {@link domain} array.
             * Used to check for duplicate datums (not allowed).
             */
            this.index = new Map();
            /**
             * The output range values for datum at each index.
             */
            this.ordinalRange = [];
            /**
             * Contains unique datums only. Since `{}` is used in place of `Map`
             * for IE11 compatibility, the datums are converted `toString` before
             * the uniqueness check.
             */
            this._domain = [];
            this.range = [0, 1];
            this._bandwidth = 1;
            this._rawBandwidth = 1;
            /**
             * The ratio of the range that is reserved for space between bands.
             */
            this._paddingInner = 0;
            /**
             * The ratio of the range that is reserved for space before the first
             * and after the last band.
             */
            this._paddingOuter = 0;
            this.round = false;
        }
        didChange() {
            const { cache } = this;
            const didChange = !cache || this.cacheProps.some((p) => this[p] !== cache[p]);
            if (didChange) {
                this.cache = {};
                this.cacheProps.forEach((p) => (this.cache[p] = this[p]));
                return true;
            }
            return false;
        }
        refresh() {
            if (this.didChange()) {
                this.update();
            }
        }
        set domain(values) {
            const domain = [];
            this.index = new Map();
            const index = this.index;
            // In case one wants to have duplicate domain values, for example, two 'Italy' categories,
            // one should use objects rather than strings for domain values like so:
            // { toString: () => 'Italy' }
            // { toString: () => 'Italy' }
            values.forEach((value) => {
                if (index.get(value) === undefined) {
                    index.set(value, domain.push(value) - 1);
                }
            });
            this._domain = domain;
        }
        get domain() {
            return this._domain;
        }
        ticks() {
            this.refresh();
            const { interval = 1 } = this;
            const step = Math.abs(Math.round(interval));
            return this._domain.filter((_, i) => i % step === 0);
        }
        convert(d) {
            this.refresh();
            const i = this.index.get(d);
            if (i === undefined) {
                return NaN;
            }
            const r = this.ordinalRange[i];
            if (r === undefined) {
                return NaN;
            }
            return r;
        }
        invert(position) {
            this.refresh();
            const index = this.ordinalRange.findIndex((p) => p === position);
            return this.domain[index];
        }
        get bandwidth() {
            this.refresh();
            return this._bandwidth;
        }
        get rawBandwidth() {
            this.refresh();
            return this._rawBandwidth;
        }
        set padding(value) {
            value = clamp$1(value, 0, 1);
            this._paddingInner = value;
            this._paddingOuter = value;
        }
        get padding() {
            return this._paddingInner;
        }
        set paddingInner(value) {
            this._paddingInner = clamp$1(value, 0, 1);
        }
        get paddingInner() {
            return this._paddingInner;
        }
        set paddingOuter(value) {
            this._paddingOuter = clamp$1(value, 0, 1);
        }
        get paddingOuter() {
            return this._paddingOuter;
        }
        update() {
            const count = this._domain.length;
            if (count === 0) {
                return;
            }
            const round = this.round;
            const paddingInner = this._paddingInner;
            const paddingOuter = this._paddingOuter;
            const [r0, r1] = this.range;
            const width = r1 - r0;
            const rawStep = width / Math.max(1, count + 2 * paddingOuter - paddingInner);
            const step = round ? Math.floor(rawStep) : rawStep;
            const fullBandWidth = step * (count - paddingInner);
            const x0 = r0 + (width - fullBandWidth) / 2;
            const start = round ? Math.round(x0) : x0;
            const bw = step * (1 - paddingInner);
            const bandwidth = round ? Math.round(bw) : bw;
            const rawBandwidth = rawStep * (1 - paddingInner);
            const values = [];
            for (let i = 0; i < count; i++) {
                values.push(start + step * i);
            }
            this._bandwidth = bandwidth;
            this._rawBandwidth = rawBandwidth;
            this.ordinalRange = values;
        }
    }

    function clamp(min, value, max) {
        return Math.min(max, Math.max(min, value));
    }
    function isEqual(a, b, epsilon = 1e-10) {
        return Math.abs(a - b) < epsilon;
    }
    function isNegative(a) {
        return Math.sign(a) < 0 || Object.is(a, -0);
    }
    function round$1(value, decimals = 2) {
        const pow = Math.pow(10, decimals);
        return Math.round(value * pow) / pow;
    }
    /**
     * `Number.toFixed(n)` always formats a number so that it has `n` digits after the decimal point.
     * For example, `Number(0.00003427).toFixed(2)` returns `0.00`.
     * That's not very helpful, because all the meaningful information is lost.
     * In this case we would want the formatted value to have at least two significant digits: `0.000034`,
     * not two fraction digits.
     * @param value
     * @param fractionOrSignificantDigits
     */
    function toFixed(value, fractionOrSignificantDigits = 2) {
        const power = Math.floor(Math.log(Math.abs(value)) / Math.LN10);
        if (power >= 0 || !isFinite(power)) {
            return value.toFixed(fractionOrSignificantDigits); // fraction digits
        }
        return value.toFixed(Math.abs(power) - 1 + fractionOrSignificantDigits); // significant digits
    }
    /**
     * Returns the mathematically correct n modulus of m. For context, the JS % operator is remainder
     * NOT modulus, which is why this is needed.
     */
    function mod(n, m) {
        if (n >= 0) {
            return Math.floor(n % m);
        }
        return Math.floor((n % m) + m);
    }

    class Color {
        /**
         * Every color component should be in the [0, 1] range.
         * Some easing functions (such as elastic easing) can overshoot the target value by some amount.
         * So, when animating colors, if the source or target color components are already near
         * or at the edge of the allowed [0, 1] range, it is possible for the intermediate color
         * component value to end up outside of that range mid-animation. For this reason the constructor
         * performs range checking/constraining.
         * @param r Red component.
         * @param g Green component.
         * @param b Blue component.
         * @param a Alpha (opacity) component.
         */
        constructor(r, g, b, a = 1) {
            // NaN is treated as 0
            this.r = clamp(0, r || 0, 1);
            this.g = clamp(0, g || 0, 1);
            this.b = clamp(0, b || 0, 1);
            this.a = clamp(0, a || 0, 1);
        }
        /**
         * A color string can be in one of the following formats to be valid:
         * - #rgb
         * - #rrggbb
         * - rgb(r, g, b)
         * - rgba(r, g, b, a)
         * - CSS color name such as 'white', 'orange', 'cyan', etc.
         */
        static validColorString(str) {
            if (str.indexOf('#') >= 0) {
                return !!Color.parseHex(str);
            }
            if (str.indexOf('rgb') >= 0) {
                return !!Color.stringToRgba(str);
            }
            return !!Color.nameToHex[str.toLowerCase()];
        }
        /**
         * The given string can be in one of the following formats:
         * - #rgb
         * - #rrggbb
         * - rgb(r, g, b)
         * - rgba(r, g, b, a)
         * - CSS color name such as 'white', 'orange', 'cyan', etc.
         * @param str
         */
        static fromString(str) {
            // hexadecimal notation
            if (str.indexOf('#') >= 0) {
                // there can be some leading whitespace
                return Color.fromHexString(str);
            }
            // color name
            const hex = Color.nameToHex[str.toLowerCase()];
            if (hex) {
                return Color.fromHexString(hex);
            }
            // rgb(a) notation
            if (str.indexOf('rgb') >= 0) {
                return Color.fromRgbaString(str);
            }
            throw new Error(`Invalid color string: '${str}'`);
        }
        static tryParseFromString(str) {
            try {
                return Color.fromString(str);
            }
            catch (e) {
                Logger.warnOnce(`invalid color string: '${str}'.`);
                return Color.fromArray([0, 0, 0]);
            }
        }
        // See https://drafts.csswg.org/css-color/#hex-notation
        static parseHex(input) {
            input = input.replace(/ /g, '').slice(1);
            let parts;
            switch (input.length) {
                case 6:
                case 8:
                    parts = [];
                    for (let i = 0; i < input.length; i += 2) {
                        parts.push(parseInt(`${input[i]}${input[i + 1]}`, 16));
                    }
                    break;
                case 3:
                case 4:
                    parts = input
                        .split('')
                        .map((p) => parseInt(p, 16))
                        .map((p) => p + p * 16);
                    break;
            }
            if ((parts === null || parts === void 0 ? void 0 : parts.length) >= 3 && parts.every((p) => p >= 0)) {
                if (parts.length === 3) {
                    parts.push(255);
                }
                return parts;
            }
        }
        static fromHexString(str) {
            const values = Color.parseHex(str);
            if (values) {
                const [r, g, b, a] = values;
                return new Color(r / 255, g / 255, b / 255, a / 255);
            }
            throw new Error(`Malformed hexadecimal color string: '${str}'`);
        }
        static stringToRgba(str) {
            // Find positions of opening and closing parentheses.
            let [po, pc] = [NaN, NaN];
            for (let i = 0; i < str.length; i++) {
                const c = str[i];
                if (!po && c === '(') {
                    po = i;
                }
                else if (c === ')') {
                    pc = i;
                    break;
                }
            }
            const contents = po && pc && str.substring(po + 1, pc);
            if (!contents) {
                return;
            }
            const parts = contents.split(',');
            const rgba = [];
            for (let i = 0; i < parts.length; i++) {
                const part = parts[i];
                let value = parseFloat(part);
                if (isNaN(value)) {
                    return;
                }
                if (part.indexOf('%') >= 0) {
                    // percentage r, g, or b value
                    value = Math.max(0, Math.min(100, value));
                    value /= 100;
                }
                else {
                    if (i === 3) {
                        // alpha component
                        value = Math.max(0, Math.min(1, value));
                    }
                    else {
                        // absolute r, g, or b value
                        value = Math.max(0, Math.min(255, value));
                        value /= 255;
                    }
                }
                rgba.push(value);
            }
            return rgba;
        }
        static fromRgbaString(str) {
            const rgba = Color.stringToRgba(str);
            if (rgba) {
                if (rgba.length === 3) {
                    return new Color(rgba[0], rgba[1], rgba[2]);
                }
                else if (rgba.length === 4) {
                    return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);
                }
            }
            throw new Error(`Malformed rgb/rgba color string: '${str}'`);
        }
        static fromArray(arr) {
            if (arr.length === 4) {
                return new Color(arr[0], arr[1], arr[2], arr[3]);
            }
            if (arr.length === 3) {
                return new Color(arr[0], arr[1], arr[2]);
            }
            throw new Error('The given array should contain 3 or 4 color components (numbers).');
        }
        static fromHSB(h, s, b, alpha = 1) {
            const rgb = Color.HSBtoRGB(h, s, b);
            return new Color(rgb[0], rgb[1], rgb[2], alpha);
        }
        static fromHSL(h, s, l, alpha = 1) {
            const rgb = Color.HSLtoRGB(h, s, l);
            return new Color(rgb[0], rgb[1], rgb[2], alpha);
        }
        static padHex(str) {
            // Can't use `padStart(2, '0')` here because of IE.
            return str.length === 1 ? '0' + str : str;
        }
        toHexString() {
            let hex = '#' +
                Color.padHex(Math.round(this.r * 255).toString(16)) +
                Color.padHex(Math.round(this.g * 255).toString(16)) +
                Color.padHex(Math.round(this.b * 255).toString(16));
            if (this.a < 1) {
                hex += Color.padHex(Math.round(this.a * 255).toString(16));
            }
            return hex;
        }
        toRgbaString(fractionDigits = 3) {
            const components = [Math.round(this.r * 255), Math.round(this.g * 255), Math.round(this.b * 255)];
            const k = Math.pow(10, fractionDigits);
            if (this.a !== 1) {
                components.push(Math.round(this.a * k) / k);
                return `rgba(${components.join(', ')})`;
            }
            return `rgb(${components.join(', ')})`;
        }
        toString() {
            if (this.a === 1) {
                return this.toHexString();
            }
            return this.toRgbaString();
        }
        toHSB() {
            return Color.RGBtoHSB(this.r, this.g, this.b);
        }
        static RGBtoHSL(r, g, b) {
            const min = Math.min(r, g, b);
            const max = Math.max(r, g, b);
            const l = (max + min) / 2;
            let h;
            let s;
            if (max === min) {
                // Achromatic
                h = NaN;
                s = 0;
            }
            else {
                const delta = max - min;
                s = l > 0.5 ? delta / (2 - max - min) : delta / (max + min);
                if (max === r) {
                    h = (g - b) / delta + (g < b ? 6 : 0);
                }
                else if (max === g) {
                    h = (b - r) / delta + 2;
                }
                else {
                    h = (r - g) / delta + 4;
                }
                h *= 360 / 6;
            }
            return [h, s, l];
        }
        static HSLtoRGB(h, s, l) {
            if (s === 0) {
                // Achromatic
                return [l, l, l];
            }
            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
            const p = 2 * l - q;
            function hueToRgb(t) {
                if (t < 0)
                    t += 1;
                if (t > 1)
                    t -= 1;
                if (t < 1 / 6)
                    return p + (q - p) * 6 * t;
                if (t < 1 / 2)
                    return q;
                if (t < 2 / 3)
                    return p + (q - p) * (2 / 3 - t) * 6;
                return p;
            }
            const r = hueToRgb(h / 360 + 1 / 3);
            const g = hueToRgb(h / 360);
            const b = hueToRgb(h / 360 - 1 / 3);
            return [r, g, b];
        }
        /**
         * Converts the given RGB triple to an array of HSB (HSV) components.
         * The hue component will be `NaN` for achromatic colors.
         */
        static RGBtoHSB(r, g, b) {
            const min = Math.min(r, g, b);
            const max = Math.max(r, g, b);
            const S = max !== 0 ? (max - min) / max : 0;
            let H = NaN;
            // min == max, means all components are the same
            // and the color is a shade of gray with no hue (H is NaN)
            if (min !== max) {
                const delta = max - min;
                const rc = (max - r) / delta;
                const gc = (max - g) / delta;
                const bc = (max - b) / delta;
                if (r === max) {
                    H = bc - gc;
                }
                else if (g === max) {
                    H = 2.0 + rc - bc;
                }
                else {
                    H = 4.0 + gc - rc;
                }
                H /= 6.0;
                if (H < 0) {
                    H = H + 1.0;
                }
            }
            return [H * 360, S, max];
        }
        /**
         * Converts the given HSB (HSV) triple to an array of RGB components.
         */
        static HSBtoRGB(H, S, B) {
            if (isNaN(H)) {
                H = 0;
            }
            H = (((H % 360) + 360) % 360) / 360; // normalize hue to [0, 360] interval, then scale to [0, 1]
            let r = 0;
            let g = 0;
            let b = 0;
            if (S === 0) {
                r = g = b = B;
            }
            else {
                const h = (H - Math.floor(H)) * 6;
                const f = h - Math.floor(h);
                const p = B * (1 - S);
                const q = B * (1 - S * f);
                const t = B * (1 - S * (1 - f));
                switch (h >> 0 // discard the floating point part of the number
                ) {
                    case 0:
                        r = B;
                        g = t;
                        b = p;
                        break;
                    case 1:
                        r = q;
                        g = B;
                        b = p;
                        break;
                    case 2:
                        r = p;
                        g = B;
                        b = t;
                        break;
                    case 3:
                        r = p;
                        g = q;
                        b = B;
                        break;
                    case 4:
                        r = t;
                        g = p;
                        b = B;
                        break;
                    case 5:
                        r = B;
                        g = p;
                        b = q;
                        break;
                }
            }
            return [r, g, b];
        }
        derive(hueShift, saturationFactor, brightnessFactor, opacityFactor) {
            const hsb = Color.RGBtoHSB(this.r, this.g, this.b);
            let b = hsb[2];
            if (b == 0 && brightnessFactor > 1.0) {
                b = 0.05;
            }
            const h = (((hsb[0] + hueShift) % 360) + 360) % 360;
            const s = Math.max(Math.min(hsb[1] * saturationFactor, 1.0), 0.0);
            b = Math.max(Math.min(b * brightnessFactor, 1.0), 0.0);
            const a = Math.max(Math.min(this.a * opacityFactor, 1.0), 0.0);
            const rgba = Color.HSBtoRGB(h, s, b);
            rgba.push(a);
            return Color.fromArray(rgba);
        }
        brighter() {
            return this.derive(0, 1.0, 1.0 / 0.7, 1.0);
        }
        darker() {
            return this.derive(0, 1.0, 0.7, 1.0);
        }
        static interpolate(color, other) {
            const c0 = Color.tryParseFromString(color);
            const c1 = Color.tryParseFromString(other);
            return (t) => {
                const i = (x, y) => x * (1 - t) + y * t;
                const c = new Color(i(c0.r, c1.r), i(c0.g, c1.g), i(c0.b, c1.b), i(c0.a, c1.a));
                return c.toString();
            };
        }
    }
    /**
     * CSS Color Module Level 4:
     * https://drafts.csswg.org/css-color/#named-colors
     */
    Color.nameToHex = Object.freeze({
        aliceblue: '#F0F8FF',
        antiquewhite: '#FAEBD7',
        aqua: '#00FFFF',
        aquamarine: '#7FFFD4',
        azure: '#F0FFFF',
        beige: '#F5F5DC',
        bisque: '#FFE4C4',
        black: '#000000',
        blanchedalmond: '#FFEBCD',
        blue: '#0000FF',
        blueviolet: '#8A2BE2',
        brown: '#A52A2A',
        burlywood: '#DEB887',
        cadetblue: '#5F9EA0',
        chartreuse: '#7FFF00',
        chocolate: '#D2691E',
        coral: '#FF7F50',
        cornflowerblue: '#6495ED',
        cornsilk: '#FFF8DC',
        crimson: '#DC143C',
        cyan: '#00FFFF',
        darkblue: '#00008B',
        darkcyan: '#008B8B',
        darkgoldenrod: '#B8860B',
        darkgray: '#A9A9A9',
        darkgreen: '#006400',
        darkgrey: '#A9A9A9',
        darkkhaki: '#BDB76B',
        darkmagenta: '#8B008B',
        darkolivegreen: '#556B2F',
        darkorange: '#FF8C00',
        darkorchid: '#9932CC',
        darkred: '#8B0000',
        darksalmon: '#E9967A',
        darkseagreen: '#8FBC8F',
        darkslateblue: '#483D8B',
        darkslategray: '#2F4F4F',
        darkslategrey: '#2F4F4F',
        darkturquoise: '#00CED1',
        darkviolet: '#9400D3',
        deeppink: '#FF1493',
        deepskyblue: '#00BFFF',
        dimgray: '#696969',
        dimgrey: '#696969',
        dodgerblue: '#1E90FF',
        firebrick: '#B22222',
        floralwhite: '#FFFAF0',
        forestgreen: '#228B22',
        fuchsia: '#FF00FF',
        gainsboro: '#DCDCDC',
        ghostwhite: '#F8F8FF',
        gold: '#FFD700',
        goldenrod: '#DAA520',
        gray: '#808080',
        green: '#008000',
        greenyellow: '#ADFF2F',
        grey: '#808080',
        honeydew: '#F0FFF0',
        hotpink: '#FF69B4',
        indianred: '#CD5C5C',
        indigo: '#4B0082',
        ivory: '#FFFFF0',
        khaki: '#F0E68C',
        lavender: '#E6E6FA',
        lavenderblush: '#FFF0F5',
        lawngreen: '#7CFC00',
        lemonchiffon: '#FFFACD',
        lightblue: '#ADD8E6',
        lightcoral: '#F08080',
        lightcyan: '#E0FFFF',
        lightgoldenrodyellow: '#FAFAD2',
        lightgray: '#D3D3D3',
        lightgreen: '#90EE90',
        lightgrey: '#D3D3D3',
        lightpink: '#FFB6C1',
        lightsalmon: '#FFA07A',
        lightseagreen: '#20B2AA',
        lightskyblue: '#87CEFA',
        lightslategray: '#778899',
        lightslategrey: '#778899',
        lightsteelblue: '#B0C4DE',
        lightyellow: '#FFFFE0',
        lime: '#00FF00',
        limegreen: '#32CD32',
        linen: '#FAF0E6',
        magenta: '#FF00FF',
        maroon: '#800000',
        mediumaquamarine: '#66CDAA',
        mediumblue: '#0000CD',
        mediumorchid: '#BA55D3',
        mediumpurple: '#9370DB',
        mediumseagreen: '#3CB371',
        mediumslateblue: '#7B68EE',
        mediumspringgreen: '#00FA9A',
        mediumturquoise: '#48D1CC',
        mediumvioletred: '#C71585',
        midnightblue: '#191970',
        mintcream: '#F5FFFA',
        mistyrose: '#FFE4E1',
        moccasin: '#FFE4B5',
        navajowhite: '#FFDEAD',
        navy: '#000080',
        oldlace: '#FDF5E6',
        olive: '#808000',
        olivedrab: '#6B8E23',
        orange: '#FFA500',
        orangered: '#FF4500',
        orchid: '#DA70D6',
        palegoldenrod: '#EEE8AA',
        palegreen: '#98FB98',
        paleturquoise: '#AFEEEE',
        palevioletred: '#DB7093',
        papayawhip: '#FFEFD5',
        peachpuff: '#FFDAB9',
        peru: '#CD853F',
        pink: '#FFC0CB',
        plum: '#DDA0DD',
        powderblue: '#B0E0E6',
        purple: '#800080',
        rebeccapurple: '#663399',
        red: '#FF0000',
        rosybrown: '#BC8F8F',
        royalblue: '#4169E1',
        saddlebrown: '#8B4513',
        salmon: '#FA8072',
        sandybrown: '#F4A460',
        seagreen: '#2E8B57',
        seashell: '#FFF5EE',
        sienna: '#A0522D',
        silver: '#C0C0C0',
        skyblue: '#87CEEB',
        slateblue: '#6A5ACD',
        slategray: '#708090',
        slategrey: '#708090',
        snow: '#FFFAFA',
        springgreen: '#00FF7F',
        steelblue: '#4682B4',
        tan: '#D2B48C',
        teal: '#008080',
        thistle: '#D8BFD8',
        tomato: '#FF6347',
        transparent: '#00000000',
        turquoise: '#40E0D0',
        violet: '#EE82EE',
        wheat: '#F5DEB3',
        white: '#FFFFFF',
        whitesmoke: '#F5F5F5',
        yellow: '#FFFF00',
        yellowgreen: '#9ACD32',
    });

    /* eslint-disable sonarjs/no-duplicate-string */
    function Validate(predicate) {
        return addTransformToInstanceProperty((target, prop, v) => {
            var _a, _b, _c;
            if (predicate(v, { target })) {
                return v;
            }
            const cleanKey = prop.toString().replace(/^_*/, '');
            let targetClass = (_b = (_a = target.constructor) === null || _a === void 0 ? void 0 : _a.className) !== null && _b !== void 0 ? _b : (_c = target.constructor) === null || _c === void 0 ? void 0 : _c.name;
            if ((targetClass === null || targetClass === void 0 ? void 0 : targetClass.length) < 3) {
                targetClass = null;
            }
            const targetClassName = targetClass ? `of [${targetClass}] ` : '';
            if (predicate.message) {
                Logger.warn(`Property [${cleanKey}] ${targetClassName}cannot be set to [${stringify(v)}]; ${predicate.message}, ignoring.`);
            }
            else {
                Logger.warn(`Property [${cleanKey}] ${targetClassName}cannot be set to [${stringify(v)}], ignoring.`);
            }
            return BREAK_TRANSFORM_CHAIN;
        });
    }
    function stringify(value) {
        if (typeof value === 'number' && isNaN(value))
            return 'NaN';
        if (value === Infinity)
            return 'Infinity';
        if (value === -Infinity)
            return '-Infinity';
        return JSON.stringify(value);
    }
    function predicateWithMessage(predicate, message) {
        predicate.message = message;
        return predicate;
    }
    const OPTIONAL = (v, ctx, predicate) => v === undefined || predicate(v, ctx);
    const ARRAY = (length, predicate) => {
        return predicateWithMessage((v, ctx) => Array.isArray(v) &&
            (length ? v.length === length : true) &&
            (predicate ? v.every((e) => predicate(e, ctx)) : true), `expecting an Array`);
    };
    const OPT_ARRAY = (length) => {
        return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, ARRAY(length)), 'expecting an optional Array');
    };
    const NON_EMPTY_ARRAY = predicateWithMessage((v) => Array.isArray(v) && v.length > 0, `expecting a non-empty Array`);
    const OPT_NON_EMPTY_ARRAY = () => {
        return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NON_EMPTY_ARRAY), 'expecting an optional non-empty Array');
    };
    const AND = (...predicates) => {
        return predicateWithMessage((v, ctx) => predicates.every((p) => p(v, ctx)), predicates
            .map((p) => p.message)
            .filter((m) => m != null)
            .join(' AND '));
    };
    const OR = (...predicates) => {
        return predicateWithMessage((v, ctx) => predicates.some((p) => p(v, ctx)), predicates
            .map((p) => p.message)
            .filter((m) => m != null)
            .join(' OR '));
    };
    const isComparable = (v) => {
        return v != null && !isNaN(v);
    };
    const LESS_THAN = (otherField) => predicateWithMessage((v, ctx) => !isComparable(v) || !isComparable(ctx.target[otherField]) || v < ctx.target[otherField], `expected to be less than ${otherField}`);
    const GREATER_THAN = (otherField) => predicateWithMessage((v, ctx) => !isComparable(v) || !isComparable(ctx.target[otherField]) || v > ctx.target[otherField], `expected to be greater than ${otherField}`);
    const FUNCTION = predicateWithMessage((v) => typeof v === 'function', 'expecting a Function');
    const OPT_FUNCTION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FUNCTION), `expecting an optional Function`);
    const BOOLEAN = predicateWithMessage((v) => v === true || v === false, 'expecting a Boolean');
    const OPT_BOOLEAN = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, BOOLEAN), 'expecting an optional Boolean');
    const STRING = predicateWithMessage((v) => typeof v === 'string', 'expecting a String');
    const OPT_STRING = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, STRING), 'expecting an optional String');
    const DATE = predicateWithMessage((v) => v instanceof Date && !isNaN(+v), 'expecting a Date object');
    const OPT_DATE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DATE), 'expecting an optional Date');
    const DATE_ARRAY = predicateWithMessage(ARRAY(undefined, DATE), 'expecting an Array of Date objects');
    const DATETIME_MS = NUMBER$1(0);
    const OPT_DATETIME_MS = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DATETIME_MS), 'expecting an optional number');
    const OPT_DATE_OR_DATETIME_MS = OR(OPT_DATE, OPT_DATETIME_MS);
    const colorMessage = `A color string can be in one of the following formats to be valid: #rgb, #rrggbb, rgb(r, g, b), rgba(r, g, b, a) or a CSS color name such as 'white', 'orange', 'cyan', etc`;
    const COLOR_STRING = predicateWithMessage((v) => {
        if (typeof v !== 'string') {
            return false;
        }
        return Color.validColorString(v);
    }, `expecting a color String. ${colorMessage}`);
    const OPT_COLOR_STRING = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, COLOR_STRING), `expecting an optional color String. ${colorMessage}`);
    const COLOR_STRING_ARRAY = predicateWithMessage(ARRAY(undefined, COLOR_STRING), `expecting an Array of color strings. ${colorMessage}`);
    const OPT_COLOR_STRING_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, COLOR_STRING_ARRAY), `expecting an optional Array of color strings. ${colorMessage}`);
    function numberMessage(prefix = `expecting a finite Number`, min, max) {
        let message = prefix;
        if (min !== undefined && max !== undefined) {
            message += ` between ${min} and ${max} inclusive`;
        }
        else if (min !== undefined) {
            message += ` greater than or equal to ${min}`;
        }
        else if (max !== undefined) {
            message += ` less than or equal to ${max}`;
        }
        return message;
    }
    function NUMBER$1(min, max) {
        const message = numberMessage(undefined, min, max);
        return predicateWithMessage((v) => typeof v === 'number' &&
            Number.isFinite(v) &&
            (min !== undefined ? v >= min : true) &&
            (max !== undefined ? v <= max : true), message);
    }
    function OPT_NUMBER(min, max) {
        const message = numberMessage('expecting an optional finite Number', min, max);
        return predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NUMBER$1(min, max)), message);
    }
    function NUMBER_OR_NAN(min, max) {
        // Can be NaN or finite number
        const message = numberMessage(undefined, min, max);
        return predicateWithMessage((v) => typeof v === 'number' &&
            (isNaN(v) ||
                (Number.isFinite(v) && (min !== undefined ? v >= min : true) && (max !== undefined ? v <= max : true))), message);
    }
    const NUMBER_ARRAY = predicateWithMessage(ARRAY(undefined, NUMBER$1()), 'expecting an Array of numbers');
    const OPT_NUMBER_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, NUMBER_ARRAY), 'expecting an optional Array of numbers');
    const STRING_ARRAY = predicateWithMessage(ARRAY(undefined, STRING), 'expecting an Array of strings');
    const OPT_STRING_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, STRING_ARRAY), 'expecting an optional Array of strings');
    function STRING_UNION(...values) {
        const message = `expecting one of: ${values.join(', ')}`;
        return predicateWithMessage((v) => typeof v === 'string' && values.indexOf(v) >= 0, message);
    }
    const BOOLEAN_ARRAY = predicateWithMessage(ARRAY(undefined, BOOLEAN), 'expecting an Array of boolean values');
    const OPT_BOOLEAN_ARRAY = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, BOOLEAN_ARRAY), 'expecting an optional Array of boolean values');
    const FONT_WEIGHTS = ['normal', 'bold', 'bolder', 'lighter'];
    const FONT_STYLE = predicateWithMessage((v) => v === 'normal' || v === 'italic' || v === 'oblique', `expecting a font style keyword such as 'normal', 'italic' or 'oblique'`);
    const OPT_FONT_STYLE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FONT_STYLE), `expecting an optional font style keyword such as 'normal', 'italic' or 'oblique'`);
    const FONT_WEIGHT = predicateWithMessage((v) => FONT_WEIGHTS.includes(v) || (typeof v === 'number' && isFinite(v)), `expecting a font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600`);
    const OPT_FONT_WEIGHT = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, FONT_WEIGHT), `expecting an optional font weight keyword such as 'normal', 'bold' or 'bolder' or a numeric value such as 100, 300 or 600`);
    const LINE_DASH = predicateWithMessage(ARRAY(undefined, NUMBER$1(0)), 'expecting an Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');
    const OPT_LINE_DASH = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_DASH), 'expecting an optional Array of numbers specifying the length in pixels of alternating dashes and gaps, for example, [6, 3] means dashes with a length of 6 pixels with gaps between of 3 pixels.');
    const LINE_CAPS = ['butt', 'round', 'square'];
    const LINE_CAP = predicateWithMessage((v) => LINE_CAPS.includes(v), `expecting a line cap keyword such as 'butt', 'round' or 'square'`);
    const OPT_LINE_CAP = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_CAP), `expecting an optional line cap keyword such as 'butt', 'round' or 'square'`);
    const LINE_JOINS = ['round', 'bevel', 'miter'];
    const LINE_JOIN = predicateWithMessage((v) => LINE_JOINS.includes(v), `expecting a line join keyword such as 'round', 'bevel' or 'miter'`);
    const OPT_LINE_JOIN = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, LINE_JOIN), `expecting an optional line join keyword such as 'round', 'bevel' or 'miter'`);
    const POSITIONS = ['top', 'right', 'bottom', 'left'];
    const POSITION = predicateWithMessage((v) => POSITIONS.includes(v), `expecting a position keyword such as 'top', 'right', 'bottom' or 'left`);
    const INTERACTION_RANGES = ['exact', 'nearest'];
    const INTERACTION_RANGE = predicateWithMessage((v) => (typeof v === 'number' && Number.isFinite(v)) || INTERACTION_RANGES.includes(v), `expecting an interaction range of 'exact', 'nearest' or a number`);
    const TEXT_WRAPS = ['never', 'always', 'hyphenate', 'on-space'];
    const TEXT_WRAP = predicateWithMessage((v) => TEXT_WRAPS.includes(v), `expecting a text wrap strategy keyword such as 'never', 'always', 'hyphenate', or 'on-space'`);
    const OVERFLOW_STRAGEGIES = ['ellipsis', 'hide'];
    const OVERFLOW_STRATEGY = predicateWithMessage((v) => OVERFLOW_STRAGEGIES.includes(v), `expecting an overflow strategy keyword such as 'ellipsis', or 'hide'`);
    const TEXT_ALIGNS = ['left', 'center', 'right'];
    const TEXT_ALIGN = predicateWithMessage((v) => TEXT_ALIGNS.includes(v), `expecting a text align keyword such as 'left', 'center', or 'right'`);
    const VERTICAL_ALIGNS = ['top', 'middle', 'bottom'];
    const VERTICAL_ALIGN = predicateWithMessage((v) => VERTICAL_ALIGNS.includes(v), `expecting a text align keyword such as 'top', 'middle', or 'bottom'`);
    const DIRECTIONS = ['horizontal', 'vertical'];
    const DIRECTION = predicateWithMessage((v) => DIRECTIONS.includes(v), `expecting a direction keyword such as 'horizontal' or 'vertical'`);
    const OPT_DIRECTION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, DIRECTION), `expecting an optional direction keyword such as 'horizontal' or 'vertical'`);

    var ChartAxisDirection;
    (function (ChartAxisDirection) {
        ChartAxisDirection["X"] = "x";
        ChartAxisDirection["Y"] = "y";
    })(ChartAxisDirection || (ChartAxisDirection = {}));

    var RedrawType;
    (function (RedrawType) {
        RedrawType[RedrawType["NONE"] = 0] = "NONE";
        // Canvas doesn't need clearing, an incremental re-rerender is sufficient.
        RedrawType[RedrawType["TRIVIAL"] = 1] = "TRIVIAL";
        // Group needs clearing, a semi-incremental re-render is sufficient.
        RedrawType[RedrawType["MINOR"] = 2] = "MINOR";
        // Canvas needs to be cleared for these redraw types.
        RedrawType[RedrawType["MAJOR"] = 3] = "MAJOR";
    })(RedrawType || (RedrawType = {}));
    /** @returns true if new Function() is disabled in the current execution context. */
    function functionConstructorAvailable() {
        try {
            new Function('return true');
            return true;
        }
        catch (e) {
            return false;
        }
    }
    const STRING_FUNCTION_USEABLE = functionConstructorAvailable();
    function SceneChangeDetection(opts) {
        const { changeCb, convertor } = opts !== null && opts !== void 0 ? opts : {};
        return function (target, key) {
            // `target` is either a constructor (static member) or prototype (instance member)
            const privateKey = `__${key}`;
            if (target[key]) {
                return;
            }
            if (STRING_FUNCTION_USEABLE && changeCb == null && convertor == null) {
                prepareFastGetSet(target, key, privateKey, opts);
            }
            else {
                prepareSlowGetSet(target, key, privateKey, opts);
            }
        };
    }
    function prepareFastGetSet(target, key, privateKey, opts) {
        const { redraw = RedrawType.TRIVIAL, type = 'normal', checkDirtyOnAssignment = false } = opts !== null && opts !== void 0 ? opts : {};
        // Optimised code-path.
        // Remove all conditional logic from runtime - generate a setter with the exact necessary
        // steps, as these setters are called a LOT during update cycles.
        const setterJs = new Function('value', `
        const oldValue = this.${privateKey};
        if (value !== oldValue) {
            this.${privateKey} = value;
            ${type === 'normal' ? `this.markDirty(this, ${redraw});` : ''}
            ${type === 'transform' ? `this.markDirtyTransform(${redraw});` : ''}
            ${type === 'path'
        ? `if (!this._dirtyPath) { this._dirtyPath = true; this.markDirty(this, ${redraw}); }`
        : ''}
            ${type === 'font'
        ? `if (!this._dirtyFont) { this._dirtyFont = true; this.markDirty(this, ${redraw}); }`
        : ''}
        }
        ${checkDirtyOnAssignment
        ? `if (value != null && value._dirty > ${RedrawType.NONE}) { this.markDirty(value, value._dirty); }`
        : ''}
`);
        const getterJs = new Function(`return this.${privateKey};`);
        Object.defineProperty(target, key, {
            set: setterJs,
            get: getterJs,
            enumerable: true,
            configurable: true,
        });
    }
    function prepareSlowGetSet(target, key, privateKey, opts) {
        const { redraw = RedrawType.TRIVIAL, type = 'normal', changeCb, convertor, checkDirtyOnAssignment = false, } = opts !== null && opts !== void 0 ? opts : {};
        // Unoptimised but 'safe' code-path, for environments with CSP headers and no 'unsafe-eval'.
        // We deliberately do not support debug branches found in the optimised path above, since
        // for large data-set series performance deteriorates with every extra branch here.
        const setter = function (value) {
            const oldValue = this[privateKey];
            value = convertor ? convertor(value) : value;
            if (value !== oldValue) {
                this[privateKey] = value;
                if (type === 'normal')
                    this.markDirty(this, redraw);
                if (type === 'transform')
                    this.markDirtyTransform(redraw);
                if (type === 'path' && !this._dirtyPath) {
                    this._dirtyPath = true;
                    this.markDirty(this, redraw);
                }
                if (type === 'font' && !this._dirtyFont) {
                    this._dirtyFont = true;
                    this.markDirty(this, redraw);
                }
                if (changeCb)
                    changeCb(this);
            }
            if (checkDirtyOnAssignment && value != null && value._dirty > RedrawType.NONE)
                this.markDirty(value, value._dirty);
        };
        const getter = function () {
            return this[privateKey];
        };
        Object.defineProperty(target, key, {
            set: setter,
            get: getter,
            enumerable: true,
            configurable: true,
        });
    }
    class ChangeDetectable {
        constructor() {
            this._dirty = RedrawType.MAJOR;
        }
        markDirty(_source, type = RedrawType.TRIVIAL) {
            if (this._dirty > type) {
                return;
            }
            this._dirty = type;
        }
        markClean(_opts) {
            this._dirty = RedrawType.NONE;
        }
        isDirty() {
            return this._dirty > RedrawType.NONE;
        }
    }

    const ID_MAP = {};
    function resetIds() {
        for (const key in ID_MAP) {
            delete ID_MAP[key];
        }
    }
    function createId(instance) {
        var _a;
        const constructor = instance.constructor;
        const className = Object.prototype.hasOwnProperty.call(constructor, 'className')
            ? constructor.className
            : constructor.name;
        if (!className) {
            throw new Error(`The ${constructor} is missing the 'className' property.`);
        }
        const nextId = ((_a = ID_MAP[className]) !== null && _a !== void 0 ? _a : 0) + 1;
        ID_MAP[className] = nextId;
        return className + '-' + nextId;
    }

    function nearestSquared(point, objects, maxDistanceSquared = Infinity) {
        const result = { nearest: undefined, distanceSquared: maxDistanceSquared };
        for (const obj of objects) {
            const thisDistance = obj.distanceSquared(point);
            if (thisDistance === 0) {
                return { nearest: obj, distanceSquared: 0 };
            }
            else if (thisDistance < result.distanceSquared) {
                result.nearest = obj;
                result.distanceSquared = thisDistance;
            }
        }
        return result;
    }
    function nearestSquaredInContainer(point, container, maxDistanceSquared = Infinity) {
        const tpoint = container.transformPoint(point.x, point.y);
        const result = { nearest: undefined, distanceSquared: maxDistanceSquared };
        for (const child of container.children) {
            const { nearest, distanceSquared } = child.nearestSquared(tpoint, result.distanceSquared);
            if (distanceSquared === 0) {
                return { nearest, distanceSquared };
            }
            else if (distanceSquared < result.distanceSquared) {
                result.nearest = nearest;
                result.distanceSquared = distanceSquared;
            }
        }
        return result;
    }

    class BBox {
        constructor(x, y, width, height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }
        clone() {
            const { x, y, width, height } = this;
            return new BBox(x, y, width, height);
        }
        equals(other) {
            return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
        }
        containsPoint(x, y) {
            return x >= this.x && x <= this.x + this.width && y >= this.y && y <= this.y + this.height;
        }
        collidesBBox(other) {
            return (this.x < other.x + other.width &&
                this.x + this.width > other.x &&
                this.y < other.y + other.height &&
                this.y + this.height > other.y);
        }
        isInfinite() {
            return (Math.abs(this.x) === Infinity ||
                Math.abs(this.y) === Infinity ||
                Math.abs(this.width) === Infinity ||
                Math.abs(this.height) === Infinity);
        }
        distanceSquared(point) {
            if (this.containsPoint(point.x, point.y)) {
                return 0;
            }
            const dx = point.x - Math.max(this.x, Math.min(point.x, this.x + this.width));
            const dy = point.y - Math.max(this.y, Math.min(point.y, this.y + this.height));
            return dx * dx + dy * dy;
        }
        static nearestBox(point, boxes) {
            return nearestSquared(point, boxes);
        }
        shrink(amount, position) {
            const apply = (pos, amt) => {
                switch (pos) {
                    case 'top':
                        this.y += amt;
                    // eslint-disable-next-line no-fallthrough
                    case 'bottom':
                        this.height -= amt;
                        break;
                    case 'left':
                        this.x += amt;
                    // eslint-disable-next-line no-fallthrough
                    case 'right':
                        this.width -= amt;
                        break;
                    case 'vertical':
                        this.y += amt;
                        this.height -= amt * 2;
                        break;
                    case 'horizontal':
                        this.x += amt;
                        this.width -= amt * 2;
                        break;
                    case undefined:
                        this.x += amt;
                        this.width -= amt * 2;
                        this.y += amt;
                        this.height -= amt * 2;
                        break;
                    // Unknown position - do nothing.
                }
            };
            if (typeof amount === 'number') {
                apply(position, amount);
            }
            else {
                Object.entries(amount).forEach(([pos, amt]) => apply(pos, amt));
            }
            return this;
        }
        grow(amount, position) {
            if (typeof amount === 'number') {
                this.shrink(-amount, position);
            }
            else {
                const paddingCopy = Object.assign({}, amount);
                for (const key in paddingCopy) {
                    paddingCopy[key] *= -1;
                }
                this.shrink(paddingCopy);
            }
            return this;
        }
        static merge(boxes) {
            let left = Infinity;
            let top = Infinity;
            let right = -Infinity;
            let bottom = -Infinity;
            boxes.forEach((box) => {
                if (box.x < left) {
                    left = box.x;
                }
                if (box.y < top) {
                    top = box.y;
                }
                if (box.x + box.width > right) {
                    right = box.x + box.width;
                }
                if (box.y + box.height > bottom) {
                    bottom = box.y + box.height;
                }
            });
            return new BBox(left, top, right - left, bottom - top);
        }
    }
    BBox.zero = new BBox(0, 0, 0, 0);

    /**
     * As of Jan 8, 2019, Firefox still doesn't implement
     * `getTransform(): DOMMatrix;`
     * `setTransform(transform?: DOMMatrix2DInit)`
     * in the `CanvasRenderingContext2D`.
     * Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=928150
     * IE11 and Edge 44 also don't have the support.
     * Thus this class, to keep track of the current transform and
     * combine transformations.
     * Standards:
     * https://html.spec.whatwg.org/dev/canvas.html
     * https://www.w3.org/TR/geometry-1/
     */
    class Matrix {
        get e() {
            return [...this.elements];
        }
        constructor(elements = [1, 0, 0, 1, 0, 0]) {
            this.elements = elements;
        }
        setElements(elements) {
            const e = this.elements;
            // `this.elements = elements.slice()` is 4-5 times slower
            // (in Chrome 71 and FF 64) than manually copying elements,
            // since slicing allocates new memory.
            // The performance of passing parameters individually
            // vs as an array is about the same in both browsers, so we
            // go with a single (array of elements) parameter, because
            // `setElements(elements)` and `setElements([a, b, c, d, e, f])`
            // calls give us roughly the same performance, versus
            // `setElements(...elements)` and `setElements(a, b, c, d, e, f)`,
            // where the spread operator causes a 20-30x performance drop
            // (30x when compiled to ES5's `.apply(this, elements)`
            //  20x when used natively).
            e[0] = elements[0];
            e[1] = elements[1];
            e[2] = elements[2];
            e[3] = elements[3];
            e[4] = elements[4];
            e[5] = elements[5];
            return this;
        }
        get identity() {
            const e = this.elements;
            return e[0] === 1 && e[1] === 0 && e[2] === 0 && e[3] === 1 && e[4] === 0 && e[5] === 0;
        }
        /**
         * Performs the AxB matrix multiplication and saves the result
         * to `C`, if given, or to `A` otherwise.
         */
        AxB(A, B, C) {
            const a = A[0] * B[0] + A[2] * B[1], b = A[1] * B[0] + A[3] * B[1], c = A[0] * B[2] + A[2] * B[3], d = A[1] * B[2] + A[3] * B[3], e = A[0] * B[4] + A[2] * B[5] + A[4], f = A[1] * B[4] + A[3] * B[5] + A[5];
            C = C !== null && C !== void 0 ? C : A;
            C[0] = a;
            C[1] = b;
            C[2] = c;
            C[3] = d;
            C[4] = e;
            C[5] = f;
        }
        /**
         * The `other` matrix gets post-multiplied to the current matrix.
         * Returns the current matrix.
         * @param other
         */
        multiplySelf(other) {
            this.AxB(this.elements, other.elements);
            return this;
        }
        /**
         * The `other` matrix gets post-multiplied to the current matrix.
         * Returns a new matrix.
         * @param other
         */
        multiply(other) {
            const elements = new Array(6);
            this.AxB(this.elements, other.elements, elements);
            return new Matrix(elements);
        }
        preMultiplySelf(other) {
            this.AxB(other.elements, this.elements, this.elements);
            return this;
        }
        /**
         * Returns the inverse of this matrix as a new matrix.
         */
        inverse() {
            const el = this.elements;
            let a = el[0], b = el[1], c = el[2], d = el[3];
            const e = el[4], f = el[5];
            const rD = 1 / (a * d - b * c); // reciprocal of determinant
            a *= rD;
            b *= rD;
            c *= rD;
            d *= rD;
            return new Matrix([d, -b, -c, a, c * f - d * e, b * e - a * f]);
        }
        /**
         * Save the inverse of this matrix to the given matrix.
         */
        inverseTo(other) {
            const el = this.elements;
            let a = el[0], b = el[1], c = el[2], d = el[3];
            const e = el[4], f = el[5];
            const rD = 1 / (a * d - b * c); // reciprocal of determinant
            a *= rD;
            b *= rD;
            c *= rD;
            d *= rD;
            other.setElements([d, -b, -c, a, c * f - d * e, b * e - a * f]);
            return this;
        }
        invertSelf() {
            const el = this.elements;
            let a = el[0], b = el[1], c = el[2], d = el[3];
            const e = el[4], f = el[5];
            const rD = 1 / (a * d - b * c); // reciprocal of determinant
            a *= rD;
            b *= rD;
            c *= rD;
            d *= rD;
            el[0] = d;
            el[1] = -b;
            el[2] = -c;
            el[3] = a;
            el[4] = c * f - d * e;
            el[5] = b * e - a * f;
            return this;
        }
        transformPoint(x, y) {
            const e = this.elements;
            return {
                x: x * e[0] + y * e[2] + e[4],
                y: x * e[1] + y * e[3] + e[5],
            };
        }
        transformBBox(bbox, target) {
            const elements = this.elements;
            const xx = elements[0];
            const xy = elements[1];
            const yx = elements[2];
            const yy = elements[3];
            const h_w = bbox.width * 0.5;
            const h_h = bbox.height * 0.5;
            const cx = bbox.x + h_w;
            const cy = bbox.y + h_h;
            const w = Math.abs(h_w * xx) + Math.abs(h_h * yx);
            const h = Math.abs(h_w * xy) + Math.abs(h_h * yy);
            if (!target) {
                target = new BBox(0, 0, 0, 0);
            }
            target.x = cx * xx + cy * yx + elements[4] - w;
            target.y = cx * xy + cy * yy + elements[5] - h;
            target.width = w + w;
            target.height = h + h;
            return target;
        }
        toContext(ctx) {
            // It's fair to say that matrix multiplications are not cheap.
            // However, updating path definitions on every frame isn't either, so
            // it may be cheaper to just translate paths. It's also fair to
            // say, that most paths will have to be re-rendered anyway, say
            // rectangle paths in a bar chart, where an animation would happen when
            // the data set changes and existing bars are morphed into new ones.
            // Or a pie chart, where old sectors are also morphed into new ones.
            // Same for the line chart. The only plausible case where translating
            // existing paths would be enough, is the scatter chart, where marker
            // icons, typically circles, stay the same size. But if circle radii
            // are bound to some data points, even circle paths would have to be
            // updated. And thus it makes sense to optimize for fewer matrix
            // transforms, where transform matrices of paths are mostly identity
            // matrices and `x`/`y`, `centerX`/`centerY` and similar properties
            // are used to define a path at specific coordinates. And only groups
            // are used to collectively apply a transform to a set of nodes.
            // If the matrix is mostly identity (95% of the time),
            // the `if (this.isIdentity)` check can make this call 3-4 times
            // faster on average: https://jsperf.com/matrix-check-first-vs-always-set
            if (this.identity) {
                return;
            }
            const e = this.elements;
            ctx.transform(e[0], e[1], e[2], e[3], e[4], e[5]);
        }
        static flyweight(sourceMatrix) {
            return Matrix.instance.setElements(sourceMatrix.elements);
        }
        static updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, opts) {
            // Assume that centers of scaling and rotation are at the origin.
            const [bbcx, bbcy] = [0, 0];
            const sx = scalingX;
            const sy = scalingY;
            let scx;
            let scy;
            if (sx === 1 && sy === 1) {
                scx = 0;
                scy = 0;
            }
            else {
                scx = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.scalingCenterX;
                scy = (opts === null || opts === void 0 ? void 0 : opts.scalingCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.scalingCenterY;
            }
            const r = rotation;
            const cos = Math.cos(r);
            const sin = Math.sin(r);
            let rcx;
            let rcy;
            if (r === 0) {
                rcx = 0;
                rcy = 0;
            }
            else {
                rcx = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterX) == null ? bbcx : opts === null || opts === void 0 ? void 0 : opts.rotationCenterX;
                rcy = (opts === null || opts === void 0 ? void 0 : opts.rotationCenterY) == null ? bbcy : opts === null || opts === void 0 ? void 0 : opts.rotationCenterY;
            }
            const tx = translationX;
            const ty = translationY;
            // The transform matrix `M` is a result of the following transformations:
            // 1) translate the center of scaling to the origin
            // 2) scale
            // 3) translate back
            // 4) translate the center of rotation to the origin
            // 5) rotate
            // 6) translate back
            // 7) translate
            //         (7)          (6)             (5)             (4)           (3)           (2)           (1)
            //     | 1 0 tx |   | 1 0 rcx |   | cos -sin 0 |   | 1 0 -rcx |   | 1 0 scx |   | sx 0 0 |   | 1 0 -scx |
            // M = | 0 1 ty | * | 0 1 rcy | * | sin  cos 0 | * | 0 1 -rcy | * | 0 1 scy | * | 0 sy 0 | * | 0 1 -scy |
            //     | 0 0  1 |   | 0 0  1  |   |  0    0  1 |   | 0 0  1   |   | 0 0  1  |   | 0  0 0 |   | 0 0  1   |
            // Translation after steps 1-4 above:
            const tx4 = scx * (1 - sx) - rcx;
            const ty4 = scy * (1 - sy) - rcy;
            matrix.setElements([
                cos * sx,
                sin * sx,
                -sin * sy,
                cos * sy,
                cos * tx4 - sin * ty4 + rcx + tx,
                sin * tx4 + cos * ty4 + rcy + ty,
            ]);
            return matrix;
        }
        static fromContext(ctx) {
            const domMatrix = ctx.getTransform();
            return new Matrix([domMatrix.a, domMatrix.b, domMatrix.c, domMatrix.d, domMatrix.e, domMatrix.f]);
        }
    }
    Matrix.instance = new Matrix();

    var PointerEvents;
    (function (PointerEvents) {
        PointerEvents[PointerEvents["All"] = 0] = "All";
        PointerEvents[PointerEvents["None"] = 1] = "None";
    })(PointerEvents || (PointerEvents = {}));
    const zIndexChangedCallback = (o) => {
        if (o.parent) {
            o.parent.dirtyZIndex = true;
        }
        o.zIndexChanged();
    };
    /**
     * Abstract scene graph node.
     * Each node can have zero or one parent and belong to zero or one scene.
     */
    class Node extends ChangeDetectable {
        /**
         * Some arbitrary data bound to the node.
         */
        get datum() {
            var _a, _b;
            return (_a = this._datum) !== null && _a !== void 0 ? _a : (_b = this._parent) === null || _b === void 0 ? void 0 : _b.datum;
        }
        get previousDatum() {
            return this._previousDatum;
        }
        set datum(datum) {
            if (this._datum !== datum)
                this._previousDatum = this._datum;
            this._datum = datum;
        }
        _setLayerManager(value) {
            this._layerManager = value;
            this._debug = value === null || value === void 0 ? void 0 : value.debug;
            for (const child of this._children) {
                child._setLayerManager(value);
            }
            for (const child of this._virtualChildren) {
                child._setLayerManager(value);
            }
        }
        get layerManager() {
            return this._layerManager;
        }
        get parent() {
            return this._parent;
        }
        get children() {
            if (this._virtualChildren.length === 0)
                return this._children;
            const result = [...this._children];
            for (const next of this._virtualChildren) {
                result.push(...next.children);
            }
            return result;
        }
        get virtualChildren() {
            return this._virtualChildren;
        }
        hasVirtualChildren() {
            return this._virtualChildren.length > 0;
        }
        setProperties(styles, pickKeys) {
            const keys = pickKeys !== null && pickKeys !== void 0 ? pickKeys : Object.keys(styles);
            for (const key of keys) {
                this[key] = styles[key];
            }
            return this;
        }
        /**
         * Appends one or more new node instances to this parent.
         * If one needs to:
         * - move a child to the end of the list of children
         * - move a child from one parent to another (including parents in other scenes)
         * one should use the {@link insertBefore} method instead.
         * @param nodes A node or nodes to append.
         */
        append(nodes) {
            // Passing a single parameter to an open-ended version of `append`
            // would be 30-35% slower than this.
            if (!Array.isArray(nodes)) {
                nodes = [nodes];
            }
            for (const node of nodes) {
                if (node.parent) {
                    throw new Error(`${node} already belongs to another parent: ${node.parent}.`);
                }
                if (node.layerManager) {
                    throw new Error(`${node} already belongs to a scene: ${node.layerManager}.`);
                }
                if (this.childSet[node.id]) {
                    // Cast to `any` to avoid `Property 'name' does not exist on type 'Function'`.
                    throw new Error(`Duplicate ${node.constructor.name} node: ${node}`);
                }
                if (node.isVirtual) {
                    this._virtualChildren.push(node);
                }
                else {
                    this._children.push(node);
                }
                this.childSet[node.id] = true;
                node._parent = this;
                node._setLayerManager(this.layerManager);
            }
            this.dirtyZIndex = true;
            this.markDirty(this, RedrawType.MAJOR);
        }
        appendChild(node) {
            this.append(node);
            return node;
        }
        removeChild(node) {
            const error = () => {
                throw new Error(`The node to be removed is not a child of this node.`);
            };
            if (node.parent !== this) {
                error();
            }
            if (node.isVirtual) {
                const i = this._virtualChildren.indexOf(node);
                if (i < 0)
                    error();
                this._virtualChildren.splice(i, 1);
            }
            else {
                const i = this._children.indexOf(node);
                if (i < 0)
                    error();
                this._children.splice(i, 1);
            }
            delete this.childSet[node.id];
            node._parent = undefined;
            node._setLayerManager();
            this.dirtyZIndex = true;
            this.markDirty(node, RedrawType.MAJOR);
            return node;
        }
        calculateCumulativeMatrix() {
            this.computeTransformMatrix();
            const matrix = Matrix.flyweight(this.matrix);
            let parent = this.parent;
            while (parent) {
                parent.computeTransformMatrix();
                matrix.preMultiplySelf(parent.matrix);
                parent = parent.parent;
            }
            return matrix;
        }
        transformPoint(x, y) {
            const matrix = this.calculateCumulativeMatrix();
            return matrix.invertSelf().transformPoint(x, y);
        }
        inverseTransformPoint(x, y) {
            const matrix = this.calculateCumulativeMatrix();
            return matrix.transformPoint(x, y);
        }
        transformBBox(bbox) {
            const matrix = this.calculateCumulativeMatrix();
            return matrix.invertSelf().transformBBox(bbox);
        }
        inverseTransformBBox(bbox) {
            const matrix = this.calculateCumulativeMatrix();
            return matrix.transformBBox(bbox);
        }
        markDirtyTransform() {
            this.dirtyTransform = true;
            this.markDirty(this, RedrawType.MAJOR);
        }
        constructor({ isVirtual, tag } = {}) {
            super();
            /** Unique number to allow creation order to be easily determined. */
            this.serialNumber = Node._nextSerialNumber++;
            /**
             * Unique node ID in the form `ClassName-NaturalNumber`.
             */
            this.id = createId(this);
            /**
             * To simplify the type system (especially in Selections) we don't have the `Parent` node
             * (one that has children). Instead, we mimic HTML DOM, where any node can have children.
             * But we still need to distinguish regular leaf nodes from container leafs somehow.
             */
            this.isContainerNode = false;
            this._virtualChildren = [];
            this._children = [];
            // Used to check for duplicate nodes.
            this.childSet = {}; // new Set<Node>()
            // These matrices may need to have package level visibility
            // for performance optimization purposes.
            this.matrix = new Matrix();
            this.inverseMatrix = new Matrix();
            this.dirtyTransform = false;
            this.scalingX = 1;
            this.scalingY = 1;
            /**
             * The center of scaling.
             * The default value of `null` means the scaling center will be
             * determined automatically, as the center of the bounding box
             * of a node.
             */
            this.scalingCenterX = null;
            this.scalingCenterY = null;
            this.rotationCenterX = null;
            this.rotationCenterY = null;
            /**
             * Rotation angle in radians.
             * The value is set as is. No normalization to the [-180, 180) or [0, 360)
             * interval is performed.
             */
            this.rotation = 0;
            this.translationX = 0;
            this.translationY = 0;
            this.visible = true;
            this.dirtyZIndex = false;
            this.zIndex = 0;
            /** Discriminators for render order within a zIndex. */
            this.zIndexSubOrder = undefined;
            this.pointerEvents = PointerEvents.All;
            this.isVirtual = isVirtual !== null && isVirtual !== void 0 ? isVirtual : false;
            this.tag = tag !== null && tag !== void 0 ? tag : NaN;
        }
        containsPoint(_x, _y) {
            return false;
        }
        /**
         * Hit testing method.
         * Recursively checks if the given point is inside this node or any of its children.
         * Returns the first matching node or `undefined`.
         * Nodes that render later (show on top) are hit tested first.
         */
        pickNode(x, y) {
            var _a;
            if (!this.visible || this.pointerEvents === PointerEvents.None || !this.containsPoint(x, y)) {
                return;
            }
            const children = this.children;
            if (children.length > 1000) {
                // Try to optimise which children to interrogate; BBox calculation is an approximation
                // for more complex shapes, so discarding items based on this will save a lot of
                // processing when the point is nowhere near the child.
                for (let i = children.length - 1; i >= 0; i--) {
                    const child = children[i];
                    const containsPoint = (_a = child.computeTransformedBBox()) === null || _a === void 0 ? void 0 : _a.containsPoint(x, y);
                    const hit = containsPoint ? child.pickNode(x, y) : undefined;
                    if (hit) {
                        return hit;
                    }
                }
            }
            else if (children.length) {
                // Nodes added later should be hit-tested first,
                // as they are rendered on top of the previously added nodes.
                for (let i = children.length - 1; i >= 0; i--) {
                    const hit = children[i].pickNode(x, y);
                    if (hit) {
                        return hit;
                    }
                }
            }
            else if (!this.isContainerNode) {
                // a leaf node, but not a container leaf
                return this;
            }
        }
        findNodes(predicate) {
            const result = predicate(this) ? [this] : [];
            for (const child of this.children) {
                const childResult = child.findNodes(predicate);
                if (childResult) {
                    result.push(...childResult);
                }
            }
            return result;
        }
        computeBBox() {
            return;
        }
        computeTransformedBBox() {
            const bbox = this.computeBBox();
            if (!bbox) {
                return undefined;
            }
            this.computeTransformMatrix();
            const matrix = Matrix.flyweight(this.matrix);
            let parent = this.parent;
            while (parent) {
                parent.computeTransformMatrix();
                matrix.preMultiplySelf(parent.matrix);
                parent = parent.parent;
            }
            matrix.transformBBox(bbox, bbox);
            return bbox;
        }
        computeTransformMatrix() {
            if (!this.dirtyTransform) {
                return;
            }
            const { matrix, scalingX, scalingY, rotation, translationX, translationY, scalingCenterX, scalingCenterY, rotationCenterX, rotationCenterY, } = this;
            Matrix.updateTransformMatrix(matrix, scalingX, scalingY, rotation, translationX, translationY, {
                scalingCenterX,
                scalingCenterY,
                rotationCenterX,
                rotationCenterY,
            });
            matrix.inverseTo(this.inverseMatrix);
            this.dirtyTransform = false;
        }
        render(renderCtx) {
            const { stats } = renderCtx;
            this._dirty = RedrawType.NONE;
            if (stats)
                stats.nodesRendered++;
        }
        clearBBox(ctx) {
            const bbox = this.computeBBox();
            if (bbox == null) {
                return;
            }
            const { x, y, width, height } = bbox;
            const topLeft = this.transformPoint(x, y);
            const bottomRight = this.transformPoint(x + width, y + height);
            ctx.clearRect(topLeft.x, topLeft.y, bottomRight.x - topLeft.x, bottomRight.y - topLeft.y);
        }
        markDirty(_source, type = RedrawType.TRIVIAL, parentType = type) {
            if (this._dirty > type) {
                return;
            }
            if (this._dirty === type && type === parentType) {
                return;
            }
            this._dirty = type;
            if (this.parent) {
                this.parent.markDirty(this, parentType);
            }
            else if (this.layerManager) {
                this.layerManager.markDirty();
            }
        }
        get dirty() {
            return this._dirty;
        }
        markClean(opts) {
            const { force = false, recursive = true } = opts !== null && opts !== void 0 ? opts : {};
            if (this._dirty === RedrawType.NONE && !force) {
                return;
            }
            this._dirty = RedrawType.NONE;
            if (recursive !== false) {
                for (const child of this._virtualChildren) {
                    child.markClean({ force });
                }
            }
            if (recursive === true) {
                for (const child of this._children) {
                    child.markClean({ force });
                }
            }
        }
        visibilityChanged() {
            // Override point for sub-classes to react to visibility changes.
        }
        get nodeCount() {
            let count = 1;
            let dirtyCount = this._dirty >= RedrawType.NONE || this.dirtyTransform ? 1 : 0;
            let visibleCount = this.visible ? 1 : 0;
            const countChild = (child) => {
                const { count: childCount, visibleCount: childVisibleCount, dirtyCount: childDirtyCount } = child.nodeCount;
                count += childCount;
                visibleCount += childVisibleCount;
                dirtyCount += childDirtyCount;
            };
            for (const child of this._children) {
                countChild(child);
            }
            for (const child of this._virtualChildren) {
                countChild(child);
            }
            return { count, visibleCount, dirtyCount };
        }
        zIndexChanged() {
            // Override point for sub-classes.
        }
    }
    Node._nextSerialNumber = 0;
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Number)
    ], Node.prototype, "scalingX", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Number)
    ], Node.prototype, "scalingY", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Object)
    ], Node.prototype, "scalingCenterX", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Object)
    ], Node.prototype, "scalingCenterY", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Object)
    ], Node.prototype, "rotationCenterX", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Object)
    ], Node.prototype, "rotationCenterY", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Number)
    ], Node.prototype, "rotation", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Number)
    ], Node.prototype, "translationX", void 0);
    __decorate([
        SceneChangeDetection({ type: 'transform' }),
        __metadata("design:type", Number)
    ], Node.prototype, "translationY", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: (o) => o.visibilityChanged() }),
        __metadata("design:type", Boolean)
    ], Node.prototype, "visible", void 0);
    __decorate([
        SceneChangeDetection({
            redraw: RedrawType.TRIVIAL,
            changeCb: zIndexChangedCallback,
        }),
        __metadata("design:type", Number)
    ], Node.prototype, "zIndex", void 0);
    __decorate([
        SceneChangeDetection({
            redraw: RedrawType.TRIVIAL,
            changeCb: zIndexChangedCallback,
        })
        /** Discriminators for render order within a zIndex. */
        ,
        __metadata("design:type", Array)
    ], Node.prototype, "zIndexSubOrder", void 0);

    class DropShadow extends ChangeDetectable {
        constructor() {
            super(...arguments);
            this.enabled = true;
            this.color = 'rgba(0, 0, 0, 0.5)';
            this.xOffset = 0;
            this.yOffset = 0;
            this.blur = 5;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], DropShadow.prototype, "enabled", void 0);
    __decorate([
        Validate(COLOR_STRING),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], DropShadow.prototype, "color", void 0);
    __decorate([
        Validate(NUMBER$1()),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], DropShadow.prototype, "xOffset", void 0);
    __decorate([
        Validate(NUMBER$1()),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], DropShadow.prototype, "yOffset", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], DropShadow.prototype, "blur", void 0);

    const MOBILE = [/Android/i, /webOS/i, /iPhone/i, /iPad/i, /iPod/i, /BlackBerry/i, /Windows Phone/i];
    function isDesktop() {
        if (typeof navigator === 'undefined') {
            return true;
        }
        const userAgent = navigator.userAgent;
        return !MOBILE.some((r) => r.test(userAgent));
    }

    /**
     * Wraps the native Canvas element and overrides its CanvasRenderingContext2D to
     * provide resolution independent rendering based on `window.devicePixelRatio`.
     */
    class HdpiCanvas {
        // The width/height attributes of the Canvas element default to
        // 300/150 according to w3.org.
        constructor(opts) {
            this._enabled = true;
            // `NaN` is deliberate here, so that overrides are always applied
            // and the `resetTransform` inside the `resize` method works in IE11.
            this._pixelRatio = NaN;
            this._width = 0;
            this._height = 0;
            const { document, window, width = 600, height = 300, domLayer = false, zIndex = 0, name = undefined, overrideDevicePixelRatio = undefined, } = opts;
            this.document = document;
            this.window = window;
            HdpiCanvas.document = document;
            // Create canvas and immediately apply width + height to avoid out-of-memory
            // errors on iOS/iPadOS Safari.
            this.element = document.createElement('canvas');
            this.element.width = width;
            this.element.height = height;
            this.realContext = this.element.getContext('2d');
            this.imageSource = this.realContext.canvas;
            const { style } = this.element;
            style.userSelect = 'none';
            style.display = 'block';
            if (domLayer) {
                style.position = 'absolute';
                style.zIndex = String(zIndex);
                style.top = '0';
                style.left = '0';
                style.pointerEvents = 'none';
                style.opacity = `1`;
                if (name) {
                    this.element.id = name;
                }
            }
            this.context = this.setPixelRatio(overrideDevicePixelRatio);
            this.resize(width, height);
        }
        set container(value) {
            if (this._container !== value) {
                this.remove();
                if (value) {
                    value.appendChild(this.element);
                }
                this._container = value;
            }
        }
        get container() {
            return this._container;
        }
        set enabled(value) {
            this.element.style.display = value ? 'block' : 'none';
            this._enabled = !!value;
        }
        get enabled() {
            return this._enabled;
        }
        remove() {
            const { parentNode } = this.element;
            if (parentNode != null) {
                parentNode.removeChild(this.element);
            }
        }
        destroy() {
            this.element.remove();
            // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.
            // See https://bugs.webkit.org/show_bug.cgi?id=195325.
            this.element.width = 0;
            this.element.height = 0;
            this.context.clearRect(0, 0, 0, 0);
            Object.freeze(this);
        }
        snapshot() {
            // No-op for compatibility with HdpiOffscreenCanvas.
        }
        clear() {
            this.context.save();
            this.context.resetTransform();
            this.context.clearRect(0, 0, this.width, this.height);
            this.context.restore();
        }
        toImage() {
            const img = this.document.createElement('img');
            img.src = this.getDataURL();
            return img;
        }
        getDataURL(type) {
            return this.element.toDataURL(type);
        }
        /**
         * @param fileName The name of the downloaded file.
         * @param fileFormat The file format, the default is `image/png`
         */
        download(fileName, fileFormat = 'image/png') {
            fileName = (fileName !== null && fileName !== void 0 ? fileName : '').trim() || 'image';
            const dataUrl = this.getDataURL(fileFormat);
            const document = this.document;
            const a = document.createElement('a');
            a.href = dataUrl;
            a.download = fileName;
            a.style.display = 'none';
            document.body.appendChild(a); // required for the `click` to work in Firefox
            a.click();
            document.body.removeChild(a);
        }
        get pixelRatio() {
            return this._pixelRatio;
        }
        /**
         * Changes the pixel ratio of the Canvas element to the given value,
         * or uses the window.devicePixelRatio (default), then resizes the Canvas
         * element accordingly (default).
         */
        setPixelRatio(ratio) {
            let pixelRatio = ratio !== null && ratio !== void 0 ? ratio : this.window.devicePixelRatio;
            if (!isDesktop()) {
                // Mobile browsers have stricter memory limits, we reduce rendering resolution to
                // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they
                // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.
                pixelRatio = 1;
            }
            this._pixelRatio = pixelRatio;
            return HdpiCanvas.overrideScale(this.realContext, pixelRatio);
        }
        set pixelated(value) {
            this.element.style.imageRendering = value ? 'pixelated' : 'auto';
        }
        get pixelated() {
            return this.element.style.imageRendering === 'pixelated';
        }
        get width() {
            return this._width;
        }
        get height() {
            return this._height;
        }
        resize(width, height) {
            if (!(width > 0 && height > 0)) {
                return;
            }
            const { element, context, pixelRatio } = this;
            element.width = Math.round(width * pixelRatio);
            element.height = Math.round(height * pixelRatio);
            element.style.width = width + 'px';
            element.style.height = height + 'px';
            context.resetTransform();
            this._width = width;
            this._height = height;
        }
        static get textMeasuringContext() {
            if (this._textMeasuringContext) {
                return this._textMeasuringContext;
            }
            const canvas = this.document.createElement('canvas');
            this._textMeasuringContext = canvas.getContext('2d');
            return this._textMeasuringContext;
        }
        static get svgText() {
            if (this._svgText) {
                return this._svgText;
            }
            const xmlns = 'http://www.w3.org/2000/svg';
            const svg = document.createElementNS(xmlns, 'svg');
            svg.setAttribute('width', '100');
            svg.setAttribute('height', '100');
            // Add a descriptive class name in case someone sees this SVG element
            // in devtools and wonders about its purpose:
            if (svg.classList) {
                svg.classList.add('text-measuring-svg');
            }
            else {
                svg.setAttribute('class', 'text-measuring-svg');
            }
            svg.style.position = 'absolute';
            svg.style.top = '-1000px';
            svg.style.visibility = 'hidden';
            const svgText = document.createElementNS(xmlns, 'text');
            svgText.setAttribute('x', '0');
            svgText.setAttribute('y', '30');
            svgText.setAttribute('text', 'black');
            svg.appendChild(svgText);
            document.body.appendChild(svg);
            this._svgText = svgText;
            return svgText;
        }
        static get has() {
            if (this._has) {
                return this._has;
            }
            const isChrome = typeof navigator === 'undefined' || navigator.userAgent.indexOf('Chrome') > -1;
            const isFirefox = typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Firefox') > -1;
            const isSafari = !isChrome && typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Safari') > -1;
            this._has = Object.freeze({
                textMetrics: this.textMeasuringContext.measureText('test').actualBoundingBoxDescent !== undefined &&
                    // Firefox implemented advanced TextMetrics object in v74:
                    // https://bugzilla.mozilla.org/show_bug.cgi?id=1102584
                    // but it's buggy, so we'll keep using the SVG for text measurement in Firefox for now.
                    !isFirefox &&
                    !isSafari,
                getTransform: this.textMeasuringContext.getTransform !== undefined,
            });
            return this._has;
        }
        static measureText(text, font, textBaseline, textAlign) {
            const ctx = this.textMeasuringContext;
            ctx.font = font;
            ctx.textBaseline = textBaseline;
            ctx.textAlign = textAlign;
            return ctx.measureText(text);
        }
        /**
         * Returns the width and height of the measured text.
         * @param text The single-line text to measure.
         * @param font The font shorthand string.
         */
        static getTextSize(text, font) {
            if (this.has.textMetrics) {
                const ctx = this.textMeasuringContext;
                ctx.font = font;
                const metrics = ctx.measureText(text);
                return {
                    width: metrics.width,
                    height: metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent,
                };
            }
            else {
                return this.measureSvgText(text, font);
            }
        }
        static measureSvgText(text, font) {
            const cache = this.textSizeCache;
            const fontCache = cache[font];
            // Note: consider not caching the size of numeric strings.
            // For example: if (isNaN(+text)) { // skip
            if (fontCache) {
                const size = fontCache[text];
                if (size) {
                    return size;
                }
            }
            else {
                cache[font] = {};
            }
            const svgText = this.svgText;
            svgText.style.font = font;
            svgText.textContent = text;
            // `getBBox` returns an instance of `SVGRect` with the same `width` and `height`
            // measurements as `DOMRect` instance returned by the `getBoundingClientRect`.
            // But the `SVGRect` instance has half the properties of the `DOMRect`,
            // so we use the `getBBox` method.
            const bbox = svgText.getBBox();
            const size = {
                width: bbox.width,
                height: bbox.height,
            };
            cache[font][text] = size;
            return size;
        }
        static overrideScale(ctx, scale) {
            let depth = 0;
            const overrides = {
                save() {
                    this.$save();
                    depth++;
                },
                restore() {
                    if (depth > 0) {
                        this.$restore();
                        depth--;
                    }
                    else {
                        throw new Error('AG Charts - Unable to restore() past depth 0');
                    }
                },
                setTransform(a, b, c, d, e, f) {
                    if (typeof a === 'object') {
                        this.$setTransform(a);
                    }
                    else {
                        this.$setTransform(a * scale, b * scale, c * scale, d * scale, e * scale, f * scale);
                    }
                },
                resetTransform() {
                    // As of Jan 8, 2019, `resetTransform` is still an "experimental technology",
                    // and doesn't work in IE11 and Edge 44.
                    this.$setTransform(scale, 0, 0, scale, 0, 0);
                },
                verifyDepthZero() {
                    if (depth !== 0) {
                        throw new Error('AG Charts - Save/restore depth is non-zero: ' + depth);
                    }
                },
            };
            for (const name in overrides) {
                if (Object.prototype.hasOwnProperty.call(overrides, name)) {
                    // Save native methods under prefixed names,
                    // if this hasn't been done by the previous overrides already.
                    if (!ctx['$' + name]) {
                        ctx['$' + name] = ctx[name];
                    }
                    // Replace native methods with overrides,
                    // or previous overrides with the new ones.
                    ctx[name] = overrides[name];
                }
            }
            return ctx;
        }
    }
    HdpiCanvas.document = globalThis.document;
    HdpiCanvas.textSizeCache = {};

    class Gradient {
        constructor() {
            this.stops = [];
        }
    }

    class LinearGradient extends Gradient {
        constructor() {
            super(...arguments);
            this.angle = 0;
        }
        createGradient(ctx, bbox) {
            // Gradient 0° angle starts at top according to CSS spec
            const angleOffset = 90;
            const { stops, angle } = this;
            const radians = normalizeAngle360(toRadians(angle + angleOffset));
            const cos = Math.cos(radians);
            const sin = Math.sin(radians);
            const w = bbox.width;
            const h = bbox.height;
            const cx = bbox.x + w * 0.5;
            const cy = bbox.y + h * 0.5;
            if (w > 0 && h > 0) {
                const diagonal = Math.sqrt(h * h + w * w) / 2;
                const diagonalAngle = Math.atan2(h, w);
                let quarteredAngle;
                if (radians < Math.PI / 2) {
                    quarteredAngle = radians;
                }
                else if (radians < Math.PI) {
                    quarteredAngle = Math.PI - radians;
                }
                else if (radians < (3 * Math.PI) / 2) {
                    quarteredAngle = radians - Math.PI;
                }
                else {
                    quarteredAngle = 2 * Math.PI - radians;
                }
                const l = diagonal * Math.abs(Math.cos(quarteredAngle - diagonalAngle));
                const gradient = ctx.createLinearGradient(cx + cos * l, cy + sin * l, cx - cos * l, cy - sin * l);
                stops.forEach((stop) => {
                    gradient.addColorStop(stop.offset, stop.color);
                });
                return gradient;
            }
            return 'black';
        }
    }

    const LINEAR_GRADIENT_REGEXP = /^linear-gradient\((.*?)deg,\s*(.*?)\s*\)$/i;
    class Shape extends Node {
        constructor() {
            super(...arguments);
            this.fillOpacity = 1;
            this.strokeOpacity = 1;
            this.fill = Shape.defaultStyles.fill;
            /**
             * Note that `strokeStyle = null` means invisible stroke,
             * while `lineWidth = 0` means no stroke, and sometimes this can mean different things.
             * For example, a rect shape with an invisible stroke may not align to the pixel grid
             * properly because the stroke affects the rules of alignment, and arc shapes forming
             * a pie chart will have a gap between them if they have an invisible stroke, whereas
             * there would be not gap if there was no stroke at all.
             * The preferred way of making the stroke invisible is setting the `lineWidth` to zero,
             * unless specific looks that is achieved by having an invisible stroke is desired.
             */
            this.stroke = Shape.defaultStyles.stroke;
            this.strokeWidth = Shape.defaultStyles.strokeWidth;
            this.lineDash = Shape.defaultStyles.lineDash;
            this.lineDashOffset = Shape.defaultStyles.lineDashOffset;
            this.lineCap = Shape.defaultStyles.lineCap;
            this.lineJoin = Shape.defaultStyles.lineJoin;
            this.opacity = Shape.defaultStyles.opacity;
            this.fillShadow = Shape.defaultStyles.fillShadow;
        }
        /**
         * Restores the default styles introduced by this subclass.
         */
        restoreOwnStyles() {
            const styles = this.constructor.defaultStyles;
            const keys = Object.getOwnPropertyNames(styles);
            // getOwnPropertyNames is about 2.5 times faster than
            // for..in with the hasOwnProperty check and in this
            // case, where most properties are inherited, can be
            // more than an order of magnitude faster.
            for (let i = 0, n = keys.length; i < n; i++) {
                const key = keys[i];
                this[key] = styles[key];
            }
        }
        updateGradient() {
            const { fill } = this;
            let linearGradientMatch;
            if ((fill === null || fill === void 0 ? void 0 : fill.startsWith('linear-gradient')) && (linearGradientMatch = LINEAR_GRADIENT_REGEXP.exec(fill))) {
                const angle = parseFloat(linearGradientMatch[1]);
                const colors = [];
                const colorsPart = linearGradientMatch[2];
                const colorRegex = /(#[0-9a-f]+)|(rgba?\(.+?\))|([a-z]+)/gi;
                let c;
                while ((c = colorRegex.exec(colorsPart))) {
                    colors.push(c[0]);
                }
                this.gradient = new LinearGradient();
                this.gradient.angle = angle;
                this.gradient.stops = colors.map((color, index) => {
                    const offset = index / (colors.length - 1);
                    return { offset, color };
                });
            }
            else {
                this.gradient = undefined;
            }
        }
        /**
         * Returns a device-pixel aligned coordinate (or length if length is supplied).
         *
         * NOTE: Not suitable for strokes, since the stroke needs to be offset to the middle
         * of a device pixel.
         */
        align(start, length) {
            var _a, _b, _c;
            const pixelRatio = (_c = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas) === null || _b === void 0 ? void 0 : _b.pixelRatio) !== null && _c !== void 0 ? _c : 1;
            const alignedStart = Math.round(start * pixelRatio) / pixelRatio;
            if (length == undefined) {
                return alignedStart;
            }
            if (length === 0) {
                return 0;
            }
            if (length < 1) {
                // Avoid hiding crisp shapes
                return Math.ceil(length * pixelRatio) / pixelRatio;
            }
            // Account for the rounding of alignedStart by increasing length to compensate before
            // alignment.
            return Math.round((length + start) * pixelRatio) / pixelRatio - alignedStart;
        }
        fillStroke(ctx) {
            this.renderFill(ctx);
            this.renderStroke(ctx);
        }
        renderFill(ctx) {
            if (this.fill) {
                const { globalAlpha } = ctx;
                this.applyFill(ctx);
                this.applyFillAlpha(ctx);
                this.applyShadow(ctx);
                ctx.fill();
                ctx.globalAlpha = globalAlpha;
            }
            ctx.shadowColor = 'rgba(0, 0, 0, 0)';
        }
        applyFill(ctx) {
            if (this.gradient) {
                ctx.fillStyle = this.gradient.createGradient(ctx, this.computeBBox());
            }
            else {
                ctx.fillStyle = this.fill;
            }
        }
        applyFillAlpha(ctx) {
            const { globalAlpha } = ctx;
            ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;
        }
        applyShadow(ctx) {
            var _a, _b;
            // The canvas context scaling (depends on the device's pixel ratio)
            // has no effect on shadows, so we have to account for the pixel ratio
            // manually here.
            const pixelRatio = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;
            const fillShadow = this.fillShadow;
            if (fillShadow === null || fillShadow === void 0 ? void 0 : fillShadow.enabled) {
                ctx.shadowColor = fillShadow.color;
                ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
                ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
                ctx.shadowBlur = fillShadow.blur * pixelRatio;
            }
        }
        renderStroke(ctx) {
            if (this.stroke && this.strokeWidth) {
                const { globalAlpha } = ctx;
                ctx.strokeStyle = this.stroke;
                ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;
                ctx.lineWidth = this.strokeWidth;
                if (this.lineDash) {
                    ctx.setLineDash(this.lineDash);
                }
                if (this.lineDashOffset) {
                    ctx.lineDashOffset = this.lineDashOffset;
                }
                if (this.lineCap) {
                    ctx.lineCap = this.lineCap;
                }
                if (this.lineJoin) {
                    ctx.lineJoin = this.lineJoin;
                }
                ctx.stroke();
                ctx.globalAlpha = globalAlpha;
            }
        }
        containsPoint(x, y) {
            return this.isPointInPath(x, y);
        }
    }
    /**
     * Defaults for style properties. Note that properties that affect the position
     * and shape of the node are not considered style properties, for example:
     * `x`, `y`, `width`, `height`, `radius`, `rotation`, etc.
     * Can be used to reset to the original styling after some custom styling
     * has been applied (using the `restoreOwnStyles` method).
     * These static defaults are meant to be inherited by subclasses.
     */
    Shape.defaultStyles = Object.assign({}, {
        fill: 'black',
        stroke: undefined,
        strokeWidth: 0,
        lineDash: undefined,
        lineDashOffset: 0,
        lineCap: undefined,
        lineJoin: undefined,
        opacity: 1,
        fillShadow: undefined,
    });
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Shape.prototype, "fillOpacity", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Shape.prototype, "strokeOpacity", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR, changeCb: (s) => s.updateGradient() }),
        __metadata("design:type", Object)
    ], Shape.prototype, "fill", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Object)
    ], Shape.prototype, "stroke", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Shape.prototype, "strokeWidth", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Object)
    ], Shape.prototype, "lineDash", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Shape.prototype, "lineDashOffset", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", String)
    ], Shape.prototype, "lineCap", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", String)
    ], Shape.prototype, "lineJoin", void 0);
    __decorate([
        SceneChangeDetection({
            redraw: RedrawType.MINOR,
            convertor: (v) => Math.min(1, Math.max(0, v)),
        }),
        __metadata("design:type", Number)
    ], Shape.prototype, "opacity", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR, checkDirtyOnAssignment: true }),
        __metadata("design:type", Object)
    ], Shape.prototype, "fillShadow", void 0);

    const ellipsis = '\u2026';
    function SceneFontChangeDetection(opts) {
        const { redraw = RedrawType.MAJOR, changeCb } = opts !== null && opts !== void 0 ? opts : {};
        return SceneChangeDetection({ redraw, type: 'font', changeCb });
    }
    class Text extends Shape {
        constructor() {
            super(...arguments);
            this.x = 0;
            this.y = 0;
            this.lines = [];
            this.text = undefined;
            this._dirtyFont = true;
            this.fontSize = 10;
            this.fontFamily = 'sans-serif';
            this.textAlign = Text.defaultStyles.textAlign;
            this.textBaseline = Text.defaultStyles.textBaseline;
            // TextMetrics are used if lineHeight is not defined.
            this.lineHeight = undefined;
        }
        _setLines() {
            this.lines = splitText(this.text);
        }
        get font() {
            if (this._font == null || this._dirtyFont) {
                this._dirtyFont = false;
                this._font = getFont(this);
            }
            return this._font;
        }
        computeBBox() {
            return HdpiCanvas.has.textMetrics
                ? getPreciseBBox(this.lines, this.x, this.y, this)
                : getApproximateBBox(this.lines, this.x, this.y, this);
        }
        getLineHeight(line) {
            var _a, _b;
            if (this.lineHeight)
                return this.lineHeight;
            if (HdpiCanvas.has.textMetrics) {
                const metrics = HdpiCanvas.measureText(line, this.font, this.textBaseline, this.textAlign);
                return (((_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.emHeightAscent) +
                    ((_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.emHeightDescent));
            }
            return HdpiCanvas.getTextSize(line, this.font).height;
        }
        isPointInPath(x, y) {
            const point = this.transformPoint(x, y);
            const bbox = this.computeBBox();
            return bbox ? bbox.containsPoint(point.x, point.y) : false;
        }
        render(renderCtx) {
            const { ctx, forceRender, stats } = renderCtx;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            if (!this.lines.length || !this.layerManager) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            const { fill, stroke, strokeWidth } = this;
            ctx.font = this.font;
            ctx.textAlign = this.textAlign;
            ctx.textBaseline = this.textBaseline;
            const pixelRatio = this.layerManager.canvas.pixelRatio || 1;
            const { globalAlpha } = ctx;
            if (fill) {
                ctx.fillStyle = fill;
                ctx.globalAlpha = globalAlpha * this.opacity * this.fillOpacity;
                const { fillShadow } = this;
                if (fillShadow === null || fillShadow === void 0 ? void 0 : fillShadow.enabled) {
                    ctx.shadowColor = fillShadow.color;
                    ctx.shadowOffsetX = fillShadow.xOffset * pixelRatio;
                    ctx.shadowOffsetY = fillShadow.yOffset * pixelRatio;
                    ctx.shadowBlur = fillShadow.blur * pixelRatio;
                }
                this.renderLines((line, x, y) => ctx.fillText(line, x, y));
            }
            if (stroke && strokeWidth) {
                ctx.strokeStyle = stroke;
                ctx.lineWidth = strokeWidth;
                ctx.globalAlpha = globalAlpha * this.opacity * this.strokeOpacity;
                const { lineDash, lineDashOffset, lineCap, lineJoin } = this;
                if (lineDash) {
                    ctx.setLineDash(lineDash);
                }
                if (lineDashOffset) {
                    ctx.lineDashOffset = lineDashOffset;
                }
                if (lineCap) {
                    ctx.lineCap = lineCap;
                }
                if (lineJoin) {
                    ctx.lineJoin = lineJoin;
                }
                this.renderLines((line, x, y) => ctx.strokeText(line, x, y));
            }
            super.render(renderCtx);
        }
        renderLines(renderCallback) {
            const { lines, x, y } = this;
            const lineHeights = this.lines.map((line) => this.getLineHeight(line));
            const totalHeight = lineHeights.reduce((a, b) => a + b, 0);
            let offsetY = -(totalHeight - lineHeights[0]) * getVerticalOffset(this.textBaseline);
            for (let i = 0; i < lines.length; i++) {
                renderCallback(lines[i], x, y + offsetY);
                offsetY += lineHeights[i];
            }
        }
        static wrap(text, maxWidth, maxHeight, textProps, wrapping, overflow = 'ellipsis') {
            var _a;
            const canOverflow = overflow !== 'hide';
            const font = getFont(textProps);
            const measurer = createTextMeasurer(font);
            const lines = text.split(/\r?\n/g);
            if (lines.length === 0) {
                return '';
            }
            if (wrapping === 'never') {
                return (_a = Text.truncateLine(lines[0], maxWidth, measurer, canOverflow ? 'auto' : 'never')) !== null && _a !== void 0 ? _a : '';
            }
            const result = [];
            let cumulativeHeight = 0;
            for (const line of lines) {
                const wrappedLine = Text.wrapLine(line, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow);
                if (wrappedLine == null) {
                    return '';
                }
                result.push(wrappedLine.result);
                cumulativeHeight = wrappedLine.cumulativeHeight;
                if (wrappedLine.truncated) {
                    break;
                }
            }
            return result.join('\n').trim();
        }
        static wrapLine(text, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow) {
            text = text.trim();
            if (!text) {
                return { result: '', truncated: false, cumulativeHeight };
            }
            const initialSize = measurer.size(text);
            if (initialSize.width <= maxWidth) {
                // Text fits into a single line
                return {
                    result: text,
                    truncated: false,
                    cumulativeHeight: cumulativeHeight + initialSize.height,
                };
            }
            if (initialSize.height > maxHeight || measurer.width('W') > maxWidth) {
                // Not enough space for a single line or character
                return canOverflow ? { result: '', truncated: true, cumulativeHeight } : undefined;
            }
            const words = text.split(/\s+/g);
            const wrapResult = Text.wrapLineSequentially(words, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow);
            if (wrapResult == null) {
                return undefined;
            }
            cumulativeHeight = wrapResult.cumulativeHeight;
            let { lines } = wrapResult;
            if (!(wrapResult.wordsBrokenOrTruncated || wrapResult.linesTruncated)) {
                // If no word breaks or truncations, try the balanced wrapping
                const linesCount = wrapResult.lines.length;
                const balanced = Text.wrapLineBalanced(words, maxWidth, measurer, linesCount);
                if (balanced.length === lines.length) {
                    // Some lines can't be balanced properly because of unusually long words
                    lines = balanced;
                }
            }
            const wrappedText = lines.map((ln) => ln.join(' ')).join('\n');
            return { result: wrappedText, truncated: wrapResult.linesTruncated, cumulativeHeight };
        }
        static breakWord(word, firstLineWidth, maxWidth, hyphens, measurer) {
            const isPunctuationAt = (index) => Text.punctuationMarks.includes(word[index]);
            const h = hyphens ? measurer.width('-') : 0;
            const breaks = [];
            let partWidth = 0;
            let p = 0;
            for (let i = 0; i < word.length; i++) {
                const c = word[i];
                const w = measurer.width(c);
                const limit = p === 0 ? firstLineWidth : maxWidth;
                if (partWidth + w + h > limit) {
                    breaks.push(i);
                    partWidth = 0;
                    p++;
                }
                partWidth += w;
            }
            const parts = [];
            let start = 0;
            for (const index of breaks) {
                let part = word.substring(start, index);
                if (hyphens && part.length > 0 && !isPunctuationAt(index - 1) && !isPunctuationAt(index)) {
                    part += '-';
                }
                parts.push(part);
                start = index;
            }
            parts.push(word.substring(start));
            return parts;
        }
        static truncateLine(text, maxWidth, measurer, ellipsisMode) {
            text = text.trimEnd();
            const lineWidth = measurer.width(text);
            if (lineWidth > maxWidth && ellipsisMode === 'never') {
                return undefined;
            }
            else if (lineWidth <= maxWidth && ellipsisMode !== 'force') {
                return text;
            }
            const ellipsisWidth = measurer.width(ellipsis);
            let trunc = text;
            let truncWidth = lineWidth;
            while (trunc.length > 0 && truncWidth + ellipsisWidth > maxWidth) {
                // Ensure there is no space between the ellipsis and last letter
                trunc = trunc.slice(0, -1).trimEnd();
                truncWidth = measurer.width(trunc);
            }
            if (truncWidth + ellipsisWidth <= maxWidth) {
                return `${trunc}${ellipsis}`;
            }
            else {
                return undefined;
            }
        }
        static wrapLineSequentially(words, maxWidth, maxHeight, measurer, textProps, wrapping, cumulativeHeight, canOverflow) {
            const { fontSize = 0, lineHeight = fontSize * Text.defaultLineHeightRatio } = textProps;
            const breakWord = wrapping === 'always' || wrapping === 'hyphenate';
            const hyphenate = wrapping === 'hyphenate';
            const spaceWidth = measurer.width(' ');
            let wordsBrokenOrTruncated = false;
            let linesTruncated = false;
            const lines = [];
            let currentLine = [];
            let lineWidth = 0;
            const getReturnValue = () => ({
                lines,
                linesTruncated,
                wordsBrokenOrTruncated,
                cumulativeHeight,
            });
            const truncateLastLine = () => {
                if (!canOverflow) {
                    return undefined;
                }
                const lastLine = currentLine.join(' ');
                const trunc = Text.truncateLine(lastLine, maxWidth, measurer, 'force');
                if (trunc == null) {
                    return undefined;
                }
                currentLine.splice(0, currentLine.length, trunc);
                linesTruncated = true;
                return getReturnValue();
            };
            const addNewLine = () => {
                const expectedHeight = cumulativeHeight + lineHeight;
                if (expectedHeight >= maxHeight) {
                    return false;
                }
                // Add new line
                currentLine = [];
                lineWidth = 0;
                cumulativeHeight = expectedHeight;
                lines.push(currentLine);
                return true;
            };
            if (!addNewLine()) {
                return truncateLastLine();
            }
            for (let i = 0; i < words.length; i++) {
                const word = words[i];
                const wordWidth = measurer.width(word);
                const expectedSpaceWidth = currentLine.length === 0 ? 0 : spaceWidth;
                const expectedLineWidth = lineWidth + expectedSpaceWidth + wordWidth;
                if (expectedLineWidth <= maxWidth) {
                    // If the word fits, add it to the current line
                    currentLine.push(word);
                    lineWidth = expectedLineWidth;
                    continue;
                }
                if (wordWidth <= maxWidth) {
                    // If the word is not too long, put it onto new line
                    if (!addNewLine()) {
                        return truncateLastLine();
                    }
                    currentLine.push(word);
                    lineWidth = wordWidth;
                    continue;
                }
                // Handle a long word
                wordsBrokenOrTruncated = true;
                if (breakWord) {
                    // Break the word into parts
                    const availWidth = maxWidth - lineWidth - expectedSpaceWidth;
                    const parts = Text.breakWord(word, availWidth, maxWidth, hyphenate, measurer);
                    for (let p = 0; p < parts.length; p++) {
                        const part = parts[p];
                        part && currentLine.push(part);
                        if (p === parts.length - 1) {
                            lineWidth = measurer.width(part);
                        }
                        else if (!addNewLine()) {
                            return truncateLastLine();
                        }
                    }
                }
                else if (canOverflow) {
                    // Truncate the word
                    if (!addNewLine()) {
                        return truncateLastLine();
                    }
                    const trunc = Text.truncateLine(word, maxWidth, measurer, 'force');
                    if (trunc == null) {
                        return undefined;
                    }
                    currentLine.push(trunc);
                    if (i < words.length - 1) {
                        linesTruncated = true;
                    }
                    break;
                }
                else {
                    return undefined;
                }
            }
            return getReturnValue();
        }
        static wrapLineBalanced(words, maxWidth, measurer, linesCount) {
            const totalWordsWidth = words.reduce((sum, w) => sum + measurer.width(w), 0);
            const spaceWidth = measurer.width(' ');
            const totalSpaceWidth = spaceWidth * (words.length - linesCount - 2);
            const averageLineWidth = (totalWordsWidth + totalSpaceWidth) / linesCount;
            const lines = [];
            let currentLine = [];
            let lineWidth = measurer.width(words[0]);
            let newLine = true;
            for (const word of words) {
                const width = measurer.width(word);
                if (newLine) {
                    // New line
                    currentLine = [];
                    currentLine.push(word);
                    lineWidth = width;
                    newLine = false;
                    lines.push(currentLine);
                    continue;
                }
                const expectedLineWidth = lineWidth + spaceWidth + width;
                if (expectedLineWidth <= averageLineWidth) {
                    // Keep adding words to the line
                    currentLine.push(word);
                    lineWidth = expectedLineWidth;
                }
                else if (expectedLineWidth <= maxWidth) {
                    // Add the last word to the line
                    currentLine.push(word);
                    newLine = true;
                }
                else {
                    // Put the word onto the next line
                    currentLine = [word];
                    lineWidth = width;
                    lines.push(currentLine);
                }
            }
            return lines;
        }
        setFont(props) {
            this.fontFamily = props.fontFamily;
            this.fontSize = props.fontSize;
            this.fontStyle = props.fontStyle;
            this.fontWeight = props.fontWeight;
        }
        setAlign(props) {
            this.textAlign = props.textAlign;
            this.textBaseline = props.textBaseline;
        }
    }
    Text.className = 'Text';
    // The default line spacing for document editors is usually 1.15
    Text.defaultLineHeightRatio = 1.15;
    Text.defaultStyles = Object.assign({}, Shape.defaultStyles, {
        textAlign: 'start',
        fontStyle: undefined,
        fontWeight: undefined,
        fontSize: 10,
        fontFamily: 'sans-serif',
        textBaseline: 'alphabetic',
    });
    Text.ellipsis = ellipsis;
    Text.punctuationMarks = ['.', ',', '-', ':', ';', '!', '?', `'`, '"', '(', ')'];
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Text.prototype, "x", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Text.prototype, "y", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR, changeCb: (o) => o._setLines() }),
        __metadata("design:type", String)
    ], Text.prototype, "text", void 0);
    __decorate([
        SceneFontChangeDetection(),
        __metadata("design:type", String)
    ], Text.prototype, "fontStyle", void 0);
    __decorate([
        SceneFontChangeDetection(),
        __metadata("design:type", String)
    ], Text.prototype, "fontWeight", void 0);
    __decorate([
        SceneFontChangeDetection(),
        __metadata("design:type", Number)
    ], Text.prototype, "fontSize", void 0);
    __decorate([
        SceneFontChangeDetection(),
        __metadata("design:type", String)
    ], Text.prototype, "fontFamily", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", String)
    ], Text.prototype, "textAlign", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", String)
    ], Text.prototype, "textBaseline", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Text.prototype, "lineHeight", void 0);
    function createTextMeasurer(font) {
        const cache = new Map();
        const getTextSize = (text) => HdpiCanvas.getTextSize(text, font);
        const getLineWidth = (text) => {
            if (cache.has(text)) {
                return cache.get(text);
            }
            const { width } = getTextSize(text);
            cache.set(text, width);
            return width;
        };
        return { size: getTextSize, width: getLineWidth };
    }
    function getFont(fontProps) {
        const { fontFamily, fontSize, fontStyle, fontWeight } = fontProps;
        return [fontStyle !== null && fontStyle !== void 0 ? fontStyle : '', fontWeight !== null && fontWeight !== void 0 ? fontWeight : '', fontSize + 'px', fontFamily].join(' ').trim();
    }
    function measureText(lines, x, y, textProps) {
        return HdpiCanvas.has.textMetrics
            ? getPreciseBBox(lines, x, y, textProps)
            : getApproximateBBox(lines, x, y, textProps);
    }
    function getPreciseBBox(lines, x, y, textProps) {
        var _a, _b;
        let left = 0;
        let top = 0;
        let width = 0;
        let height = 0;
        // Distance between first and last base lines.
        let baselineDistance = 0;
        const font = getFont(textProps);
        const { lineHeight, textBaseline = Text.defaultStyles.textBaseline, textAlign = Text.defaultStyles.textAlign, } = textProps;
        for (let i = 0; i < lines.length; i++) {
            const metrics = HdpiCanvas.measureText(lines[i], font, textBaseline, textAlign);
            left = Math.max(left, metrics.actualBoundingBoxLeft);
            width = Math.max(width, metrics.width);
            if (i == 0) {
                top += metrics.actualBoundingBoxAscent;
                height += metrics.actualBoundingBoxAscent;
            }
            else {
                baselineDistance += (_a = metrics.fontBoundingBoxAscent) !== null && _a !== void 0 ? _a : metrics.emHeightAscent;
            }
            if (i == lines.length - 1) {
                height += metrics.actualBoundingBoxDescent;
            }
            else {
                baselineDistance += (_b = metrics.fontBoundingBoxDescent) !== null && _b !== void 0 ? _b : metrics.emHeightDescent;
            }
        }
        if (lineHeight !== undefined) {
            baselineDistance = (lines.length - 1) * lineHeight;
        }
        height += baselineDistance;
        top += baselineDistance * getVerticalOffset(textBaseline);
        return new BBox(x - left, y - top, width, height);
    }
    function getApproximateBBox(lines, x, y, textProps) {
        let width = 0;
        let firstLineHeight = 0;
        // Distance between first and last base lines.
        let baselineDistance = 0;
        const font = getFont(textProps);
        const { lineHeight, textBaseline = Text.defaultStyles.textBaseline, textAlign = Text.defaultStyles.textAlign, } = textProps;
        if (lines.length > 0) {
            const lineSize = HdpiCanvas.getTextSize(lines[0], font);
            width = lineSize.width;
            firstLineHeight = lineSize.height;
        }
        for (let i = 1; i < lines.length; i++) {
            const lineSize = HdpiCanvas.getTextSize(lines[i], font);
            width = Math.max(width, lineSize.width);
            baselineDistance += lineHeight !== null && lineHeight !== void 0 ? lineHeight : lineSize.height;
        }
        switch (textAlign) {
            case 'end':
            case 'right':
                x -= width;
                break;
            case 'center':
                x -= width / 2;
        }
        switch (textBaseline) {
            case 'alphabetic':
                y -= firstLineHeight * 0.7 + baselineDistance * 0.5;
                break;
            case 'middle':
                y -= firstLineHeight * 0.45 + baselineDistance * 0.5;
                break;
            case 'ideographic':
                y -= firstLineHeight + baselineDistance;
                break;
            case 'hanging':
                y -= firstLineHeight * 0.2 + baselineDistance * 0.5;
                break;
            case 'bottom':
                y -= firstLineHeight + baselineDistance;
                break;
        }
        return new BBox(x, y, width, firstLineHeight + baselineDistance);
    }
    function getVerticalOffset(textBaseline) {
        switch (textBaseline) {
            case 'top':
            case 'hanging':
                return 0;
            case 'bottom':
            case 'alphabetic':
            case 'ideographic':
                return 1;
            case 'middle':
                return 0.5;
        }
    }
    function splitText(text) {
        return typeof text === 'string' ? text.split(/\r?\n/g) : [];
    }

    function ProxyOnWrite(proxyProperty) {
        return addTransformToInstanceProperty((target, _, value) => {
            target[proxyProperty] = value;
            return value;
        });
    }
    function ProxyPropertyOnWrite(childName, childProperty) {
        return addTransformToInstanceProperty((target, key, value) => {
            target[childName][childProperty !== null && childProperty !== void 0 ? childProperty : key] = value;
            return value;
        });
    }
    /**
     * Allows side-effects to be triggered on property write.
     *
     * @param opts.newValue called when a new value is set - never called for undefined values.
     * @param opts.oldValue called with the old value before a new value is set - never called for
     *                      undefined values.
     * @param opts.changeValue called on any change to the value - always called.
     */
    function ActionOnSet(opts) {
        const { newValue: newValueFn, oldValue: oldValueFn, changeValue: changeValueFn } = opts;
        return addTransformToInstanceProperty((target, _, newValue, oldValue) => {
            if (newValue !== oldValue) {
                if (oldValue !== undefined) {
                    oldValueFn === null || oldValueFn === void 0 ? void 0 : oldValueFn.call(target, oldValue);
                }
                if (newValue !== undefined) {
                    newValueFn === null || newValueFn === void 0 ? void 0 : newValueFn.call(target, newValue);
                }
                changeValueFn === null || changeValueFn === void 0 ? void 0 : changeValueFn.call(target, newValue, oldValue);
            }
            return newValue;
        });
    }

    class Caption {
        constructor() {
            this.node = new Text();
            this.enabled = false;
            this.text = undefined;
            this.fontSize = 10;
            this.fontFamily = 'sans-serif';
            this.maxWidth = undefined;
            this.maxHeight = undefined;
            this.wrapping = 'always';
            const node = this.node;
            node.textAlign = 'center';
            node.pointerEvents = PointerEvents.None;
        }
        computeTextWrap(containerWidth, containerHeight) {
            var _a, _b;
            const { text, wrapping } = this;
            const maxWidth = Math.min((_a = this.maxWidth) !== null && _a !== void 0 ? _a : Infinity, containerWidth);
            const maxHeight = (_b = this.maxHeight) !== null && _b !== void 0 ? _b : containerHeight;
            if (!isFinite(maxWidth) && !isFinite(maxHeight)) {
                this.node.text = text;
                return;
            }
            const wrapped = Text.wrap(text !== null && text !== void 0 ? text : '', maxWidth, maxHeight, this, wrapping);
            this.node.text = wrapped;
        }
    }
    Caption.SMALL_PADDING = 10;
    Caption.LARGE_PADDING = 20;
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], Caption.prototype, "enabled", void 0);
    __decorate([
        Validate(OPT_STRING),
        ProxyPropertyOnWrite('node'),
        __metadata("design:type", String)
    ], Caption.prototype, "text", void 0);
    __decorate([
        Validate(OPT_FONT_STYLE),
        ProxyPropertyOnWrite('node'),
        __metadata("design:type", Object)
    ], Caption.prototype, "fontStyle", void 0);
    __decorate([
        Validate(OPT_FONT_WEIGHT),
        ProxyPropertyOnWrite('node'),
        __metadata("design:type", Object)
    ], Caption.prototype, "fontWeight", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        ProxyPropertyOnWrite('node'),
        __metadata("design:type", Number)
    ], Caption.prototype, "fontSize", void 0);
    __decorate([
        Validate(STRING),
        ProxyPropertyOnWrite('node'),
        __metadata("design:type", String)
    ], Caption.prototype, "fontFamily", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        ProxyPropertyOnWrite('node', 'fill'),
        __metadata("design:type", Object)
    ], Caption.prototype, "color", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], Caption.prototype, "spacing", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], Caption.prototype, "lineHeight", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], Caption.prototype, "maxWidth", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], Caption.prototype, "maxHeight", void 0);
    __decorate([
        Validate(TEXT_WRAP),
        __metadata("design:type", String)
    ], Caption.prototype, "wrapping", void 0);

    class AxisTitle {
        constructor() {
            this.enabled = false;
            this.text = undefined;
            this.spacing = Caption.SMALL_PADDING;
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 10;
            this.fontFamily = 'sans-serif';
            this.wrapping = 'always';
            this.formatter = undefined;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], AxisTitle.prototype, "enabled", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], AxisTitle.prototype, "text", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], AxisTitle.prototype, "spacing", void 0);
    __decorate([
        Validate(OPT_FONT_STYLE),
        __metadata("design:type", String)
    ], AxisTitle.prototype, "fontStyle", void 0);
    __decorate([
        Validate(OPT_FONT_WEIGHT),
        __metadata("design:type", String)
    ], AxisTitle.prototype, "fontWeight", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], AxisTitle.prototype, "fontSize", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", String)
    ], AxisTitle.prototype, "fontFamily", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], AxisTitle.prototype, "color", void 0);
    __decorate([
        Validate(TEXT_WRAP),
        __metadata("design:type", String)
    ], AxisTitle.prototype, "wrapping", void 0);
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], AxisTitle.prototype, "formatter", void 0);

    /**
     * Zip two arrays into an object of keys and values, or an object of keys with a single value.
     */
    function zipObject(keys, values) {
        const zipped = {};
        if (Array.isArray(values)) {
            for (let i = 0; i < keys.length; i++) {
                zipped[`${keys[i]}`] = values[i];
            }
        }
        else {
            for (let i = 0; i < keys.length; i++) {
                zipped[`${keys[i]}`] = values;
            }
        }
        return zipped;
    }

    function interpolateNumber(a, b) {
        return (d) => Number(a) * (1 - d) + Number(b) * d;
    }
    function interpolateColor(a, b) {
        if (typeof a === 'string') {
            try {
                a = Color.fromString(a);
            }
            catch (e) {
                a = Color.fromArray([0, 0, 0]);
            }
        }
        if (typeof b === 'string') {
            try {
                b = Color.fromString(b);
            }
            catch (e) {
                b = Color.fromArray([0, 0, 0]);
            }
        }
        const red = interpolateNumber(a.r, b.r);
        const green = interpolateNumber(a.g, b.g);
        const blue = interpolateNumber(a.b, b.b);
        const alpha = interpolateNumber(a.a, b.a);
        return (d) => Color.fromArray([red(d), green(d), blue(d), alpha(d)]).toRgbaString();
    }

    const linear = (n) => n;
    const easeIn = (n) => 1 - Math.cos((n * Math.PI) / 2);
    const easeOut = (n) => Math.sin((n * Math.PI) / 2);
    const easeInOut = (n) => -(Math.cos(n * Math.PI) - 1) / 2;
    const easeInQuad = (n) => n * n;
    const easeOutQuad = (n) => 1 - Math.pow((1 - n), 2);
    const easeInOutQuad = (n) => (n < 0.5 ? 2 * n * n : 1 - Math.pow((-2 * n + 2), 2) / 2);

    var easing = /*#__PURE__*/Object.freeze({
        __proto__: null,
        linear: linear,
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut,
        easeInQuad: easeInQuad,
        easeOutQuad: easeOutQuad,
        easeInOutQuad: easeInOutQuad
    });

    const QUICK_TRANSITION = 0.2;
    const INITIAL_LOAD = {
        animationDuration: 1,
        animationDelay: 0,
    };
    const REMOVE_PHASE = {
        animationDuration: 0.25,
        animationDelay: 0,
    };
    const UPDATE_PHASE = {
        animationDuration: 0.5,
        animationDelay: 0.25,
    };
    const ADD_PHASE = {
        animationDuration: 0.25,
        animationDelay: 0.75,
    };
    const LABEL_PHASE = {
        animationDuration: QUICK_TRANSITION,
        animationDelay: 1,
    };
    var RepeatType;
    (function (RepeatType) {
        RepeatType["Loop"] = "loop";
        RepeatType["Reverse"] = "reverse";
    })(RepeatType || (RepeatType = {}));
    function isNodeArray(array) {
        return array.every((n) => n instanceof Node);
    }
    class Animation {
        constructor(opts) {
            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
            this.elapsed = 0;
            this.iteration = 0;
            this.isPlaying = false;
            this.isReverse = false;
            // animation configuration
            this.id = opts.id;
            this.groupId = opts.groupId;
            this.autoplay = (_a = opts.autoplay) !== null && _a !== void 0 ? _a : true;
            this.delay = (_b = opts.delay) !== null && _b !== void 0 ? _b : 0;
            this.duration = (_c = opts.duration) !== null && _c !== void 0 ? _c : 1000;
            this.ease = (_d = opts.ease) !== null && _d !== void 0 ? _d : linear;
            this.repeat = (_e = opts.repeat) !== null && _e !== void 0 ? _e : 0;
            this.repeatType = (_f = opts.repeatType) !== null && _f !== void 0 ? _f : RepeatType.Loop;
            // user defined event listeners
            this.onComplete = opts.onComplete;
            this.onPlay = opts.onPlay;
            this.onStop = opts.onStop;
            this.onRepeat = opts.onRepeat;
            this.onUpdate = opts.onUpdate;
            // animation interpolator based on `from` & `to` types
            this.interpolate = this.createInterpolator(opts.from, opts.to);
            if (opts.skip === true) {
                (_g = this.onUpdate) === null || _g === void 0 ? void 0 : _g.call(this, opts.to, false, this);
                (_h = this.onStop) === null || _h === void 0 ? void 0 : _h.call(this, this);
                (_j = this.onComplete) === null || _j === void 0 ? void 0 : _j.call(this, this);
            }
            else if (this.autoplay) {
                this.play();
                // Initialise the animation immediately without requesting a frame to prevent flashes
                (_k = this.onUpdate) === null || _k === void 0 ? void 0 : _k.call(this, opts.from, true, this);
            }
        }
        play() {
            var _a;
            if (!this.isPlaying) {
                this.isPlaying = true;
                (_a = this.onPlay) === null || _a === void 0 ? void 0 : _a.call(this, this);
            }
            return this;
        }
        pause() {
            if (this.isPlaying) {
                this.isPlaying = false;
            }
            return this;
        }
        stop() {
            var _a;
            if (this.isPlaying) {
                this.isPlaying = false;
                (_a = this.onStop) === null || _a === void 0 ? void 0 : _a.call(this, this);
            }
            return this;
        }
        reset(opts) {
            const deltaState = this.interpolate(this.isReverse ? 1 - this.delta : this.delta);
            this.interpolate = this.createInterpolator(deltaState, opts.to);
            this.elapsed = 0;
            this.iteration = 0;
            if (typeof opts.delay === 'number') {
                this.delay = opts.delay;
            }
            if (typeof opts.duration === 'number') {
                this.duration = opts.duration;
            }
            if (typeof opts.ease === 'function') {
                this.ease = opts.ease;
            }
            return this;
        }
        update(time) {
            var _a, _b, _c;
            this.elapsed += time;
            if (this.elapsed <= this.delay) {
                return this;
            }
            const value = this.interpolate(this.isReverse ? 1 - this.delta : this.delta);
            (_a = this.onUpdate) === null || _a === void 0 ? void 0 : _a.call(this, value, false, this);
            if (this.elapsed - this.delay >= this.duration) {
                if (this.iteration < this.repeat) {
                    this.iteration++;
                    this.elapsed = ((this.elapsed - this.delay) % this.duration) + this.delay;
                    if (this.repeatType === RepeatType.Reverse) {
                        this.isReverse = !this.isReverse;
                    }
                    (_b = this.onRepeat) === null || _b === void 0 ? void 0 : _b.call(this, this);
                }
                else {
                    this.stop();
                    (_c = this.onComplete) === null || _c === void 0 ? void 0 : _c.call(this, this);
                }
            }
            return this;
        }
        get delta() {
            return this.ease(clamp(0, (this.elapsed - this.delay) / this.duration, 1));
        }
        createInterpolator(from, to) {
            if (typeof to !== 'object') {
                return this.interpolateValue(from, to);
            }
            const interpolatorEntries = Object.keys(to).map((key) => [
                key,
                this.interpolateValue(from[key], to[key]),
            ]);
            return (d) => {
                const result = {};
                for (const [key, interpolator] of interpolatorEntries) {
                    result[key] = interpolator(d);
                }
                return result;
            };
        }
        interpolateValue(a, b) {
            try {
                switch (typeof a) {
                    case 'number':
                        return interpolateNumber(a, b);
                    case 'string':
                        return interpolateColor(a, b);
                }
            }
            catch (e) {
                // Error-case handled below.
            }
            throw new Error(`Unable to interpolate values: ${a}, ${b}`);
        }
    }

    const NODE_UPDATE_PHASES = ['removed', 'updated', 'added'];
    const FROM_TO_MIXINS = {
        added: ADD_PHASE,
        updated: UPDATE_PHASE,
        removed: REMOVE_PHASE,
        unknown: INITIAL_LOAD,
    };
    /**
     * Implements a per-node "to/from" animation, with support for detection of added/moved/removed
     * nodes.
     *
     * @param id prefix for all animation ids generated by this call
     * @param animationManager used to schedule generated animations
     * @param selections contains nodes to be animated
     * @param fromFn callback to determine per-node starting properties
     * @param toFn callback to determine per-node final properties
     * @param extraOpts optional additional animation properties to pass to AnimationManager#animate.
     * @param getDatumId optional per-datum 'id' generation function for diff calculation - must be
     *                   specified iff diff is specified
     * @param diff optional diff from a DataModel to use to detect added/moved/removed cases
     */
    function fromToMotion(groupId, subId, animationManager, selectionsOrNodes, fns, getDatumId, diff) {
        const { defaultDuration } = animationManager;
        const { fromFn, toFn, intermediateFn } = fns;
        const isNodes = isNodeArray(selectionsOrNodes);
        const nodes = isNodes ? selectionsOrNodes : [];
        const selections = !isNodes ? selectionsOrNodes : [];
        // Dynamic case with varying add/update/remove behavior.
        const ids = { added: {}, removed: {} };
        if (getDatumId && diff) {
            ids.added = zipObject(diff.added, true);
            ids.removed = zipObject(diff.removed, true);
        }
        const processNodes = (liveNodes, nodes) => {
            var _a, _b;
            let prevFromProps;
            let liveNodeIndex = 0;
            let nodeIndex = 0;
            for (const node of nodes) {
                const isLive = liveNodes[liveNodeIndex] === node;
                const ctx = {
                    last: nodeIndex >= nodes.length - 1,
                    lastLive: liveNodeIndex >= liveNodes.length - 1,
                    prev: nodes[nodeIndex - 1],
                    prevFromProps,
                    prevLive: liveNodes[liveNodeIndex - 1],
                    next: nodes[nodeIndex + 1],
                    nextLive: liveNodes[liveNodeIndex + (isLive ? 1 : 0)],
                };
                const animationId = `${groupId}_${subId}_${node.id}`;
                animationManager.stopByAnimationId(animationId);
                let status = 'unknown';
                if (!isLive) {
                    status = 'removed';
                }
                else if (getDatumId && diff) {
                    status = calculateStatus(node, node.datum, getDatumId, ids);
                }
                const _c = fromFn(node, node.datum, status, ctx), { animationDelay: delay, animationDuration: duration, start = {}, finish = {} } = _c, from = __rest(_c, ["animationDelay", "animationDuration", "start", "finish"]);
                const _d = toFn(node, node.datum, status, ctx), { animationDelay: toDelay, animationDuration: toDuration, start: toStart = {}, finish: toFinish = {} } = _d, to = __rest(_d, ["animationDelay", "animationDuration", "start", "finish"]);
                animationManager.animate({
                    id: animationId,
                    groupId,
                    from: from,
                    to: to,
                    ease: easeOut,
                    onPlay: () => {
                        node.setProperties(Object.assign(Object.assign({}, start), toStart));
                    },
                    onUpdate(props) {
                        node.setProperties(props);
                        if (intermediateFn) {
                            node.setProperties(intermediateFn(node, node.datum, status, ctx));
                        }
                    },
                    onStop: () => {
                        node.setProperties(Object.assign(Object.assign(Object.assign({}, to), finish), toFinish));
                    },
                    duration: ((_a = duration !== null && duration !== void 0 ? duration : toDuration) !== null && _a !== void 0 ? _a : 1) * defaultDuration,
                    delay: ((_b = delay !== null && delay !== void 0 ? delay : toDelay) !== null && _b !== void 0 ? _b : 0) * defaultDuration,
                });
                if (isLive) {
                    liveNodeIndex++;
                }
                nodeIndex++;
                prevFromProps = from;
            }
        };
        let selectionIndex = 0;
        for (const selection of selections) {
            const nodes = selection.nodes();
            const liveNodes = nodes.filter((n) => !selection.isGarbage(n));
            processNodes(liveNodes, nodes);
            // Only perform selection cleanup once.
            animationManager.animate({
                id: `${groupId}_${subId}_selection_${selectionIndex}`,
                groupId,
                from: 0,
                to: 1,
                ease: easeOut,
                onStop() {
                    selection.cleanup();
                },
            });
            selectionIndex++;
        }
        processNodes(nodes, nodes);
    }
    /**
     * Implements a batch "to/from" animation.
     *
     * @param id prefix for all animation ids generated by this call
     * @param animationManager used to schedule generated animations
     * @param selectionsOrNodes contains nodes to be animated
     * @param from node starting properties
     * @param to node final properties
     * @param extraOpts optional additional animation properties to pass to AnimationManager#animate.
     */
    function staticFromToMotion(groupId, subId, animationManager, selectionsOrNodes, from, to, extraOpts = {}) {
        const isNodes = isNodeArray(selectionsOrNodes);
        const nodes = isNodes ? selectionsOrNodes : [];
        const selections = !isNodes ? selectionsOrNodes : [];
        const { animationDelay = 0, animationDuration = 1, start = {}, finish = {} } = extraOpts;
        const { defaultDuration } = animationManager;
        // Simple static to/from case, we can batch updates.
        animationManager.animate({
            id: `${groupId}_${subId}`,
            groupId,
            from,
            to,
            ease: easeOut,
            onPlay: () => {
                for (const node of nodes) {
                    node.setProperties(start);
                }
                for (const selection of selections) {
                    for (const node of selection.nodes()) {
                        node.setProperties(start);
                    }
                }
            },
            onUpdate(props) {
                for (const node of nodes) {
                    node.setProperties(props);
                }
                for (const selection of selections) {
                    for (const node of selection.nodes()) {
                        node.setProperties(props);
                    }
                }
            },
            onStop: () => {
                for (const node of nodes) {
                    node.setProperties(Object.assign(Object.assign({}, to), finish));
                }
                for (const selection of selections) {
                    for (const node of selection.nodes()) {
                        node.setProperties(Object.assign(Object.assign({}, to), finish));
                    }
                }
            },
            duration: animationDuration * defaultDuration,
            delay: animationDelay * defaultDuration,
        });
    }
    function calculateStatus(node, datum, getDatumId, ids) {
        const id = getDatumId(node, datum);
        if (ids.added[id]) {
            return 'added';
        }
        else if (ids.removed[id]) {
            return 'removed';
        }
        return 'updated';
    }

    var fromToMotion$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        NODE_UPDATE_PHASES: NODE_UPDATE_PHASES,
        FROM_TO_MIXINS: FROM_TO_MIXINS,
        fromToMotion: fromToMotion,
        staticFromToMotion: staticFromToMotion
    });

    const group = (content) => `(${content})`;
    const optionalGroup = (content) => `${group(content)}?`;
    const nonCapturingGroup = (content) => optionalGroup(`?:${content}`);
    const formatRegEx = (() => {
        const fill = '.';
        const align = '[<>=^]';
        const sign = '[+\\-( ]';
        const symbol = '[$€£¥₣₹#]';
        const zero = '0';
        const width = '\\d+';
        const comma = ',';
        const precision = '\\d+';
        const tilde = '~';
        const type = '[%a-z]';
        return new RegExp([
            '^',
            nonCapturingGroup(`${optionalGroup(fill)}${group(align)}`),
            optionalGroup(sign),
            optionalGroup(symbol),
            optionalGroup(zero),
            optionalGroup(width),
            optionalGroup(comma),
            nonCapturingGroup(`\\.${group(precision)}`),
            optionalGroup(tilde),
            optionalGroup(type),
            '$',
        ].join(''), 'i');
    })();
    const surroundedRegEx = (() => {
        const prefix = '.*?';
        const content = '.+?';
        const suffix = '.*?';
        return new RegExp(['^', group(prefix), `#\\{${group(content)}\\}`, group(suffix), '$'].join(''));
    })();
    function parseFormatter(formatter) {
        let prefix;
        let suffix;
        const surrounded = surroundedRegEx.exec(formatter);
        if (surrounded) {
            [, prefix, formatter, suffix] = surrounded;
        }
        const match = formatRegEx.exec(formatter);
        if (!match) {
            throw new Error(`The number formatter is invalid: ${formatter}`);
        }
        const [, fill, align, sign, symbol, zero, width, comma, precision, trim, type] = match;
        return {
            fill,
            align,
            sign,
            symbol,
            zero,
            width: parseInt(width),
            comma,
            precision: parseInt(precision),
            trim: Boolean(trim),
            type,
            prefix,
            suffix,
        };
    }
    function format(formatter) {
        const options = typeof formatter === 'string' ? parseFormatter(formatter) : formatter;
        const { fill, align, sign = '-', symbol, zero, width, comma, type, prefix = '', suffix = '', precision } = options;
        let { trim } = options;
        const precisionIsNaN = precision === undefined || isNaN(precision);
        let formatBody;
        if (!type) {
            formatBody = decimalTypes['g'];
            trim = true;
        }
        else if (type in decimalTypes && type in integerTypes) {
            formatBody = precisionIsNaN ? integerTypes[type] : decimalTypes[type];
        }
        else if (type in decimalTypes) {
            formatBody = decimalTypes[type];
        }
        else if (type in integerTypes) {
            formatBody = integerTypes[type];
        }
        else {
            throw new Error(`The number formatter type is invalid: ${type}`);
        }
        let formatterPrecision;
        if (precision == null || precisionIsNaN) {
            formatterPrecision = type ? 6 : 12;
        }
        else {
            formatterPrecision = precision;
        }
        return (n) => {
            let result = formatBody(n, formatterPrecision);
            if (trim) {
                result = removeTrailingZeros(result);
            }
            if (comma) {
                result = insertSeparator(result, comma);
            }
            result = addSign(n, result, sign);
            if (symbol && symbol !== '#') {
                result = `${symbol}${result}`;
            }
            if (symbol === '#' && type === 'x') {
                result = `0x${result}`;
            }
            if (type === 's') {
                result = `${result}${getSIPrefix(n)}`;
            }
            if (type === '%' || type === 'p') {
                result = `${result}%`;
            }
            if (width != null && !isNaN(width)) {
                result = addPadding(result, width, fill !== null && fill !== void 0 ? fill : zero, align);
            }
            result = `${prefix}${result}${suffix}`;
            return result;
        };
    }
    const absFloor = (n) => Math.floor(Math.abs(n));
    const integerTypes = {
        b: (n) => absFloor(n).toString(2),
        c: (n) => String.fromCharCode(n),
        d: (n) => Math.round(Math.abs(n)).toFixed(0),
        o: (n) => absFloor(n).toString(8),
        x: (n) => absFloor(n).toString(16),
        X: (n) => integerTypes.x(n).toUpperCase(),
        n: (n) => integerTypes.d(n),
        '%': (n) => `${absFloor(n * 100).toFixed(0)}`,
    };
    const decimalTypes = {
        e: (n, f) => Math.abs(n).toExponential(f),
        E: (n, f) => decimalTypes.e(n, f).toUpperCase(),
        f: (n, f) => Math.abs(n).toFixed(f),
        F: (n, f) => decimalTypes.f(n, f).toUpperCase(),
        g: (n, f) => {
            if (n === 0) {
                return '0';
            }
            const a = Math.abs(n);
            const p = Math.floor(Math.log10(a));
            if (p >= -4 && p < f) {
                return a.toFixed(f - 1 - p);
            }
            return a.toExponential(f - 1);
        },
        G: (n, f) => decimalTypes.g(n, f).toUpperCase(),
        n: (n, f) => decimalTypes.g(n, f),
        p: (n, f) => decimalTypes.r(n * 100, f),
        r: (n, f) => {
            if (n === 0) {
                return '0';
            }
            const a = Math.abs(n);
            const p = Math.floor(Math.log10(a));
            const q = p - (f - 1);
            if (q <= 0) {
                return a.toFixed(-q);
            }
            const x = Math.pow(10, q);
            return (Math.round(a / x) * x).toFixed();
        },
        s: (n, f) => {
            const p = getSIPrefixPower(n);
            return decimalTypes.r(n / Math.pow(10, p), f);
        },
        '%': (n, f) => decimalTypes.f(n * 100, f),
    };
    function removeTrailingZeros(numString) {
        return numString.replace(/\.0+$/, '').replace(/(\.[1-9])0+$/, '$1');
    }
    function insertSeparator(numString, separator) {
        let dotIndex = numString.indexOf('.');
        if (dotIndex < 0) {
            dotIndex = numString.length;
        }
        const integerChars = numString.substring(0, dotIndex).split('');
        const fractionalPart = numString.substring(dotIndex);
        for (let i = integerChars.length - 3; i > 0; i -= 3) {
            integerChars.splice(i, 0, separator);
        }
        return `${integerChars.join('')}${fractionalPart}`;
    }
    function getSIPrefix(n) {
        return siPrefixes[getSIPrefixPower(n)];
    }
    function getSIPrefixPower(n) {
        const power = Math.log10(Math.abs(n));
        const p = Math.floor(power / 3) * 3;
        return Math.max(minSIPrefix, Math.min(maxSIPrefix, p));
    }
    const minSIPrefix = -24;
    const maxSIPrefix = 24;
    const siPrefixes = {
        [minSIPrefix]: 'y',
        [-21]: 'z',
        [-18]: 'a',
        [-15]: 'f',
        [-12]: 'p',
        [-9]: 'n',
        [-6]: 'µ',
        [-3]: 'm',
        [0]: '',
        [3]: 'k',
        [6]: 'M',
        [9]: 'G',
        [12]: 'T',
        [15]: 'P',
        [18]: 'E',
        [21]: 'Z',
        [maxSIPrefix]: 'Y',
    };
    const minusSign = '\u2212';
    function addSign(num, numString, signType = '') {
        if (signType === '(') {
            return num >= 0 ? numString : `(${numString})`;
        }
        const plusSign = signType === '+' ? '+' : '';
        return `${num >= 0 ? plusSign : minusSign}${numString}`;
    }
    function addPadding(numString, width, fill = ' ', align = '>') {
        let result = numString;
        if (align === '>' || !align) {
            result = result.padStart(width, fill);
        }
        else if (align === '<') {
            result = result.padEnd(width, fill);
        }
        else if (align === '^') {
            const padWidth = Math.max(0, width - result.length);
            const padLeft = Math.ceil(padWidth / 2);
            const padRight = Math.floor(padWidth / 2);
            result = result.padStart(padLeft + result.length, fill);
            result = result.padEnd(padRight + result.length, fill);
        }
        return result;
    }
    function tickFormat(ticks, formatter) {
        const options = parseFormatter(formatter !== null && formatter !== void 0 ? formatter : ',f');
        const { precision } = options;
        if (precision == null || isNaN(precision)) {
            if (options.type === 'f' || options.type === '%') {
                options.precision = Math.max(...ticks.map((x) => {
                    if (typeof x !== 'number' || x === 0) {
                        return 0;
                    }
                    const l = Math.floor(Math.log10(Math.abs(x)));
                    const digits = options.type ? 6 : 12;
                    const exp = x.toExponential(digits - 1).replace(/\.?0+e/, 'e');
                    const dotIndex = exp.indexOf('.');
                    if (dotIndex < 0) {
                        return l >= 0 ? 0 : -l;
                    }
                    const s = exp.indexOf('e') - dotIndex;
                    return Math.max(0, s - l - 1);
                }));
            }
            else if (!options.type || options.type in decimalTypes) {
                options.precision = Math.max(...ticks.map((x) => {
                    if (typeof x !== 'number') {
                        return 0;
                    }
                    const exp = x.toExponential((options.type ? 6 : 12) - 1).replace(/\.?0+e/, 'e');
                    return exp.substring(0, exp.indexOf('e')).replace('.', '').length;
                }));
            }
        }
        const f = format(options);
        return (n) => f(Number(n));
    }

    function ticks (start, stop, count, minCount, maxCount) {
        if (count < 2) {
            return range$1(start, stop, stop - start);
        }
        const step = tickStep(start, stop, count, minCount, maxCount);
        if (isNaN(step)) {
            return new NumericTicks(0);
        }
        start = Math.ceil(start / step) * step;
        stop = Math.floor(stop / step) * step;
        return range$1(start, stop, step);
    }
    const tickMultipliers = [1, 2, 5, 10];
    function tickStep(a, b, count, minCount = 0, maxCount = Infinity) {
        const rawStep = (b - a) / count;
        const power = Math.floor(Math.log10(rawStep));
        const step = Math.pow(10, power);
        const m = tickMultipliers
            .map((multiplier) => {
            const s = multiplier * step;
            const c = Math.ceil((b - a) / s);
            const isWithinBounds = c >= minCount && c <= maxCount;
            const diffCount = Math.abs(c - count);
            return { multiplier, isWithinBounds, diffCount };
        })
            .sort((a, b) => {
            if (a.isWithinBounds !== b.isWithinBounds) {
                return a.isWithinBounds ? -1 : 1;
            }
            return a.diffCount - b.diffCount;
        })[0].multiplier;
        if (!m || isNaN(m)) {
            return NaN;
        }
        return m * step;
    }
    function singleTickDomain(a, b) {
        const power = Math.floor(Math.log10(b - a));
        const step = Math.pow(10, power);
        return tickMultipliers
            .map((multiplier) => {
            const s = multiplier * step;
            const start = Math.floor(a / s) * s;
            const end = Math.ceil(b / s) * s;
            const error = 1 - (b - a) / (end - start);
            const domain = [start, end];
            return { error, domain };
        })
            .sort((a, b) => a.error - b.error)[0].domain;
    }
    class NumericTicks extends Array {
        constructor(fractionDigits, elements) {
            super();
            if (elements) {
                for (let i = 0, n = elements.length; i < n; i++) {
                    this[i] = elements[i];
                }
            }
            this.fractionDigits = fractionDigits;
        }
    }
    function range$1(start, stop, step) {
        const countDigits = (expNo) => {
            var _a, _b;
            const parts = expNo.split('e');
            return Math.max(((_b = (_a = parts[0].split('.')[1]) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) - Number(parts[1]), 0);
        };
        const fractionalDigits = countDigits((step % 1).toExponential());
        const f = Math.pow(10, fractionalDigits);
        const n = Math.ceil((stop - start) / step);
        const values = new NumericTicks(fractionalDigits);
        for (let i = 0; i <= n; i++) {
            const value = start + step * i;
            values.push(Math.round(value * f) / f);
        }
        return values;
    }

    class ContinuousScale {
        static is(value) {
            return value instanceof ContinuousScale;
        }
        constructor(domain, range) {
            this.domain = domain;
            this.range = range;
            this.nice = false;
            this.tickCount = ContinuousScale.defaultTickCount;
            this.minTickCount = 0;
            this.maxTickCount = Infinity;
            this.niceDomain = [];
            this.defaultClampMode = 'raw';
            this.cache = null;
            this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'minTickCount', 'maxTickCount'];
        }
        transform(x) {
            return x;
        }
        transformInvert(x) {
            return x;
        }
        calcBandwidth(smallestInterval = 1) {
            const domain = this.getDomain();
            const maxRange = Math.max(...this.range);
            const intervals = (domain[1] - domain[0]) / smallestInterval + 1;
            // The number of intervals/bands is used to determine the width of individual bands by dividing the available range.
            // Allow a maximum number of bands to ensure the step does not fall below 1 pixel.
            // This means there could be some overlap of the bands in the chart.
            const maxBands = Math.floor(maxRange); // A minimum of 1px per bar/column means the maximum number of bands will equal the available range
            const bands = Math.min(intervals, maxBands);
            return maxRange / Math.max(1, bands);
        }
        fromDomain(d) {
            if (typeof d === 'number') {
                return d;
            }
            else if (d instanceof Date) {
                return d.getTime();
            }
            return NaN;
        }
        getDomain() {
            if (this.nice) {
                this.refresh();
                if (this.niceDomain.length) {
                    return this.niceDomain;
                }
            }
            return this.domain;
        }
        convert(x, opts) {
            var _a;
            const clampMode = (_a = opts === null || opts === void 0 ? void 0 : opts.clampMode) !== null && _a !== void 0 ? _a : this.defaultClampMode;
            if (!this.domain || this.domain.length < 2) {
                return NaN;
            }
            this.refresh();
            const domain = this.getDomain().map((d) => this.transform(d));
            const [d0, d1] = domain;
            const { range } = this;
            const [r0, r1] = range;
            x = this.transform(x);
            if (clampMode === 'clamped') {
                if (x < d0) {
                    return r0;
                }
                else if (x > d1) {
                    return r1;
                }
            }
            if (d0 === d1) {
                return (r0 + r1) / 2;
            }
            else if (x === d0) {
                return r0;
            }
            else if (x === d1) {
                return r1;
            }
            return (r0 + ((this.fromDomain(x) - this.fromDomain(d0)) / (this.fromDomain(d1) - this.fromDomain(d0))) * (r1 - r0));
        }
        invert(x) {
            this.refresh();
            const domain = this.getDomain().map((d) => this.transform(d));
            const [d0, d1] = domain;
            const { range } = this;
            const [r0, r1] = range;
            const isReversed = r0 > r1;
            const rMin = isReversed ? r1 : r0;
            const rMax = isReversed ? r0 : r1;
            let d;
            if (x < rMin) {
                return isReversed ? d1 : d0;
            }
            else if (x > rMax) {
                return isReversed ? d0 : d1;
            }
            else if (r0 === r1) {
                d = this.toDomain((this.fromDomain(d0) + this.fromDomain(d1)) / 2);
            }
            else {
                d = this.toDomain(this.fromDomain(d0) + ((x - r0) / (r1 - r0)) * (this.fromDomain(d1) - this.fromDomain(d0)));
            }
            return this.transformInvert(d);
        }
        didChange() {
            const { cache } = this;
            const didChange = !cache || this.cacheProps.some((p) => this[p] !== cache[p]);
            if (didChange) {
                this.cache = {};
                this.cacheProps.forEach((p) => (this.cache[p] = this[p]));
                return true;
            }
            return false;
        }
        refresh() {
            if (this.didChange()) {
                this.update();
            }
        }
        getPixelRange() {
            const range = this.range.slice().sort((a, b) => a - b);
            return range[1] - range[0];
        }
        isDenseInterval({ start, stop, interval, count, }) {
            const domain = stop - start;
            const availableRange = this.getPixelRange();
            const step = typeof interval === 'number' ? interval : 1;
            count !== null && count !== void 0 ? count : (count = domain / step);
            if (count >= availableRange) {
                Logger.warn(`the configured tick interval results in more than 1 tick per pixel, ignoring. Supply a larger tick interval or omit this configuration.`);
                return true;
            }
            return false;
        }
    }
    ContinuousScale.defaultTickCount = 5;
    ContinuousScale.defaultMaxTickCount = 6;

    /**
     * Maps continuous domain to a continuous range.
     */
    class LinearScale extends ContinuousScale {
        constructor() {
            super([0, 1], [0, 1]);
            this.type = 'linear';
        }
        toDomain(d) {
            return d;
        }
        ticks() {
            var _a;
            const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;
            if (!this.domain || this.domain.length < 2 || count < 1 || this.domain.some((d) => !isFinite(d))) {
                return [];
            }
            this.refresh();
            const [d0, d1] = this.getDomain();
            const { interval } = this;
            if (interval) {
                const step = Math.abs(interval);
                if (!this.isDenseInterval({ start: d0, stop: d1, interval: step })) {
                    return range$1(d0, d1, step);
                }
            }
            return ticks(d0, d1, count, this.minTickCount, this.maxTickCount);
        }
        update() {
            if (!this.domain || this.domain.length < 2) {
                return;
            }
            if (this.nice) {
                this.updateNiceDomain();
            }
        }
        getTickStep(start, stop) {
            var _a, _b;
            const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;
            return (_b = this.interval) !== null && _b !== void 0 ? _b : tickStep(start, stop, count, this.minTickCount, this.maxTickCount);
        }
        /**
         * Extends the domain so that it starts and ends on nice round values.
         */
        updateNiceDomain() {
            var _a;
            const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : ContinuousScale.defaultTickCount;
            let [start, stop] = this.domain;
            if (count < 1) {
                this.niceDomain = [start, stop];
                return;
            }
            if (count === 1) {
                this.niceDomain = singleTickDomain(start, stop);
                return;
            }
            const maxAttempts = 4;
            let prev0 = start;
            let prev1 = stop;
            for (let i = 0; i < maxAttempts; i++) {
                const step = this.getTickStep(start, stop);
                const [d0, d1] = this.domain;
                if (step >= 1) {
                    start = Math.floor(d0 / step) * step;
                    stop = Math.ceil(d1 / step) * step;
                }
                else {
                    // Prevent floating point error
                    const s = 1 / step;
                    start = Math.floor(d0 * s) / s;
                    stop = Math.ceil(d1 * s) / s;
                }
                if (start === prev0 && stop === prev1) {
                    break;
                }
                prev0 = start;
                prev1 = stop;
            }
            this.niceDomain = [start, stop];
        }
        tickFormat({ ticks, specifier }) {
            return tickFormat(ticks !== null && ticks !== void 0 ? ticks : this.ticks(), specifier);
        }
    }

    function ascendingStringNumberUndefined(a, b) {
        let diff = 0;
        if (typeof a === 'number' && typeof b === 'number') {
            diff = a - b;
        }
        else if (typeof a === 'string' && typeof b === 'string') {
            diff = a.localeCompare(b);
        }
        else if (a == null && b == null) ;
        else if (a == null) {
            diff = -1;
        }
        else if (b == null) {
            diff = 1;
        }
        else {
            diff = String(a).localeCompare(String(b));
        }
        return diff;
    }
    function compoundAscending(a, b, comparator) {
        const toLiteral = (v) => {
            if (typeof v === 'function') {
                return v();
            }
            return v;
        };
        for (const idx in a) {
            const diff = comparator(toLiteral(a[idx]), toLiteral(b[idx]));
            if (diff !== 0) {
                return diff;
            }
        }
        return 0;
    }

    class Group extends Node {
        zIndexChanged() {
            var _a;
            if (this.layer) {
                (_a = this._layerManager) === null || _a === void 0 ? void 0 : _a.moveLayer(this.layer, this.zIndex, this.zIndexSubOrder);
            }
        }
        isLayer() {
            return this.layer != null;
        }
        constructor(opts) {
            var _a;
            super({ isVirtual: opts === null || opts === void 0 ? void 0 : opts.isVirtual });
            this.opts = opts;
            this.opacity = 1;
            this.lastBBox = undefined;
            const { zIndex, zIndexSubOrder } = opts !== null && opts !== void 0 ? opts : {};
            this.isContainerNode = true;
            if (zIndex !== undefined) {
                this.zIndex = zIndex;
            }
            if (zIndexSubOrder !== undefined) {
                this.zIndexSubOrder = zIndexSubOrder;
            }
            this.name = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.name;
        }
        _setLayerManager(scene) {
            var _a, _b;
            if (this._layerManager && this.layer) {
                this._layerManager.removeLayer(this.layer);
                this.layer = undefined;
            }
            if (this.layer) {
                throw new Error('AG Charts - unable to deregister scene rendering layer!');
            }
            super._setLayerManager(scene);
            if (scene && ((_a = this.opts) === null || _a === void 0 ? void 0 : _a.layer)) {
                const { zIndex, zIndexSubOrder, name } = (_b = this.opts) !== null && _b !== void 0 ? _b : {};
                const getComputedOpacity = () => this.getComputedOpacity();
                const getVisibility = () => this.getVisibility();
                this.layer = scene.addLayer({
                    zIndex,
                    zIndexSubOrder,
                    name,
                    getComputedOpacity,
                    getVisibility,
                });
            }
        }
        getComputedOpacity() {
            let opacity = 1;
            let node = this;
            do {
                if (node instanceof Group) {
                    opacity *= node.opacity;
                }
            } while ((node = node.parent));
            return opacity;
        }
        getVisibility() {
            let node = this;
            let visible = this.visible;
            while ((node = node.parent)) {
                if (node.visible) {
                    continue;
                }
                visible = node.visible;
            }
            return visible;
        }
        visibilityChanged() {
            if (this.layer) {
                this.layer.enabled = this.visible;
            }
        }
        markDirty(source, type = RedrawType.TRIVIAL) {
            if (this.isVirtual) {
                // Always percolate directly for virtual nodes - they don't exist for rendering purposes.
                super.markDirty(source, type);
                return;
            }
            // Downgrade dirty-ness percolated to parent in special cases.
            let parentType = type;
            if (type < RedrawType.MINOR || this.layer != null) {
                parentType = RedrawType.TRIVIAL;
            }
            super.markDirty(source, type, parentType);
        }
        // We consider a group to be boundless, thus any point belongs to it.
        containsPoint(_x, _y) {
            return true;
        }
        computeBBox() {
            this.computeTransformMatrix();
            return Group.computeBBox(this.children);
        }
        computeTransformedBBox() {
            return this.computeBBox();
        }
        render(renderCtx) {
            var _a, _b;
            const { opts: { name = undefined } = {}, _debug: debug = () => { } } = this;
            const { dirty, dirtyZIndex, layer, children, clipRect, dirtyTransform } = this;
            let { ctx, forceRender, clipBBox } = renderCtx;
            const { resized, stats } = renderCtx;
            const canvasCtxTransform = ctx.getTransform();
            const isDirty = dirty >= RedrawType.MINOR || dirtyZIndex || resized;
            let isChildDirty = isDirty;
            let isChildLayerDirty = false;
            for (const child of children) {
                isChildDirty || (isChildDirty = child.layerManager == null && child.dirty >= RedrawType.TRIVIAL);
                isChildLayerDirty || (isChildLayerDirty = child.layerManager != null && child.dirty >= RedrawType.TRIVIAL);
                if (isChildDirty) {
                    break;
                }
            }
            if (name) {
                debug({ name, group: this, isDirty, isChildDirty, dirtyTransform, renderCtx, forceRender });
            }
            if (dirtyTransform) {
                forceRender = 'dirtyTransform';
            }
            else if (layer) {
                // If bounding-box of a layer changes, force re-render.
                const currentBBox = this.computeBBox();
                if (this.lastBBox === undefined || !this.lastBBox.equals(currentBBox)) {
                    forceRender = 'dirtyTransform';
                    this.lastBBox = currentBBox;
                }
            }
            if (!isDirty && !isChildDirty && !isChildLayerDirty && !forceRender) {
                if (name && stats) {
                    debug({ name, result: 'skipping', renderCtx, counts: this.nodeCount, group: this });
                }
                if (layer && stats) {
                    stats.layersSkipped++;
                    stats.nodesSkipped += this.nodeCount.count;
                }
                this.markClean({ recursive: false });
                // Nothing to do.
                return;
            }
            const groupVisible = this.visible;
            if (layer) {
                // Switch context to the canvas layer we use for this group.
                ctx = layer.context;
                ctx.save();
                ctx.resetTransform();
                if (forceRender !== 'dirtyTransform') {
                    forceRender = isChildDirty || dirtyZIndex;
                }
                if (forceRender)
                    layer.clear();
                if (clipBBox) {
                    // clipBBox is in the canvas coordinate space, when we hit a layer we apply the new clipping at which point there are no transforms in play
                    const { width, height, x, y } = clipBBox;
                    debug(() => ({
                        name,
                        clipBBox,
                        ctxTransform: ctx.getTransform(),
                        renderCtx,
                        group: this,
                    }));
                    this.clipCtx(ctx, x, y, width, height);
                }
                ctx.setTransform(canvasCtxTransform);
            }
            else {
                // Only apply opacity if this isn't a distinct layer - opacity will be applied
                // at composition time.
                ctx.globalAlpha *= this.opacity;
            }
            // A group can have `scaling`, `rotation`, `translation` properties
            // that are applied to the canvas context before children are rendered,
            // so all children can be transformed at once.
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            if (clipRect) {
                // clipRect is in the group's coordinate space
                const { x, y, width, height } = clipRect;
                ctx.save();
                debug(() => ({ name, clipRect, ctxTransform: ctx.getTransform(), renderCtx, group: this }));
                this.clipCtx(ctx, x, y, width, height);
                // clipBBox is in the canvas coordinate space, when we hit a layer we apply the new clipping at which point there are no transforms in play
                clipBBox = this.matrix.transformBBox(clipRect);
            }
            const hasVirtualChildren = this.hasVirtualChildren();
            if (dirtyZIndex) {
                this.sortChildren(children);
                if (forceRender !== 'dirtyTransform')
                    forceRender = true;
            }
            else if (hasVirtualChildren) {
                this.sortChildren(children);
            }
            // Reduce churn if renderCtx is identical.
            const renderContextChanged = forceRender !== renderCtx.forceRender || clipBBox !== renderCtx.clipBBox || ctx !== renderCtx.ctx;
            const childRenderContext = renderContextChanged ? Object.assign(Object.assign({}, renderCtx), { ctx, forceRender, clipBBox }) : renderCtx;
            // Render visible children.
            let skipped = 0;
            for (const child of children) {
                if (!child.visible || !groupVisible) {
                    // Skip invisible children, but make sure their dirty flag is reset.
                    child.markClean();
                    if (stats)
                        skipped += child.nodeCount.count;
                    continue;
                }
                if (!forceRender && child.dirty === RedrawType.NONE) {
                    // Skip children that don't need to be redrawn.
                    if (stats)
                        skipped += child.nodeCount.count;
                    continue;
                }
                // Render marks this node (and children) as clean - no need to explicitly markClean().
                ctx.save();
                child.render(childRenderContext);
                ctx.restore();
            }
            if (stats)
                stats.nodesSkipped += skipped;
            // Render marks this node as clean - no need to explicitly markClean().
            super.render(renderCtx);
            if (clipRect) {
                ctx.restore();
            }
            if (hasVirtualChildren) {
                // Mark virtual nodes as clean and their virtual children - all other nodes have already
                // been visited and marked clean.
                for (const child of this.virtualChildren) {
                    child.markClean({ recursive: 'virtual' });
                }
            }
            if (layer) {
                if (stats)
                    stats.layersRendered++;
                ctx.restore();
                if (forceRender)
                    layer.snapshot();
                // Check for save/restore depth of zero!
                (_b = (_a = layer.context).verifyDepthZero) === null || _b === void 0 ? void 0 : _b.call(_a);
            }
            if (name && stats) {
                debug({ name, result: 'rendered', skipped, renderCtx, counts: this.nodeCount, group: this });
            }
        }
        sortChildren(children) {
            this.dirtyZIndex = false;
            children.sort((a, b) => {
                var _a, _b;
                return compoundAscending([a.zIndex, ...((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), a.serialNumber], [b.zIndex, ...((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), b.serialNumber], ascendingStringNumberUndefined);
            });
        }
        clipCtx(ctx, x, y, width, height) {
            ctx.beginPath();
            ctx.moveTo(x, y);
            ctx.lineTo(x + width, y);
            ctx.lineTo(x + width, y + height);
            ctx.lineTo(x, y + height);
            ctx.closePath();
            ctx.clip();
        }
        static computeBBox(nodes) {
            let left = Infinity;
            let right = -Infinity;
            let top = Infinity;
            let bottom = -Infinity;
            nodes.forEach((n) => {
                if (!n.visible) {
                    return;
                }
                const bbox = n.computeTransformedBBox();
                if (!bbox) {
                    return;
                }
                const x = bbox.x;
                const y = bbox.y;
                if (x < left) {
                    left = x;
                }
                if (y < top) {
                    top = y;
                }
                if (x + bbox.width > right) {
                    right = x + bbox.width;
                }
                if (y + bbox.height > bottom) {
                    bottom = y + bbox.height;
                }
            });
            return new BBox(left, top, right - left, bottom - top);
        }
        /**
         * Transforms bbox given in the canvas coordinate space to bbox in this group's coordinate space and
         * sets this group's clipRect to the transformed bbox.
         * @param bbox clipRect bbox in the canvas coordinate space.
         */
        setClipRectInGroupCoordinateSpace(bbox) {
            this.clipRect = bbox ? this.transformBBox(bbox) : undefined;
        }
    }
    Group.className = 'Group';
    __decorate([
        SceneChangeDetection({
            redraw: RedrawType.MAJOR,
            convertor: (v) => Math.min(1, Math.max(0, v)),
        }),
        __metadata("design:type", Number)
    ], Group.prototype, "opacity", void 0);

    class Selection {
        static select(parent, classOrFactory, garbageCollection = true) {
            return new Selection(parent, classOrFactory, garbageCollection);
        }
        static selectAll(parent, predicate) {
            const results = [];
            const traverse = (node) => {
                if (predicate(node)) {
                    results.push(node);
                }
                node.children.forEach(traverse);
            };
            traverse(parent);
            return results;
        }
        static selectByClass(node, Class) {
            return Selection.selectAll(node, (node) => node instanceof Class);
        }
        static selectByTag(node, tag) {
            return Selection.selectAll(node, (node) => node.tag === tag);
        }
        constructor(parentNode, classOrFactory, autoCleanup = true) {
            this.parentNode = parentNode;
            this.autoCleanup = autoCleanup;
            this.garbageBin = new Set();
            this._nodesMap = new Map();
            this._nodes = [];
            this.data = [];
            this.debug = Debug.create(true, 'scene', 'scene:selections');
            this.nodeFactory = Object.prototype.isPrototypeOf.call(Node, classOrFactory)
                ? () => new classOrFactory()
                : classOrFactory;
        }
        createNode(datum, initializer, idx) {
            const node = this.nodeFactory(datum);
            node.datum = datum;
            initializer === null || initializer === void 0 ? void 0 : initializer(node);
            if (idx != null) {
                this._nodes.splice(idx, 0, node);
            }
            else {
                this._nodes.push(node);
            }
            this.parentNode.appendChild(node);
            return node;
        }
        /**
         * Update the data in a selection. If an `getDatumId()` function is provided, maintain a list of ids related to
         * the nodes. Otherwise, take the more efficient route of simply creating and destroying nodes at the end
         * of the array.
         */
        update(data, initializer, getDatumId) {
            if (this.garbageBin.size > 0) {
                this.debug(`Selection - update() called with pending garbage: ${data}`);
            }
            if (getDatumId) {
                const dataMap = new Map(data.map((datum, idx) => [getDatumId(datum), [datum, idx]]));
                for (const [node, datumId] of this._nodesMap.entries()) {
                    if (dataMap.has(datumId)) {
                        const [newDatum] = dataMap.get(datumId);
                        node.datum = newDatum;
                        this.garbageBin.delete(node);
                        dataMap.delete(datumId);
                    }
                    else {
                        this.garbageBin.add(node);
                    }
                }
                for (const [datumId, [datum, idx]] of dataMap.entries()) {
                    this._nodesMap.set(this.createNode(datum, initializer, idx), datumId);
                }
            }
            else {
                const maxLength = Math.max(data.length, this.data.length);
                for (let i = 0; i < maxLength; i++) {
                    if (i >= data.length) {
                        this.garbageBin.add(this._nodes[i]);
                    }
                    else if (i >= this._nodes.length) {
                        this.createNode(data[i], initializer);
                    }
                    else {
                        this._nodes[i].datum = data[i];
                        this.garbageBin.delete(this._nodes[i]);
                    }
                }
            }
            this.data = data.slice();
            if (this.autoCleanup) {
                this.cleanup();
            }
            return this;
        }
        cleanup() {
            if (this.garbageBin.size === 0) {
                return this;
            }
            this._nodes = this._nodes.filter((node) => {
                if (this.garbageBin.has(node)) {
                    this._nodesMap.delete(node);
                    this.garbageBin.delete(node);
                    this.parentNode.removeChild(node);
                    return false;
                }
                return true;
            });
            return this;
        }
        clear() {
            this.update([]);
            return this;
        }
        isGarbage(node) {
            return this.garbageBin.has(node);
        }
        hasGarbage() {
            return this.garbageBin.size > 0;
        }
        each(iterate) {
            this._nodes.forEach((node, i) => iterate(node, node.datum, i));
            return this;
        }
        *[Symbol.iterator]() {
            for (let index = 0; index < this._nodes.length; index++) {
                const node = this._nodes[index];
                const datum = this._nodes[index].datum;
                yield { node, datum, index };
            }
        }
        select(predicate) {
            return Selection.selectAll(this.parentNode, predicate);
        }
        selectByClass(Class) {
            return Selection.selectByClass(this.parentNode, Class);
        }
        selectByTag(tag) {
            return Selection.selectByTag(this.parentNode, tag);
        }
        nodes() {
            return this._nodes;
        }
    }

    class Line extends Shape {
        constructor(opts = {}) {
            super(opts);
            this.x1 = 0;
            this.y1 = 0;
            this.x2 = 0;
            this.y2 = 0;
            this.restoreOwnStyles();
        }
        set x(value) {
            this.x1 = value;
            this.x2 = value;
        }
        set y(value) {
            this.y1 = value;
            this.y2 = value;
        }
        computeBBox() {
            return new BBox(Math.min(this.x1, this.x2), Math.min(this.y1, this.y2), Math.abs(this.x2 - this.x1), Math.abs(this.y2 - this.y1));
        }
        isPointInPath(px, py) {
            if (this.x1 === this.x2 || this.y1 === this.y2) {
                const { x, y } = this.transformPoint(px, py);
                return this.computeBBox()
                    .grow(this.strokeWidth / 2)
                    .containsPoint(x, y);
            }
            return false;
        }
        render(renderCtx) {
            var _a;
            const { ctx, forceRender, stats } = renderCtx;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            let { x1, y1, x2, y2 } = this;
            // Align to the pixel grid if the line is strictly vertical
            // or horizontal (but not both, i.e. a dot).
            if (x1 === x2) {
                const x = Math.round(x1) + (Math.floor(this.strokeWidth) % 2) / 2;
                x1 = x;
                x2 = x;
            }
            else if (y1 === y2) {
                const y = Math.round(y1) + (Math.floor(this.strokeWidth) % 2) / 2;
                y1 = y;
                y2 = y;
            }
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            this.fillStroke(ctx);
            (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();
            super.render(renderCtx);
        }
    }
    Line.className = 'Line';
    Line.defaultStyles = Object.assign({}, Shape.defaultStyles, {
        fill: undefined,
        strokeWidth: 1,
    });
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Line.prototype, "x1", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Line.prototype, "y1", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Line.prototype, "x2", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Line.prototype, "y2", void 0);

    /**
     * Finds the roots of a parametric linear equation in `t`,
     * where `t` lies in the interval of `[0,1]`.
     */
    function linearRoot(a, b) {
        const t = -b / a;
        return a !== 0 && t >= 0 && t <= 1 ? [t] : [];
    }
    /**
     * Finds the roots of a parametric quadratic equation in `t`,
     * where `t` lies in the interval of `[0,1]`.
     */
    function quadraticRoots(a, b, c) {
        if (a === 0) {
            return linearRoot(b, c);
        }
        const D = b * b - 4 * a * c; // The polynomial's discriminant.
        const roots = [];
        if (D === 0) {
            // A single real root.
            const t = -b / (2 * a);
            if (t >= 0 && t <= 1) {
                roots.push(t);
            }
        }
        else if (D > 0) {
            // A pair of distinct real roots.
            const rD = Math.sqrt(D);
            const t1 = (-b - rD) / (2 * a);
            const t2 = (-b + rD) / (2 * a);
            if (t1 >= 0 && t1 <= 1) {
                roots.push(t1);
            }
            if (t2 >= 0 && t2 <= 1) {
                roots.push(t2);
            }
        }
        // else -> Complex roots.
        return roots;
    }
    /**
     * Finds the roots of a parametric cubic equation in `t`,
     * where `t` lies in the interval of `[0,1]`.
     * Returns an array of parametric intersection locations along the cubic,
     * excluding out-of-bounds intersections (before or after the end point
     * or in the imaginary plane).
     * An adaptation of http://www.particleincell.com/blog/2013/cubic-line-intersection/
     */
    function cubicRoots(a, b, c, d) {
        if (a === 0) {
            return quadraticRoots(b, c, d);
        }
        const A = b / a;
        const B = c / a;
        const C = d / a;
        const Q = (3 * B - A * A) / 9;
        const R = (9 * A * B - 27 * C - 2 * A * A * A) / 54;
        const D = Q * Q * Q + R * R; // The polynomial's discriminant.
        const third = 1 / 3;
        const roots = [];
        if (D >= 0) {
            // Complex or duplicate roots.
            const rD = Math.sqrt(D);
            const S = Math.sign(R + rD) * Math.pow(Math.abs(R + rD), third);
            const T = Math.sign(R - rD) * Math.pow(Math.abs(R - rD), third);
            const Im = Math.abs((Math.sqrt(3) * (S - T)) / 2); // Complex part of the root pair.
            const t = -third * A + (S + T); // A real root.
            if (t >= 0 && t <= 1) {
                roots.push(t);
            }
            if (Im === 0) {
                const t = -third * A - (S + T) / 2; // The real part of a complex root.
                if (t >= 0 && t <= 1) {
                    roots.push(t);
                }
            }
        }
        else {
            // Distinct real roots.
            const theta = Math.acos(R / Math.sqrt(-Q * Q * Q));
            const thirdA = third * A;
            const twoSqrtQ = 2 * Math.sqrt(-Q);
            const t1 = twoSqrtQ * Math.cos(third * theta) - thirdA;
            const t2 = twoSqrtQ * Math.cos(third * (theta + 2 * Math.PI)) - thirdA;
            const t3 = twoSqrtQ * Math.cos(third * (theta + 4 * Math.PI)) - thirdA;
            if (t1 >= 0 && t1 <= 1) {
                roots.push(t1);
            }
            if (t2 >= 0 && t2 <= 1) {
                roots.push(t2);
            }
            if (t3 >= 0 && t3 <= 1) {
                roots.push(t3);
            }
        }
        return roots;
    }

    /**
     * Returns the intersection point for the given pair of line segments, or null,
     * if the segments are parallel or don't intersect.
     * Based on http://paulbourke.net/geometry/pointlineplane/
     */
    function segmentIntersection(ax1, ay1, ax2, ay2, bx1, by1, bx2, by2) {
        const d = (ax2 - ax1) * (by2 - by1) - (ay2 - ay1) * (bx2 - bx1);
        if (d === 0) {
            // The lines are parallel.
            return null;
        }
        const ua = ((bx2 - bx1) * (ay1 - by1) - (ax1 - bx1) * (by2 - by1)) / d;
        const ub = ((ax2 - ax1) * (ay1 - by1) - (ay2 - ay1) * (ax1 - bx1)) / d;
        if (ua >= 0 && ua <= 1 && ub >= 0 && ub <= 1) {
            return {
                x: ax1 + ua * (ax2 - ax1),
                y: ay1 + ua * (ay2 - ay1),
            };
        }
        return null; // The intersection point is outside either or both segments.
    }
    /**
     * Returns intersection points of the given cubic curve and the line segment.
     * Takes in x/y components of cubic control points and line segment start/end points
     * as parameters.
     */
    function cubicSegmentIntersections(px1, py1, px2, py2, px3, py3, px4, py4, x1, y1, x2, y2) {
        const intersections = [];
        // Find line equation coefficients.
        const A = y1 - y2;
        const B = x2 - x1;
        const C = x1 * (y2 - y1) - y1 * (x2 - x1);
        // Find cubic Bezier curve equation coefficients from control points.
        const bx = bezierCoefficients(px1, px2, px3, px4);
        const by = bezierCoefficients(py1, py2, py3, py4);
        const a = A * bx[0] + B * by[0]; // t^3
        const b = A * bx[1] + B * by[1]; // t^2
        const c = A * bx[2] + B * by[2]; // t
        const d = A * bx[3] + B * by[3] + C; // 1
        const roots = cubicRoots(a, b, c, d);
        // Verify that the roots are within bounds of the linear segment.
        for (const t of roots) {
            const tt = t * t;
            const ttt = t * tt;
            // Find the cartesian plane coordinates for the parametric root `t`.
            const x = bx[0] * ttt + bx[1] * tt + bx[2] * t + bx[3];
            const y = by[0] * ttt + by[1] * tt + by[2] * t + by[3];
            // The parametric cubic roots we found are intersection points
            // with an infinite line, and so the x/y coordinates above are as well.
            // Make sure the x/y is also within the bounds of the given segment.
            let s;
            if (x1 !== x2) {
                s = (x - x1) / (x2 - x1);
            }
            else {
                // the line is vertical
                s = (y - y1) / (y2 - y1);
            }
            if (s >= 0 && s <= 1) {
                intersections.push({ x, y });
            }
        }
        return intersections;
    }
    /**
     * Returns the given coordinates vector multiplied by the coefficient matrix
     * of the parametric cubic Bézier equation.
     */
    function bezierCoefficients(P1, P2, P3, P4) {
        return [
            // Bézier expressed as matrix operations:
            -P1 + 3 * P2 - 3 * P3 + P4,
            3 * P1 - 6 * P2 + 3 * P3,
            -3 * P1 + 3 * P2,
            P1, //                 | 1  0  0  0| |P4|
        ];
    }
    /**
     * Returns intersection points of the arc and the line segment.
     * Takes in arc parameters and line segment start/end points.
     */
    function arcIntersections(cx, cy, r, startAngle, endAngle, counterClockwise, x1, y1, x2, y2) {
        // Solving the quadratic equation:
        // 1. y = k * x + y0
        // 2. (x - cx)^2 + (y - cy)^2 = r^2
        const k = (y2 - y1) / (x2 - x1);
        const y0 = y1 - k * x1;
        const a = Math.pow(k, 2) + 1;
        const b = 2 * (k * (y0 - cy) - cx);
        const c = Math.pow(cx, 2) + Math.pow(y0 - cy, 2) - Math.pow(r, 2);
        const d = Math.pow(b, 2) - 4 * a * c;
        if (d < 0) {
            return [];
        }
        const i1x = (-b + Math.sqrt(d)) / 2 / a;
        const i2x = (-b - Math.sqrt(d)) / 2 / a;
        const intersections = [];
        [i1x, i2x].forEach((x) => {
            const isXInsideLine = x >= Math.min(x1, x2) && x <= Math.max(x1, x2);
            if (!isXInsideLine) {
                return;
            }
            const y = k * x + y0;
            const a1 = normalizeAngle360(startAngle);
            let a2 = normalizeAngle360(endAngle);
            let a = normalizeAngle360(Math.atan2(y, x));
            // Order angles clockwise after the start angle
            if (a2 <= a1) {
                a2 += 2 * Math.PI;
            }
            if (a < a1) {
                a += 2 * Math.PI;
            }
            if (counterClockwise !== (a >= a1 && a <= a2)) {
                intersections.push({ x, y });
            }
        });
        return intersections;
    }

    function isPointInSector(x, y, sector) {
        const radius = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
        const { innerRadius, outerRadius } = sector;
        if (sector.startAngle === sector.endAngle ||
            radius < Math.min(innerRadius, outerRadius) ||
            radius > Math.max(innerRadius, outerRadius)) {
            return false;
        }
        const startAngle = normalizeAngle180(sector.startAngle);
        const endAngle = normalizeAngle180(sector.endAngle);
        const angle = Math.atan2(y, x);
        // Sector can cross axis start
        return startAngle < endAngle
            ? angle <= endAngle && angle >= startAngle
            : (angle <= endAngle && angle >= -Math.PI) || (angle >= startAngle && angle <= Math.PI);
    }
    function lineCollidesSector(line, sector) {
        const { startAngle, endAngle, innerRadius, outerRadius } = sector;
        const outerStart = { x: outerRadius * Math.cos(startAngle), y: outerRadius * Math.sin(startAngle) };
        const outerEnd = { x: outerRadius * Math.cos(endAngle), y: outerRadius * Math.sin(endAngle) };
        const innerStart = innerRadius === 0
            ? { x: 0, y: 0 }
            : { x: innerRadius * Math.cos(startAngle), y: innerRadius * Math.sin(startAngle) };
        const innerEnd = innerRadius === 0
            ? { x: 0, y: 0 }
            : { x: innerRadius * Math.cos(endAngle), y: innerRadius * Math.sin(endAngle) };
        return (segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerStart.x, outerStart.y, innerStart.x, innerStart.y) != null ||
            segmentIntersection(line.start.x, line.start.y, line.end.x, line.end.y, outerEnd.x, outerEnd.y, innerEnd.x, innerEnd.y) != null ||
            arcIntersections(0, 0, outerRadius, startAngle, endAngle, true, line.start.x, line.start.y, line.end.x, line.end.y).length > 0);
    }
    function boxCollidesSector(box, sector) {
        const topLeft = { x: box.x, y: box.y };
        const topRight = { x: box.x + box.width, y: box.y };
        const bottomLeft = { x: box.x, y: box.y + box.height };
        const bottomRight = { x: box.x + box.width, y: box.y + box.height };
        return (lineCollidesSector({ start: topLeft, end: topRight }, sector) ||
            lineCollidesSector({ start: bottomLeft, end: bottomRight }, sector));
    }

    var Command;
    (function (Command) {
        Command[Command["Move"] = 0] = "Move";
        Command[Command["Line"] = 1] = "Line";
        Command[Command["Arc"] = 2] = "Arc";
        Command[Command["Curve"] = 3] = "Curve";
        Command[Command["ClosePath"] = 4] = "ClosePath";
    })(Command || (Command = {}));
    class Path2D {
        constructor() {
            // The methods of this class will likely be called many times per animation frame,
            // and any allocation can trigger a GC cycle during animation, so we attempt
            // to minimize the number of allocations.
            this.previousCommands = [];
            this.previousParams = [];
            this.previousClosedPath = false;
            this.commands = [];
            this.params = [];
            this._closedPath = false;
        }
        isDirty() {
            if (this._closedPath !== this.previousClosedPath) {
                return true;
            }
            if (this.previousCommands.length !== this.commands.length) {
                return true;
            }
            if (this.previousParams.length !== this.params.length) {
                return true;
            }
            for (let i = 0; i < this.commands.length; i++) {
                if (this.commands[i] !== this.previousCommands[i]) {
                    return true;
                }
            }
            for (let i = 0; i < this.params.length; i++) {
                if (this.params[i] !== this.previousParams[i]) {
                    return true;
                }
            }
            return false;
        }
        draw(ctx) {
            const commands = this.commands;
            const params = this.params;
            let j = 0;
            ctx.beginPath();
            for (const command of commands) {
                switch (command) {
                    case Command.Move:
                        ctx.moveTo(params[j++], params[j++]);
                        break;
                    case Command.Line:
                        ctx.lineTo(params[j++], params[j++]);
                        break;
                    case Command.Curve:
                        ctx.bezierCurveTo(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++]);
                        break;
                    case Command.Arc:
                        ctx.arc(params[j++], params[j++], params[j++], params[j++], params[j++], params[j++] === 1);
                        break;
                    case Command.ClosePath:
                        ctx.closePath();
                        break;
                }
            }
            if (commands.length === 0) {
                ctx.closePath();
            }
        }
        moveTo(x, y) {
            if (this.xy) {
                this.xy[0] = x;
                this.xy[1] = y;
            }
            else {
                this.xy = [x, y];
            }
            this.commands.push(Command.Move);
            this.params.push(x, y);
        }
        lineTo(x, y) {
            if (this.xy) {
                this.commands.push(Command.Line);
                this.params.push(x, y);
                this.xy[0] = x;
                this.xy[1] = y;
            }
            else {
                this.moveTo(x, y);
            }
        }
        rect(x, y, width, height) {
            this.moveTo(x, y);
            this.lineTo(x + width, y);
            this.lineTo(x + width, y + height);
            this.lineTo(x, y + height);
            this.closePath();
        }
        arc(x, y, r, sAngle, eAngle, antiClockwise = false) {
            const endX = x + r * Math.cos(eAngle);
            const endY = y + r * Math.sin(eAngle);
            if (this.xy) {
                this.xy[0] = endX;
                this.xy[1] = endY;
            }
            else {
                this.xy = [endX, endY];
            }
            this.commands.push(Command.Arc);
            this.params.push(x, y, r, sAngle, eAngle, antiClockwise ? 1 : 0);
        }
        cubicCurveTo(cx1, cy1, cx2, cy2, x, y) {
            if (!this.xy) {
                this.moveTo(cx1, cy1);
            }
            this.commands.push(Command.Curve);
            this.params.push(cx1, cy1, cx2, cy2, x, y);
            if (this.xy) {
                this.xy[0] = x;
                this.xy[1] = y;
            }
        }
        get closedPath() {
            return this._closedPath;
        }
        closePath() {
            if (this.xy) {
                this.xy = undefined;
                this.commands.push(Command.ClosePath);
                this._closedPath = true;
            }
        }
        clear({ trackChanges } = { trackChanges: false }) {
            if (trackChanges) {
                this.previousCommands = this.commands;
                this.previousParams = this.params;
                this.previousClosedPath = this._closedPath;
                this.commands = [];
                this.params = [];
            }
            else {
                this.commands.length = 0;
                this.params.length = 0;
            }
            this.xy = undefined;
            this._closedPath = false;
        }
        isPointInPath(x, y) {
            const commands = this.commands;
            const params = this.params;
            const cn = commands.length;
            // Hit testing using ray casting method, where the ray's origin is some point
            // outside the path. In this case, an offscreen point that is remote enough, so that
            // even if the path itself is large and is partially offscreen, the ray's origin
            // will likely be outside the path anyway. To test if the given point is inside the
            // path or not, we cast a ray from the origin to the given point and check the number
            // of intersections of this segment with the path. If the number of intersections is
            // even, then the ray both entered and exited the path an equal number of times,
            // therefore the point is outside the path, and inside the path, if the number of
            // intersections is odd. Since the path is compound, we check if the ray segment
            // intersects with each of the path's segments, which can be either a line segment
            // (one or no intersection points) or a Bézier curve segment (up to 3 intersection
            // points).
            const ox = -10000;
            const oy = -10000;
            // the starting point of the  current path
            let sx = NaN;
            let sy = NaN;
            // the previous point of the current path
            let px = 0;
            let py = 0;
            let intersectionCount = 0;
            for (let ci = 0, pi = 0; ci < cn; ci++) {
                switch (commands[ci]) {
                    case Command.Move:
                        if (!isNaN(sx) && segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
                            intersectionCount++;
                        }
                        px = params[pi++];
                        sx = px;
                        py = params[pi++];
                        sy = py;
                        break;
                    case Command.Line:
                        if (segmentIntersection(px, py, params[pi++], params[pi++], ox, oy, x, y)) {
                            intersectionCount++;
                        }
                        px = params[pi - 2];
                        py = params[pi - 1];
                        break;
                    case Command.Curve:
                        intersectionCount += cubicSegmentIntersections(px, py, params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], params[pi++], ox, oy, x, y).length;
                        px = params[pi - 2];
                        py = params[pi - 1];
                        break;
                    case Command.Arc:
                        const cx = params[pi++];
                        const cy = params[pi++];
                        const r = params[pi++];
                        const startAngle = params[pi++];
                        const endAngle = params[pi++];
                        const counterClockwise = Boolean(params[pi++]);
                        intersectionCount += arcIntersections(cx, cy, r, startAngle, endAngle, counterClockwise, ox, oy, x, y).length;
                        px = cx + Math.cos(endAngle) * r;
                        py = cy + Math.sin(endAngle) * r;
                        break;
                    case Command.ClosePath:
                        if (!isNaN(sx) && segmentIntersection(sx, sy, px, py, ox, oy, x, y)) {
                            intersectionCount++;
                        }
                        break;
                }
            }
            return intersectionCount % 2 === 1;
        }
        getPoints() {
            const { commands, params } = this;
            const coords = [];
            let pi = 0;
            for (let ci = 0; ci < commands.length; ci++) {
                switch (commands[ci]) {
                    case Command.Move:
                    case Command.Line:
                        coords.push({ x: params[pi++], y: params[pi++] });
                        break;
                    case Command.Curve:
                        pi += 4;
                        coords.push({ x: params[pi++], y: params[pi++] });
                        break;
                    case Command.Arc:
                        coords.push({ x: params[pi++], y: params[pi++] });
                        pi += 4;
                        break;
                    case Command.ClosePath:
                        break;
                }
            }
            return coords;
        }
    }

    function ScenePathChangeDetection(opts) {
        const { redraw = RedrawType.MAJOR, changeCb, convertor } = opts !== null && opts !== void 0 ? opts : {};
        return SceneChangeDetection({ redraw, type: 'path', convertor, changeCb });
    }
    class Path extends Shape {
        constructor() {
            super(...arguments);
            /**
             * Declare a path to retain for later rendering and hit testing
             * using custom Path2D class. Think of it as a TypeScript version
             * of the native Path2D (with some differences) that works in all browsers.
             */
            this.path = new Path2D();
            this.clipScalingX = 1;
            this.clipScalingY = 1;
            /**
             * The path only has to be updated when certain attributes change.
             * For example, if transform attributes (such as `translationX`)
             * are changed, we don't have to update the path. The `dirtyPath` flag
             * is how we keep track if the path has to be updated or not.
             */
            this._dirtyPath = true;
        }
        set dirtyPath(value) {
            if (this._dirtyPath !== value) {
                this._dirtyPath = value;
                if (value) {
                    this.markDirty(this, RedrawType.MAJOR);
                }
            }
        }
        get dirtyPath() {
            return this._dirtyPath;
        }
        checkPathDirty() {
            var _a, _b, _c, _d;
            if (this._dirtyPath) {
                return;
            }
            this.dirtyPath =
                this.path.isDirty() || ((_b = (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.isDirty()) !== null && _b !== void 0 ? _b : false) || ((_d = (_c = this.clipPath) === null || _c === void 0 ? void 0 : _c.isDirty()) !== null && _d !== void 0 ? _d : false);
        }
        isPointInPath(x, y) {
            const point = this.transformPoint(x, y);
            return this.path.closedPath && this.path.isPointInPath(point.x, point.y);
        }
        isDirtyPath() {
            // Override point for more expensive dirty checks.
            return false;
        }
        updatePath() {
            // Override point for subclasses.
        }
        clip(ctx, op) {
            const transform = ctx.getTransform();
            const clipScale = this.clipScalingX !== 1 || this.clipScalingY !== 1;
            if (clipScale) {
                ctx.scale(this.clipScalingX, this.clipScalingY);
            }
            op();
            if (clipScale) {
                ctx.setTransform(transform);
            }
        }
        render(renderCtx) {
            var _a;
            const { ctx, forceRender, stats } = renderCtx;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            if (this.dirtyPath || this.isDirtyPath()) {
                this.updatePath();
                this.dirtyPath = false;
            }
            if (this.clipPath && this.clipMode != null) {
                ctx.save();
                if (this.clipMode === 'normal') {
                    this.clip(ctx, () => {
                        var _a;
                        // Bound the shape rendered to the clipping path.
                        (_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.draw(ctx);
                        ctx.clip();
                    });
                }
                if (this.clipScalingX > 0 && this.clipScalingY > 0) {
                    this.path.draw(ctx);
                    this.fillStroke(ctx);
                }
                if (this.clipMode === 'punch-out') {
                    this.clip(ctx, () => {
                        var _a, _b;
                        // Bound the shape rendered to the clipping path.
                        (_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.draw(ctx);
                        ctx.clip();
                        // Fallback values, but practically these should never be used.
                        const { x = -10000, y = -10000, width = 20000, height = 20000 } = (_b = this.computeBBox()) !== null && _b !== void 0 ? _b : {};
                        ctx.clearRect(x, y, width, height);
                    });
                }
                ctx.restore();
            }
            else {
                this.path.draw(ctx);
                this.fillStroke(ctx);
            }
            (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();
            super.render(renderCtx);
        }
    }
    Path.className = 'Path';
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Path2D)
    ], Path.prototype, "clipPath", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", String)
    ], Path.prototype, "clipMode", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Object)
    ], Path.prototype, "clipScalingX", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Object)
    ], Path.prototype, "clipScalingY", void 0);

    class Sector extends Path {
        constructor() {
            super(...arguments);
            this.centerX = 0;
            this.centerY = 0;
            this.innerRadius = 10;
            this.outerRadius = 20;
            this.startAngle = 0;
            this.endAngle = Math.PI * 2;
            this.angleOffset = 0;
            this.inset = 0;
        }
        computeBBox() {
            const radius = this.outerRadius;
            return new BBox(this.centerX - radius, this.centerY - radius, radius * 2, radius * 2);
        }
        updatePath() {
            const path = this.path;
            const { angleOffset, inset } = this;
            const startAngle = this.startAngle + angleOffset;
            const endAngle = this.endAngle + angleOffset;
            const fullPie = Math.abs(this.endAngle - this.startAngle) >= 2 * Math.PI;
            const centerX = this.centerX;
            const centerY = this.centerY;
            path.clear();
            if (fullPie) {
                const baseInnerRadius = this.innerRadius <= 0 ? 0 : this.innerRadius + inset;
                const innerRadius = Math.min(baseInnerRadius, this.outerRadius - inset);
                const outerRadius = Math.max(baseInnerRadius, this.outerRadius - inset);
                path.arc(centerX, centerY, outerRadius, startAngle, endAngle);
                if (innerRadius > 0) {
                    path.moveTo(centerX + innerRadius * Math.cos(endAngle), centerY + innerRadius * Math.sin(endAngle));
                    path.arc(centerX, centerY, innerRadius, endAngle, startAngle, true);
                }
            }
            else {
                const innerRadius = Math.min(this.innerRadius + inset, this.outerRadius - inset);
                const outerRadius = Math.max(this.innerRadius + inset, this.outerRadius - inset);
                const innerAngleOffset = innerRadius > 0 ? inset / innerRadius : 0;
                const outerAngleOffset = outerRadius > 0 ? inset / outerRadius : 0;
                const sweep = Math.abs(endAngle - startAngle);
                const outerAngleExceeded = sweep < 2 * outerAngleOffset;
                if (outerAngleExceeded)
                    return;
                const innerAngleExceeded = innerRadius <= inset || sweep < 2 * innerAngleOffset;
                if (innerAngleExceeded) {
                    // Draw a wedge on a cartesian co-ordinate with radius `sweep`
                    // Inset from bottom - i.e. y = innerRadius
                    // Inset the top - i.e. y = (x - x0) * tan(sweep)
                    // Form a right angle from the wedge with hypotenuse x0 and an opposite side of innerRadius
                    // Gives x0 = inset * sin(sweep)
                    // y = inset = (x - inset * sin(sweep)) * tan(sweep) - solve for x
                    // This formula has limits (i.e. sweep being >= a quarter turn),
                    // but the bounds for x should be [innerRadius, outerRadius)
                    const x = Math.abs(sweep) < Math.PI * 0.5 ? (inset * (1 + Math.cos(sweep))) / Math.sin(sweep) : NaN;
                    // r = sqrt(x**2 + y**2)
                    let r;
                    if (x > 0 && x < outerRadius) {
                        // Even within the formula limits, floating point precision isn't always enough,
                        // so ensure we never go less than the inner radius
                        r = Math.max(Math.hypot(inset, x), innerRadius);
                    }
                    else {
                        // Formula limits exceeded - just use the inner radius
                        r = innerRadius;
                    }
                    const midAngle = (startAngle + endAngle) * 0.5;
                    path.moveTo(centerX + r * Math.cos(midAngle), centerY + r * Math.sin(midAngle));
                }
                else {
                    path.moveTo(centerX + innerRadius * Math.cos(startAngle + innerAngleOffset), centerY + innerRadius * Math.sin(startAngle + innerAngleOffset));
                }
                path.arc(centerX, centerY, outerRadius, startAngle + outerAngleOffset, endAngle - outerAngleOffset);
                if (innerAngleExceeded) ;
                else if (innerRadius > 0) {
                    path.arc(centerX, centerY, innerRadius, endAngle - innerAngleOffset, startAngle + innerAngleOffset, true);
                }
                else {
                    path.lineTo(centerX, centerY);
                }
            }
            path.closePath();
            this.dirtyPath = false;
        }
        isPointInPath(x, y) {
            const { angleOffset } = this;
            const startAngle = this.startAngle + angleOffset;
            const endAngle = this.endAngle + angleOffset;
            const innerRadius = Math.min(this.innerRadius, this.outerRadius);
            const outerRadius = Math.max(this.innerRadius, this.outerRadius);
            const point = this.transformPoint(x, y);
            return isPointInSector(point.x, point.y, { startAngle, endAngle, innerRadius, outerRadius });
        }
    }
    Sector.className = 'Sector';
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "centerX", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "centerY", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "innerRadius", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "outerRadius", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "startAngle", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "endAngle", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "angleOffset", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Sector.prototype, "inset", void 0);

    function deepMerge(target, source) {
        if (isPlainObject(target) && isPlainObject(source)) {
            const result = {};
            Object.keys(target).forEach((key) => {
                if (key in source) {
                    result[key] = deepMerge(target[key], source[key]);
                }
                else {
                    result[key] = target[key];
                }
            });
            Object.keys(source).forEach((key) => {
                if (!(key in target)) {
                    result[key] = source[key];
                }
            });
            return result;
        }
        if ((Array.isArray(target) && !Array.isArray(source)) || (isObjectLike(target) && !isObjectLike(source))) {
            return target;
        }
        return source;
    }
    function isObjectLike(value) {
        return typeof value === 'object' && value !== null;
    }
    function isObject(value) {
        return isObjectLike(value) && !Array.isArray(value);
    }
    function isPlainObject(x) {
        return isObject(x) && x.constructor === Object;
    }
    function mergeDefaults(...sources) {
        var _a;
        const target = {};
        for (const source of sources) {
            if (!source)
                continue;
            const keys = isDecoratedObject(source) ? listDecoratedProperties(source) : Object.keys(source);
            for (const key of keys) {
                if (isObject(target[key]) && isObject(source[key])) {
                    target[key] = mergeDefaults(target[key], source[key]);
                }
                else {
                    (_a = target[key]) !== null && _a !== void 0 ? _a : (target[key] = source[key]);
                }
            }
        }
        return target;
    }
    // Similar to Object.assign, but only copy an explicit set of keys.
    function partialAssign(keysToCopy, target, source) {
        if (source === undefined) {
            return target;
        }
        for (const key of keysToCopy) {
            const value = source[key];
            if (value !== undefined) {
                target[key] = value;
            }
        }
        return target;
    }

    let element = null;
    function sanitizeHtml(text) {
        if (text == null) {
            return undefined;
        }
        else if (text === '') {
            return '';
        }
        element !== null && element !== void 0 ? element : (element = document.createElement('div'));
        element.textContent = String(text);
        return element.innerHTML;
    }

    const isString = (v) => typeof v === 'string';
    const isStringObject = (v) => !!v && Object.prototype.hasOwnProperty.call(v, 'toString') && isString(v.toString());
    const isDate = (v) => v instanceof Date && !isNaN(+v);
    function isDiscrete(value) {
        return isString(value) || isStringObject(value);
    }
    function isContinuous(value) {
        const isNumberObject = (v) => !!v && Object.prototype.hasOwnProperty.call(v, 'valueOf') && isNumber(v.valueOf());
        const isDate = (v) => v instanceof Date && !isNaN(+v);
        return isNumber(value) || isNumberObject(value) || isDate(value);
    }
    function checkDatum(value, isContinuousScale) {
        if (isContinuousScale && isContinuous(value)) {
            return value;
        }
        else if (!isContinuousScale) {
            if (!isDiscrete(value)) {
                return String(value);
            }
            return value;
        }
        return undefined;
    }
    const isNumber = (v) => typeof v === 'number' && Number.isFinite(v);

    const memorizedFns = new Map();
    function memo(params, fnGenerator) {
        var _a, _b, _c;
        const serialisedParams = JSON.stringify(params, null, 0);
        if (!memorizedFns.has(fnGenerator)) {
            memorizedFns.set(fnGenerator, new Map());
        }
        if (!((_a = memorizedFns.get(fnGenerator)) === null || _a === void 0 ? void 0 : _a.has(serialisedParams))) {
            (_b = memorizedFns.get(fnGenerator)) === null || _b === void 0 ? void 0 : _b.set(serialisedParams, fnGenerator(params));
        }
        return (_c = memorizedFns.get(fnGenerator)) === null || _c === void 0 ? void 0 : _c.get(serialisedParams);
    }

    const SMALLEST_KEY_INTERVAL = {
        type: 'reducer',
        property: 'smallestKeyInterval',
        initialValue: Infinity,
        reducer: () => {
            let prevX = NaN;
            return (smallestSoFar = Infinity, next) => {
                const nextX = next.keys[0];
                const interval = Math.abs(nextX - prevX);
                prevX = nextX;
                if (!isNaN(interval) && interval > 0 && interval < smallestSoFar) {
                    return interval;
                }
                return smallestSoFar;
            };
        },
    };
    const AGG_VALUES_EXTENT = {
        type: 'processor',
        property: 'aggValuesExtent',
        calculate: (processedData) => {
            var _a, _b, _c, _d;
            const result = [...((_b = (_a = processedData.domain.aggValues) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : [0, 0])];
            for (const [min, max] of (_d = (_c = processedData.domain.aggValues) === null || _c === void 0 ? void 0 : _c.slice(1)) !== null && _d !== void 0 ? _d : []) {
                if (min < result[0]) {
                    result[0] = min;
                }
                if (max > result[1]) {
                    result[1] = max;
                }
            }
            return result;
        },
    };
    const SORT_DOMAIN_GROUPS = {
        type: 'processor',
        property: 'sortedGroupDomain',
        calculate: ({ domain: { groups } }) => {
            if (groups == null)
                return undefined;
            return [...groups].sort((a, b) => {
                for (let i = 0; i < a.length; i++) {
                    const result = a[i] - b[i];
                    if (result !== 0) {
                        return result;
                    }
                }
                return 0;
            });
        },
    };
    function normaliseFnBuilder({ normaliseTo, mode }) {
        const normalise = (val, extent) => {
            const result = (val * normaliseTo) / extent;
            if (result >= 0) {
                return Math.min(normaliseTo, result);
            }
            return Math.max(-normaliseTo, result);
        };
        return () => () => (values, valueIndexes) => {
            const valuesExtent = [0, 0];
            for (const valueIdx of valueIndexes) {
                const value = values[valueIdx];
                const valIdx = value < 0 ? 0 : 1;
                if (mode === 'sum') {
                    valuesExtent[valIdx] += value;
                }
                else if (valIdx === 0) {
                    valuesExtent[valIdx] = Math.min(valuesExtent[valIdx], value);
                }
                else {
                    valuesExtent[valIdx] = Math.max(valuesExtent[valIdx], value);
                }
            }
            const extent = Math.max(Math.abs(valuesExtent[0]), valuesExtent[1]);
            for (const valueIdx of valueIndexes) {
                values[valueIdx] = normalise(values[valueIdx], extent);
            }
        };
    }
    function normaliseGroupTo(scope, matchGroupIds, normaliseTo, mode = 'sum') {
        return {
            scopes: [scope.id],
            type: 'group-value-processor',
            matchGroupIds,
            adjust: memo({ normaliseTo, mode }, normaliseFnBuilder),
        };
    }
    function normalisePropertyFnBuilder({ normaliseTo, zeroDomain, rangeMin, rangeMax, }) {
        const normaliseSpan = normaliseTo[1] - normaliseTo[0];
        const normalise = (val, start, span) => {
            const result = normaliseTo[0] + ((val - start) / span) * normaliseSpan;
            if (span === 0)
                return zeroDomain;
            if (result >= normaliseTo[1])
                return normaliseTo[1];
            if (result < normaliseTo[0])
                return normaliseTo[0];
            return result;
        };
        return () => (pData, pIdx) => {
            let [start, end] = pData.domain.values[pIdx];
            if (rangeMin != null)
                start = rangeMin;
            if (rangeMax != null)
                end = rangeMax;
            const span = end - start;
            pData.domain.values[pIdx] = [normaliseTo[0], normaliseTo[1]];
            for (const group of pData.data) {
                let groupValues = group.values;
                if (pData.type === 'ungrouped') {
                    groupValues = [groupValues];
                }
                for (const values of groupValues) {
                    values[pIdx] = normalise(values[pIdx], start, span);
                }
            }
        };
    }
    function normalisePropertyTo(scope, property, normaliseTo, zeroDomain, rangeMin, rangeMax) {
        return {
            scopes: [scope.id],
            type: 'property-value-processor',
            property,
            adjust: memo({ normaliseTo, rangeMin, rangeMax, zeroDomain }, normalisePropertyFnBuilder),
        };
    }
    function animationValidation(scope, valueKeyIds = []) {
        return {
            type: 'processor',
            scopes: [scope.id],
            property: 'animationValidation',
            calculate(result) {
                var _a;
                const { keys, values } = result.defs;
                const { input, data } = result;
                let uniqueKeys = true;
                let orderedKeys = true;
                const valueKeys = [];
                for (let k = 0; k < values.length; k++) {
                    if (!((_a = values[k].scopes) === null || _a === void 0 ? void 0 : _a.some((s) => s === scope.id)))
                        continue;
                    if (!valueKeyIds.some((v) => values[k].id === v))
                        continue;
                    valueKeys.push([k, values[k]]);
                }
                const processKey = (idx, def, type) => {
                    var _a;
                    if (def.valueType === 'category') {
                        const keyValues = result.domain[type][idx];
                        uniqueKeys && (uniqueKeys = keyValues.length === input.count);
                        return;
                    }
                    let lastValue = (_a = data[0]) === null || _a === void 0 ? void 0 : _a[type][idx];
                    for (let d = 1; (uniqueKeys || orderedKeys) && d < data.length; d++) {
                        const keyValue = data[d][type][idx];
                        orderedKeys && (orderedKeys = lastValue <= keyValue);
                        uniqueKeys && (uniqueKeys = lastValue !== keyValue);
                        lastValue = keyValue;
                    }
                };
                for (let k = 0; (uniqueKeys || orderedKeys) && k < keys.length; k++) {
                    processKey(k, keys[k], 'keys');
                }
                for (let k = 0; (uniqueKeys || orderedKeys) && k < valueKeys.length; k++) {
                    const [idx, key] = valueKeys[k];
                    processKey(idx, key, 'values');
                }
                return { uniqueKeys, orderedKeys };
            },
        };
    }
    function buildGroupAccFn({ mode, separateNegative }) {
        return () => () => (values, valueIndexes) => {
            // Datum scope.
            const acc = [0, 0];
            for (const valueIdx of valueIndexes) {
                const currentVal = values[valueIdx];
                const accIndex = isNegative(currentVal) && separateNegative ? 0 : 1;
                if (typeof currentVal !== 'number' || isNaN(currentVal))
                    continue;
                if (mode === 'normal')
                    acc[accIndex] += currentVal;
                values[valueIdx] = acc[accIndex];
                if (mode === 'trailing')
                    acc[accIndex] += currentVal;
            }
        };
    }
    function buildGroupWindowAccFn({ mode, sum }) {
        return () => {
            // Entire data-set scope.
            const lastValues = [];
            let firstRow = true;
            return () => {
                // Group scope.
                return (values, valueIndexes) => {
                    // Datum scope.
                    let acc = 0;
                    for (const valueIdx of valueIndexes) {
                        const currentVal = values[valueIdx];
                        const lastValue = firstRow && sum === 'current' ? 0 : lastValues[valueIdx];
                        lastValues[valueIdx] = currentVal;
                        const sumValue = sum === 'current' ? currentVal : lastValue;
                        if (typeof currentVal !== 'number' || isNaN(currentVal)) {
                            values[valueIdx] = acc;
                            continue;
                        }
                        if (typeof lastValue !== 'number' || isNaN(lastValue)) {
                            values[valueIdx] = acc;
                            continue;
                        }
                        if (mode === 'normal')
                            acc += sumValue;
                        values[valueIdx] = acc;
                        if (mode === 'trailing')
                            acc += sumValue;
                    }
                    firstRow = false;
                };
            };
        };
    }
    function accumulateGroup(scope, matchGroupId, mode, sum, separateNegative = false) {
        let adjust;
        if (mode.startsWith('window')) {
            const modeParam = mode.endsWith('-trailing') ? 'trailing' : 'normal';
            adjust = memo({ mode: modeParam, sum }, buildGroupWindowAccFn);
        }
        else {
            adjust = memo({ mode: mode, separateNegative }, buildGroupAccFn);
        }
        return {
            scopes: [scope.id],
            type: 'group-value-processor',
            matchGroupIds: [matchGroupId],
            adjust,
        };
    }
    function diff(previousData, updateMovedDatums = true) {
        return {
            type: 'processor',
            property: 'diff',
            calculate: (processedData) => {
                const diff = {
                    changed: false,
                    moved: [],
                    added: [],
                    updated: [],
                    removed: [],
                    addedIndices: [],
                    updatedIndices: [],
                    removedIndices: [],
                };
                const moved = new Map();
                const added = new Map();
                const updated = new Map();
                const removed = new Map();
                const addedIndices = new Map();
                const updatedIndices = new Map();
                const removedIndices = new Map();
                for (let i = 0; i < Math.max(previousData.data.length, processedData.data.length); i++) {
                    const prev = previousData.data[i];
                    const datum = processedData.data[i];
                    const prevId = prev ? createDatumId(prev.keys) : '';
                    const datumId = datum ? createDatumId(datum.keys) : '';
                    if (prevId === datumId) {
                        if (!arraysEqual(prev.values, datum.values)) {
                            updated.set(datumId, datum);
                            updatedIndices.set(datumId, i);
                        }
                        continue;
                    }
                    if (removed.has(datumId)) {
                        if (updateMovedDatums || !arraysEqual(removed.get(datumId).values, datum.values)) {
                            updated.set(datumId, datum);
                            updatedIndices.set(datumId, i);
                            moved.set(datumId, datum);
                        }
                        removed.delete(datumId);
                        removedIndices.delete(datumId);
                    }
                    else if (datum) {
                        added.set(datumId, datum);
                        addedIndices.set(datumId, i);
                    }
                    if (added.has(prevId)) {
                        if (updateMovedDatums || !arraysEqual(added.get(prevId).values, prev.values)) {
                            updated.set(prevId, prev);
                            updatedIndices.set(prevId, i);
                            moved.set(prevId, prev);
                        }
                        added.delete(prevId);
                        addedIndices.delete(prevId);
                    }
                    else if (prev) {
                        updated.delete(prevId);
                        updatedIndices.delete(prevId);
                        removed.set(prevId, prev);
                        removedIndices.set(prevId, i);
                    }
                }
                diff.added = Array.from(added.keys());
                diff.updated = Array.from(updated.keys());
                diff.removed = Array.from(removed.keys());
                diff.moved = Array.from(moved.keys());
                diff.addedIndices = Array.from(addedIndices.values());
                diff.updatedIndices = Array.from(updatedIndices.values());
                diff.removedIndices = Array.from(removedIndices.values());
                diff.changed = diff.added.length > 0 || diff.updated.length > 0 || diff.removed.length > 0;
                return diff;
            },
        };
    }
    function createDatumId(keys) {
        return keys.join('___');
    }

    class Label {
        constructor() {
            this.enabled = true;
            this.color = '#464646';
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
        }
        getFont() {
            return getFont(this);
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], Label.prototype, "enabled", void 0);
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", Object)
    ], Label.prototype, "color", void 0);
    __decorate([
        Validate(OPT_FONT_STYLE),
        __metadata("design:type", String)
    ], Label.prototype, "fontStyle", void 0);
    __decorate([
        Validate(OPT_FONT_WEIGHT),
        __metadata("design:type", String)
    ], Label.prototype, "fontWeight", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], Label.prototype, "fontSize", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", Object)
    ], Label.prototype, "fontFamily", void 0);
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], Label.prototype, "formatter", void 0);
    function calculateLabelRotation(opts) {
        const { parallelFlipRotation = 0, regularFlipRotation = 0 } = opts;
        const configuredRotation = opts.rotation ? normalizeAngle360(toRadians(opts.rotation)) : 0;
        const parallelFlipFlag = !configuredRotation && parallelFlipRotation >= 0 && parallelFlipRotation <= Math.PI ? -1 : 1;
        // Flip if the axis rotation angle is in the top hemisphere.
        const regularFlipFlag = !configuredRotation && regularFlipRotation >= 0 && regularFlipRotation <= Math.PI ? -1 : 1;
        let defaultRotation = 0;
        if (opts.parallel) {
            defaultRotation = (parallelFlipFlag * Math.PI) / 2;
        }
        else if (regularFlipFlag === -1) {
            defaultRotation = Math.PI;
        }
        return { configuredRotation, defaultRotation, parallelFlipFlag, regularFlipFlag };
    }
    function getLabelSpacing(minSpacing, rotated) {
        if (!isNaN(minSpacing)) {
            return minSpacing;
        }
        return rotated ? 0 : 10;
    }
    function getTextBaseline(parallel, labelRotation, sideFlag, parallelFlipFlag) {
        if (parallel && !labelRotation) {
            return sideFlag * parallelFlipFlag === -1 ? 'hanging' : 'bottom';
        }
        return 'middle';
    }
    function getTextAlign(parallel, labelRotation, labelAutoRotation, sideFlag, regularFlipFlag) {
        const labelRotated = labelRotation > 0 && labelRotation <= Math.PI;
        const labelAutoRotated = labelAutoRotation > 0 && labelAutoRotation <= Math.PI;
        const alignFlag = labelRotated || labelAutoRotated ? -1 : 1;
        if (parallel) {
            if (labelRotation || labelAutoRotation) {
                if (sideFlag * alignFlag === -1) {
                    return 'end';
                }
            }
            else {
                return 'center';
            }
        }
        else if (sideFlag * regularFlipFlag === -1) {
            return 'end';
        }
        return 'start';
    }
    function calculateLabelBBox(text, bbox, labelX, labelY, labelMatrix) {
        // Text.computeBBox() does not take into account any of the transformations that have been applied to the label nodes, only the width and height are useful.
        // Rather than taking into account all transformations including those of parent nodes which would be the result of `computeTransformedBBox()`, giving the x and y in the entire axis coordinate space,
        // take into account only the rotation and translation applied to individual label nodes to get the x y coordinates of the labels relative to each other
        // this makes label collision detection a lot simpler
        const { width, height } = bbox;
        const translatedBBox = new BBox(labelX, labelY, 0, 0);
        labelMatrix.transformBBox(translatedBBox, bbox);
        const { x = 0, y = 0 } = bbox;
        bbox.width = width;
        bbox.height = height;
        return {
            point: { x, y, size: 0 },
            label: { width, height, text },
        };
    }

    /**
     * Constants to declare the expected nominal zIndex for all types of layer in chart rendering.
     */
    var Layers;
    (function (Layers) {
        Layers[Layers["SERIES_BACKGROUND_ZINDEX"] = -10] = "SERIES_BACKGROUND_ZINDEX";
        Layers[Layers["AXIS_GRID_ZINDEX"] = 0] = "AXIS_GRID_ZINDEX";
        Layers[Layers["AXIS_ZINDEX"] = 20] = "AXIS_ZINDEX";
        Layers[Layers["SERIES_CROSSLINE_RANGE_ZINDEX"] = 30] = "SERIES_CROSSLINE_RANGE_ZINDEX";
        Layers[Layers["SERIES_LAYER_ZINDEX"] = 500] = "SERIES_LAYER_ZINDEX";
        Layers[Layers["AXIS_FOREGROUND_ZINDEX"] = 750] = "AXIS_FOREGROUND_ZINDEX";
        Layers[Layers["SERIES_CROSSHAIR_ZINDEX"] = 1000] = "SERIES_CROSSHAIR_ZINDEX";
        Layers[Layers["SERIES_LABEL_ZINDEX"] = 1500] = "SERIES_LABEL_ZINDEX";
        Layers[Layers["SERIES_CROSSLINE_LINE_ZINDEX"] = 2500] = "SERIES_CROSSLINE_LINE_ZINDEX";
        Layers[Layers["LEGEND_ZINDEX"] = 3000] = "LEGEND_ZINDEX";
    })(Layers || (Layers = {}));

    class Marker extends Path {
        constructor() {
            super(...arguments);
            this.x = 0;
            this.y = 0;
            this.size = 12;
        }
        computeBBox() {
            const { x, y, size } = this;
            const half = size / 2;
            return new BBox(x - half, y - half, size, size);
        }
        applyPath(s, moves) {
            const { path } = this;
            let { x, y } = this;
            path.clear();
            for (const { x: mx, y: my, t } of moves) {
                x += mx * s;
                y += my * s;
                if (t === 'move') {
                    path.moveTo(x, y);
                }
                else {
                    path.lineTo(x, y);
                }
            }
            path.closePath();
        }
    }
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Marker.prototype, "x", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Marker.prototype, "y", void 0);
    __decorate([
        ScenePathChangeDetection({ convertor: Math.abs }),
        __metadata("design:type", Number)
    ], Marker.prototype, "size", void 0);

    class Circle extends Marker {
        updatePath() {
            const { x, y, path, size } = this;
            const r = size / 2;
            path.clear();
            path.arc(x, y, r, 0, Math.PI * 2);
            path.closePath();
        }
    }
    Circle.className = 'Circle';

    const DEFAULT_FILLS = {
        BLUE: '#5090dc',
        ORANGE: '#ffa03a',
        GREEN: '#459d55',
        CYAN: '#34bfe1',
        YELLOW: '#e1cc00',
        VIOLET: '#9669cb',
        GRAY: '#b5b5b5',
        MAGENTA: '#bd5aa7',
        BROWN: '#8a6224',
        RED: '#ef5452',
    };
    const DEFAULT_STROKES = {
        BLUE: '#2b5c95',
        ORANGE: '#cc6f10',
        GREEN: '#1e652e',
        CYAN: '#18859e',
        YELLOW: '#a69400',
        VIOLET: '#603c88',
        GRAY: '#575757',
        MAGENTA: '#7d2f6d',
        BROWN: '#4f3508',
        RED: '#a82529',
    };

    class ModuleMap {
        constructor(parent) {
            this.modules = {};
            this.parent = parent;
        }
        destroy() {
            for (const [key, module] of Object.entries(this.modules)) {
                module.instance.destroy();
                delete this.modules[key];
                delete this.parent[key];
            }
        }
        addModule(module) {
            if (this.modules[module.optionsKey] != null) {
                throw new Error('AG Charts - module already initialised: ' + module.optionsKey);
            }
            if (module.optionsKey in this.parent) {
                throw new Error(`AG Charts - class already has option key '${module.optionsKey}'`);
            }
            if (this.moduleContext == null) {
                this.moduleContext = this.parent.createModuleContext();
            }
            const moduleInstance = new module.instanceConstructor(Object.assign({}, this.moduleContext));
            this.modules[module.optionsKey] = { instance: moduleInstance };
            this.parent[module.optionsKey] = moduleInstance;
        }
        removeModule(module) {
            var _a, _b;
            (_b = (_a = this.modules[module.optionsKey]) === null || _a === void 0 ? void 0 : _a.instance) === null || _b === void 0 ? void 0 : _b.destroy();
            delete this.modules[module.optionsKey];
            delete this.parent[module.optionsKey];
        }
        isModuleEnabled(module) {
            return this.modules[module.optionsKey] != null;
        }
        *[Symbol.iterator]() {
            for (const { instance } of Object.values(this.modules)) {
                yield instance;
            }
        }
    }

    class Listeners {
        constructor() {
            this.registeredListeners = new Map();
        }
        addListener(eventType, handler, meta) {
            const record = { symbol: Symbol(eventType), handler, meta };
            if (this.registeredListeners.has(eventType)) {
                this.registeredListeners.get(eventType).push(record);
            }
            else {
                this.registeredListeners.set(eventType, [record]);
            }
            return () => this.removeListener(record.symbol);
        }
        removeListener(eventSymbol) {
            for (const [type, listeners] of this.registeredListeners.entries()) {
                const matchIndex = listeners.findIndex((listener) => listener.symbol === eventSymbol);
                if (matchIndex >= 0) {
                    listeners.splice(matchIndex, 1);
                    if (listeners.length === 0) {
                        this.registeredListeners.delete(type);
                    }
                    break;
                }
            }
        }
        dispatch(eventType, ...params) {
            // This is a utility class to store all the results of Listeners (or do nothing
            // if R = void).
            class ResultArray {
                constructor() {
                    this.results = undefined;
                }
                push(result) {
                    var _a;
                    if (result === undefined)
                        return;
                    (_a = this.results) !== null && _a !== void 0 ? _a : (this.results = []);
                    this.results.push(result);
                }
            }
            const results = new ResultArray();
            for (const listener of this.getListenersByType(eventType)) {
                try {
                    results.push(listener.handler(...params));
                }
                catch (e) {
                    Logger.errorOnce(e);
                }
            }
            return results.results;
        }
        dispatchWrapHandlers(eventType, wrapFn, ...params) {
            for (const listener of this.getListenersByType(eventType)) {
                try {
                    wrapFn(listener.handler, listener.meta, ...params);
                }
                catch (e) {
                    Logger.errorOnce(e);
                }
            }
        }
        getListenersByType(eventType) {
            var _a;
            return (_a = this.registeredListeners.get(eventType)) !== null && _a !== void 0 ? _a : [];
        }
    }

    class Observable {
        constructor() {
            this.eventListeners = new Map();
        }
        addEventListener(eventType, listener) {
            if (typeof listener !== 'function') {
                throw new Error('AG Charts - listener must be a Function');
            }
            const eventTypeListeners = this.eventListeners.get(eventType);
            if (eventTypeListeners) {
                eventTypeListeners.add(listener);
            }
            else {
                this.eventListeners.set(eventType, new Set([listener]));
            }
        }
        removeEventListener(type, listener) {
            var _a;
            (_a = this.eventListeners.get(type)) === null || _a === void 0 ? void 0 : _a.delete(listener);
            if (this.eventListeners.size === 0) {
                this.eventListeners.delete(type);
            }
        }
        hasEventListener(type) {
            return this.eventListeners.has(type);
        }
        clearEventListeners() {
            this.eventListeners.clear();
        }
        fireEvent(event) {
            var _a;
            (_a = this.eventListeners.get(event.type)) === null || _a === void 0 ? void 0 : _a.forEach((listener) => listener(event));
        }
    }

    function extendDomain(values, domain = [Infinity, -Infinity]) {
        for (const value of values) {
            if (typeof value !== 'number') {
                continue;
            }
            if (value < domain[0]) {
                domain[0] = value;
            }
            if (value > domain[1]) {
                domain[1] = value;
            }
        }
        return domain;
    }

    function sumValues(values, accumulator = [0, 0]) {
        for (const value of values) {
            if (typeof value !== 'number') {
                continue;
            }
            if (value < 0) {
                accumulator[0] += value;
            }
            if (value > 0) {
                accumulator[1] += value;
            }
        }
        return accumulator;
    }
    function sum(scope, id, matchGroupId) {
        const result = {
            id,
            scopes: [scope.id],
            matchGroupIds: [matchGroupId],
            type: 'aggregate',
            aggregateFunction: (values) => sumValues(values),
        };
        return result;
    }
    function groupSum(scope, id, matchGroupId) {
        return {
            id,
            scopes: [scope.id],
            type: 'aggregate',
            matchGroupIds: matchGroupId ? [matchGroupId] : undefined,
            aggregateFunction: (values) => sumValues(values),
            groupAggregateFunction: (next, acc = [0, 0]) => {
                var _a, _b;
                acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;
                acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;
                return acc;
            },
        };
    }
    function range(scope, id, matchGroupId) {
        const result = {
            id,
            scopes: [scope.id],
            matchGroupIds: [matchGroupId],
            type: 'aggregate',
            aggregateFunction: (values) => extendDomain(values),
        };
        return result;
    }
    function count(scope, id) {
        const result = {
            id,
            scopes: [scope.id],
            type: 'aggregate',
            aggregateFunction: () => [0, 1],
        };
        return result;
    }
    function groupCount(scope, id) {
        return {
            id,
            scopes: [scope.id],
            type: 'aggregate',
            aggregateFunction: () => [0, 1],
            groupAggregateFunction: (next, acc = [0, 0]) => {
                var _a, _b;
                acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;
                acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;
                return acc;
            },
        };
    }
    function average(scope, id, matchGroupId) {
        const result = {
            id,
            scopes: [scope.id],
            matchGroupIds: [matchGroupId],
            type: 'aggregate',
            aggregateFunction: (values) => sumValues(values).map((v) => v / values.length),
        };
        return result;
    }
    function groupAverage(scope, id, matchGroupId) {
        const result = {
            id,
            scopes: [scope.id],
            matchGroupIds: matchGroupId ? [matchGroupId] : undefined,
            type: 'aggregate',
            aggregateFunction: (values) => sumValues(values),
            groupAggregateFunction: (next, acc = [0, 0, -1]) => {
                var _a, _b;
                acc[0] += (_a = next === null || next === void 0 ? void 0 : next[0]) !== null && _a !== void 0 ? _a : 0;
                acc[1] += (_b = next === null || next === void 0 ? void 0 : next[1]) !== null && _b !== void 0 ? _b : 0;
                acc[2]++;
                return acc;
            },
            finalFunction: (acc = [0, 0, 0]) => {
                const result = acc[0] + acc[1];
                if (result >= 0) {
                    return [0, result / acc[2]];
                }
                return [result / acc[2], 0];
            },
        };
        return result;
    }
    function area(scope, id, aggFn, matchGroupId) {
        const result = {
            id,
            scopes: [scope.id],
            matchGroupIds: matchGroupId ? [matchGroupId] : undefined,
            type: 'aggregate',
            aggregateFunction: (values, keyRange = []) => {
                const keyWidth = keyRange[1] - keyRange[0];
                return aggFn.aggregateFunction(values).map((v) => v / keyWidth);
            },
        };
        if (aggFn.groupAggregateFunction) {
            result.groupAggregateFunction = aggFn.groupAggregateFunction;
        }
        return result;
    }
    function accumulatedValue(onlyPositive) {
        return () => {
            let value = 0;
            return (datum) => {
                if (typeof datum !== 'number')
                    return datum;
                if (isNaN(datum))
                    return datum;
                value += onlyPositive ? Math.max(0, datum) : datum;
                return value;
            };
        };
    }
    function trailingAccumulatedValue() {
        return () => {
            let value = 0;
            return (datum) => {
                if (typeof datum !== 'number')
                    return datum;
                if (isNaN(datum))
                    return datum;
                const trailingValue = value;
                value += datum;
                return trailingValue;
            };
        };
    }

    /** Modes of matching user interactions to rendered nodes (e.g. hover or click) */
    var SeriesNodePickMode;
    (function (SeriesNodePickMode) {
        /** Pick matches based upon pick coordinates being inside a matching shape/marker. */
        SeriesNodePickMode[SeriesNodePickMode["EXACT_SHAPE_MATCH"] = 0] = "EXACT_SHAPE_MATCH";
        /** Pick matches by nearest category/X-axis value, then distance within that category/X-value. */
        SeriesNodePickMode[SeriesNodePickMode["NEAREST_BY_MAIN_AXIS_FIRST"] = 1] = "NEAREST_BY_MAIN_AXIS_FIRST";
        /** Pick matches by nearest category value, then distance within that category. */
        SeriesNodePickMode[SeriesNodePickMode["NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST"] = 2] = "NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST";
        /** Pick matches based upon distance to ideal position */
        SeriesNodePickMode[SeriesNodePickMode["NEAREST_NODE"] = 3] = "NEAREST_NODE";
    })(SeriesNodePickMode || (SeriesNodePickMode = {}));
    function basicContinuousCheckDatumValidation(v) {
        return checkDatum(v, true) != null;
    }
    function basicDiscreteCheckDatumValidation(v) {
        return checkDatum(v, false) != null;
    }
    function keyProperty(scope, propName, continuous, opts = {}) {
        const result = Object.assign({ scopes: [scope.id], property: propName, type: 'key', valueType: continuous ? 'range' : 'category', validation: continuous ? basicContinuousCheckDatumValidation : basicDiscreteCheckDatumValidation }, opts);
        return result;
    }
    function valueProperty(scope, propName, continuous, opts = {}) {
        const result = Object.assign({ scopes: [scope.id], property: propName, type: 'value', valueType: continuous ? 'range' : 'category', validation: continuous ? basicContinuousCheckDatumValidation : basicDiscreteCheckDatumValidation }, opts);
        return result;
    }
    function rangedValueProperty(scope, propName, opts = {}) {
        const { min = -Infinity, max = Infinity } = opts, defOpts = __rest(opts, ["min", "max"]);
        return Object.assign({ scopes: [scope.id], type: 'value', property: propName, valueType: 'range', validation: basicContinuousCheckDatumValidation, processor: () => (datum) => {
                if (typeof datum !== 'number')
                    return datum;
                if (isNaN(datum))
                    return datum;
                return Math.min(Math.max(datum, min), max);
            } }, defOpts);
    }
    function trailingValueProperty(scope, propName, continuous, opts = {}) {
        const result = Object.assign(Object.assign({}, valueProperty(scope, propName, continuous, opts)), { processor: trailingValue() });
        return result;
    }
    function trailingValue() {
        return () => {
            let value = 0;
            return (datum) => {
                const trailingValue = value;
                value = datum;
                return trailingValue;
            };
        };
    }
    function accumulativeValueProperty(scope, propName, continuous, opts = {}) {
        const { onlyPositive } = opts, defOpts = __rest(opts, ["onlyPositive"]);
        const result = Object.assign(Object.assign({}, valueProperty(scope, propName, continuous, defOpts)), { processor: accumulatedValue(onlyPositive) });
        return result;
    }
    function trailingAccumulatedValueProperty(scope, propName, continuous, opts = {}) {
        const result = Object.assign(Object.assign({}, valueProperty(scope, propName, continuous, opts)), { processor: trailingAccumulatedValue() });
        return result;
    }
    function groupAccumulativeValueProperty(scope, propName, continuous, mode, sum = 'current', opts) {
        return [
            valueProperty(scope, propName, continuous, opts),
            accumulateGroup(scope, opts.groupId, mode, sum, opts.separateNegative),
        ];
    }
    class SeriesNodeClickEvent {
        constructor(type, event, { datum }, series) {
            this.type = type;
            this.event = event;
            this.datum = datum;
            this.seriesId = series.id;
        }
    }
    class SeriesItemHighlightStyle {
        constructor() {
            this.fill = 'yellow';
            this.fillOpacity = undefined;
            this.stroke = undefined;
            this.strokeWidth = undefined;
            this.strokeOpacity = undefined;
            this.lineDash = undefined;
            this.lineDashOffset = undefined;
        }
    }
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], SeriesItemHighlightStyle.prototype, "fill", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        __metadata("design:type", Number)
    ], SeriesItemHighlightStyle.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], SeriesItemHighlightStyle.prototype, "stroke", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], SeriesItemHighlightStyle.prototype, "strokeWidth", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        __metadata("design:type", Number)
    ], SeriesItemHighlightStyle.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_LINE_DASH),
        __metadata("design:type", Array)
    ], SeriesItemHighlightStyle.prototype, "lineDash", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], SeriesItemHighlightStyle.prototype, "lineDashOffset", void 0);
    class SeriesHighlightStyle {
        constructor() {
            this.strokeWidth = undefined;
            this.dimOpacity = undefined;
            this.enabled = undefined;
        }
    }
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], SeriesHighlightStyle.prototype, "strokeWidth", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        __metadata("design:type", Number)
    ], SeriesHighlightStyle.prototype, "dimOpacity", void 0);
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], SeriesHighlightStyle.prototype, "enabled", void 0);
    class TextHighlightStyle {
        constructor() {
            this.color = 'black';
        }
    }
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], TextHighlightStyle.prototype, "color", void 0);
    class HighlightStyle {
        constructor() {
            this.item = new SeriesItemHighlightStyle();
            this.series = new SeriesHighlightStyle();
            this.text = new TextHighlightStyle();
        }
    }
    var SeriesHighlight;
    (function (SeriesHighlight) {
        SeriesHighlight[SeriesHighlight["None"] = 0] = "None";
        SeriesHighlight[SeriesHighlight["This"] = 1] = "This";
        SeriesHighlight[SeriesHighlight["Other"] = 2] = "Other";
    })(SeriesHighlight || (SeriesHighlight = {}));
    class Series extends Observable {
        get type() {
            var _a;
            return (_a = this.constructor.type) !== null && _a !== void 0 ? _a : '';
        }
        set data(input) {
            this._data = input;
            this.onDataChange();
        }
        get data() {
            var _a;
            return (_a = this._data) !== null && _a !== void 0 ? _a : this._chartData;
        }
        onDataChange() {
            this.nodeDataRefresh = true;
        }
        setChartData(input) {
            this._chartData = input;
            if (this.data === input) {
                this.onDataChange();
            }
        }
        hasData() {
            const { data } = this;
            return data && (!Array.isArray(data) || data.length > 0);
        }
        set visible(value) {
            this._visible = value;
            this.visibleChanged();
        }
        get visible() {
            return this._visible;
        }
        onSeriesGroupingChange(prev, next) {
            const { id, type, visible, rootGroup, highlightGroup, annotationGroup } = this;
            if (prev) {
                this.ctx.seriesStateManager.deregisterSeries({ id, type });
            }
            if (next) {
                this.ctx.seriesStateManager.registerSeries({ id, type, visible, seriesGrouping: next });
            }
            // Short-circuit if series isn't already attached to the scene-graph yet.
            if (this.rootGroup.parent == null)
                return;
            this.ctx.seriesLayerManager.changeGroup({
                id,
                type,
                rootGroup,
                highlightGroup,
                annotationGroup,
                getGroupZIndexSubOrder: (type) => this.getGroupZIndexSubOrder(type),
                seriesGrouping: next,
                oldGrouping: prev,
            });
        }
        getBandScalePadding() {
            return { inner: 1, outer: 0 };
        }
        constructor(seriesOpts) {
            super();
            this.NodeClickEvent = SeriesNodeClickEvent;
            this.id = createId(this);
            // The group node that contains all the nodes used to render this series.
            this.rootGroup = new Group({ name: 'seriesRoot', isVirtual: true });
            this.axes = {
                [ChartAxisDirection.X]: undefined,
                [ChartAxisDirection.Y]: undefined,
            };
            this.directions = [ChartAxisDirection.X, ChartAxisDirection.Y];
            // Flag to determine if we should recalculate node data.
            this.nodeDataRefresh = true;
            this._visible = true;
            this.showInLegend = true;
            this.cursor = 'default';
            this.nodeClickRange = 'exact';
            this.seriesGrouping = undefined;
            this._declarationOrder = -1;
            this.seriesListeners = new Listeners();
            this.highlightStyle = new HighlightStyle();
            this.moduleMap = new ModuleMap(this);
            this.nodeDataDependencies = {};
            this.ctx = seriesOpts.moduleCtx;
            const { useLabelLayer = false, pickModes = [SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST], directionKeys = {}, directionNames = {}, contentGroupVirtual = true, canHaveAxes = false, } = seriesOpts;
            this.directionKeys = directionKeys;
            this.directionNames = directionNames;
            this.canHaveAxes = canHaveAxes;
            this.contentGroup = this.rootGroup.appendChild(new Group({
                name: `${this.id}-content`,
                layer: !contentGroupVirtual,
                isVirtual: contentGroupVirtual,
                zIndex: Layers.SERIES_LAYER_ZINDEX,
                zIndexSubOrder: this.getGroupZIndexSubOrder('data'),
            }));
            this.highlightGroup = new Group({
                name: `${this.id}-highlight`,
                layer: !contentGroupVirtual,
                isVirtual: contentGroupVirtual,
                zIndex: Layers.SERIES_LAYER_ZINDEX,
                zIndexSubOrder: this.getGroupZIndexSubOrder('highlight'),
            });
            this.highlightNode = this.highlightGroup.appendChild(new Group({ name: 'highlightNode', zIndex: 0 }));
            this.highlightLabel = this.highlightGroup.appendChild(new Group({ name: 'highlightLabel', zIndex: 10 }));
            this.pickModes = pickModes;
            this.labelGroup = this.rootGroup.appendChild(new Group({
                name: `${this.id}-series-labels`,
                layer: useLabelLayer,
                zIndex: Layers.SERIES_LABEL_ZINDEX,
            }));
            this.annotationGroup = new Group({
                name: `${this.id}-annotation`,
                layer: !contentGroupVirtual,
                isVirtual: contentGroupVirtual,
                zIndex: Layers.SERIES_LAYER_ZINDEX,
                zIndexSubOrder: this.getGroupZIndexSubOrder('annotation'),
            });
        }
        getGroupZIndexSubOrder(type, subIndex = 0) {
            let mainAdjust = 0;
            switch (type) {
                case 'data':
                case 'paths':
                    break;
                case 'labels':
                    mainAdjust += 20000;
                    break;
                case 'marker':
                    mainAdjust += 10000;
                    break;
                // Following cases are in their own layer, so need to be careful to respect declarationOrder.
                case 'highlight':
                    subIndex += 15000;
                    break;
                case 'annotation':
                    mainAdjust += 15000;
                    break;
            }
            const main = () => this._declarationOrder + mainAdjust;
            return [main, subIndex];
        }
        addListener(type, listener) {
            return this.seriesListeners.addListener(type, listener);
        }
        dispatch(type, event) {
            return this.seriesListeners.dispatch(type, event);
        }
        addChartEventListeners() {
            return;
        }
        destroy() {
            this.ctx.seriesStateManager.deregisterSeries(this);
            this.ctx.seriesLayerManager.releaseGroup(this);
        }
        getDirectionValues(direction, properties) {
            const resolvedDirection = this.resolveKeyDirection(direction);
            const keys = properties === null || properties === void 0 ? void 0 : properties[resolvedDirection];
            const values = [];
            if (!keys)
                return values;
            const addValues = (...items) => {
                for (const value of items) {
                    if (Array.isArray(value)) {
                        addValues(...value);
                    }
                    else if (typeof value === 'object') {
                        addValues(...Object.values(value));
                    }
                    else {
                        values.push(value);
                    }
                }
            };
            addValues(...keys.map((key) => this[key]));
            return values;
        }
        getKeys(direction) {
            return this.getDirectionValues(direction, this.directionKeys);
        }
        getNames(direction) {
            return this.getDirectionValues(direction, this.directionNames);
        }
        resolveKeyDirection(direction) {
            return direction;
        }
        // The union of the series domain ('community') and series-option domains ('enterprise').
        getDomain(direction) {
            var _a;
            const seriesDomain = this.getSeriesDomain(direction);
            const moduleDomains = (_a = this.dispatch('data-getDomain', { direction })) !== null && _a !== void 0 ? _a : [];
            // Flatten the 2D moduleDomains into a 1D array and concatenate it with seriesDomain
            return moduleDomains.reduce((total, current) => total.concat(current), seriesDomain);
        }
        // Indicate that something external changed and we should recalculate nodeData.
        markNodeDataDirty() {
            this.nodeDataRefresh = true;
        }
        visibleChanged() {
            this.ctx.seriesStateManager.registerSeries(this);
        }
        getOpacity() {
            const defaultOpacity = 1;
            const { dimOpacity = 1, enabled = true } = this.highlightStyle.series;
            if (!enabled || dimOpacity === defaultOpacity) {
                return defaultOpacity;
            }
            switch (this.isItemIdHighlighted()) {
                case SeriesHighlight.None:
                case SeriesHighlight.This:
                    return defaultOpacity;
                case SeriesHighlight.Other:
                default:
                    return dimOpacity;
            }
        }
        getStrokeWidth(defaultStrokeWidth) {
            const { strokeWidth, enabled = true } = this.highlightStyle.series;
            if (!enabled || strokeWidth === undefined) {
                // No change in styling for highlight cases.
                return defaultStrokeWidth;
            }
            switch (this.isItemIdHighlighted()) {
                case SeriesHighlight.This:
                    return strokeWidth;
                case SeriesHighlight.None:
                case SeriesHighlight.Other:
                    return defaultStrokeWidth;
            }
        }
        isItemIdHighlighted() {
            var _a, _b;
            const { series } = (_b = (_a = this.ctx.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight()) !== null && _b !== void 0 ? _b : {};
            // Highlighting not active.
            if (series == null) {
                return SeriesHighlight.None;
            }
            // Highlighting active, this series not highlighted.
            if (series !== this) {
                return SeriesHighlight.Other;
            }
            return SeriesHighlight.This;
        }
        getModuleTooltipParams(datum) {
            var _a;
            const params = (_a = this.dispatch('tooltip-getParams', { datum })) !== null && _a !== void 0 ? _a : [];
            return params.reduce((total, current) => {
                return Object.assign(Object.assign({}, current), total);
            }, {});
        }
        pickNode(point, limitPickModes) {
            const { pickModes, visible, rootGroup } = this;
            if (!visible || !rootGroup.visible) {
                return;
            }
            for (const pickMode of pickModes) {
                if (limitPickModes && !limitPickModes.includes(pickMode)) {
                    continue;
                }
                let match;
                switch (pickMode) {
                    case SeriesNodePickMode.EXACT_SHAPE_MATCH:
                        match = this.pickNodeExactShape(point);
                        break;
                    case SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST:
                    case SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST:
                        match = this.pickNodeMainAxisFirst(point, pickMode === SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST);
                        break;
                    case SeriesNodePickMode.NEAREST_NODE:
                        match = this.pickNodeClosestDatum(point);
                        break;
                }
                if (match) {
                    return { pickMode, match: match.datum, distance: match.distance };
                }
            }
        }
        pickNodeExactShape(point) {
            const match = this.contentGroup.pickNode(point.x, point.y);
            return match && { datum: match.datum, distance: 0 };
        }
        pickNodeClosestDatum(_point) {
            // Override point for subclasses - but if this is invoked, the subclass specified it wants
            // to use this feature.
            throw new Error('AG Charts - Series.pickNodeClosestDatum() not implemented');
        }
        pickNodeMainAxisFirst(_point, _requireCategoryAxis) {
            // Override point for subclasses - but if this is invoked, the subclass specified it wants
            // to use this feature.
            throw new Error('AG Charts - Series.pickNodeMainAxisFirst() not implemented');
        }
        fireNodeClickEvent(event, datum) {
            this.fireEvent(new this.NodeClickEvent('nodeClick', event, datum, this));
        }
        fireNodeDoubleClickEvent(event, datum) {
            this.fireEvent(new this.NodeClickEvent('nodeDoubleClick', event, datum, this));
        }
        toggleSeriesItem(itemId, enabled) {
            this.visible = enabled;
            this.nodeDataRefresh = true;
            this.dispatch('visibility-changed', { itemId, enabled });
        }
        isEnabled() {
            return this.visible;
        }
        getModuleMap() {
            return this.moduleMap;
        }
        createModuleContext() {
            return Object.assign(Object.assign({}, this.ctx), { series: this });
        }
        getLabelText(label, params, defaultFormatter = String) {
            var _a;
            if (label.formatter) {
                return ((_a = this.ctx.callbackCache.call(label.formatter, Object.assign({ seriesId: this.id }, params))) !== null && _a !== void 0 ? _a : defaultFormatter(params.value));
            }
            return defaultFormatter(params.value);
        }
        getMarkerStyle(marker, params, defaultStyle = marker.getStyle()) {
            var _a, _b;
            const defaultSize = { size: (_b = (_a = params.datum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0 };
            const markerStyle = mergeDefaults(defaultSize, defaultStyle);
            if (marker.formatter) {
                const style = this.ctx.callbackCache.call(marker.formatter, Object.assign(Object.assign(Object.assign({ seriesId: this.id }, markerStyle), params), { datum: params.datum.datum }));
                return mergeDefaults(style, markerStyle);
            }
            return markerStyle;
        }
        updateMarkerStyle(markerNode, marker, params, defaultStyle = marker.getStyle(), { applyTranslation = true } = {}) {
            const { point } = params.datum;
            const activeStyle = this.getMarkerStyle(marker, params, defaultStyle);
            const visible = this.visible && activeStyle.size > 0 && point && !isNaN(point.x) && !isNaN(point.y);
            if (applyTranslation) {
                markerNode.setProperties(Object.assign(Object.assign({ visible }, activeStyle), { translationX: point === null || point === void 0 ? void 0 : point.x, translationY: point === null || point === void 0 ? void 0 : point.y }));
            }
            else {
                markerNode.setProperties(Object.assign({ visible }, activeStyle));
            }
            // Only for custom marker shapes
            if (typeof marker.shape === 'function' && !markerNode.dirtyPath) {
                markerNode.path.clear({ trackChanges: true });
                markerNode.updatePath();
                markerNode.checkPathDirty();
            }
        }
        getMinRect() {
            return undefined;
        }
        checkResize(newSeriesRect) {
            const newNodeDataDependencies = {
                seriesRectWidth: newSeriesRect === null || newSeriesRect === void 0 ? void 0 : newSeriesRect.width,
                seriesRectHeight: newSeriesRect === null || newSeriesRect === void 0 ? void 0 : newSeriesRect.height,
            };
            const resize = jsonDiff(this.nodeDataDependencies, newNodeDataDependencies) != null;
            if (resize) {
                this.nodeDataDependencies = newNodeDataDependencies;
                this.markNodeDataDirty();
            }
            return resize;
        }
    }
    Series.highlightedZIndex = 1000000000000;
    __decorate([
        Validate(STRING),
        __metadata("design:type", Object)
    ], Series.prototype, "id", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], Series.prototype, "_visible", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], Series.prototype, "showInLegend", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", Object)
    ], Series.prototype, "cursor", void 0);
    __decorate([
        Validate(INTERACTION_RANGE),
        __metadata("design:type", Object)
    ], Series.prototype, "nodeClickRange", void 0);
    __decorate([
        ActionOnSet({
            changeValue: function (newVal, oldVal) {
                this.onSeriesGroupingChange(oldVal, newVal);
            },
        }),
        __metadata("design:type", Object)
    ], Series.prototype, "seriesGrouping", void 0);

    function seriesLabelFadeInAnimation({ id }, subId, animationManager, labelSelections) {
        staticFromToMotion(id, subId, animationManager, labelSelections, { opacity: 0 }, { opacity: 1 }, LABEL_PHASE);
    }
    function seriesLabelFadeOutAnimation({ id }, subId, animationManager, labelSelections) {
        staticFromToMotion(id, subId, animationManager, labelSelections, { opacity: 1 }, { opacity: 0 }, LABEL_PHASE);
    }
    function resetLabelFn(_node) {
        return { opacity: 1 };
    }

    const CONSTANTS = {
        periods: ['AM', 'PM'],
        days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        months: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December',
        ],
        shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
    };
    function dayOfYear(date, startOfYear = new Date(date.getFullYear(), 0, 1)) {
        const startOffset = date.getTimezoneOffset() - startOfYear.getTimezoneOffset();
        const timeDiff = date.getTime() - startOfYear.getTime() + startOffset * 60000;
        const timeOneDay = 3600000 * 24;
        return Math.floor(timeDiff / timeOneDay);
    }
    function weekOfYear(date, startDay) {
        const startOfYear = new Date(date.getFullYear(), 0, 1);
        const startOfYearDay = startOfYear.getDay();
        const firstWeekStartOffset = (startDay - startOfYearDay + 7) % 7;
        const startOffset = new Date(date.getFullYear(), 0, firstWeekStartOffset + 1);
        if (startOffset <= date) {
            return Math.floor(dayOfYear(date, startOffset) / 7) + 1;
        }
        // Days before week 1 are in week 0.
        return 0;
    }
    const SUNDAY = 0;
    const MONDAY = 1;
    const THURSDAY = 4;
    function isoWeekOfYear(date, year = date.getFullYear()) {
        const firstOfYear = new Date(year, 0, 1);
        const firstOfYearDay = firstOfYear.getDay();
        const firstThursdayOffset = (THURSDAY - firstOfYearDay + 7) % 7;
        const startOffset = new Date(year, 0, firstThursdayOffset - (THURSDAY - MONDAY) + 1);
        if (startOffset <= date) {
            return Math.floor(dayOfYear(date, startOffset) / 7) + 1;
        }
        // Days before week 1 are in week 52/53 of previous year.
        return isoWeekOfYear(date, year - 1);
    }
    function timezone(date) {
        const offset = date.getTimezoneOffset();
        const unsignedOffset = Math.abs(offset);
        const sign = offset > 0 ? '-' : '+';
        return `${sign}${pad(Math.floor(unsignedOffset / 60), 2, '0')}${pad(Math.floor(unsignedOffset % 60), 2, '0')}`;
    }
    const FORMATTERS = {
        a: (d) => CONSTANTS.shortDays[d.getDay()],
        A: (d) => CONSTANTS.days[d.getDay()],
        b: (d) => CONSTANTS.shortMonths[d.getMonth()],
        B: (d) => CONSTANTS.months[d.getMonth()],
        c: '%x, %X',
        d: (d, p) => pad(d.getDate(), 2, p !== null && p !== void 0 ? p : '0'),
        e: '%_d',
        f: (d, p) => pad(d.getMilliseconds() * 1000, 6, p !== null && p !== void 0 ? p : '0'),
        H: (d, p) => pad(d.getHours(), 2, p !== null && p !== void 0 ? p : '0'),
        I: (d, p) => {
            const hours = d.getHours() % 12;
            return hours === 0 ? '12' : pad(hours, 2, p !== null && p !== void 0 ? p : '0');
        },
        j: (d, p) => pad(dayOfYear(d) + 1, 3, p !== null && p !== void 0 ? p : '0'),
        m: (d, p) => pad(d.getMonth() + 1, 2, p !== null && p !== void 0 ? p : '0'),
        M: (d, p) => pad(d.getMinutes(), 2, p !== null && p !== void 0 ? p : '0'),
        L: (d, p) => pad(d.getMilliseconds(), 3, p !== null && p !== void 0 ? p : '0'),
        p: (d) => (d.getHours() < 12 ? 'AM' : 'PM'),
        Q: (d) => String(d.getTime()),
        s: (d) => String(Math.floor(d.getTime() / 1000)),
        S: (d, p) => pad(d.getSeconds(), 2, p !== null && p !== void 0 ? p : '0'),
        u: (d) => {
            let day = d.getDay();
            if (day < 1)
                day += 7;
            return String(day % 7);
        },
        U: (d, p) => pad(weekOfYear(d, SUNDAY), 2, p !== null && p !== void 0 ? p : '0'),
        V: (d, p) => pad(isoWeekOfYear(d), 2, p !== null && p !== void 0 ? p : '0'),
        w: (d, p) => pad(d.getDay(), 2, p !== null && p !== void 0 ? p : '0'),
        W: (d, p) => pad(weekOfYear(d, MONDAY), 2, p !== null && p !== void 0 ? p : '0'),
        x: '%-m/%-d/%Y',
        X: '%-I:%M:%S %p',
        y: (d, p) => pad(d.getFullYear() % 100, 2, p !== null && p !== void 0 ? p : '0'),
        Y: (d, p) => pad(d.getFullYear(), 4, p !== null && p !== void 0 ? p : '0'),
        Z: (d) => timezone(d),
        '%': () => '%',
    };
    const PADS = {
        _: ' ',
        '0': '0',
        '-': '',
    };
    function pad(value, size, padChar) {
        const output = String(Math.floor(value));
        if (output.length >= size) {
            return output;
        }
        return `${padChar.repeat(size - output.length)}${output}`;
    }
    function buildFormatter(formatString) {
        const formatParts = [];
        while (formatString.length > 0) {
            let nextEscapeIdx = formatString.indexOf('%');
            if (nextEscapeIdx !== 0) {
                const literalPart = nextEscapeIdx > 0 ? formatString.substring(0, nextEscapeIdx) : formatString;
                formatParts.push(literalPart);
            }
            if (nextEscapeIdx < 0)
                break;
            const maybePadSpecifier = formatString[nextEscapeIdx + 1];
            const maybePad = PADS[maybePadSpecifier];
            if (maybePad != null) {
                nextEscapeIdx++;
            }
            const maybeFormatterSpecifier = formatString[nextEscapeIdx + 1];
            const maybeFormatter = FORMATTERS[maybeFormatterSpecifier];
            if (typeof maybeFormatter === 'function') {
                formatParts.push([maybeFormatter, maybePad]);
            }
            else if (typeof maybeFormatter === 'string') {
                const formatter = buildFormatter(maybeFormatter);
                formatParts.push([formatter, maybePad]);
            }
            else {
                formatParts.push(`${maybePad !== null && maybePad !== void 0 ? maybePad : ''}${maybeFormatterSpecifier}`);
            }
            formatString = formatString.substring(nextEscapeIdx + 2);
        }
        return (dateTime) => {
            const dateTimeAsDate = typeof dateTime === 'number' ? new Date(dateTime) : dateTime;
            return formatParts.map((c) => (typeof c === 'string' ? c : c[0](dateTimeAsDate, c[1]))).join('');
        };
    }

    const interpolatePattern = /(#\{(.*?)\})/g;
    function interpolate(input, values, formats) {
        return input.replace(interpolatePattern, function (...args) {
            const name = args[2];
            const [valueName, formatName] = name.split(':');
            const value = values[valueName];
            if (typeof value === 'number') {
                const format = formatName && formats && formats[formatName];
                if (format) {
                    const { locales, options } = format;
                    return value.toLocaleString(locales, options);
                }
                return String(value);
            }
            if (value instanceof Date) {
                const format = formatName && formats && formats[formatName];
                if (typeof format === 'string') {
                    const formatter = buildFormatter(format);
                    return formatter(value);
                }
                return value.toDateString();
            }
            if (typeof value === 'string' || (value === null || value === void 0 ? void 0 : value.toString)) {
                return String(value);
            }
            return '';
        });
    }

    function injectStyle(document, cssStyle) {
        const styleElement = document.createElement('style');
        styleElement.innerHTML = cssStyle;
        // Make sure these styles are injected before other styles, so it can be overridden.
        document.head.insertBefore(styleElement, document.head.querySelector('style'));
    }

    const DEFAULT_TOOLTIP_CLASS = 'ag-chart-tooltip';
    const DEFAULT_TOOLTIP_DARK_CLASS = 'ag-chart-dark-tooltip';
    const defaultTooltipCss = `
.${DEFAULT_TOOLTIP_CLASS} {
    transition: transform 0.1s ease;
    display: table;
    position: fixed;
    left: 0px;
    top: 0px;
    white-space: nowrap;
    z-index: 99999;
    font: 12px Verdana, sans-serif;
    color: rgb(70, 70, 70);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
}

.${DEFAULT_TOOLTIP_CLASS}-no-interaction {
    pointer-events: none;
    user-select: none;
}

.${DEFAULT_TOOLTIP_CLASS}-no-animation {
    transition: none !important;
}

.${DEFAULT_TOOLTIP_CLASS}-hidden {
    visibility: hidden;
}

.${DEFAULT_TOOLTIP_CLASS}-title {
    position: relative;
    padding: 8px 14px;
    border-top-left-radius: 2px;
    border-top-right-radius: 2px;
    color: white;
    background-color: #888888;
    z-index: 1;
}

.${DEFAULT_TOOLTIP_CLASS}-title:only-child {
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
}

.${DEFAULT_TOOLTIP_CLASS}-content {
    padding: 6px 14px;
    line-height: 1.7em;
    background: white;
    border-bottom-left-radius: 2px;
    border-bottom-right-radius: 2px;
    border: 1px solid rgba(0, 0, 0, 0.15);
    overflow: hidden;
}

.${DEFAULT_TOOLTIP_CLASS}-arrow::before {
    content: "";

    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);

    border: 5px solid #d9d9d9;

    border-left-color: transparent;
    border-right-color: transparent;
    border-bottom-color: transparent;

    width: 0;
    height: 0;

    margin: 0 auto;
}

.${DEFAULT_TOOLTIP_CLASS}-arrow::after {
    content: "";

    position: absolute;
    top: calc(100% - 1px);
    left: 50%;
    transform: translateX(-50%);

    border: 5px solid white;

    border-left-color: transparent;
    border-right-color: transparent;
    border-bottom-color: transparent;

    width: 0;
    height: 0;

    margin: 0 auto;
}

.${DEFAULT_TOOLTIP_CLASS}.${DEFAULT_TOOLTIP_DARK_CLASS} {
    color: white;
    background: #15181c;
}

.${DEFAULT_TOOLTIP_CLASS}.${DEFAULT_TOOLTIP_DARK_CLASS} .${DEFAULT_TOOLTIP_CLASS}-content {
    border-color: rgba(255, 255, 255, 0.15);
}

.ag-chart-wrapper {
    box-sizing: border-box;
    overflow: hidden;
}
`;
    function toTooltipHtml(input, defaults) {
        var _a, _b, _c;
        if (typeof input === 'string') {
            return input;
        }
        const { content = (_a = defaults === null || defaults === void 0 ? void 0 : defaults.content) !== null && _a !== void 0 ? _a : '', title = defaults === null || defaults === void 0 ? void 0 : defaults.title, color = (_b = defaults === null || defaults === void 0 ? void 0 : defaults.color) !== null && _b !== void 0 ? _b : 'white', backgroundColor = (_c = defaults === null || defaults === void 0 ? void 0 : defaults.backgroundColor) !== null && _c !== void 0 ? _c : '#888', } = input;
        const titleHtml = title
            ? `<div class="${DEFAULT_TOOLTIP_CLASS}-title"
        style="color: ${color}; background-color: ${backgroundColor}">${title}</div>`
            : '';
        const contentHtml = content ? `<div class="${DEFAULT_TOOLTIP_CLASS}-content">${content}</div>` : '';
        return `${titleHtml}${contentHtml}`;
    }
    const POSITION_TYPES = ['pointer', 'node'];
    const POSITION_TYPE = predicateWithMessage((v) => POSITION_TYPES.includes(v), `expecting a position type keyword such as 'pointer' or 'node'`);
    class TooltipPosition {
        constructor() {
            /** The type of positioning for the tooltip. By default, the tooltip follows the pointer. */
            this.type = 'pointer';
            /** The horizontal offset in pixels for the position of the tooltip. */
            this.xOffset = 0;
            /** The vertical offset in pixels for the position of the tooltip. */
            this.yOffset = 0;
        }
    }
    __decorate([
        Validate(POSITION_TYPE)
        /** The type of positioning for the tooltip. By default, the tooltip follows the pointer. */
        ,
        __metadata("design:type", String)
    ], TooltipPosition.prototype, "type", void 0);
    __decorate([
        Validate(NUMBER$1())
        /** The horizontal offset in pixels for the position of the tooltip. */
        ,
        __metadata("design:type", Number)
    ], TooltipPosition.prototype, "xOffset", void 0);
    __decorate([
        Validate(NUMBER$1())
        /** The vertical offset in pixels for the position of the tooltip. */
        ,
        __metadata("design:type", Number)
    ], TooltipPosition.prototype, "yOffset", void 0);
    class Tooltip {
        constructor(canvasElement, document, window, container) {
            this.enableInteraction = false;
            this.enabled = true;
            this.showArrow = undefined;
            this.class = undefined;
            this.lastClass = undefined;
            this.delay = 0;
            this.range = 'nearest';
            this.lastVisibilityChange = Date.now();
            this.position = new TooltipPosition();
            this.showTimeout = 0;
            this._showArrow = true;
            this.tooltipRoot = container;
            this.window = window;
            const element = document.createElement('div');
            this.element = this.tooltipRoot.appendChild(element);
            this.element.classList.add(DEFAULT_TOOLTIP_CLASS);
            this.canvasElement = canvasElement;
            // Detect when the chart becomes invisible and hide the tooltip as well.
            if (typeof IntersectionObserver !== 'undefined') {
                const observer = new IntersectionObserver((entries) => {
                    for (const entry of entries) {
                        if (entry.target === this.canvasElement && entry.intersectionRatio === 0) {
                            this.toggle(false);
                        }
                    }
                }, { root: this.tooltipRoot });
                observer.observe(this.canvasElement);
                this.observer = observer;
            }
            if (Tooltip.tooltipDocuments.indexOf(document) < 0) {
                injectStyle(document, defaultTooltipCss);
                Tooltip.tooltipDocuments.push(document);
            }
        }
        destroy() {
            const { parentNode } = this.element;
            if (parentNode) {
                parentNode.removeChild(this.element);
            }
            if (this.observer) {
                this.observer.unobserve(this.canvasElement);
            }
        }
        isVisible() {
            const { element } = this;
            return !element.classList.contains(DEFAULT_TOOLTIP_CLASS + '-hidden');
        }
        updateClass(visible, showArrow) {
            const { element, class: newClass, lastClass, enableInteraction, lastVisibilityChange } = this;
            const wasVisible = this.isVisible();
            const nowVisible = !!visible;
            let timeSinceLastVisibilityChangeMs = Infinity;
            if (wasVisible !== nowVisible) {
                const now = Date.now();
                timeSinceLastVisibilityChangeMs = now - lastVisibilityChange;
                this.lastVisibilityChange = now;
            }
            const toggleClass = (name, include) => {
                const className = `${DEFAULT_TOOLTIP_CLASS}-${name}`;
                if (include) {
                    element.classList.add(className);
                }
                else {
                    element.classList.remove(className);
                }
            };
            // Time below which an animated move should be used.
            const animatedMoveThresholdMs = 100;
            // Time below which we should treat updates as indistinguishable to users, and we shouldn't
            // adjust the `no-animation` CSS class.
            const thrashingThresholdMs = 5;
            // No animation on first show or if tooltip is disabled for a non-trivial amount of time.
            // Don't change the `no-animation` class on fast update.
            const noAnimation = !wasVisible && nowVisible && timeSinceLastVisibilityChangeMs > animatedMoveThresholdMs;
            if (timeSinceLastVisibilityChangeMs > thrashingThresholdMs) {
                toggleClass('no-animation', noAnimation);
            }
            toggleClass('no-interaction', !enableInteraction); // Prevent interaction.
            toggleClass('hidden', !visible); // Hide if not visible.
            toggleClass('arrow', !!showArrow); // Add arrow if tooltip is constrained.
            if (newClass !== lastClass) {
                if (lastClass) {
                    element.classList.remove(lastClass);
                }
                if (newClass) {
                    element.classList.add(newClass);
                }
                this.lastClass = newClass;
            }
        }
        /**
         * Shows tooltip at the given event's coordinates.
         * If the `html` parameter is missing, moves the existing tooltip to the new position.
         */
        show(meta, html, instantly = false) {
            var _a, _b, _c, _d, _e, _f, _g;
            const { element, canvasElement } = this;
            if (html !== undefined) {
                element.innerHTML = html;
            }
            else if (!element.innerHTML) {
                this.toggle(false);
                return;
            }
            const limit = (low, actual, high) => {
                return Math.max(Math.min(actual, high), low);
            };
            const xOffset = (_b = (_a = meta.position) === null || _a === void 0 ? void 0 : _a.xOffset) !== null && _b !== void 0 ? _b : 0;
            const yOffset = (_d = (_c = meta.position) === null || _c === void 0 ? void 0 : _c.yOffset) !== null && _d !== void 0 ? _d : 0;
            const canvasRect = canvasElement.getBoundingClientRect();
            const naiveLeft = canvasRect.left + meta.offsetX - element.clientWidth / 2 + xOffset;
            const naiveTop = canvasRect.top + meta.offsetY - element.clientHeight - 8 + yOffset;
            const windowBounds = this.getWindowBoundingBox();
            const maxLeft = windowBounds.x + windowBounds.width - element.clientWidth - 1;
            const maxTop = windowBounds.y + windowBounds.height - element.clientHeight;
            const left = limit(windowBounds.x, naiveLeft, maxLeft);
            const top = limit(windowBounds.y, naiveTop, maxTop);
            const constrained = left !== naiveLeft || top !== naiveTop;
            const defaultShowArrow = !constrained && !xOffset && !yOffset;
            const showArrow = (_f = (_e = meta.showArrow) !== null && _e !== void 0 ? _e : this.showArrow) !== null && _f !== void 0 ? _f : defaultShowArrow;
            this.updateShowArrow(showArrow);
            element.style.transform = `translate(${Math.round(left)}px, ${Math.round(top)}px)`;
            this.enableInteraction = (_g = meta.enableInteraction) !== null && _g !== void 0 ? _g : false;
            if (this.delay > 0 && !instantly) {
                this.toggle(false);
                this.showTimeout = this.window.setTimeout(() => {
                    this.toggle(true);
                }, this.delay);
                return;
            }
            this.toggle(true);
        }
        getWindowBoundingBox() {
            return new BBox(0, 0, this.window.innerWidth, this.window.innerHeight);
        }
        toggle(visible) {
            if (!visible) {
                this.window.clearTimeout(this.showTimeout);
            }
            this.updateClass(visible, this._showArrow);
        }
        pointerLeftOntoTooltip(event) {
            var _a;
            if (!this.enableInteraction)
                return false;
            const classList = (_a = event.sourceEvent.relatedTarget) === null || _a === void 0 ? void 0 : _a.classList;
            const classes = ['', '-title', '-content'];
            const classListContains = Boolean(classes.filter((c) => classList === null || classList === void 0 ? void 0 : classList.contains(`${DEFAULT_TOOLTIP_CLASS}${c}`)));
            return classList !== undefined && classListContains;
        }
        updateShowArrow(show) {
            this._showArrow = show;
        }
    }
    Tooltip.tooltipDocuments = [];
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], Tooltip.prototype, "enabled", void 0);
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], Tooltip.prototype, "showArrow", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], Tooltip.prototype, "class", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], Tooltip.prototype, "delay", void 0);
    __decorate([
        Validate(INTERACTION_RANGE),
        __metadata("design:type", Object)
    ], Tooltip.prototype, "range", void 0);

    class SeriesTooltipInteraction {
        constructor() {
            this.enabled = false;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], SeriesTooltipInteraction.prototype, "enabled", void 0);
    class SeriesTooltip {
        constructor() {
            this.enabled = true;
            this.showArrow = undefined;
            this.format = undefined;
            this.renderer = undefined;
            this.interaction = new SeriesTooltipInteraction();
            this.position = new TooltipPosition();
        }
        toTooltipHtml(defaults, params, overrides) {
            var _a, _b;
            const formatFn = (_a = overrides === null || overrides === void 0 ? void 0 : overrides.format) !== null && _a !== void 0 ? _a : this.format;
            const rendererFn = (_b = overrides === null || overrides === void 0 ? void 0 : overrides.renderer) !== null && _b !== void 0 ? _b : this.renderer;
            if (formatFn) {
                return toTooltipHtml({ content: interpolate(formatFn, params) }, defaults);
            }
            if (rendererFn) {
                return toTooltipHtml(rendererFn(params), defaults);
            }
            return toTooltipHtml(defaults);
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], SeriesTooltip.prototype, "enabled", void 0);
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], SeriesTooltip.prototype, "showArrow", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], SeriesTooltip.prototype, "format", void 0);
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], SeriesTooltip.prototype, "renderer", void 0);

    function preparePieSeriesAnimationFunctions(initialLoad, rotationDegrees, scaleFn, oldScaleFn) {
        const scale = [scaleFn.convert(0), scaleFn.convert(1)];
        const oldScale = [oldScaleFn.convert(0), oldScaleFn.convert(1)];
        const rotation = Math.PI / -2 + toRadians(rotationDegrees);
        const scaleToNewRadius = ({ radius }) => {
            return { innerRadius: scale[0], outerRadius: scale[0] + (scale[1] - scale[0]) * radius };
        };
        const scaleToOldRadius = ({ radius }) => {
            return { innerRadius: oldScale[0], outerRadius: oldScale[0] + (oldScale[1] - oldScale[0]) * radius };
        };
        const fromFn = (sect, datum, status, { prevFromProps }) => {
            var _a, _b, _c, _d, _e, _f;
            // Default to starting from current state.
            let { startAngle, endAngle, innerRadius, outerRadius } = sect;
            let { fill, stroke } = datum.sectorFormat;
            if (status === 'unknown' || (status === 'added' && !prevFromProps)) {
                // Start of animation (full new data) - sweep in.
                startAngle = rotation;
                endAngle = rotation;
                innerRadius = datum.innerRadius;
                outerRadius = datum.outerRadius;
            }
            else if (status === 'added' && prevFromProps) {
                startAngle = (_a = prevFromProps.endAngle) !== null && _a !== void 0 ? _a : rotation;
                endAngle = (_b = prevFromProps.endAngle) !== null && _b !== void 0 ? _b : rotation;
                innerRadius = (_c = prevFromProps.innerRadius) !== null && _c !== void 0 ? _c : datum.innerRadius;
                outerRadius = (_d = prevFromProps.outerRadius) !== null && _d !== void 0 ? _d : datum.outerRadius;
            }
            if (status === 'added' && !initialLoad) {
                const radii = scaleToOldRadius(datum);
                innerRadius = radii.innerRadius;
                outerRadius = radii.outerRadius;
            }
            if (status === 'updated') {
                fill = (_e = sect.fill) !== null && _e !== void 0 ? _e : fill;
                stroke = (_f = sect.stroke) !== null && _f !== void 0 ? _f : stroke;
            }
            return { startAngle, endAngle, innerRadius, outerRadius, fill, stroke };
        };
        const toFn = (_sect, datum, status, { prevLive }) => {
            var _a, _b;
            // Default to moving to target state.
            let { startAngle, endAngle, innerRadius, outerRadius } = datum;
            const { stroke, fill } = datum.sectorFormat;
            if (status === 'removed' && prevLive) {
                startAngle = (_a = prevLive.datum) === null || _a === void 0 ? void 0 : _a.endAngle;
                endAngle = (_b = prevLive.datum) === null || _b === void 0 ? void 0 : _b.endAngle;
            }
            else if (status === 'removed' && !prevLive) {
                startAngle = rotation;
                endAngle = rotation;
            }
            if (status === 'removed') {
                const radii = scaleToNewRadius(datum);
                innerRadius = radii.innerRadius;
                outerRadius = radii.outerRadius;
            }
            return { startAngle, endAngle, outerRadius, innerRadius, stroke, fill };
        };
        const innerCircle = {
            fromFn: (node, _datum) => {
                var _a, _b, _c;
                return { size: (_c = (_b = (_a = node.previousDatum) === null || _a === void 0 ? void 0 : _a.radius) !== null && _b !== void 0 ? _b : node.size) !== null && _c !== void 0 ? _c : 0 };
            },
            toFn: (_node, datum) => {
                var _a;
                return { size: (_a = datum.radius) !== null && _a !== void 0 ? _a : 0 };
            },
        };
        return { nodes: { toFn, fromFn }, innerCircle };
    }
    function resetPieSelectionsFn(_node, datum) {
        return {
            startAngle: datum.startAngle,
            endAngle: datum.endAngle,
            innerRadius: datum.innerRadius,
            outerRadius: datum.outerRadius,
            fill: datum.sectorFormat.fill,
            stroke: datum.sectorFormat.stroke,
        };
    }

    /**
     * Implements a per-node reset.
     *
     * @param selections contains nodes to be reset
     * @param propsFn callback to determine per-node properties
     */
    function resetMotion(selectionsOrNodes, propsFn) {
        const isNodes = isNodeArray(selectionsOrNodes);
        const nodes = isNodes ? selectionsOrNodes : [];
        const selections = !isNodes ? selectionsOrNodes : [];
        for (const selection of selections) {
            for (const node of selection.nodes()) {
                const from = propsFn(node, node.datum);
                node.setProperties(from);
            }
            selection.cleanup();
        }
        for (const node of nodes) {
            const from = propsFn(node, node.datum);
            node.setProperties(from);
        }
    }

    var resetMotion$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        resetMotion: resetMotion
    });

    class StateMachine {
        constructor(initialState, states, preTransitionCb) {
            this.states = states;
            this.preTransitionCb = preTransitionCb;
            this.debug = Debug.create(true, 'animation');
            this.state = initialState;
            this.debug(`%c${this.constructor.name} | init -> ${initialState}`, 'color: green');
        }
        transition(event, data) {
            var _a, _b;
            const currentStateConfig = this.states[this.state];
            const destinationTransition = currentStateConfig === null || currentStateConfig === void 0 ? void 0 : currentStateConfig[event];
            if (!destinationTransition) {
                this.debug(`%c${this.constructor.name} | ${this.state} -> ${event} -> ${this.state}`, 'color: grey');
                return;
            }
            let destinationState = this.state;
            if (typeof destinationTransition === 'string') {
                destinationState = destinationTransition;
            }
            else if (typeof destinationTransition === 'object') {
                destinationState = destinationTransition.target;
            }
            this.debug(`%c${this.constructor.name} | ${this.state} -> ${event} -> ${destinationState}`, 'color: green');
            (_a = this.preTransitionCb) === null || _a === void 0 ? void 0 : _a.call(this, this.state, destinationState);
            // Change the state before calling the transition action to allow the action to trigger a subsequent transition
            this.state = destinationState;
            if (typeof destinationTransition === 'function') {
                destinationTransition(data);
            }
            else if (typeof destinationTransition === 'object') {
                (_b = destinationTransition.action) === null || _b === void 0 ? void 0 : _b.call(destinationTransition, data);
            }
            return this.state;
        }
    }

    class DataModelSeries extends Series {
        isContinuous() {
            var _a, _b;
            const isContinuousX = ContinuousScale.is((_a = this.axes[ChartAxisDirection.X]) === null || _a === void 0 ? void 0 : _a.scale);
            const isContinuousY = ContinuousScale.is((_b = this.axes[ChartAxisDirection.Y]) === null || _b === void 0 ? void 0 : _b.scale);
            return { isContinuousX, isContinuousY };
        }
        // Request data, but with message dispatching to series-options (modules).
        requestDataModel(dataController, data, opts) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                // Merge properties of this series with properties of all the attached series-options
                const props = opts.props;
                const listenerProps = (_a = this.dispatch('data-prerequest', this.isContinuous())) !== null && _a !== void 0 ? _a : [];
                for (const moreProps of listenerProps) {
                    props.push(...moreProps);
                }
                const { dataModel, processedData } = yield dataController.request(this.id, data !== null && data !== void 0 ? data : [], Object.assign(Object.assign({}, opts), { props }));
                this.dataModel = dataModel;
                this.processedData = processedData;
                this.dispatch('data-processed', { dataModel, processedData });
                return { dataModel, processedData };
            });
        }
        isProcessedDataAnimatable() {
            var _a, _b;
            const validationResults = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.animationValidation;
            if (!validationResults)
                return true;
            const { orderedKeys, uniqueKeys } = validationResults;
            return !!orderedKeys && !!uniqueKeys;
        }
        checkProcessedDataAnimatable() {
            if (!this.isProcessedDataAnimatable()) {
                this.ctx.animationManager.skipCurrentBatch();
            }
        }
    }

    class PolarSeries extends DataModelSeries {
        constructor(_a) {
            var { useLabelLayer = false, pickModes = [SeriesNodePickMode.EXACT_SHAPE_MATCH], canHaveAxes = false, animationResetFns } = _a, opts = __rest(_a, ["useLabelLayer", "pickModes", "canHaveAxes", "animationResetFns"]);
            super(Object.assign(Object.assign({}, opts), { useLabelLayer,
                pickModes, contentGroupVirtual: false, directionKeys: {
                    [ChartAxisDirection.X]: ['angleKey'],
                    [ChartAxisDirection.Y]: ['radiusKey'],
                }, directionNames: {
                    [ChartAxisDirection.X]: ['angleName'],
                    [ChartAxisDirection.Y]: ['radiusName'],
                }, canHaveAxes }));
            this.sectorGroup = this.contentGroup.appendChild(new Group());
            this.itemSelection = Selection.select(this.sectorGroup, () => this.nodeFactory(), false);
            this.labelSelection = Selection.select(this.labelGroup, Text, false);
            this.highlightSelection = Selection.select(this.highlightGroup, () => this.nodeFactory());
            /**
             * The center of the polar series (for example, the center of a pie).
             * If the polar chart has multiple series, all of them will have their
             * center set to the same value as a result of the polar chart layout.
             * The center coordinates are not supposed to be set by the user.
             */
            this.centerX = 0;
            this.centerY = 0;
            /**
             * The maximum radius the series can use.
             * This value is set automatically as a result of the polar chart layout
             * and is not supposed to be set by the user.
             */
            this.radius = 0;
            this.sectorGroup.zIndexSubOrder = [() => this._declarationOrder, 1];
            this.animationResetFns = animationResetFns;
            this.animationState = new StateMachine('empty', {
                empty: {
                    update: {
                        target: 'ready',
                        action: (data) => this.animateEmptyUpdateReady(data),
                    },
                },
                ready: {
                    updateData: 'waiting',
                    clear: 'clearing',
                    highlight: (data) => this.animateReadyHighlight(data),
                    highlightMarkers: (data) => this.animateReadyHighlightMarkers(data),
                    resize: (data) => this.animateReadyResize(data),
                },
                waiting: {
                    update: {
                        target: 'ready',
                        action: (data) => this.animateWaitingUpdateReady(data),
                    },
                },
                clearing: {
                    update: {
                        target: 'empty',
                        action: (data) => this.animateClearingUpdateEmpty(data),
                    },
                },
            }, () => this.checkProcessedDataAnimatable());
        }
        getLabelData() {
            return [];
        }
        computeLabelsBBox(_options, _seriesRect) {
            return null;
        }
        resetAllAnimation() {
            var _a;
            const { item, label } = (_a = this.animationResetFns) !== null && _a !== void 0 ? _a : {};
            this.ctx.animationManager.stopByAnimationGroupId(this.id);
            if (item) {
                resetMotion([this.itemSelection, this.highlightSelection], item);
            }
            if (label) {
                resetMotion([this.labelSelection], label);
            }
            this.itemSelection.cleanup();
            this.labelSelection.cleanup();
            this.highlightSelection.cleanup();
        }
        animateEmptyUpdateReady(_data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation();
        }
        animateWaitingUpdateReady(_data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation();
        }
        animateReadyHighlight(_data) {
            var _a;
            const { item } = (_a = this.animationResetFns) !== null && _a !== void 0 ? _a : {};
            if (item) {
                resetMotion([this.highlightSelection], item);
            }
        }
        animateReadyHighlightMarkers(_data) {
            // Override point for sub-classes.
        }
        animateReadyResize(_data) {
            this.resetAllAnimation();
        }
        animateClearingUpdateEmpty(_data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation();
        }
        animationTransitionClear() {
            this.animationState.transition('clear', this.getAnimationData());
        }
        getAnimationData(seriesRect) {
            return { seriesRect };
        }
    }

    class PieSeriesNodeClickEvent extends SeriesNodeClickEvent {
        constructor(type, nativeEvent, datum, series) {
            super(type, nativeEvent, datum, series);
            this.angleKey = series.angleKey;
            this.radiusKey = series.radiusKey;
            this.calloutLabelKey = series.calloutLabelKey;
            this.sectorLabelKey = series.sectorLabelKey;
        }
    }
    var PieNodeTag;
    (function (PieNodeTag) {
        PieNodeTag[PieNodeTag["Sector"] = 0] = "Sector";
        PieNodeTag[PieNodeTag["Callout"] = 1] = "Callout";
        PieNodeTag[PieNodeTag["Label"] = 2] = "Label";
    })(PieNodeTag || (PieNodeTag = {}));
    class PieSeriesCalloutLabel extends Label {
        constructor() {
            super(...arguments);
            this.offset = 3; // from the callout line
            this.minAngle = 0; // in degrees
            this.minSpacing = 4;
            this.maxCollisionOffset = 50;
            this.avoidCollisions = true;
        }
    }
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PieSeriesCalloutLabel.prototype, "offset", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PieSeriesCalloutLabel.prototype, "minAngle", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PieSeriesCalloutLabel.prototype, "minSpacing", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PieSeriesCalloutLabel.prototype, "maxCollisionOffset", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], PieSeriesCalloutLabel.prototype, "avoidCollisions", void 0);
    class PieSeriesSectorLabel extends Label {
        constructor() {
            super(...arguments);
            this.positionOffset = 0;
            this.positionRatio = 0.5;
        }
    }
    __decorate([
        Validate(NUMBER$1()),
        __metadata("design:type", Object)
    ], PieSeriesSectorLabel.prototype, "positionOffset", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], PieSeriesSectorLabel.prototype, "positionRatio", void 0);
    class PieSeriesCalloutLine {
        constructor() {
            this.length = 10;
            this.strokeWidth = 1;
        }
    }
    __decorate([
        Validate(OPT_COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], PieSeriesCalloutLine.prototype, "colors", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], PieSeriesCalloutLine.prototype, "length", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], PieSeriesCalloutLine.prototype, "strokeWidth", void 0);
    class PieTitle extends Caption {
        constructor() {
            super(...arguments);
            this.showInLegend = false;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], PieTitle.prototype, "showInLegend", void 0);
    class DoughnutInnerLabel extends Label {
        constructor() {
            super(...arguments);
            this.text = '';
            this.margin = 2;
        }
    }
    __decorate([
        Validate(STRING),
        __metadata("design:type", Object)
    ], DoughnutInnerLabel.prototype, "text", void 0);
    __decorate([
        Validate(NUMBER$1()),
        __metadata("design:type", Object)
    ], DoughnutInnerLabel.prototype, "margin", void 0);
    class DoughnutInnerCircle {
        constructor() {
            this.fill = 'transparent';
            this.fillOpacity = 1;
        }
    }
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", Object)
    ], DoughnutInnerCircle.prototype, "fill", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        __metadata("design:type", Object)
    ], DoughnutInnerCircle.prototype, "fillOpacity", void 0);
    class PieSeries extends PolarSeries {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                useLabelLayer: true,
                animationResetFns: { item: resetPieSelectionsFn, label: resetLabelFn },
            });
            this.previousRadiusScale = new LinearScale();
            this.radiusScale = new LinearScale();
            // The group node that contains the background graphics.
            this.backgroundGroup = this.rootGroup.appendChild(new Group({
                name: `${this.id}-background`,
                layer: true,
                zIndex: Layers.SERIES_BACKGROUND_ZINDEX,
            }));
            this.innertCircleGroup = this.backgroundGroup.appendChild(new Group({ name: `${this.id}-innerCircle` }));
            this.nodeData = [];
            // When a user toggles a series item (e.g. from the legend), its boolean state is recorded here.
            this.seriesItemEnabled = [];
            this.title = undefined;
            this.calloutLabel = new PieSeriesCalloutLabel();
            this.sectorLabel = new PieSeriesSectorLabel();
            this.calloutLine = new PieSeriesCalloutLine();
            this.tooltip = new SeriesTooltip();
            /**
             * The key of the numeric field to use to determine the angle (for example,
             * a pie sector angle).
             */
            this.angleKey = '';
            this.angleName = '';
            this.innerLabels = [];
            this.innerCircle = undefined;
            /**
             * The key of the numeric field to use to determine the radii of pie sectors.
             * The largest value will correspond to the full radius and smaller values to
             * proportionally smaller radii.
             */
            this.radiusKey = undefined;
            this.radiusName = undefined;
            this.radiusMin = undefined;
            this.radiusMax = undefined;
            this.calloutLabelKey = undefined;
            this.calloutLabelName = undefined;
            this.sectorLabelKey = undefined;
            this.sectorLabelName = undefined;
            this.legendItemKey = undefined;
            this.fills = Object.values(DEFAULT_FILLS);
            this.strokes = Object.values(DEFAULT_STROKES);
            this.fillOpacity = 1;
            this.strokeOpacity = 1;
            this.lineDash = [0];
            this.lineDashOffset = 0;
            this.formatter = undefined;
            /**
             * The series rotation in degrees.
             */
            this.rotation = 0;
            this.outerRadiusOffset = 0;
            this.outerRadiusRatio = 1;
            this.innerRadiusOffset = 0;
            this.innerRadiusRatio = 1;
            this.strokeWidth = 1;
            this.shadow = undefined;
            this.highlightStyle = new HighlightStyle();
            this.surroundingRadius = undefined;
            this.NodeClickEvent = PieSeriesNodeClickEvent;
            this.angleScale = new LinearScale();
            // Each sector is a ratio of the whole, where all ratios add up to 1.
            this.angleScale.domain = [0, 1];
            // Add 90 deg to start the first pie at 12 o'clock.
            this.angleScale.range = [-Math.PI, Math.PI].map((angle) => angle + Math.PI / 2);
            const pieCalloutLabels = new Group({ name: 'pieCalloutLabels' });
            const pieSectorLabels = new Group({ name: 'pieSectorLabels' });
            const innerLabels = new Group({ name: 'innerLabels' });
            this.labelGroup.append(pieCalloutLabels);
            this.labelGroup.append(pieSectorLabels);
            this.labelGroup.append(innerLabels);
            this.calloutLabelSelection = Selection.select(pieCalloutLabels, Group);
            this.sectorLabelSelection = Selection.select(pieSectorLabels, Text);
            this.innerLabelsSelection = Selection.select(innerLabels, Text);
            this.innerCircleSelection = Selection.select(this.innertCircleGroup, Circle);
        }
        addChartEventListeners() {
            var _a;
            (_a = this.ctx.chartEventManager) === null || _a === void 0 ? void 0 : _a.addListener('legend-item-click', (event) => this.onLegendItemClick(event));
        }
        visibleChanged() {
            this.processSeriesItemEnabled();
        }
        processSeriesItemEnabled() {
            var _a;
            const { data, visible } = this;
            this.seriesItemEnabled = (_a = data === null || data === void 0 ? void 0 : data.map(() => visible)) !== null && _a !== void 0 ? _a : [];
        }
        nodeFactory() {
            return new Sector();
        }
        getSeriesDomain(direction) {
            if (direction === ChartAxisDirection.X) {
                return this.angleScale.domain;
            }
            else {
                return this.radiusScale.domain;
            }
        }
        processData(dataController) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                let { data } = this;
                const { angleKey, radiusKey, calloutLabelKey, sectorLabelKey, legendItemKey, seriesItemEnabled } = this;
                if (angleKey == null || data == null)
                    return;
                const animationEnabled = !this.ctx.animationManager.isSkipped();
                const extraKeyProps = [];
                const extraProps = [];
                // Order here should match `getDatumIdFromData()`.
                if (legendItemKey) {
                    extraKeyProps.push(keyProperty(this, legendItemKey, false, { id: `legendItemKey` }));
                }
                else if (calloutLabelKey) {
                    extraKeyProps.push(keyProperty(this, calloutLabelKey, false, { id: `calloutLabelKey` }));
                }
                else if (sectorLabelKey) {
                    extraKeyProps.push(keyProperty(this, sectorLabelKey, false, { id: `sectorLabelKey` }));
                }
                if (radiusKey) {
                    extraProps.push(rangedValueProperty(this, radiusKey, {
                        id: 'radiusValue',
                        min: (_a = this.radiusMin) !== null && _a !== void 0 ? _a : 0,
                        max: this.radiusMax,
                    }), valueProperty(this, radiusKey, true, { id: `radiusRaw` }), // Raw value pass-through.
                    normalisePropertyTo(this, { id: 'radiusValue' }, [0, 1], 1, (_b = this.radiusMin) !== null && _b !== void 0 ? _b : 0, this.radiusMax));
                }
                if (calloutLabelKey) {
                    extraProps.push(valueProperty(this, calloutLabelKey, false, { id: `calloutLabelValue` }));
                }
                if (sectorLabelKey) {
                    extraProps.push(valueProperty(this, sectorLabelKey, false, { id: `sectorLabelValue` }));
                }
                if (legendItemKey) {
                    extraProps.push(valueProperty(this, legendItemKey, false, { id: `legendItemValue` }));
                }
                if (animationEnabled && this.processedData && extraKeyProps.length > 0) {
                    extraProps.push(diff(this.processedData));
                }
                extraProps.push(animationValidation(this));
                data = data.map((d, idx) => (seriesItemEnabled[idx] ? d : Object.assign(Object.assign({}, d), { [angleKey]: 0 })));
                yield this.requestDataModel(dataController, data, {
                    props: [
                        ...extraKeyProps,
                        accumulativeValueProperty(this, angleKey, true, { id: `angleValue`, onlyPositive: true }),
                        valueProperty(this, angleKey, true, { id: `angleRaw` }),
                        normalisePropertyTo(this, { id: 'angleValue' }, [0, 1], 0, 0),
                        ...extraProps,
                    ],
                });
                this.animationState.transition('updateData');
            });
        }
        maybeRefreshNodeData() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.nodeDataRefresh)
                    return;
                const [{ nodeData = [] } = {}] = yield this.createNodeData();
                this.nodeData = nodeData;
                this.nodeDataRefresh = false;
            });
        }
        getProcessedDataIndexes(dataModel) {
            const angleIdx = dataModel.resolveProcessedDataIndexById(this, `angleValue`).index;
            const radiusIdx = this.radiusKey ? dataModel.resolveProcessedDataIndexById(this, `radiusValue`).index : -1;
            const calloutLabelIdx = this.calloutLabelKey
                ? dataModel.resolveProcessedDataIndexById(this, `calloutLabelValue`).index
                : -1;
            const sectorLabelIdx = this.sectorLabelKey
                ? dataModel.resolveProcessedDataIndexById(this, `sectorLabelValue`).index
                : -1;
            const legendItemIdx = this.legendItemKey
                ? dataModel.resolveProcessedDataIndexById(this, `legendItemValue`).index
                : -1;
            return { angleIdx, radiusIdx, calloutLabelIdx, sectorLabelIdx, legendItemIdx };
        }
        createNodeData() {
            return __awaiter(this, void 0, void 0, function* () {
                const { id: seriesId, processedData, dataModel, rotation, angleScale } = this;
                if (!processedData || !dataModel || processedData.type !== 'ungrouped')
                    return [];
                const { angleIdx, radiusIdx, calloutLabelIdx, sectorLabelIdx, legendItemIdx } = this.getProcessedDataIndexes(dataModel);
                let currentStart = 0;
                const nodeData = processedData.data.map((group, index) => {
                    var _a;
                    const { datum, values } = group;
                    const currentValue = values[angleIdx];
                    const startAngle = angleScale.convert(currentStart) + toRadians(rotation);
                    currentStart = currentValue;
                    const endAngle = angleScale.convert(currentStart) + toRadians(rotation);
                    const span = Math.abs(endAngle - startAngle);
                    const midAngle = startAngle + span / 2;
                    const angleValue = values[angleIdx + 1];
                    const radius = radiusIdx >= 0 ? (_a = values[radiusIdx]) !== null && _a !== void 0 ? _a : 1 : 1;
                    const radiusValue = radiusIdx >= 0 ? values[radiusIdx + 1] : undefined;
                    const legendItemValue = legendItemIdx >= 0 ? values[legendItemIdx] : undefined;
                    const labels = this.getLabels(datum, midAngle, span, true, values[calloutLabelIdx], values[sectorLabelIdx], legendItemValue);
                    const sectorFormat = this.getSectorFormat(datum, index, false);
                    return Object.assign({ itemId: index, series: this, datum,
                        index,
                        angleValue,
                        midAngle, midCos: Math.cos(midAngle), midSin: Math.sin(midAngle), startAngle,
                        endAngle,
                        sectorFormat,
                        radiusValue,
                        radius, innerRadius: Math.max(this.radiusScale.convert(0), 0), outerRadius: Math.max(this.radiusScale.convert(radius), 0), legendItemValue }, labels);
                });
                return [{ itemId: seriesId, nodeData, labelData: nodeData }];
            });
        }
        getLabels(datum, midAngle, span, skipDisabled, calloutLabelValue, sectorLabelValue, legendItemValue) {
            const { calloutLabel, sectorLabel, legendItemKey } = this;
            const calloutLabelKey = !skipDisabled || calloutLabel.enabled ? this.calloutLabelKey : undefined;
            const sectorLabelKey = !skipDisabled || sectorLabel.enabled ? this.sectorLabelKey : undefined;
            if (!calloutLabelKey && !sectorLabelKey && !legendItemKey) {
                return {};
            }
            const labelFormatterParams = {
                datum,
                angleKey: this.angleKey,
                angleName: this.angleName,
                radiusKey: this.radiusKey,
                radiusName: this.radiusName,
                calloutLabelKey: this.calloutLabelKey,
                calloutLabelName: this.calloutLabelName,
                sectorLabelKey: this.sectorLabelKey,
                sectorLabelName: this.sectorLabelName,
                legendItemKey: this.legendItemKey,
            };
            const result = {};
            if (calloutLabelKey && span > toRadians(calloutLabel.minAngle)) {
                result.calloutLabel = Object.assign(Object.assign({}, this.getTextAlignment(midAngle)), { text: this.getLabelText(calloutLabel, Object.assign(Object.assign({}, labelFormatterParams), { value: calloutLabelValue })), hidden: false, collisionTextAlign: undefined, collisionOffsetY: 0, box: undefined });
            }
            if (sectorLabelKey) {
                result.sectorLabel = {
                    text: this.getLabelText(sectorLabel, Object.assign(Object.assign({}, labelFormatterParams), { value: sectorLabelValue })),
                };
            }
            if (legendItemKey != null && legendItemValue != null) {
                result.legendItem = { key: legendItemKey, text: legendItemValue };
            }
            return result;
        }
        getTextAlignment(midAngle) {
            const quadrantTextOpts = [
                { textAlign: 'center', textBaseline: 'bottom' },
                { textAlign: 'left', textBaseline: 'middle' },
                { textAlign: 'center', textBaseline: 'hanging' },
                { textAlign: 'right', textBaseline: 'middle' },
            ];
            const midAngle180 = normalizeAngle180(midAngle);
            // Split the circle into quadrants like so: ⊗
            const quadrantStart = (-3 * Math.PI) / 4; // same as `normalizeAngle180(toRadians(-135))`
            const quadrantOffset = midAngle180 - quadrantStart;
            const quadrant = Math.floor(quadrantOffset / (Math.PI / 2));
            const quadrantIndex = mod(quadrant, quadrantTextOpts.length);
            return quadrantTextOpts[quadrantIndex];
        }
        getSectorFormat(datum, formatIndex, highlight) {
            var _a, _b, _c, _d, _e;
            const { angleKey, radiusKey, fills, strokes, formatter, id: seriesId, ctx: { callbackCache, highlightManager }, } = this;
            const highlightedDatum = highlightManager.getActiveHighlight();
            const isDatumHighlighted = highlight && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && formatIndex === highlightedDatum.itemId;
            const { fill, fillOpacity, stroke, strokeWidth, strokeOpacity } = mergeDefaults(isDatumHighlighted && this.highlightStyle.item, {
                fill: fills[formatIndex % fills.length],
                fillOpacity: this.fillOpacity,
                stroke: strokes[formatIndex % strokes.length],
                strokeWidth: this.getStrokeWidth(this.strokeWidth),
                strokeOpacity: this.getOpacity(),
            });
            let format;
            if (formatter) {
                format = callbackCache.call(formatter, {
                    datum,
                    angleKey,
                    radiusKey,
                    fill,
                    stroke,
                    fills,
                    strokes,
                    strokeWidth,
                    highlighted: isDatumHighlighted,
                    seriesId,
                });
            }
            return {
                fill: (_a = format === null || format === void 0 ? void 0 : format.fill) !== null && _a !== void 0 ? _a : fill,
                fillOpacity: (_b = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _b !== void 0 ? _b : fillOpacity,
                stroke: (_c = format === null || format === void 0 ? void 0 : format.stroke) !== null && _c !== void 0 ? _c : stroke,
                strokeWidth: (_d = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _d !== void 0 ? _d : strokeWidth,
                strokeOpacity: (_e = format === null || format === void 0 ? void 0 : format.strokeOpacity) !== null && _e !== void 0 ? _e : strokeOpacity,
            };
        }
        getInnerRadius() {
            const { radius, innerRadiusRatio, innerRadiusOffset } = this;
            const innerRadius = radius * innerRadiusRatio + innerRadiusOffset;
            if (innerRadius === radius || innerRadius < 0) {
                return 0;
            }
            return innerRadius;
        }
        getOuterRadius() {
            return Math.max(this.radius * this.outerRadiusRatio + this.outerRadiusOffset, 0);
        }
        updateRadiusScale(resize) {
            const newRange = [this.getInnerRadius(), this.getOuterRadius()];
            this.radiusScale.range = newRange;
            if (resize) {
                this.previousRadiusScale.range = newRange;
            }
            this.nodeData = this.nodeData.map((_a) => {
                var { radius } = _a, d = __rest(_a, ["radius"]);
                return Object.assign(Object.assign({}, d), { radius, innerRadius: Math.max(this.radiusScale.convert(0), 0), outerRadius: Math.max(this.radiusScale.convert(radius), 0) });
            });
        }
        getTitleTranslationY() {
            var _a, _b;
            const outerRadius = Math.max(0, this.radiusScale.range[1]);
            if (outerRadius === 0) {
                return NaN;
            }
            const spacing = (_b = (_a = this.title) === null || _a === void 0 ? void 0 : _a.spacing) !== null && _b !== void 0 ? _b : 0;
            const titleOffset = 2 + spacing;
            const dy = Math.max(0, -outerRadius);
            return -outerRadius - titleOffset - dy;
        }
        update({ seriesRect }) {
            return __awaiter(this, void 0, void 0, function* () {
                const { title } = this;
                const newNodeDataDependencies = {
                    seriesRectWidth: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.width,
                    seriesRectHeight: seriesRect === null || seriesRect === void 0 ? void 0 : seriesRect.height,
                };
                const resize = jsonDiff(this.nodeDataDependencies, newNodeDataDependencies) != null;
                if (resize) {
                    this.nodeDataDependencies = newNodeDataDependencies;
                }
                yield this.maybeRefreshNodeData();
                this.updateTitleNodes();
                this.updateRadiusScale(resize);
                this.contentGroup.translationX = this.centerX;
                this.contentGroup.translationY = this.centerY;
                this.highlightGroup.translationX = this.centerX;
                this.highlightGroup.translationY = this.centerY;
                this.backgroundGroup.translationX = this.centerX;
                this.backgroundGroup.translationY = this.centerY;
                if (this.labelGroup) {
                    this.labelGroup.translationX = this.centerX;
                    this.labelGroup.translationY = this.centerY;
                }
                if (title) {
                    const dy = this.getTitleTranslationY();
                    const titleBox = title.node.computeBBox();
                    title.node.visible =
                        title.enabled && isFinite(dy) && !this.bboxIntersectsSurroundingSeries(titleBox, 0, dy);
                    title.node.translationY = isFinite(dy) ? dy : 0;
                }
                this.updateNodeMidPoint();
                yield this.updateSelections();
                yield this.updateNodes(seriesRect);
            });
        }
        updateTitleNodes() {
            var _a, _b;
            const { title, oldTitle } = this;
            if (oldTitle !== title) {
                if (oldTitle) {
                    (_a = this.labelGroup) === null || _a === void 0 ? void 0 : _a.removeChild(oldTitle.node);
                }
                if (title) {
                    title.node.textBaseline = 'bottom';
                    (_b = this.labelGroup) === null || _b === void 0 ? void 0 : _b.appendChild(title.node);
                }
                this.oldTitle = title;
            }
        }
        updateNodeMidPoint() {
            this.nodeData.forEach((d) => {
                const radius = d.innerRadius + (d.outerRadius - d.innerRadius) / 2;
                d.midPoint = {
                    x: d.midCos * Math.max(0, radius),
                    y: d.midSin * Math.max(0, radius),
                };
            });
        }
        updateSelections() {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.updateGroupSelection();
                this.updateInnerCircleSelection();
            });
        }
        updateGroupSelection() {
            return __awaiter(this, void 0, void 0, function* () {
                const { itemSelection, highlightSelection, calloutLabelSelection, sectorLabelSelection, innerLabelsSelection } = this;
                const update = (selection, clone) => {
                    let nodeData = this.nodeData;
                    if (clone) {
                        // Allow mutable sectorFormat, so formatted sector styles can be updated and varied
                        // between normal and highlighted cases.
                        nodeData = nodeData.map((datum) => (Object.assign(Object.assign({}, datum), { sectorFormat: Object.assign({}, datum.sectorFormat) })));
                    }
                    selection.update(nodeData);
                    if (this.ctx.animationManager.isSkipped()) {
                        selection.cleanup();
                    }
                };
                update(itemSelection, false);
                update(highlightSelection, true);
                calloutLabelSelection.update(this.nodeData, (group) => {
                    const line = new Line();
                    line.tag = PieNodeTag.Callout;
                    line.pointerEvents = PointerEvents.None;
                    group.appendChild(line);
                    const text = new Text();
                    text.tag = PieNodeTag.Label;
                    text.pointerEvents = PointerEvents.None;
                    group.appendChild(text);
                });
                sectorLabelSelection.update(this.nodeData, (node) => {
                    node.pointerEvents = PointerEvents.None;
                });
                innerLabelsSelection.update(this.innerLabels, (node) => {
                    node.pointerEvents = PointerEvents.None;
                });
            });
        }
        updateInnerCircleSelection() {
            const { innerCircle } = this;
            let radius = 0;
            const innerRadius = this.getInnerRadius();
            if (innerRadius > 0) {
                const circleRadius = Math.min(innerRadius, this.getOuterRadius());
                const antiAliasingPadding = 1;
                radius = Math.ceil(circleRadius * 2 + antiAliasingPadding);
            }
            const datums = innerCircle ? [{ radius }] : [];
            this.innerCircleSelection.update(datums);
        }
        updateNodes(seriesRect) {
            return __awaiter(this, void 0, void 0, function* () {
                const highlightedDatum = this.ctx.highlightManager.getActiveHighlight();
                const isVisible = this.seriesItemEnabled.indexOf(true) >= 0;
                this.rootGroup.visible = isVisible;
                this.backgroundGroup.visible = isVisible;
                this.contentGroup.visible = isVisible;
                this.highlightGroup.visible = isVisible && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this;
                if (this.labelGroup) {
                    this.labelGroup.visible = isVisible;
                }
                this.contentGroup.opacity = this.getOpacity();
                this.innerCircleSelection.each((node, { radius }) => {
                    var _a, _b;
                    node.setProperties({
                        fill: (_a = this.innerCircle) === null || _a === void 0 ? void 0 : _a.fill,
                        opacity: (_b = this.innerCircle) === null || _b === void 0 ? void 0 : _b.fillOpacity,
                        size: radius,
                    });
                });
                const updateSectorFn = (sector, datum, _index, isDatumHighlighted) => {
                    const format = this.getSectorFormat(datum.datum, datum.itemId, isDatumHighlighted);
                    datum.sectorFormat.fill = format.fill;
                    datum.sectorFormat.stroke = format.stroke;
                    const animationDisabled = this.ctx.animationManager.isSkipped();
                    if (animationDisabled) {
                        sector.startAngle = datum.startAngle;
                        sector.endAngle = datum.endAngle;
                        sector.innerRadius = datum.innerRadius;
                        sector.outerRadius = datum.outerRadius;
                    }
                    if (isDatumHighlighted || animationDisabled) {
                        sector.fill = format.fill;
                        sector.stroke = format.stroke;
                    }
                    sector.strokeWidth = format.strokeWidth;
                    sector.fillOpacity = format.fillOpacity;
                    sector.strokeOpacity = this.strokeOpacity;
                    sector.lineDash = this.lineDash;
                    sector.lineDashOffset = this.lineDashOffset;
                    sector.fillShadow = this.shadow;
                    sector.lineJoin = 'round';
                };
                this.itemSelection.each((node, datum, index) => updateSectorFn(node, datum, index, false));
                this.highlightSelection.each((node, datum, index) => {
                    const isDatumHighlighted = (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.series) === this && node.datum.itemId === highlightedDatum.itemId;
                    updateSectorFn(node, datum, index, isDatumHighlighted);
                    node.visible = isDatumHighlighted;
                });
                this.updateCalloutLineNodes();
                this.updateCalloutLabelNodes(seriesRect);
                this.updateSectorLabelNodes();
                this.updateInnerLabelNodes();
                this.animationState.transition('update');
            });
        }
        updateCalloutLineNodes() {
            var _a;
            const { calloutLine } = this;
            const calloutLength = calloutLine.length;
            const calloutStrokeWidth = calloutLine.strokeWidth;
            const calloutColors = (_a = calloutLine.colors) !== null && _a !== void 0 ? _a : this.strokes;
            const { offset } = this.calloutLabel;
            this.calloutLabelSelection.selectByTag(PieNodeTag.Callout).forEach((line, index) => {
                const datum = line.datum;
                const { calloutLabel: label, outerRadius } = datum;
                if ((label === null || label === void 0 ? void 0 : label.text) && !label.hidden && outerRadius !== 0) {
                    line.visible = true;
                    line.strokeWidth = calloutStrokeWidth;
                    line.stroke = calloutColors[index % calloutColors.length];
                    line.fill = undefined;
                    const x1 = datum.midCos * outerRadius;
                    const y1 = datum.midSin * outerRadius;
                    let x2 = datum.midCos * (outerRadius + calloutLength);
                    let y2 = datum.midSin * (outerRadius + calloutLength);
                    const isMoved = label.collisionTextAlign || label.collisionOffsetY !== 0;
                    if (isMoved && label.box != null) {
                        // Get the closest point to the text bounding box
                        const box = label.box;
                        let cx = x2;
                        let cy = y2;
                        if (x2 < box.x) {
                            cx = box.x;
                        }
                        else if (x2 > box.x + box.width) {
                            cx = box.x + box.width;
                        }
                        if (y2 < box.y) {
                            cy = box.y;
                        }
                        else if (y2 > box.y + box.height) {
                            cy = box.y + box.height;
                        }
                        // Apply label offset
                        const dx = cx - x2;
                        const dy = cy - y2;
                        const length = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
                        const paddedLength = length - offset;
                        if (paddedLength > 0) {
                            x2 = x2 + (dx * paddedLength) / length;
                            y2 = y2 + (dy * paddedLength) / length;
                        }
                    }
                    line.x1 = x1;
                    line.y1 = y1;
                    line.x2 = x2;
                    line.y2 = y2;
                }
                else {
                    line.visible = false;
                }
            });
        }
        getLabelOverflow(text, box, seriesRect) {
            const seriesLeft = seriesRect.x - this.centerX;
            const seriesRight = seriesRect.x + seriesRect.width - this.centerX;
            const seriesTop = seriesRect.y - this.centerY;
            const seriesBottom = seriesRect.y + seriesRect.height - this.centerY;
            const errPx = 1; // Prevents errors related to floating point calculations
            let visibleTextPart = 1;
            if (box.x + errPx < seriesLeft) {
                visibleTextPart = (box.x + box.width - seriesLeft) / box.width;
            }
            else if (box.x + box.width - errPx > seriesRight) {
                visibleTextPart = (seriesRight - box.x) / box.width;
            }
            const hasVerticalOverflow = box.y + errPx < seriesTop || box.y + box.height - errPx > seriesBottom;
            const textLength = visibleTextPart === 1 ? text.length : Math.floor(text.length * visibleTextPart) - 1;
            const hasSurroundingSeriesOverflow = this.bboxIntersectsSurroundingSeries(box);
            return { textLength, hasVerticalOverflow, hasSurroundingSeriesOverflow };
        }
        bboxIntersectsSurroundingSeries(box, dx = 0, dy = 0) {
            const { surroundingRadius } = this;
            if (surroundingRadius == null) {
                return false;
            }
            const corners = [
                { x: box.x + dx, y: box.y + dy },
                { x: box.x + box.width + dx, y: box.y + dy },
                { x: box.x + box.width + dx, y: box.y + box.height + dy },
                { x: box.x + dx, y: box.y + box.height + dy },
            ];
            const sur2 = Math.pow(surroundingRadius, 2);
            return corners.some((corner) => Math.pow(corner.x, 2) + Math.pow(corner.y, 2) > sur2);
        }
        computeCalloutLabelCollisionOffsets() {
            const { radiusScale, calloutLabel, calloutLine } = this;
            const { offset, minSpacing } = calloutLabel;
            const innerRadius = radiusScale.convert(0);
            const shouldSkip = (datum) => {
                const label = datum.calloutLabel;
                return !label || datum.outerRadius === 0;
            };
            const fullData = this.nodeData;
            const data = this.nodeData.filter((t) => !shouldSkip(t));
            data.forEach((datum) => {
                const label = datum.calloutLabel;
                if (label == null)
                    return;
                label.hidden = false;
                label.collisionTextAlign = undefined;
                label.collisionOffsetY = 0;
            });
            if (data.length <= 1) {
                return;
            }
            const leftLabels = data.filter((d) => d.midCos < 0).sort((a, b) => a.midSin - b.midSin);
            const rightLabels = data.filter((d) => d.midCos >= 0).sort((a, b) => a.midSin - b.midSin);
            const topLabels = data
                .filter((d) => { var _a; return d.midSin < 0 && ((_a = d.calloutLabel) === null || _a === void 0 ? void 0 : _a.textAlign) === 'center'; })
                .sort((a, b) => a.midCos - b.midCos);
            const bottomLabels = data
                .filter((d) => { var _a; return d.midSin >= 0 && ((_a = d.calloutLabel) === null || _a === void 0 ? void 0 : _a.textAlign) === 'center'; })
                .sort((a, b) => a.midCos - b.midCos);
            const tempTextNode = new Text();
            const getTextBBox = (datum) => {
                var _a;
                const label = datum.calloutLabel;
                if (label == null)
                    return new BBox(0, 0, 0, 0);
                const labelRadius = datum.outerRadius + calloutLine.length + offset;
                const x = datum.midCos * labelRadius;
                const y = datum.midSin * labelRadius + label.collisionOffsetY;
                tempTextNode.text = label.text;
                tempTextNode.x = x;
                tempTextNode.y = y;
                tempTextNode.setFont(this.calloutLabel);
                tempTextNode.setAlign({
                    textAlign: (_a = label.collisionTextAlign) !== null && _a !== void 0 ? _a : label.textAlign,
                    textBaseline: label.textBaseline,
                });
                return tempTextNode.computeBBox();
            };
            const avoidNeighbourYCollision = (label, next, direction) => {
                const box = getTextBBox(label).grow(minSpacing / 2);
                const other = getTextBBox(next).grow(minSpacing / 2);
                // The full collision is not detected, because sometimes
                // the next label can appear behind the label with offset
                const collidesOrBehind = box.x < other.x + other.width &&
                    box.x + box.width > other.x &&
                    (direction === 'to-top' ? box.y < other.y + other.height : box.y + box.height > other.y);
                if (collidesOrBehind) {
                    const dy = direction === 'to-top' ? box.y - other.y - other.height : box.y + box.height - other.y;
                    next.calloutLabel.collisionOffsetY = dy;
                }
            };
            const avoidYCollisions = (labels) => {
                const midLabel = labels.slice().sort((a, b) => Math.abs(a.midSin) - Math.abs(b.midSin))[0];
                const midIndex = labels.indexOf(midLabel);
                for (let i = midIndex - 1; i >= 0; i--) {
                    const prev = labels[i + 1];
                    const next = labels[i];
                    avoidNeighbourYCollision(prev, next, 'to-top');
                }
                for (let i = midIndex + 1; i < labels.length; i++) {
                    const prev = labels[i - 1];
                    const next = labels[i];
                    avoidNeighbourYCollision(prev, next, 'to-bottom');
                }
            };
            const avoidXCollisions = (labels) => {
                const labelsCollideLabelsByY = data.some((datum) => datum.calloutLabel.collisionOffsetY !== 0);
                const boxes = labels.map((label) => getTextBBox(label));
                const paddedBoxes = boxes.map((box) => box.clone().grow(minSpacing / 2));
                let labelsCollideLabelsByX = false;
                for (let i = 0; i < paddedBoxes.length && !labelsCollideLabelsByX; i++) {
                    const box = paddedBoxes[i];
                    for (let j = i + 1; j < labels.length; j++) {
                        const other = paddedBoxes[j];
                        if (box.collidesBBox(other)) {
                            labelsCollideLabelsByX = true;
                            break;
                        }
                    }
                }
                const sectors = fullData.map((datum) => {
                    const { startAngle, endAngle, outerRadius } = datum;
                    return { startAngle, endAngle, innerRadius, outerRadius };
                });
                const labelsCollideSectors = boxes.some((box) => {
                    return sectors.some((sector) => boxCollidesSector(box, sector));
                });
                if (!labelsCollideLabelsByX && !labelsCollideLabelsByY && !labelsCollideSectors) {
                    return;
                }
                labels
                    .filter((d) => d.calloutLabel.textAlign === 'center')
                    .forEach((d) => {
                    const label = d.calloutLabel;
                    if (d.midCos < 0) {
                        label.collisionTextAlign = 'right';
                    }
                    else if (d.midCos > 0) {
                        label.collisionTextAlign = 'left';
                    }
                    else {
                        label.collisionTextAlign = 'center';
                    }
                });
            };
            avoidYCollisions(leftLabels);
            avoidYCollisions(rightLabels);
            avoidXCollisions(topLabels);
            avoidXCollisions(bottomLabels);
        }
        updateCalloutLabelNodes(seriesRect) {
            const { radiusScale, calloutLabel, calloutLine } = this;
            const calloutLength = calloutLine.length;
            const { offset, color } = calloutLabel;
            const tempTextNode = new Text();
            this.calloutLabelSelection.selectByTag(PieNodeTag.Label).forEach((text) => {
                var _a;
                const { datum } = text;
                const label = datum.calloutLabel;
                const radius = radiusScale.convert(datum.radius);
                const outerRadius = Math.max(0, radius);
                if (!(label === null || label === void 0 ? void 0 : label.text) || outerRadius === 0 || label.hidden) {
                    text.visible = false;
                    return;
                }
                const labelRadius = outerRadius + calloutLength + offset;
                const x = datum.midCos * labelRadius;
                const y = datum.midSin * labelRadius + label.collisionOffsetY;
                // Detect text overflow
                const align = {
                    textAlign: (_a = label.collisionTextAlign) !== null && _a !== void 0 ? _a : label.textAlign,
                    textBaseline: label.textBaseline,
                };
                tempTextNode.text = label.text;
                tempTextNode.x = x;
                tempTextNode.y = y;
                tempTextNode.setFont(this.calloutLabel);
                tempTextNode.setAlign(align);
                const box = tempTextNode.computeBBox();
                let displayText = label.text;
                let visible = true;
                if (calloutLabel.avoidCollisions) {
                    const { textLength, hasVerticalOverflow } = this.getLabelOverflow(label.text, box, seriesRect);
                    displayText = label.text.length === textLength ? label.text : `${label.text.substring(0, textLength)}…`;
                    visible = !hasVerticalOverflow;
                }
                text.text = displayText;
                text.x = x;
                text.y = y;
                text.setFont(this.calloutLabel);
                text.setAlign(align);
                text.fill = color;
                text.visible = visible;
            });
        }
        computeLabelsBBox(options, seriesRect) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { calloutLabel, calloutLine } = this;
                const calloutLength = calloutLine.length;
                const { offset, maxCollisionOffset, minSpacing } = calloutLabel;
                if (!calloutLabel.avoidCollisions) {
                    return null;
                }
                yield this.maybeRefreshNodeData();
                this.updateRadiusScale(false);
                this.computeCalloutLabelCollisionOffsets();
                const textBoxes = [];
                const text = new Text();
                let titleBox;
                if (((_a = this.title) === null || _a === void 0 ? void 0 : _a.text) && this.title.enabled) {
                    const dy = this.getTitleTranslationY();
                    if (isFinite(dy)) {
                        text.text = this.title.text;
                        text.x = 0;
                        text.y = dy;
                        text.setFont(this.title);
                        text.setAlign({
                            textBaseline: 'bottom',
                            textAlign: 'center',
                        });
                        titleBox = text.computeBBox();
                        textBoxes.push(titleBox);
                    }
                }
                this.nodeData.forEach((datum) => {
                    var _a;
                    const label = datum.calloutLabel;
                    if (!label || datum.outerRadius === 0) {
                        return null;
                    }
                    const labelRadius = datum.outerRadius + calloutLength + offset;
                    const x = datum.midCos * labelRadius;
                    const y = datum.midSin * labelRadius + label.collisionOffsetY;
                    text.text = label.text;
                    text.x = x;
                    text.y = y;
                    text.setFont(this.calloutLabel);
                    text.setAlign({
                        textAlign: (_a = label.collisionTextAlign) !== null && _a !== void 0 ? _a : label.textAlign,
                        textBaseline: label.textBaseline,
                    });
                    const box = text.computeBBox();
                    label.box = box;
                    // Hide labels that where pushed too far by the collision avoidance algorithm
                    if (Math.abs(label.collisionOffsetY) > maxCollisionOffset) {
                        label.hidden = true;
                        return;
                    }
                    // Hide labels intersecting or above the title
                    if (titleBox) {
                        const seriesTop = seriesRect.y - this.centerY;
                        const titleCleanArea = new BBox(titleBox.x - minSpacing, seriesTop, titleBox.width + 2 * minSpacing, titleBox.y + titleBox.height + minSpacing - seriesTop);
                        if (box.collidesBBox(titleCleanArea)) {
                            label.hidden = true;
                            return;
                        }
                    }
                    if (options.hideWhenNecessary) {
                        const { textLength, hasVerticalOverflow, hasSurroundingSeriesOverflow } = this.getLabelOverflow(label.text, box, seriesRect);
                        const isTooShort = label.text.length > 2 && textLength < 2;
                        if (hasVerticalOverflow || isTooShort || hasSurroundingSeriesOverflow) {
                            label.hidden = true;
                            return;
                        }
                    }
                    label.hidden = false;
                    textBoxes.push(box);
                });
                if (textBoxes.length === 0) {
                    return null;
                }
                return BBox.merge(textBoxes);
            });
        }
        updateSectorLabelNodes() {
            const { radiusScale } = this;
            const innerRadius = radiusScale.convert(0);
            const { fontSize, fontStyle, fontWeight, fontFamily, positionOffset, positionRatio, color } = this.sectorLabel;
            const isDoughnut = innerRadius > 0;
            const singleVisibleSector = this.seriesItemEnabled.filter(Boolean).length === 1;
            this.sectorLabelSelection.each((text, datum) => {
                const { sectorLabel, outerRadius } = datum;
                let isTextVisible = false;
                if (sectorLabel && outerRadius !== 0) {
                    const labelRadius = innerRadius * (1 - positionRatio) + outerRadius * positionRatio + positionOffset;
                    text.fill = color;
                    text.fontStyle = fontStyle;
                    text.fontWeight = fontWeight;
                    text.fontSize = fontSize;
                    text.fontFamily = fontFamily;
                    text.text = sectorLabel.text;
                    const shouldPutTextInCenter = !isDoughnut && singleVisibleSector;
                    if (shouldPutTextInCenter) {
                        text.x = 0;
                        text.y = 0;
                    }
                    else {
                        text.x = datum.midCos * labelRadius;
                        text.y = datum.midSin * labelRadius;
                    }
                    text.textAlign = 'center';
                    text.textBaseline = 'middle';
                    const bbox = text.computeBBox();
                    const corners = [
                        [bbox.x, bbox.y],
                        [bbox.x + bbox.width, bbox.y],
                        [bbox.x + bbox.width, bbox.y + bbox.height],
                        [bbox.x, bbox.y + bbox.height],
                    ];
                    const { startAngle, endAngle } = datum;
                    const sectorBounds = { startAngle, endAngle, innerRadius, outerRadius };
                    if (corners.every(([x, y]) => isPointInSector(x, y, sectorBounds))) {
                        isTextVisible = true;
                    }
                }
                text.visible = isTextVisible;
            });
        }
        updateInnerLabelNodes() {
            const textBBoxes = [];
            const margins = [];
            this.innerLabelsSelection.each((text, datum) => {
                const { fontStyle, fontWeight, fontSize, fontFamily, color } = datum;
                text.fontStyle = fontStyle;
                text.fontWeight = fontWeight;
                text.fontSize = fontSize;
                text.fontFamily = fontFamily;
                text.text = datum.text;
                text.x = 0;
                text.y = 0;
                text.fill = color;
                text.textAlign = 'center';
                text.textBaseline = 'alphabetic';
                textBBoxes.push(text.computeBBox());
                margins.push(datum.margin);
            });
            const getMarginTop = (index) => (index === 0 ? 0 : margins[index]);
            const getMarginBottom = (index) => (index === margins.length - 1 ? 0 : margins[index]);
            const totalHeight = textBBoxes.reduce((sum, bbox, i) => {
                return sum + bbox.height + getMarginTop(i) + getMarginBottom(i);
            }, 0);
            const totalWidth = Math.max(...textBBoxes.map((bbox) => bbox.width));
            const innerRadius = this.getInnerRadius();
            const labelRadius = Math.sqrt(Math.pow(totalWidth / 2, 2) + Math.pow(totalHeight / 2, 2));
            const labelsVisible = labelRadius <= (innerRadius > 0 ? innerRadius : this.getOuterRadius());
            const textBottoms = [];
            for (let i = 0, prev = -totalHeight / 2; i < textBBoxes.length; i++) {
                const bbox = textBBoxes[i];
                const bottom = bbox.height + prev + getMarginTop(i);
                textBottoms.push(bottom);
                prev = bottom + getMarginBottom(i);
            }
            this.innerLabelsSelection.each((text, _datum, index) => {
                text.y = textBottoms[index];
                text.visible = labelsVisible;
            });
        }
        getDatumLegendName(nodeDatum) {
            const { angleKey, calloutLabelKey, sectorLabelKey, legendItemKey } = this;
            const { sectorLabel, calloutLabel, legendItem } = nodeDatum;
            if (legendItemKey && legendItem !== undefined) {
                return legendItem.text;
            }
            else if (calloutLabelKey && calloutLabelKey !== angleKey && (calloutLabel === null || calloutLabel === void 0 ? void 0 : calloutLabel.text) !== undefined) {
                return calloutLabel.text;
            }
            else if (sectorLabelKey && sectorLabelKey !== angleKey && (sectorLabel === null || sectorLabel === void 0 ? void 0 : sectorLabel.text) !== undefined) {
                return sectorLabel.text;
            }
        }
        getTooltipHtml(nodeDatum) {
            var _a;
            if (!this.angleKey) {
                return '';
            }
            const { datum, angleValue, sectorFormat: { fill: color }, } = nodeDatum;
            const title = sanitizeHtml((_a = this.title) === null || _a === void 0 ? void 0 : _a.text);
            const content = isNumber(angleValue) ? toFixed(angleValue) : String(angleValue);
            const labelText = this.getDatumLegendName(nodeDatum);
            return this.tooltip.toTooltipHtml({
                title: title !== null && title !== void 0 ? title : labelText,
                content: title && labelText ? `${labelText}: ${content}` : content,
                backgroundColor: color,
            }, {
                datum,
                title,
                color,
                seriesId: this.id,
                angleKey: this.angleKey,
                angleName: this.angleName,
                radiusKey: this.radiusKey,
                radiusName: this.radiusName,
                calloutLabelKey: this.calloutLabelKey,
                calloutLabelName: this.calloutLabelName,
                sectorLabelKey: this.sectorLabelKey,
                sectorLabelName: this.sectorLabelName,
            });
        }
        getLegendData(legendType) {
            var _a, _b, _c, _d, _e;
            const { processedData, angleKey, calloutLabelKey, sectorLabelKey, legendItemKey, id, dataModel } = this;
            if (!dataModel || !processedData || processedData.data.length === 0 || legendType !== 'category')
                return [];
            if (!legendItemKey &&
                (!calloutLabelKey || calloutLabelKey === angleKey) &&
                (!sectorLabelKey || sectorLabelKey === angleKey))
                return [];
            const { calloutLabelIdx, sectorLabelIdx, legendItemIdx } = this.getProcessedDataIndexes(dataModel);
            const titleText = ((_a = this.title) === null || _a === void 0 ? void 0 : _a.showInLegend) && this.title.text;
            const legendData = [];
            for (let index = 0; index < processedData.data.length; index++) {
                const { datum, values } = processedData.data[index];
                const labelParts = [];
                if (titleText) {
                    labelParts.push(titleText);
                }
                const labels = this.getLabels(datum, 2 * Math.PI, 2 * Math.PI, false, values[calloutLabelIdx], values[sectorLabelIdx], values[legendItemIdx]);
                if (legendItemKey && labels.legendItem !== undefined) {
                    labelParts.push(labels.legendItem.text);
                }
                else if (calloutLabelKey && calloutLabelKey !== angleKey && ((_b = labels.calloutLabel) === null || _b === void 0 ? void 0 : _b.text) !== undefined) {
                    labelParts.push((_c = labels.calloutLabel) === null || _c === void 0 ? void 0 : _c.text);
                }
                else if (sectorLabelKey && sectorLabelKey !== angleKey && ((_d = labels.sectorLabel) === null || _d === void 0 ? void 0 : _d.text) !== undefined) {
                    labelParts.push((_e = labels.sectorLabel) === null || _e === void 0 ? void 0 : _e.text);
                }
                if (labelParts.length === 0)
                    continue;
                const sectorFormat = this.getSectorFormat(datum, index, false);
                legendData.push({
                    legendType: 'category',
                    id,
                    itemId: index,
                    seriesId: id,
                    enabled: this.seriesItemEnabled[index],
                    label: {
                        text: labelParts.join(' - '),
                    },
                    marker: {
                        fill: sectorFormat.fill,
                        stroke: sectorFormat.stroke,
                        fillOpacity: this.fillOpacity,
                        strokeOpacity: this.strokeOpacity,
                        strokeWidth: this.strokeWidth,
                    },
                });
            }
            return legendData;
        }
        onLegendItemClick(event) {
            const { enabled, itemId, series } = event;
            if (series.id === this.id) {
                this.toggleSeriesItem(itemId, enabled);
            }
            else if (series.type === 'pie') {
                this.toggleOtherSeriesItems(series, itemId, enabled);
            }
        }
        toggleSeriesItem(itemId, enabled) {
            this.seriesItemEnabled[itemId] = enabled;
            this.nodeDataRefresh = true;
        }
        toggleOtherSeriesItems(series, itemId, enabled) {
            var _a, _b;
            const { legendItemKey, dataModel } = this;
            if (!legendItemKey || !dataModel)
                return;
            const datumToggledLegendItemValue = series.legendItemKey && ((_a = series.data) === null || _a === void 0 ? void 0 : _a.find((_, index) => index === itemId)[series.legendItemKey]);
            if (!datumToggledLegendItemValue)
                return;
            const legendItemIdx = dataModel.resolveProcessedDataIndexById(this, `legendItemValue`).index;
            (_b = this.processedData) === null || _b === void 0 ? void 0 : _b.data.forEach(({ values }, datumItemId) => {
                if (values[legendItemIdx] === datumToggledLegendItemValue) {
                    this.toggleSeriesItem(datumItemId, enabled);
                }
            });
        }
        animateEmptyUpdateReady(_data) {
            const { animationManager } = this.ctx;
            const fns = preparePieSeriesAnimationFunctions(true, this.rotation, this.radiusScale, this.previousRadiusScale);
            fromToMotion(this.id, 'nodes', animationManager, [this.itemSelection, this.highlightSelection], fns.nodes);
            fromToMotion(this.id, `innerCircle`, animationManager, [this.innerCircleSelection], fns.innerCircle);
            seriesLabelFadeInAnimation(this, 'callout', animationManager, [this.calloutLabelSelection]);
            seriesLabelFadeInAnimation(this, 'sector', animationManager, [this.sectorLabelSelection]);
            seriesLabelFadeInAnimation(this, 'inner', animationManager, [this.innerLabelsSelection]);
            this.previousRadiusScale.range = this.radiusScale.range;
        }
        animateWaitingUpdateReady() {
            var _a, _b, _c, _d, _e, _f;
            const { itemSelection, highlightSelection, processedData, radiusScale, previousRadiusScale } = this;
            const { animationManager } = this.ctx;
            const diff = (_a = processedData === null || processedData === void 0 ? void 0 : processedData.reduced) === null || _a === void 0 ? void 0 : _a.diff;
            this.ctx.animationManager.stopByAnimationGroupId(this.id);
            const supportedDiff = ((_b = diff === null || diff === void 0 ? void 0 : diff.moved.length) !== null && _b !== void 0 ? _b : 0) === 0 && (diff === null || diff === void 0 ? void 0 : diff.addedIndices.every((i) => !diff.removedIndices.includes(i)));
            const hasKeys = ((_c = processedData === null || processedData === void 0 ? void 0 : processedData.defs.keys.length) !== null && _c !== void 0 ? _c : 0) > 0;
            const hasUniqueKeys = (_f = (_e = (_d = processedData === null || processedData === void 0 ? void 0 : processedData.reduced) === null || _d === void 0 ? void 0 : _d.animationValidation) === null || _e === void 0 ? void 0 : _e.uniqueKeys) !== null && _f !== void 0 ? _f : true;
            if (!supportedDiff || !hasKeys || !hasUniqueKeys) {
                this.ctx.animationManager.skipCurrentBatch();
            }
            const fns = preparePieSeriesAnimationFunctions(false, this.rotation, radiusScale, previousRadiusScale);
            fromToMotion(this.id, 'nodes', animationManager, [itemSelection, highlightSelection], fns.nodes, (_, datum) => this.getDatumId(datum), diff);
            fromToMotion(this.id, `innerCircle`, animationManager, [this.innerCircleSelection], fns.innerCircle);
            seriesLabelFadeInAnimation(this, 'callout', this.ctx.animationManager, [this.calloutLabelSelection]);
            seriesLabelFadeInAnimation(this, 'sector', this.ctx.animationManager, [this.sectorLabelSelection]);
            seriesLabelFadeInAnimation(this, 'inner', this.ctx.animationManager, [this.innerLabelsSelection]);
            this.previousRadiusScale.range = this.radiusScale.range;
        }
        animateClearingUpdateEmpty() {
            const { itemSelection, highlightSelection, radiusScale, previousRadiusScale } = this;
            const { animationManager } = this.ctx;
            const fns = preparePieSeriesAnimationFunctions(false, this.rotation, radiusScale, previousRadiusScale);
            fromToMotion(this.id, 'nodes', animationManager, [itemSelection, highlightSelection], fns.nodes);
            fromToMotion(this.id, `innerCircle`, animationManager, [this.innerCircleSelection], fns.innerCircle);
            seriesLabelFadeOutAnimation(this, 'callout', this.ctx.animationManager, [this.calloutLabelSelection]);
            seriesLabelFadeOutAnimation(this, 'sector', this.ctx.animationManager, [this.sectorLabelSelection]);
            seriesLabelFadeOutAnimation(this, 'inner', this.ctx.animationManager, [this.innerLabelsSelection]);
            this.previousRadiusScale.range = this.radiusScale.range;
        }
        getDatumIdFromData(datum) {
            var _a, _b, _c;
            const { calloutLabelKey, sectorLabelKey, legendItemKey } = this;
            if (!((_c = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.animationValidation) === null || _c === void 0 ? void 0 : _c.uniqueKeys)) {
                return undefined;
            }
            if (legendItemKey) {
                return datum[legendItemKey];
            }
            else if (calloutLabelKey) {
                return datum[calloutLabelKey];
            }
            else if (sectorLabelKey) {
                return datum[sectorLabelKey];
            }
        }
        getDatumId(datum) {
            var _a;
            const { index } = datum;
            return (_a = this.getDatumIdFromData(datum.datum)) !== null && _a !== void 0 ? _a : `${index}`;
        }
        onDataChange() {
            this.processSeriesItemEnabled();
        }
    }
    PieSeries.className = 'PieSeries';
    PieSeries.type = 'pie';
    __decorate([
        Validate(STRING),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "angleKey", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "angleName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], PieSeries.prototype, "radiusKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], PieSeries.prototype, "radiusName", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], PieSeries.prototype, "radiusMin", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], PieSeries.prototype, "radiusMax", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], PieSeries.prototype, "calloutLabelKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], PieSeries.prototype, "calloutLabelName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], PieSeries.prototype, "sectorLabelKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], PieSeries.prototype, "sectorLabelName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], PieSeries.prototype, "legendItemKey", void 0);
    __decorate([
        Validate(COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], PieSeries.prototype, "fills", void 0);
    __decorate([
        Validate(COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], PieSeries.prototype, "strokes", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_LINE_DASH),
        __metadata("design:type", Array)
    ], PieSeries.prototype, "lineDash", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], PieSeries.prototype, "lineDashOffset", void 0);
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], PieSeries.prototype, "formatter", void 0);
    __decorate([
        Validate(NUMBER$1(-360, 360)),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "rotation", void 0);
    __decorate([
        Validate(NUMBER$1()),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "outerRadiusOffset", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "outerRadiusRatio", void 0);
    __decorate([
        Validate(NUMBER$1()),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "innerRadiusOffset", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "innerRadiusRatio", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PieSeries.prototype, "strokeWidth", void 0);

    const JSON_APPLY_PLUGINS = {
        constructors: {},
        constructedArrays: new WeakMap(),
    };
    function assignJsonApplyConstructedArray(array, ctor) {
        var _a;
        (_a = JSON_APPLY_PLUGINS.constructedArrays) === null || _a === void 0 ? void 0 : _a.set(array, ctor);
    }
    const JSON_APPLY_OPTIONS = {
        constructors: {
            title: Caption,
            subtitle: Caption,
            footnote: Caption,
            shadow: DropShadow,
            innerCircle: DoughnutInnerCircle,
            'axes[].title': AxisTitle,
            'series[].innerLabels[]': DoughnutInnerLabel,
        },
        allowedTypes: {
            'legend.pagination.marker.shape': ['primitive', 'function'],
            'series[].marker.shape': ['primitive', 'function'],
            'axis[].tick.count': ['primitive', 'class-instance'],
        },
    };
    function getJsonApplyOptions() {
        return {
            constructors: Object.assign(Object.assign({}, JSON_APPLY_OPTIONS.constructors), JSON_APPLY_PLUGINS.constructors),
            constructedArrays: JSON_APPLY_PLUGINS.constructedArrays,
            allowedTypes: Object.assign({}, JSON_APPLY_OPTIONS.allowedTypes),
        };
    }

    class Range extends Shape {
        constructor(opts = {}) {
            super(opts);
            this.x1 = 0;
            this.y1 = 0;
            this.x2 = 0;
            this.y2 = 0;
            this.startLine = false;
            this.endLine = false;
            this.isRange = false;
            this.restoreOwnStyles();
        }
        computeBBox() {
            return new BBox(this.x1, this.y1, this.x2 - this.x1, this.y2 - this.y1);
        }
        isPointInPath(_x, _y) {
            return false;
        }
        render(renderCtx) {
            var _a;
            const { ctx, forceRender, stats } = renderCtx;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped += this.nodeCount.count;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            let { x1, y1, x2, y2 } = this;
            x1 = this.align(x1);
            y1 = this.align(y1);
            x2 = this.align(x2);
            y2 = this.align(y2);
            const { fill, opacity, isRange } = this;
            const fillActive = !!(isRange && fill);
            if (fillActive) {
                const { fillOpacity } = this;
                ctx.fillStyle = fill;
                ctx.globalAlpha = opacity * fillOpacity;
                ctx.beginPath();
                ctx.moveTo(x1, y1);
                ctx.lineTo(x2, y1);
                ctx.lineTo(x2, y2);
                ctx.lineTo(x1, y2);
                ctx.closePath();
                ctx.fill();
            }
            const { stroke, strokeWidth, startLine, endLine } = this;
            const strokeActive = !!((startLine || endLine) && stroke && strokeWidth);
            if (strokeActive) {
                const { strokeOpacity, lineDash, lineDashOffset, lineCap, lineJoin } = this;
                ctx.strokeStyle = stroke;
                ctx.globalAlpha = opacity * strokeOpacity;
                ctx.lineWidth = strokeWidth;
                if (lineDash) {
                    ctx.setLineDash(lineDash);
                }
                if (lineDashOffset) {
                    ctx.lineDashOffset = lineDashOffset;
                }
                if (lineCap) {
                    ctx.lineCap = lineCap;
                }
                if (lineJoin) {
                    ctx.lineJoin = lineJoin;
                }
                ctx.beginPath();
                if (startLine) {
                    ctx.moveTo(x1, y1);
                    ctx.lineTo(x2, y1);
                }
                if (endLine) {
                    ctx.moveTo(x2, y2);
                    ctx.lineTo(x1, y2);
                }
                ctx.stroke();
            }
            (_a = this.fillShadow) === null || _a === void 0 ? void 0 : _a.markClean();
            super.render(renderCtx);
        }
    }
    Range.className = 'Range';
    Range.defaultStyles = Object.assign(Object.assign({}, Shape.defaultStyles), { strokeWidth: 1 });
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Range.prototype, "x1", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Range.prototype, "y1", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Range.prototype, "x2", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Number)
    ], Range.prototype, "y2", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Boolean)
    ], Range.prototype, "startLine", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Boolean)
    ], Range.prototype, "endLine", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MINOR }),
        __metadata("design:type", Boolean)
    ], Range.prototype, "isRange", void 0);

    const horizontalCrosslineTranslationDirections = {
        top: { xTranslationDirection: 0, yTranslationDirection: -1 },
        bottom: { xTranslationDirection: 0, yTranslationDirection: 1 },
        left: { xTranslationDirection: -1, yTranslationDirection: 0 },
        right: { xTranslationDirection: 1, yTranslationDirection: 0 },
        topLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
        topRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
        bottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
        bottomRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
        inside: { xTranslationDirection: 0, yTranslationDirection: 0 },
        insideLeft: { xTranslationDirection: 1, yTranslationDirection: 0 },
        insideRight: { xTranslationDirection: -1, yTranslationDirection: 0 },
        insideTop: { xTranslationDirection: 0, yTranslationDirection: 1 },
        insideBottom: { xTranslationDirection: 0, yTranslationDirection: -1 },
        insideTopLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
        insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
        insideTopRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
        insideBottomRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
    };
    const verticalCrossLineTranslationDirections = {
        top: { xTranslationDirection: 1, yTranslationDirection: 0 },
        bottom: { xTranslationDirection: -1, yTranslationDirection: 0 },
        left: { xTranslationDirection: 0, yTranslationDirection: -1 },
        right: { xTranslationDirection: 0, yTranslationDirection: 1 },
        topLeft: { xTranslationDirection: -1, yTranslationDirection: -1 },
        topRight: { xTranslationDirection: -1, yTranslationDirection: 1 },
        bottomLeft: { xTranslationDirection: 1, yTranslationDirection: -1 },
        bottomRight: { xTranslationDirection: 1, yTranslationDirection: 1 },
        inside: { xTranslationDirection: 0, yTranslationDirection: 0 },
        insideLeft: { xTranslationDirection: 0, yTranslationDirection: 1 },
        insideRight: { xTranslationDirection: 0, yTranslationDirection: -1 },
        insideTop: { xTranslationDirection: -1, yTranslationDirection: 0 },
        insideBottom: { xTranslationDirection: 1, yTranslationDirection: 0 },
        insideTopLeft: { xTranslationDirection: -1, yTranslationDirection: 1 },
        insideBottomLeft: { xTranslationDirection: 1, yTranslationDirection: 1 },
        insideTopRight: { xTranslationDirection: -1, yTranslationDirection: -1 },
        insideBottomRight: { xTranslationDirection: 1, yTranslationDirection: -1 },
    };
    function calculateLabelTranslation({ yDirection, padding = 0, position = 'top', bbox, }) {
        const crossLineTranslationDirections = yDirection
            ? horizontalCrosslineTranslationDirections
            : verticalCrossLineTranslationDirections;
        const { xTranslationDirection, yTranslationDirection } = crossLineTranslationDirections[position];
        const w = yDirection ? bbox.width : bbox.height;
        const h = yDirection ? bbox.height : bbox.width;
        const xTranslation = xTranslationDirection * (padding + w / 2);
        const yTranslation = yTranslationDirection * (padding + h / 2);
        return {
            xTranslation,
            yTranslation,
        };
    }
    function calculateLabelChartPadding({ yDirection, bbox, padding = 0, position = 'top', }) {
        const chartPadding = {};
        if (position.startsWith('inside'))
            return chartPadding;
        if (position === 'top' && !yDirection) {
            chartPadding.top = padding + bbox.height;
        }
        else if (position === 'bottom' && !yDirection) {
            chartPadding.bottom = padding + bbox.height;
        }
        else if (position === 'left' && yDirection) {
            chartPadding.left = padding + bbox.width;
        }
        else if (position === 'right' && yDirection) {
            chartPadding.right = padding + bbox.width;
        }
        return chartPadding;
    }
    const POSITION_TOP_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {
        if (yDirection) {
            return { x: xEnd / 2, y: yStart };
        }
        else {
            return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
    };
    const POSITION_LEFT_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {
        if (yDirection) {
            return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
        else {
            return { x: xEnd / 2, y: yStart };
        }
    };
    const POSITION_RIGHT_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {
        if (yDirection) {
            return { x: xEnd, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
        else {
            return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };
        }
    };
    const POSITION_BOTTOM_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {
        if (yDirection) {
            return { x: xEnd / 2, y: !isNaN(yEnd) ? yEnd : yStart };
        }
        else {
            return { x: xStart, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
        }
    };
    const POSITION_INSIDE_COORDINATES = ({ xEnd, yStart, yEnd }) => {
        return { x: xEnd / 2, y: !isNaN(yEnd) ? (yStart + yEnd) / 2 : yStart };
    };
    const POSITION_TOP_LEFT_COORDINATES = ({ yDirection, xStart, xEnd, yStart }) => {
        if (yDirection) {
            return { x: xStart / 2, y: yStart };
        }
        else {
            return { x: xEnd, y: yStart };
        }
    };
    const POSITION_BOTTOM_LEFT_COORDINATES = ({ yDirection, xStart, yStart, yEnd }) => {
        if (yDirection) {
            return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };
        }
        else {
            return { x: xStart, y: yStart };
        }
    };
    const POSITION_TOP_RIGHT_COORDINATES = ({ yDirection, xEnd, yStart, yEnd }) => {
        if (yDirection) {
            return { x: xEnd, y: yStart };
        }
        else {
            return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };
        }
    };
    const POSITION_BOTTOM_RIGHT_COORDINATES = ({ yDirection, xStart, xEnd, yStart, yEnd }) => {
        if (yDirection) {
            return { x: xEnd, y: !isNaN(yEnd) ? yEnd : yStart };
        }
        else {
            return { x: xStart, y: !isNaN(yEnd) ? yEnd : yStart };
        }
    };
    const labeldDirectionHandling = {
        top: { c: POSITION_TOP_COORDINATES },
        bottom: { c: POSITION_BOTTOM_COORDINATES },
        left: { c: POSITION_LEFT_COORDINATES },
        right: { c: POSITION_RIGHT_COORDINATES },
        topLeft: { c: POSITION_TOP_LEFT_COORDINATES },
        topRight: { c: POSITION_TOP_RIGHT_COORDINATES },
        bottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },
        bottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },
        inside: { c: POSITION_INSIDE_COORDINATES },
        insideLeft: { c: POSITION_LEFT_COORDINATES },
        insideRight: { c: POSITION_RIGHT_COORDINATES },
        insideTop: { c: POSITION_TOP_COORDINATES },
        insideBottom: { c: POSITION_BOTTOM_COORDINATES },
        insideTopLeft: { c: POSITION_TOP_LEFT_COORDINATES },
        insideBottomLeft: { c: POSITION_BOTTOM_LEFT_COORDINATES },
        insideTopRight: { c: POSITION_TOP_RIGHT_COORDINATES },
        insideBottomRight: { c: POSITION_BOTTOM_RIGHT_COORDINATES },
    };

    const CROSSLINE_LABEL_POSITIONS = [
        'top',
        'left',
        'right',
        'bottom',
        'topLeft',
        'topRight',
        'bottomLeft',
        'bottomRight',
        'inside',
        'insideLeft',
        'insideRight',
        'insideTop',
        'insideBottom',
        'insideTopLeft',
        'insideBottomLeft',
        'insideTopRight',
        'insideBottomRight',
    ];
    const OPT_CROSSLINE_LABEL_POSITION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => CROSSLINE_LABEL_POSITIONS.includes(v)), `expecting an optional crossLine label position keyword such as 'topLeft', 'topRight' or 'inside'`);
    const OPT_CROSSLINE_TYPE = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => v === 'range' || v === 'line'), `expecting a crossLine type keyword such as 'range' or 'line'`);
    class CartesianCrossLineLabel {
        constructor() {
            this.enabled = undefined;
            this.text = undefined;
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 14;
            this.fontFamily = 'Verdana, sans-serif';
            /**
             * The padding between the label and the line.
             */
            this.padding = 5;
            /**
             * The color of the labels.
             */
            this.color = 'rgba(87, 87, 87, 1)';
            this.position = undefined;
            this.rotation = undefined;
            this.parallel = undefined;
        }
    }
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], CartesianCrossLineLabel.prototype, "enabled", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], CartesianCrossLineLabel.prototype, "text", void 0);
    __decorate([
        Validate(OPT_FONT_STYLE),
        __metadata("design:type", String)
    ], CartesianCrossLineLabel.prototype, "fontStyle", void 0);
    __decorate([
        Validate(OPT_FONT_WEIGHT),
        __metadata("design:type", String)
    ], CartesianCrossLineLabel.prototype, "fontWeight", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], CartesianCrossLineLabel.prototype, "fontSize", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", String)
    ], CartesianCrossLineLabel.prototype, "fontFamily", void 0);
    __decorate([
        Validate(NUMBER$1()),
        __metadata("design:type", Number)
    ], CartesianCrossLineLabel.prototype, "padding", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], CartesianCrossLineLabel.prototype, "color", void 0);
    __decorate([
        Validate(OPT_CROSSLINE_LABEL_POSITION),
        __metadata("design:type", String)
    ], CartesianCrossLineLabel.prototype, "position", void 0);
    __decorate([
        Validate(OPT_NUMBER(-360, 360)),
        __metadata("design:type", Number)
    ], CartesianCrossLineLabel.prototype, "rotation", void 0);
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], CartesianCrossLineLabel.prototype, "parallel", void 0);
    class CartesianCrossLine {
        constructor() {
            this.id = createId(this);
            this.enabled = undefined;
            this.type = undefined;
            this.range = undefined;
            this.value = undefined;
            this.fill = undefined;
            this.fillOpacity = undefined;
            this.stroke = undefined;
            this.strokeWidth = undefined;
            this.strokeOpacity = undefined;
            this.lineDash = undefined;
            this.label = new CartesianCrossLineLabel();
            this.scale = undefined;
            this.clippedRange = [-Infinity, Infinity];
            this.gridLength = 0;
            this.sideFlag = -1;
            this.parallelFlipRotation = 0;
            this.regularFlipRotation = 0;
            this.direction = ChartAxisDirection.X;
            this.group = new Group({ name: `${this.id}`, layer: true, zIndex: CartesianCrossLine.LINE_LAYER_ZINDEX });
            this.crossLineRange = new Range();
            this.crossLineLabel = new Text();
            this.labelPoint = undefined;
            this.data = [];
            this.startLine = false;
            this.endLine = false;
            this.isRange = false;
            const { group, crossLineRange, crossLineLabel } = this;
            group.append([crossLineRange, crossLineLabel]);
            crossLineRange.pointerEvents = PointerEvents.None;
        }
        update(visible) {
            if (!this.enabled || !visible || this.data.length === 0) {
                this.group.visible = false;
                return;
            }
            this.group.visible = true;
            this.group.zIndex = this.getZIndex(this.isRange);
            this.updateNodes();
        }
        calculateLayout(visible) {
            if (!visible) {
                return;
            }
            const dataCreated = this.createNodeData();
            if (!dataCreated) {
                return;
            }
            const { sideFlag, gridLength, data } = this;
            const boxes = [];
            const x1 = 0;
            const x2 = sideFlag * gridLength;
            const y1 = data[0];
            const y2 = data[1];
            const crossLineBox = new BBox(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x1 - x2), Math.abs(y1 - y2));
            boxes.push(crossLineBox);
            const labelBox = this.computeLabelBBox();
            if (labelBox) {
                boxes.push(labelBox);
            }
            return BBox.merge(boxes);
        }
        updateNodes() {
            this.updateRangeNode();
            if (this.label.enabled) {
                this.updateLabel();
                this.positionLabel();
            }
        }
        createNodeData() {
            var _a, _b;
            const { scale, gridLength, sideFlag, direction, label: { position = 'top' }, clippedRange, strokeWidth = 0, } = this;
            this.data = [];
            if (!scale) {
                return false;
            }
            const bandwidth = (_a = scale.bandwidth) !== null && _a !== void 0 ? _a : 0;
            const clippedRangeClamper = (x) => Math.max(Math.min(...clippedRange), Math.min(Math.max(...clippedRange), x));
            const [xStart, xEnd] = [0, sideFlag * gridLength];
            let [yStart, yEnd] = this.getRange();
            let [clampedYStart, clampedYEnd] = [
                Number(scale.convert(yStart, { clampMode: 'clamped' })),
                scale.convert(yEnd, { clampMode: 'clamped' }) + bandwidth,
            ];
            clampedYStart = clippedRangeClamper(clampedYStart);
            clampedYEnd = clippedRangeClamper(clampedYEnd);
            [yStart, yEnd] = [Number(scale.convert(yStart)), scale.convert(yEnd) + bandwidth];
            const validRange = !isNaN(clampedYStart) &&
                !isNaN(clampedYEnd) &&
                (yStart === clampedYStart || yEnd === clampedYEnd || clampedYStart !== clampedYEnd) &&
                Math.abs(clampedYEnd - clampedYStart) > 0;
            if (validRange) {
                const reverse = clampedYStart !== Math.min(clampedYStart, clampedYEnd);
                if (reverse) {
                    [clampedYStart, clampedYEnd] = [
                        Math.min(clampedYStart, clampedYEnd),
                        Math.max(clampedYStart, clampedYEnd),
                    ];
                    [yStart, yEnd] = [yEnd, yStart];
                }
            }
            this.isRange = validRange;
            this.startLine = !isNaN(yStart) && strokeWidth > 0 && yStart === clampedYStart;
            this.endLine = !isNaN(yEnd) && strokeWidth > 0 && yEnd === clampedYEnd;
            if (!validRange && !this.startLine && !this.endLine) {
                return false;
            }
            this.data = [clampedYStart, clampedYEnd];
            if (this.label.enabled) {
                const yDirection = direction === ChartAxisDirection.Y;
                const { c = POSITION_TOP_COORDINATES } = (_b = labeldDirectionHandling[position]) !== null && _b !== void 0 ? _b : {};
                const { x: labelX, y: labelY } = c({
                    yDirection,
                    xStart,
                    xEnd,
                    yStart: clampedYStart,
                    yEnd: clampedYEnd,
                });
                this.labelPoint = {
                    x: labelX,
                    y: labelY,
                };
            }
            return true;
        }
        updateRangeNode() {
            var _a;
            const { crossLineRange, sideFlag, gridLength, data, startLine, endLine, isRange, fill, fillOpacity, stroke, strokeWidth, lineDash, } = this;
            crossLineRange.x1 = 0;
            crossLineRange.x2 = sideFlag * gridLength;
            crossLineRange.y1 = data[0];
            crossLineRange.y2 = data[1];
            crossLineRange.startLine = startLine;
            crossLineRange.endLine = endLine;
            crossLineRange.isRange = isRange;
            crossLineRange.fill = fill;
            crossLineRange.fillOpacity = fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1;
            crossLineRange.stroke = stroke;
            crossLineRange.strokeWidth = strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 1;
            crossLineRange.strokeOpacity = (_a = this.strokeOpacity) !== null && _a !== void 0 ? _a : 1;
            crossLineRange.lineDash = lineDash;
        }
        updateLabel() {
            const { crossLineLabel, label } = this;
            if (!label.text) {
                return;
            }
            crossLineLabel.fontStyle = label.fontStyle;
            crossLineLabel.fontWeight = label.fontWeight;
            crossLineLabel.fontSize = label.fontSize;
            crossLineLabel.fontFamily = label.fontFamily;
            crossLineLabel.fill = label.color;
            crossLineLabel.text = label.text;
        }
        positionLabel() {
            const { crossLineLabel, labelPoint: { x = undefined, y = undefined } = {}, label: { parallel, rotation, position = 'top', padding = 0 }, direction, parallelFlipRotation, regularFlipRotation, } = this;
            if (x === undefined || y === undefined) {
                return;
            }
            const { defaultRotation, configuredRotation } = calculateLabelRotation({
                rotation,
                parallel,
                regularFlipRotation,
                parallelFlipRotation,
            });
            crossLineLabel.rotation = defaultRotation + configuredRotation;
            crossLineLabel.textBaseline = 'middle';
            crossLineLabel.textAlign = 'center';
            const bbox = crossLineLabel.computeTransformedBBox();
            if (!bbox) {
                return;
            }
            const yDirection = direction === ChartAxisDirection.Y;
            const { xTranslation, yTranslation } = calculateLabelTranslation({
                yDirection,
                padding,
                position,
                bbox,
            });
            crossLineLabel.translationX = x + xTranslation;
            crossLineLabel.translationY = y + yTranslation;
        }
        getZIndex(isRange = false) {
            if (isRange) {
                return CartesianCrossLine.RANGE_LAYER_ZINDEX;
            }
            return CartesianCrossLine.LINE_LAYER_ZINDEX;
        }
        getRange() {
            const { value, range, scale } = this;
            const isContinuous = ContinuousScale.is(scale);
            let [start, end] = range !== null && range !== void 0 ? range : [value, undefined];
            if (!isContinuous && end === undefined) {
                end = start;
            }
            start = checkDatum(start, isContinuous) != null ? start : undefined;
            end = checkDatum(end, isContinuous) != null ? end : undefined;
            if (isContinuous && start === end) {
                end = undefined;
            }
            if (start === undefined && end !== undefined) {
                start = end;
                end = undefined;
            }
            return [start, end];
        }
        computeLabelBBox() {
            const { label } = this;
            if (!label.enabled) {
                return undefined;
            }
            const tempText = new Text();
            tempText.fontFamily = label.fontFamily;
            tempText.fontSize = label.fontSize;
            tempText.fontStyle = label.fontStyle;
            tempText.fontWeight = label.fontWeight;
            tempText.text = label.text;
            const { labelPoint: { x = undefined, y = undefined } = {}, label: { parallel, rotation, position = 'top', padding = 0 }, direction, parallelFlipRotation, regularFlipRotation, } = this;
            if (x === undefined || y === undefined) {
                return undefined;
            }
            const { configuredRotation } = calculateLabelRotation({
                rotation,
                parallel,
                regularFlipRotation,
                parallelFlipRotation,
            });
            tempText.rotation = configuredRotation;
            tempText.textBaseline = 'middle';
            tempText.textAlign = 'center';
            const bbox = tempText.computeTransformedBBox();
            if (!bbox) {
                return undefined;
            }
            const yDirection = direction === ChartAxisDirection.Y;
            const { xTranslation, yTranslation } = calculateLabelTranslation({
                yDirection,
                padding,
                position,
                bbox,
            });
            tempText.translationX = x + xTranslation;
            tempText.translationY = y + yTranslation;
            return tempText.computeTransformedBBox();
        }
        calculatePadding(padding) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const { isRange, startLine, endLine, direction, label: { padding: labelPadding = 0, position = 'top' }, } = this;
            if (!isRange && !startLine && !endLine) {
                return;
            }
            const crossLineLabelBBox = this.computeLabelBBox();
            const labelX = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.x;
            const labelY = crossLineLabelBBox === null || crossLineLabelBBox === void 0 ? void 0 : crossLineLabelBBox.y;
            if (!crossLineLabelBBox || labelX == undefined || labelY == undefined) {
                return;
            }
            const chartPadding = calculateLabelChartPadding({
                yDirection: direction === ChartAxisDirection.Y,
                padding: labelPadding,
                position,
                bbox: crossLineLabelBBox,
            });
            padding.left = Math.max((_a = padding.left) !== null && _a !== void 0 ? _a : 0, (_b = chartPadding.left) !== null && _b !== void 0 ? _b : 0);
            padding.right = Math.max((_c = padding.right) !== null && _c !== void 0 ? _c : 0, (_d = chartPadding.right) !== null && _d !== void 0 ? _d : 0);
            padding.top = Math.max((_e = padding.top) !== null && _e !== void 0 ? _e : 0, (_f = chartPadding.top) !== null && _f !== void 0 ? _f : 0);
            padding.bottom = Math.max((_g = padding.bottom) !== null && _g !== void 0 ? _g : 0, (_h = chartPadding.bottom) !== null && _h !== void 0 ? _h : 0);
        }
    }
    CartesianCrossLine.LINE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_LINE_ZINDEX;
    CartesianCrossLine.RANGE_LAYER_ZINDEX = Layers.SERIES_CROSSLINE_RANGE_ZINDEX;
    CartesianCrossLine.className = 'CrossLine';
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], CartesianCrossLine.prototype, "enabled", void 0);
    __decorate([
        Validate(OPT_CROSSLINE_TYPE),
        __metadata("design:type", String)
    ], CartesianCrossLine.prototype, "type", void 0);
    __decorate([
        Validate(OPT_ARRAY(2)),
        __metadata("design:type", Array)
    ], CartesianCrossLine.prototype, "range", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], CartesianCrossLine.prototype, "fill", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        __metadata("design:type", Number)
    ], CartesianCrossLine.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], CartesianCrossLine.prototype, "stroke", void 0);
    __decorate([
        Validate(OPT_NUMBER()),
        __metadata("design:type", Number)
    ], CartesianCrossLine.prototype, "strokeWidth", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        __metadata("design:type", Number)
    ], CartesianCrossLine.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_LINE_DASH),
        __metadata("design:type", Array)
    ], CartesianCrossLine.prototype, "lineDash", void 0);

    const identity = (x) => x;
    class LogScale extends ContinuousScale {
        constructor() {
            super([1, 10], [0, 1]);
            this.type = 'log';
            this.base = 10;
            this.cacheProps = ['domain', 'range', 'nice', 'tickCount', 'base'];
            this.baseLog = identity;
            this.basePow = identity;
            this.log = (x) => {
                return this.domain[0] >= 0 ? this.baseLog(x) : -this.baseLog(-x);
            };
            this.pow = (x) => {
                return this.domain[0] >= 0 ? this.basePow(x) : -this.basePow(-x);
            };
            // Handling <1 and crossing 0 cases is tricky, easiest solution is to default to clamping.
            this.defaultClampMode = 'clamped';
        }
        toDomain(d) {
            return d;
        }
        transform(x) {
            return this.domain[0] >= 0 ? Math.log(x) : -Math.log(-x);
        }
        transformInvert(x) {
            return this.domain[0] >= 0 ? Math.exp(x) : -Math.exp(-x);
        }
        update() {
            if (!this.domain || this.domain.length < 2) {
                return;
            }
            this.updateLogFn();
            this.updatePowFn();
            if (this.nice) {
                this.updateNiceDomain();
            }
        }
        updateLogFn() {
            const { base } = this;
            let log;
            if (base === 10) {
                log = Math.log10;
            }
            else if (base === Math.E) {
                log = Math.log;
            }
            else if (base === 2) {
                log = Math.log2;
            }
            else {
                const logBase = Math.log(base);
                log = (x) => Math.log(x) / logBase;
            }
            this.baseLog = log;
        }
        updatePowFn() {
            const { base } = this;
            let pow;
            if (base === 10) {
                pow = LogScale.pow10;
            }
            else if (base === Math.E) {
                pow = Math.exp;
            }
            else {
                pow = (x) => Math.pow(base, x);
            }
            this.basePow = pow;
        }
        updateNiceDomain() {
            const [d0, d1] = this.domain;
            const n0 = this.pow(Math.floor(this.log(d0)));
            const n1 = this.pow(Math.ceil(this.log(d1)));
            this.niceDomain = [n0, n1];
        }
        static pow10(x) {
            return x >= 0 ? Math.pow(10, x) : 1 / Math.pow(10, -x);
        }
        ticks() {
            var _a;
            const count = (_a = this.tickCount) !== null && _a !== void 0 ? _a : 10;
            if (!this.domain || this.domain.length < 2 || count < 1) {
                return [];
            }
            this.refresh();
            const base = this.base;
            const [d0, d1] = this.getDomain();
            let p0 = this.log(d0);
            let p1 = this.log(d1);
            if (this.interval) {
                const step = Math.abs(this.interval);
                const absDiff = Math.abs(p1 - p0);
                const ticks = range$1(p0, p1, Math.min(absDiff, step))
                    .map((x) => this.pow(x))
                    .filter((t) => t >= d0 && t <= d1);
                if (!this.isDenseInterval({ start: d0, stop: d1, interval: step, count: ticks.length })) {
                    return ticks;
                }
            }
            const isBaseInteger = base % 1 === 0;
            const isDiffLarge = p1 - p0 >= count;
            if (!isBaseInteger || isDiffLarge) {
                // Returns [10^1, 10^2, 10^3, 10^4, ...]
                return ticks(p0, p1, Math.min(p1 - p0, count)).map((x) => this.pow(x));
            }
            const ticks$1 = [];
            const isPositive = d0 > 0;
            p0 = Math.floor(p0) - 1;
            p1 = Math.round(p1) + 1;
            const min = Math.min(...this.range);
            const max = Math.max(...this.range);
            const availableSpacing = (max - min) / count;
            let lastTickPosition = Infinity;
            for (let p = p0; p <= p1; p++) {
                const nextMagnitudeTickPosition = this.convert(this.pow(p + 1));
                for (let k = 1; k < base; k++) {
                    const q = isPositive ? k : base - k + 1;
                    const t = this.pow(p) * q;
                    const tickPosition = this.convert(t);
                    const prevSpacing = Math.abs(lastTickPosition - tickPosition);
                    const nextSpacing = Math.abs(tickPosition - nextMagnitudeTickPosition);
                    const fits = prevSpacing >= availableSpacing && nextSpacing >= availableSpacing;
                    if (t >= d0 && t <= d1 && (k === 1 || fits)) {
                        ticks$1.push(t);
                        lastTickPosition = tickPosition;
                    }
                }
            }
            return ticks$1;
        }
        tickFormat({ count, ticks, specifier, }) {
            const { base } = this;
            if (specifier == null) {
                specifier = base === 10 ? '.0e' : ',';
            }
            if (typeof specifier === 'string') {
                specifier = format(specifier);
            }
            if (count === Infinity) {
                return specifier;
            }
            if (ticks == null) {
                this.ticks();
            }
            return (d) => {
                return specifier(d);
            };
        }
    }
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], LogScale.prototype, "base", void 0);

    var DefaultTimeFormats;
    (function (DefaultTimeFormats) {
        DefaultTimeFormats[DefaultTimeFormats["MILLISECOND"] = 0] = "MILLISECOND";
        DefaultTimeFormats[DefaultTimeFormats["SECOND"] = 1] = "SECOND";
        DefaultTimeFormats[DefaultTimeFormats["MINUTE"] = 2] = "MINUTE";
        DefaultTimeFormats[DefaultTimeFormats["HOUR"] = 3] = "HOUR";
        DefaultTimeFormats[DefaultTimeFormats["WEEK_DAY"] = 4] = "WEEK_DAY";
        DefaultTimeFormats[DefaultTimeFormats["SHORT_MONTH"] = 5] = "SHORT_MONTH";
        DefaultTimeFormats[DefaultTimeFormats["MONTH"] = 6] = "MONTH";
        DefaultTimeFormats[DefaultTimeFormats["SHORT_YEAR"] = 7] = "SHORT_YEAR";
        DefaultTimeFormats[DefaultTimeFormats["YEAR"] = 8] = "YEAR";
    })(DefaultTimeFormats || (DefaultTimeFormats = {}));
    const formatStrings = {
        [DefaultTimeFormats.MILLISECOND]: '.%L',
        [DefaultTimeFormats.SECOND]: ':%S',
        [DefaultTimeFormats.MINUTE]: '%I:%M',
        [DefaultTimeFormats.HOUR]: '%I %p',
        [DefaultTimeFormats.WEEK_DAY]: '%a',
        [DefaultTimeFormats.SHORT_MONTH]: '%b %d',
        [DefaultTimeFormats.MONTH]: '%B',
        [DefaultTimeFormats.SHORT_YEAR]: '%y',
        [DefaultTimeFormats.YEAR]: '%Y',
    };
    function toNumber(x) {
        return x instanceof Date ? x.getTime() : x;
    }
    class TimeScale extends ContinuousScale {
        constructor() {
            super([new Date(2022, 11, 7), new Date(2022, 11, 8)], [0, 1]);
            this.type = 'time';
            this.cacheProps = [
                'domain',
                'range',
                'nice',
                'tickCount',
                'interval',
                'minTickCount',
                'maxTickCount',
            ];
            this.year = year;
            this.month = month;
            this.week = sunday;
            this.day = day;
            this.hour = hour;
            this.minute = minute;
            this.second = second;
            this.millisecond = millisecond;
            /**
             * Array of default tick intervals in the following format:
             *
             *     [
             *         interval (unit of time),
             *         number of units (step),
             *         the length of that number of units in milliseconds
             *     ]
             */
            this.tickIntervals = [
                [this.second, 1, durationSecond],
                [this.second, 5, 5 * durationSecond],
                [this.second, 15, 15 * durationSecond],
                [this.second, 30, 30 * durationSecond],
                [this.minute, 1, durationMinute],
                [this.minute, 5, 5 * durationMinute],
                [this.minute, 15, 15 * durationMinute],
                [this.minute, 30, 30 * durationMinute],
                [this.hour, 1, durationHour],
                [this.hour, 3, 3 * durationHour],
                [this.hour, 6, 6 * durationHour],
                [this.hour, 12, 12 * durationHour],
                [this.day, 1, durationDay],
                [this.day, 2, 2 * durationDay],
                [this.week, 1, durationWeek],
                [this.week, 2, 2 * durationWeek],
                [this.week, 3, 3 * durationWeek],
                [this.month, 1, durationMonth],
                [this.month, 2, 2 * durationMonth],
                [this.month, 3, 3 * durationMonth],
                [this.month, 4, 4 * durationMonth],
                [this.month, 6, 6 * durationMonth],
                [this.year, 1, durationYear],
            ];
        }
        toDomain(d) {
            return new Date(d);
        }
        calculateDefaultTickFormat(ticks = []) {
            let defaultTimeFormat = DefaultTimeFormats.YEAR;
            const updateFormat = (format) => {
                if (format < defaultTimeFormat) {
                    defaultTimeFormat = format;
                }
            };
            for (const value of ticks) {
                const format = this.getLowestGranularityFormat(value);
                updateFormat(format);
            }
            const firstTick = toNumber(ticks[0]);
            const lastTick = toNumber(ticks[ticks.length - 1]);
            const startYear = new Date(firstTick).getFullYear();
            const stopYear = new Date(lastTick).getFullYear();
            const yearChange = stopYear - startYear > 0;
            return this.buildFormatString(defaultTimeFormat, yearChange);
        }
        buildFormatString(defaultTimeFormat, yearChange) {
            let formatStringArray = [formatStrings[defaultTimeFormat]];
            let timeEndIndex = 0;
            const domain = this.getDomain();
            const start = Math.min(...domain.map(toNumber));
            const stop = Math.max(...domain.map(toNumber));
            const extent = stop - start;
            switch (defaultTimeFormat) {
                case DefaultTimeFormats.SECOND:
                    if (extent / durationMinute > 1) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.MINUTE]);
                    }
                // fall through deliberately
                case DefaultTimeFormats.MINUTE:
                    if (extent / durationHour > 1) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.HOUR]);
                    }
                // fall through deliberately
                case DefaultTimeFormats.HOUR:
                    timeEndIndex = formatStringArray.length;
                    if (extent / durationDay > 1) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.WEEK_DAY]);
                    }
                // fall through deliberately
                case DefaultTimeFormats.WEEK_DAY:
                    if (extent / durationWeek > 1 || yearChange) {
                        // if it's more than a week or there is a year change, don't show week day
                        const weekDayIndex = formatStringArray.indexOf(formatStrings[DefaultTimeFormats.WEEK_DAY]);
                        if (weekDayIndex > -1) {
                            formatStringArray.splice(weekDayIndex, 1, formatStrings[DefaultTimeFormats.SHORT_MONTH]);
                        }
                    }
                // fall through deliberately
                case DefaultTimeFormats.SHORT_MONTH:
                case DefaultTimeFormats.MONTH:
                    if (extent / durationYear > 1 || yearChange) {
                        formatStringArray.push(formatStrings[DefaultTimeFormats.YEAR]);
                    }
            }
            if (timeEndIndex < formatStringArray.length) {
                // Insert a gap between all date components.
                formatStringArray = [
                    ...formatStringArray.slice(0, timeEndIndex),
                    formatStringArray.slice(timeEndIndex).join(' '),
                ];
            }
            if (timeEndIndex > 0) {
                // Reverse order of time components, since they should be displayed in descending
                // granularity.
                formatStringArray = [
                    ...formatStringArray.slice(0, timeEndIndex).reverse(),
                    ...formatStringArray.slice(timeEndIndex),
                ];
                if (timeEndIndex < formatStringArray.length) {
                    // Insert a gap between time and date components.
                    formatStringArray.splice(timeEndIndex, 0, ' ');
                }
            }
            return formatStringArray.join('');
        }
        getLowestGranularityFormat(value) {
            if (this.second.floor(value) < value) {
                return DefaultTimeFormats.MILLISECOND;
            }
            else if (this.minute.floor(value) < value) {
                return DefaultTimeFormats.SECOND;
            }
            else if (this.hour.floor(value) < value) {
                return DefaultTimeFormats.MINUTE;
            }
            else if (this.day.floor(value) < value) {
                return DefaultTimeFormats.HOUR;
            }
            else if (this.month.floor(value) < value) {
                if (this.week.floor(value) < value) {
                    return DefaultTimeFormats.WEEK_DAY;
                }
                return DefaultTimeFormats.SHORT_MONTH;
            }
            else if (this.year.floor(value) < value) {
                return DefaultTimeFormats.MONTH;
            }
            return DefaultTimeFormats.YEAR;
        }
        defaultTickFormat(ticks) {
            const formatString = this.calculateDefaultTickFormat(ticks);
            return (date) => buildFormatter(formatString)(date);
        }
        /**
         * @param options Tick interval options.
         * @param options.start The start time (timestamp).
         * @param options.stop The end time (timestamp).
         * @param options.count Number of intervals between ticks.
         */
        getTickInterval({ start, stop, count, minCount, maxCount, }) {
            const { tickIntervals } = this;
            let countableTimeInterval;
            let step;
            const tickCount = count !== null && count !== void 0 ? count : ContinuousScale.defaultTickCount;
            const target = Math.abs(stop - start) / Math.max(tickCount, 1);
            let i = 0;
            while (i < tickIntervals.length && target > tickIntervals[i][2]) {
                i++;
            }
            if (i === 0) {
                step = Math.max(tickStep(start, stop, tickCount, minCount, maxCount), 1);
                countableTimeInterval = this.millisecond;
            }
            else if (i === tickIntervals.length) {
                const y0 = start / durationYear;
                const y1 = stop / durationYear;
                step = tickStep(y0, y1, tickCount, minCount, maxCount);
                countableTimeInterval = this.year;
            }
            else {
                const diff0 = target - tickIntervals[i - 1][2];
                const diff1 = tickIntervals[i][2] - target;
                const index = diff0 < diff1 ? i - 1 : i;
                [countableTimeInterval, step] = tickIntervals[index];
            }
            return countableTimeInterval.every(step);
        }
        invert(y) {
            return new Date(super.invert(y));
        }
        /**
         * Returns uniformly-spaced dates that represent the scale's domain.
         */
        ticks() {
            if (!this.domain || this.domain.length < 2) {
                return [];
            }
            this.refresh();
            const [t0, t1] = this.getDomain().map(toNumber);
            if (this.interval !== undefined) {
                return this.getTicksForInterval({ start: t0, stop: t1 });
            }
            if (this.nice) {
                const { tickCount } = this;
                if (tickCount === 2) {
                    return this.niceDomain;
                }
                if (tickCount === 1) {
                    return this.niceDomain.slice(0, 1);
                }
            }
            return this.getDefaultTicks({ start: t0, stop: t1 });
        }
        getDefaultTicks({ start, stop }) {
            const t = this.getTickInterval({
                start,
                stop,
                count: this.tickCount,
                minCount: this.minTickCount,
                maxCount: this.maxTickCount,
            });
            return t ? t.range(new Date(start), new Date(stop)) : []; // inclusive stop
        }
        getTicksForInterval({ start, stop }) {
            const { interval, tickIntervals } = this;
            if (!interval) {
                return [];
            }
            if (interval instanceof TimeInterval) {
                const ticks = interval.range(new Date(start), new Date(stop));
                if (this.isDenseInterval({ start, stop, interval, count: ticks.length })) {
                    return this.getDefaultTicks({ start, stop });
                }
                return ticks;
            }
            const absInterval = Math.abs(interval);
            if (this.isDenseInterval({ start, stop, interval: absInterval })) {
                return this.getDefaultTicks({ start, stop });
            }
            const reversedInterval = [...tickIntervals];
            reversedInterval.reverse();
            const timeInterval = reversedInterval.find((tickInterval) => absInterval % tickInterval[2] === 0);
            if (timeInterval) {
                const i = timeInterval[0].every(absInterval / (timeInterval[2] / timeInterval[1]));
                return i.range(new Date(start), new Date(stop));
            }
            let date = new Date(start);
            const stopDate = new Date(stop);
            const ticks = [];
            while (date <= stopDate) {
                ticks.push(date);
                date = new Date(date);
                date.setMilliseconds(date.getMilliseconds() + absInterval);
            }
            return ticks;
        }
        /**
         * Returns a time format function suitable for displaying tick values.
         * @param specifier If the specifier string is provided, this method is equivalent to
         * the {@link TimeLocaleObject.format} method.
         * If no specifier is provided, this method returns the default time format function.
         */
        tickFormat({ ticks, specifier }) {
            return specifier == undefined ? this.defaultTickFormat(ticks) : buildFormatter(specifier);
        }
        update() {
            if (!this.domain || this.domain.length < 2) {
                return;
            }
            if (this.nice) {
                this.updateNiceDomain();
            }
        }
        /**
         * Extends the domain so that it starts and ends on nice round values.
         * This method typically modifies the scale’s domain, and may only extend the bounds to the nearest round value.
         */
        updateNiceDomain() {
            const maxAttempts = 4;
            let [d0, d1] = this.domain;
            for (let i = 0; i < maxAttempts; i++) {
                this.updateNiceDomainIteration(d0, d1);
                const [n0, n1] = this.niceDomain;
                if (toNumber(d0) === toNumber(n0) && toNumber(d1) === toNumber(n1)) {
                    break;
                }
                d0 = n0;
                d1 = n1;
            }
        }
        updateNiceDomainIteration(d0, d1) {
            const start = toNumber(d0);
            const stop = toNumber(d1);
            const { interval } = this;
            let i;
            if (interval instanceof TimeInterval) {
                i = interval;
            }
            else {
                const tickCount = typeof interval === 'number' ? (stop - start) / Math.max(interval, 1) : this.tickCount;
                i = this.getTickInterval({
                    start,
                    stop,
                    count: tickCount,
                    minCount: this.minTickCount,
                    maxCount: this.maxTickCount,
                });
            }
            if (i) {
                const intervalRange = i.range(d0, d1, true);
                const n0 = intervalRange[0];
                const n1 = intervalRange[intervalRange.length - 1];
                this.niceDomain = [n0, n1];
            }
        }
    }

    class Padding {
        constructor(top = 0, right = top, bottom = top, left = right) {
            this.top = top;
            this.right = right;
            this.bottom = bottom;
            this.left = left;
        }
        clear() {
            this.top = this.right = this.bottom = this.left = 0;
        }
    }
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], Padding.prototype, "top", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], Padding.prototype, "right", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], Padding.prototype, "bottom", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], Padding.prototype, "left", void 0);

    var sparklinesUtil = /*#__PURE__*/Object.freeze({
        __proto__: null,
        extent: extent,
        normalisedExtent: normalisedExtent,
        normalisedExtentWithMetadata: normalisedExtentWithMetadata,
        toFixed: toFixed,
        isNumberEqual: isEqual,
        tickFormat: tickFormat,
        interpolateString: interpolate,
        ticks: ticks,
        tickStep: tickStep,
        range: range$1,
        Color: Color,
        isString: isString,
        isStringObject: isStringObject,
        isDate: isDate,
        isDiscrete: isDiscrete,
        isContinuous: isContinuous,
        checkDatum: checkDatum,
        isNumber: isNumber,
        resetIds: resetIds,
        createId: createId,
        Padding: Padding,
        jsonDiff: jsonDiff,
        DELETE: DELETE,
        jsonMerge: jsonMerge,
        jsonApply: jsonApply,
        jsonWalk: jsonWalk,
        normalizeAngle360: normalizeAngle360,
        normalizeAngle360Inclusive: normalizeAngle360Inclusive,
        normalizeAngle180: normalizeAngle180,
        toRadians: toRadians,
        toDegrees: toDegrees,
        angleBetween: angleBetween,
        zipObject: zipObject,
        clamp: clamp,
        isEqual: isEqual,
        isNegative: isNegative,
        round: round$1,
        mod: mod,
        sanitizeHtml: sanitizeHtml,
        Logger: Logger
    });

    function areArrayNumbersEqual(arrA, arrB) {
        return arrA.length === arrB.length && arrA.every((item, i) => Number(item) === Number(arrB[i]));
    }

    function circleRectOverlap(c, x, y, w, h) {
        // Find closest horizontal and vertical edges.
        let edgeX = c.x;
        if (c.x < x) {
            edgeX = x;
        }
        else if (c.x > x + w) {
            edgeX = x + w;
        }
        let edgeY = c.y;
        if (c.y < y) {
            edgeY = y;
        }
        else if (c.y > y + h) {
            edgeY = y + h;
        }
        // Find distance to closest edges.
        const dx = c.x - edgeX;
        const dy = c.y - edgeY;
        const d = Math.sqrt(dx * dx + dy * dy);
        return d <= c.size * 0.5;
    }
    function rectRectOverlap(r1, x2, y2, w2, h2) {
        const xOverlap = r1.x + r1.width > x2 && r1.x < x2 + w2;
        const yOverlap = r1.y + r1.height > y2 && r1.y < y2 + h2;
        return xOverlap && yOverlap;
    }
    function rectContainsRect(r1, r2x, r2y, r2w, r2h) {
        return r2x + r2w < r1.x + r1.width && r2x > r1.x && r2y > r1.y && r2y + r2h < r1.y + r1.height;
    }
    function isPointLabelDatum(x) {
        return x != null && typeof x.point === 'object' && typeof x.label === 'object';
    }
    /**
     * @param data Points and labels for one or more series. The order of series determines label placement precedence.
     * @param bounds Bounds to fit the labels into. If a label can't be fully contained, it doesn't fit.
     * @returns Placed labels for the given series (in the given order).
     */
    function placeLabels(data, bounds, padding = 5) {
        const result = [];
        data = data.map((d) => d.slice().sort((a, b) => b.point.size - a.point.size));
        for (let j = 0; j < data.length; j++) {
            const labels = (result[j] = []);
            const datum = data[j];
            if (!((datum === null || datum === void 0 ? void 0 : datum.length) && datum[0].label)) {
                continue;
            }
            for (let i = 0, ln = datum.length; i < ln; i++) {
                const d = datum[i];
                const l = d.label;
                const r = d.point.size * 0.5;
                const x = d.point.x - l.width * 0.5;
                const y = d.point.y - r - l.height - padding;
                const { width, height } = l;
                const withinBounds = !bounds || rectContainsRect(bounds, x, y, width, height);
                if (!withinBounds) {
                    continue;
                }
                const overlapPoints = data.some((datum) => datum.some((d) => circleRectOverlap(d.point, x, y, width, height)));
                if (overlapPoints) {
                    continue;
                }
                const overlapLabels = result.some((labels) => labels.some((l) => rectRectOverlap(l, x, y, width, height)));
                if (overlapLabels) {
                    continue;
                }
                labels.push({
                    index: i,
                    text: l.text,
                    x,
                    y,
                    width,
                    height,
                    datum: d,
                });
            }
        }
        return result;
    }
    function axisLabelsOverlap(data, padding) {
        const result = [];
        for (let i = 0; i < data.length; i++) {
            const datum = data[i];
            const { point: { x, y }, label: { text }, } = datum;
            let { label: { width, height }, } = datum;
            width += padding !== null && padding !== void 0 ? padding : 0;
            height += padding !== null && padding !== void 0 ? padding : 0;
            const overlapLabels = result.some((l) => {
                return rectRectOverlap(l, x, y, width, height);
            });
            if (overlapLabels) {
                return true;
            }
            result.push({
                index: i,
                text,
                x,
                y,
                width,
                height,
                datum,
            });
        }
        return false;
    }

    const GRID_STYLE_KEYS = ['stroke', 'lineDash'];
    const GRID_STYLE = predicateWithMessage(ARRAY(undefined, (o) => {
        for (const key in o) {
            if (!GRID_STYLE_KEYS.includes(key)) {
                return false;
            }
        }
        return true;
    }), `expecting an Array of objects with gridline style properties such as 'stroke' and 'lineDash'`);
    class AxisGridLine {
        constructor() {
            this.enabled = true;
            this.width = 1;
            this.style = [
                {
                    stroke: undefined,
                    lineDash: [],
                },
            ];
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], AxisGridLine.prototype, "enabled", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], AxisGridLine.prototype, "width", void 0);
    __decorate([
        Validate(GRID_STYLE),
        __metadata("design:type", Array)
    ], AxisGridLine.prototype, "style", void 0);

    function Default(defaultValue, replaces = [undefined]) {
        return addTransformToInstanceProperty((_, __, v) => {
            if (replaces.includes(v)) {
                return defaultValue;
            }
            return v;
        });
    }

    class AxisLabel {
        constructor() {
            this.enabled = true;
            /** If set to `false`, axis labels will not be wrapped on multiple lines. */
            this.autoWrap = false;
            /** Used to constrain the width of the label when `autoWrap` is `true`, if the label text width exceeds the `maxWidth`, it will be wrapped on multiple lines automatically. If `maxWidth` is omitted, a default width constraint will be applied. */
            this.maxWidth = undefined;
            /** Used to constrain the height of the multiline label, if the label text height exceeds the `maxHeight`, it will be truncated automatically. If `maxHeight` is omitted, a default height constraint will be applied. */
            this.maxHeight = undefined;
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
            /**
             * The padding between the labels and the ticks.
             */
            this.padding = 5;
            /**
             * Minimum gap in pixels between the axis labels before being removed to avoid collisions.
             */
            this.minSpacing = NaN;
            /**
             * The color of the labels.
             * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.
             */
            this.color = 'rgba(87, 87, 87, 1)';
            /**
             * Custom label rotation in degrees.
             * Labels are rendered perpendicular to the axis line by default.
             * Or parallel to the axis line, if the {@link parallel} is set to `true`.
             * The value of this config is used as the angular offset/deflection
             * from the default rotation.
             */
            this.rotation = undefined;
            /**
             * Avoid axis label collision by automatically reducing the number of ticks displayed. If set to `false`, axis labels may collide.
             */
            this.avoidCollisions = true;
            /**
             * By default, labels and ticks are positioned to the left of the axis line.
             * `true` positions the labels to the right of the axis line.
             * However, if the axis is rotated, it's easier to think in terms
             * of this side or the opposite side, rather than left and right.
             * We use the term `mirror` for conciseness, although it's not
             * true mirroring - for example, when a label is rotated, so that
             * it is inclined at the 45 degree angle, text flowing from north-west
             * to south-east, ending at the tick to the left of the axis line,
             * and then we set this config to `true`, the text will still be flowing
             * from north-west to south-east, _starting_ at the tick to the right
             * of the axis line.
             */
            this.mirrored = false;
            /**
             * Labels are rendered perpendicular to the axis line by default.
             * Setting this config to `true` makes labels render parallel to the axis line
             * and center aligns labels' text at the ticks.
             */
            this.parallel = false;
            /**
             * In case {@param value} is a number, the {@param fractionDigits} parameter will
             * be provided as well. The `fractionDigits` corresponds to the number of fraction
             * digits used by the tick step. For example, if the tick step is `0.0005`,
             * the `fractionDigits` is 4.
             */
            this.formatter = undefined;
        }
        /**
         * The side of the axis line to position the labels on.
         * -1 = left (default)
         * 1 = right
         */
        getSideFlag() {
            return this.mirrored ? 1 : -1;
        }
        getFont() {
            return getFont(this);
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], AxisLabel.prototype, "enabled", void 0);
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], AxisLabel.prototype, "autoWrap", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], AxisLabel.prototype, "maxWidth", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], AxisLabel.prototype, "maxHeight", void 0);
    __decorate([
        Validate(OPT_FONT_STYLE),
        __metadata("design:type", String)
    ], AxisLabel.prototype, "fontStyle", void 0);
    __decorate([
        Validate(OPT_FONT_WEIGHT),
        __metadata("design:type", String)
    ], AxisLabel.prototype, "fontWeight", void 0);
    __decorate([
        Validate(NUMBER$1(1)),
        __metadata("design:type", Number)
    ], AxisLabel.prototype, "fontSize", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", String)
    ], AxisLabel.prototype, "fontFamily", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], AxisLabel.prototype, "padding", void 0);
    __decorate([
        Validate(NUMBER_OR_NAN()),
        Default(NaN),
        __metadata("design:type", Number)
    ], AxisLabel.prototype, "minSpacing", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], AxisLabel.prototype, "color", void 0);
    __decorate([
        Validate(OPT_NUMBER(-360, 360)),
        __metadata("design:type", Number)
    ], AxisLabel.prototype, "rotation", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], AxisLabel.prototype, "avoidCollisions", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], AxisLabel.prototype, "mirrored", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], AxisLabel.prototype, "parallel", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], AxisLabel.prototype, "format", void 0);

    class AxisLine {
        constructor() {
            this.enabled = true;
            this.width = 1;
            this.color = undefined;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], AxisLine.prototype, "enabled", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], AxisLine.prototype, "width", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], AxisLine.prototype, "color", void 0);

    const OPT_TICK_INTERVAL = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v, ctx) => (v !== 0 && NUMBER$1(0)(v, ctx)) || v instanceof TimeInterval), `expecting an optional non-zero positive Number value or, for a time axis, a Time Interval such as 'agCharts.time.month'`);
    class AxisTick {
        constructor() {
            this.enabled = true;
            /**
             * The line width to be used by axis ticks.
             */
            this.width = 1;
            /**
             * The line length to be used by axis ticks.
             */
            this.size = 6;
            /**
             * The color of the axis ticks.
             * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make the ticks invisible.
             */
            this.color = undefined;
            this.interval = undefined;
            this.values = undefined;
            this.minSpacing = NaN;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], AxisTick.prototype, "enabled", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], AxisTick.prototype, "width", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], AxisTick.prototype, "size", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], AxisTick.prototype, "color", void 0);
    __decorate([
        Validate(OPT_TICK_INTERVAL),
        __metadata("design:type", Object)
    ], AxisTick.prototype, "interval", void 0);
    __decorate([
        Validate(OPT_ARRAY()),
        __metadata("design:type", Array)
    ], AxisTick.prototype, "values", void 0);
    __decorate([
        Validate(AND(NUMBER_OR_NAN(1), LESS_THAN('maxSpacing'))),
        Default(NaN),
        __metadata("design:type", Number)
    ], AxisTick.prototype, "minSpacing", void 0);

    function prepareAxisAnimationContext(axis) {
        const requestedRangeMin = Math.min(...axis.range);
        const requestedRangeMax = Math.max(...axis.range);
        const min = Math.floor(requestedRangeMin);
        const max = Math.ceil(requestedRangeMax);
        const visible = min !== max;
        return { min, max, visible };
    }
    const fullCircle = Math.PI * 2;
    const halfCircle = fullCircle / 2;
    function normaliseEndRotation(start, end) {
        const directDistance = Math.abs(end - start);
        if (directDistance < halfCircle)
            return end;
        if (start > end)
            return end + fullCircle;
        return end - fullCircle;
    }
    function prepareAxisAnimationFunctions(ctx) {
        const outOfBounds = (datum) => {
            var _a, _b;
            const min = Math.min(...((_a = datum.range) !== null && _a !== void 0 ? _a : [ctx.min]));
            const max = Math.max(...((_b = datum.range) !== null && _b !== void 0 ? _b : [ctx.max]));
            const translationY = Math.round(datum.translationY);
            return translationY < min || translationY > max;
        };
        const calculateStatus = (datum, nodeDatum, status) => {
            if (status !== 'removed' && outOfBounds(datum)) {
                return 'removed';
            }
            else if (status !== 'added' && outOfBounds(nodeDatum)) {
                return 'added';
            }
            return status;
        };
        const fromBase = (node, datum, status) => {
            // Default to starting at the same position that the node is currently in.
            const source = { translationY: Math.round(node.translationY), opacity: node.opacity };
            status = calculateStatus(datum, node.datum, status);
            if (status === 'added') {
                source.translationY = Math.round(datum.translationY);
                source.opacity = 0;
            }
            return Object.assign(Object.assign({}, source), FROM_TO_MIXINS[status]);
        };
        const toBase = (_node, datum, status) => {
            const target = { translationY: Math.round(datum.translationY), opacity: 1 };
            if (status === 'removed') {
                target.opacity = 0;
            }
            return target;
        };
        const tick = {
            fromFn: fromBase,
            toFn: toBase,
            intermediateFn: (node, _datum, _status) => {
                return { visible: !outOfBounds(node) };
            },
        };
        const label = {
            fromFn: ((node, newDatum, status) => {
                var _a;
                const datum = (_a = node.previousDatum) !== null && _a !== void 0 ? _a : newDatum;
                let rotation = datum.rotation;
                if (status === 'added' || status === 'removed') {
                    rotation = newDatum.rotation;
                }
                return Object.assign(Object.assign({}, fromBase(node, newDatum, status)), { x: datum.x, y: datum.y, rotation, rotationCenterX: datum.rotationCenterX });
            }),
            toFn: ((node, datum, status) => {
                var _a, _b;
                let rotation;
                if (status === 'added' || status === 'removed') {
                    rotation = datum.rotation;
                }
                else {
                    rotation = normaliseEndRotation((_b = (_a = node.previousDatum) === null || _a === void 0 ? void 0 : _a.rotation) !== null && _b !== void 0 ? _b : datum.rotation, datum.rotation);
                }
                return Object.assign(Object.assign({}, toBase(node, datum, status)), { x: datum.x, y: datum.y, rotation, rotationCenterX: datum.rotationCenterX, finish: { rotation: datum.rotation } });
            }),
        };
        const line = {
            fromFn: (node, datum) => {
                var _a, _b;
                return Object.assign(Object.assign({}, ((_b = (_a = node.previousDatum) !== null && _a !== void 0 ? _a : datum) !== null && _b !== void 0 ? _b : { y: node.y, x1: node.x1, x2: node.x2 })), FROM_TO_MIXINS['updated']);
            },
            toFn: (_node, datum) => {
                return Object.assign({}, datum);
            },
        };
        const group = {
            fromFn: (group, _datum) => {
                const { rotation, translationX, translationY } = group;
                return Object.assign({ rotation,
                    translationX,
                    translationY }, FROM_TO_MIXINS['updated']);
            },
            toFn: (_group, datum) => {
                const { rotation, translationX, translationY } = datum;
                return {
                    rotation,
                    translationX,
                    translationY,
                };
            },
        };
        return { tick, line, label, group };
    }
    function resetAxisGroupFn() {
        return (_node, datum) => {
            return {
                rotation: datum.rotation,
                rotationCenterX: datum.rotationCenterX,
                rotationCenterY: datum.rotationCenterY,
                translationX: datum.translationX,
                translationY: datum.translationY,
            };
        };
    }
    function resetAxisSelectionFn(ctx) {
        const { visible: rangeVisible, min, max } = ctx;
        return (_node, datum) => {
            const translationY = Math.round(datum.translationY);
            const visible = rangeVisible && translationY >= min && translationY <= max;
            return {
                translationY,
                opacity: 1,
                visible,
            };
        };
    }
    function resetAxisLabelSelectionFn() {
        return (_node, datum) => {
            return {
                x: datum.x,
                y: datum.y,
                translationY: datum.translationY,
                rotation: datum.rotation,
                rotationCenterX: datum.rotationCenterX,
            };
        };
    }
    function resetAxisLineSelectionFn() {
        return (_node, datum) => {
            return Object.assign({}, datum);
        };
    }

    var Tags;
    (function (Tags) {
        Tags[Tags["TickLine"] = 0] = "TickLine";
        Tags[Tags["TickLabel"] = 1] = "TickLabel";
        Tags[Tags["GridLine"] = 2] = "GridLine";
        Tags[Tags["GridArc"] = 3] = "GridArc";
        Tags[Tags["AxisLine"] = 4] = "AxisLine";
    })(Tags || (Tags = {}));
    var TickGenerationType;
    (function (TickGenerationType) {
        TickGenerationType[TickGenerationType["CREATE"] = 0] = "CREATE";
        TickGenerationType[TickGenerationType["CREATE_SECONDARY"] = 1] = "CREATE_SECONDARY";
        TickGenerationType[TickGenerationType["FILTER"] = 2] = "FILTER";
        TickGenerationType[TickGenerationType["VALUES"] = 3] = "VALUES";
    })(TickGenerationType || (TickGenerationType = {}));
    /**
     * A general purpose linear axis with no notion of orientation.
     * The axis is always rendered vertically, with horizontal labels positioned to the left
     * of the axis line by default. The axis can be {@link rotation | rotated} by an arbitrary angle,
     * so that it can be used as a top, right, bottom, left, radial or any other kind
     * of linear axis.
     * The generic `D` parameter is the type of the domain of the axis' scale.
     * The output range of the axis' scale is always numeric (screen coordinates).
     */
    class Axis {
        get type() {
            var _a;
            return (_a = this.constructor.type) !== null && _a !== void 0 ? _a : '';
        }
        set crossLines(value) {
            var _a, _b;
            (_a = this._crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => this.detachCrossLine(crossLine));
            if (value) {
                this.assignCrossLineArrayConstructor(value);
            }
            this._crossLines = value;
            (_b = this._crossLines) === null || _b === void 0 ? void 0 : _b.forEach((crossLine) => {
                this.attachCrossLine(crossLine);
                this.initCrossLine(crossLine);
            });
        }
        get crossLines() {
            return this._crossLines;
        }
        constructor(moduleCtx, scale) {
            this.moduleCtx = moduleCtx;
            this.scale = scale;
            this.id = createId(this);
            this.nice = true;
            this.dataDomain = { domain: [], clipped: false };
            this.keys = [];
            this.boundSeries = [];
            this.includeInvisibleDomains = false;
            this.axisGroup = new Group({ name: `${this.id}-axis`, zIndex: Layers.AXIS_ZINDEX });
            this.lineNode = this.axisGroup.appendChild(new Line());
            this.tickLineGroup = this.axisGroup.appendChild(new Group({ name: `${this.id}-Axis-tick-lines`, zIndex: Layers.AXIS_ZINDEX }));
            this.tickLabelGroup = this.axisGroup.appendChild(new Group({ name: `${this.id}-Axis-tick-labels`, zIndex: Layers.AXIS_ZINDEX }));
            this.crossLineGroup = new Group({ name: `${this.id}-CrossLines` });
            this.gridGroup = new Group({ name: `${this.id}-Axis-grid` });
            this.gridLineGroup = this.gridGroup.appendChild(new Group({
                name: `${this.id}-gridLines`,
                zIndex: Layers.AXIS_GRID_ZINDEX,
            }));
            this.tickLineGroupSelection = Selection.select(this.tickLineGroup, Line, false);
            this.tickLabelGroupSelection = Selection.select(this.tickLabelGroup, Text, false);
            this.gridLineGroupSelection = Selection.select(this.gridLineGroup, Line, false);
            this.line = new AxisLine();
            this.tick = this.createTick();
            this.gridLine = new AxisGridLine();
            this.label = this.createLabel();
            this.defaultTickMinSpacing = Axis.defaultTickMinSpacing;
            this.translation = { x: 0, y: 0 };
            this.rotation = 0; // axis rotation angle in degrees
            this.layout = {
                label: {
                    fractionDigits: 0,
                    padding: this.label.padding,
                    format: this.label.format,
                },
            };
            this.destroyFns = [];
            this.range = [0, 1];
            this.visibleRange = [0, 1];
            this.title = undefined;
            this._titleCaption = new Caption();
            /**
             * The length of the grid. The grid is only visible in case of a non-zero value.
             * In case {@link radialGrid} is `true`, the value is interpreted as an angle
             * (in degrees).
             */
            this._gridLength = 0;
            this.fractionDigits = 0;
            /**
             * The distance between the grid ticks and the axis ticks.
             */
            this.gridPadding = 0;
            /**
             * Is used to avoid collisions between axis labels and series.
             */
            this.seriesAreaPadding = 0;
            this.tickGenerationResult = undefined;
            this.maxThickness = Infinity;
            this.moduleMap = new ModuleMap(this);
            this.refreshScale();
            this._titleCaption.node.rotation = -Math.PI / 2;
            this.axisGroup.appendChild(this._titleCaption.node);
            this.destroyFns.push(moduleCtx.interactionManager.addListener('hover', (e) => this.checkAxisHover(e)));
            this.animationManager = moduleCtx.animationManager;
            this.animationState = new StateMachine('empty', {
                empty: {
                    update: {
                        target: 'ready',
                        action: () => this.resetSelectionNodes(),
                    },
                },
                ready: {
                    update: (data) => this.animateReadyUpdate(data),
                    resize: () => this.resetSelectionNodes(),
                },
            });
            this._crossLines = [];
            this.assignCrossLineArrayConstructor(this._crossLines);
            let previousSize = undefined;
            this.destroyFns.push(moduleCtx.layoutService.addListener('layout-complete', (e) => {
                // Fire resize animation action if chart canvas size changes.
                if (previousSize != null && jsonDiff(e.chart, previousSize) != null) {
                    this.animationState.transition('resize');
                }
                previousSize = Object.assign({}, e.chart);
            }));
            this.destroyFns.push(moduleCtx.updateService.addListener('update-complete', (e) => {
                this.minRect = e.minRect;
            }));
        }
        attachCrossLine(crossLine) {
            this.crossLineGroup.appendChild(crossLine.group);
        }
        detachCrossLine(crossLine) {
            this.crossLineGroup.removeChild(crossLine.group);
        }
        destroy() {
            this.moduleMap.destroy();
            this.destroyFns.forEach((f) => f());
        }
        refreshScale() {
            var _a;
            this.range = this.scale.range.slice();
            (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {
                this.initCrossLine(crossLine);
            });
        }
        updateRange() {
            var _a;
            const { range: rr, visibleRange: vr, scale } = this;
            const span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
            const shift = span * vr[0];
            const start = rr[0] - shift;
            scale.range = [start, start + span];
            (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {
                crossLine.clippedRange = [rr[0], rr[1]];
            });
        }
        setCrossLinesVisible(visible) {
            this.crossLineGroup.visible = visible;
        }
        attachAxis(axisNode, gridNode) {
            gridNode.appendChild(this.gridGroup);
            axisNode.appendChild(this.axisGroup);
            axisNode.appendChild(this.crossLineGroup);
        }
        detachAxis(axisNode, gridNode) {
            gridNode.removeChild(this.gridGroup);
            axisNode.removeChild(this.axisGroup);
            axisNode.removeChild(this.crossLineGroup);
        }
        /**
         * Checks if a point or an object is in range.
         * @param x A point (or object's starting point).
         * @param width Object's width.
         * @param tolerance Expands the range on both ends by this amount.
         */
        inRange(x, width = 0, tolerance = 0) {
            const min = Math.min(...this.range);
            const max = Math.max(...this.range);
            return x + width >= min - tolerance && x <= max + tolerance;
        }
        onLabelFormatChange(ticks, format) {
            const { scale, fractionDigits } = this;
            const logScale = scale instanceof LogScale;
            const defaultLabelFormatter = !logScale && fractionDigits > 0
                ? (x) => (typeof x === 'number' ? x.toFixed(fractionDigits) : String(x))
                : (x) => String(x);
            if (format && scale && scale.tickFormat) {
                try {
                    this.labelFormatter = scale.tickFormat({ ticks, specifier: format });
                }
                catch (e) {
                    this.labelFormatter = defaultLabelFormatter;
                    Logger.warnOnce(`the axis label format string ${format} is invalid. No formatting will be applied`);
                }
            }
            else {
                this.labelFormatter = defaultLabelFormatter;
            }
        }
        setDomain() {
            var _a;
            const { scale, dataDomain: { domain }, tick: { values: tickValues }, } = this;
            if (tickValues && ContinuousScale.is(scale)) {
                const [tickMin, tickMax] = (_a = extent(tickValues)) !== null && _a !== void 0 ? _a : [Infinity, -Infinity];
                const min = Math.min(scale.fromDomain(domain[0]), tickMin);
                const max = Math.max(scale.fromDomain(domain[1]), tickMax);
                scale.domain = [scale.toDomain(min), scale.toDomain(max)];
            }
            else {
                scale.domain = domain;
            }
        }
        setTickInterval(interval) {
            var _a;
            this.scale.interval = (_a = this.tick.interval) !== null && _a !== void 0 ? _a : interval;
        }
        setTickCount(count, minTickCount, maxTickCount) {
            const { scale } = this;
            if (!(count && ContinuousScale.is(scale))) {
                return;
            }
            if (typeof count === 'number') {
                scale.tickCount = count;
                scale.minTickCount = minTickCount !== null && minTickCount !== void 0 ? minTickCount : 0;
                scale.maxTickCount = maxTickCount !== null && maxTickCount !== void 0 ? maxTickCount : Infinity;
                return;
            }
            if (scale instanceof TimeScale) {
                this.setTickInterval(count);
            }
        }
        set gridLength(value) {
            var _a;
            // Was visible and now invisible, or was invisible and now visible.
            if ((this._gridLength && !value) || (!this._gridLength && value)) {
                this.gridLineGroupSelection.clear();
            }
            this._gridLength = value;
            (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {
                this.initCrossLine(crossLine);
            });
        }
        get gridLength() {
            return this._gridLength;
        }
        createTick() {
            return new AxisTick();
        }
        createLabel() {
            return new AxisLabel();
        }
        checkAxisHover(event) {
            const bbox = this.computeBBox();
            const isInAxis = bbox.containsPoint(event.offsetX, event.offsetY);
            if (!isInAxis)
                return;
            this.moduleCtx.chartEventManager.axisHover(this.id, this.direction);
        }
        /**
         * Creates/removes/updates the scene graph nodes that constitute the axis.
         */
        update(primaryTickCount) {
            if (!this.tickGenerationResult) {
                return;
            }
            const { rotation, parallelFlipRotation, regularFlipRotation } = this.calculateRotations();
            const sideFlag = this.label.getSideFlag();
            this.updatePosition();
            const lineData = this.getAxisLineCoordinates();
            const _a = this.tickGenerationResult, { tickData, combinedRotation, textBaseline, textAlign } = _a, ticksResult = __rest(_a, ["tickData", "combinedRotation", "textBaseline", "textAlign"]);
            const previousTicks = this.tickLabelGroupSelection.nodes().map((node) => node.datum.tickId);
            this.updateSelections(lineData, tickData.ticks, {
                combinedRotation,
                textAlign,
                textBaseline,
                range: this.scale.range,
            });
            if (this.animationManager.isSkipped()) {
                this.resetSelectionNodes();
            }
            else {
                const diff = this.calculateUpdateDiff(previousTicks, tickData);
                this.animationState.transition('update', diff);
            }
            this.updateAxisLine();
            this.updateLabels();
            this.updateVisibility();
            this.updateGridLines(sideFlag);
            this.updateTickLines();
            this.updateTitle({ anyTickVisible: tickData.ticks.length > 0 });
            this.updateCrossLines({ rotation, parallelFlipRotation, regularFlipRotation });
            this.updateLayoutState();
            primaryTickCount = ticksResult.primaryTickCount;
            return primaryTickCount;
        }
        getAxisLineCoordinates() {
            const { range: [start, end], } = this;
            const x = 0;
            const y1 = Math.min(start, end);
            const y2 = Math.max(start, end);
            return { x, y1, y2 };
        }
        getTickLineCoordinates(datum) {
            const { tick, label } = this;
            const sideFlag = label.getSideFlag();
            const x = sideFlag * tick.size;
            const x1 = Math.min(0, x);
            const x2 = x1 + Math.abs(x);
            const y = Math.round(datum.translationY);
            return { x1, x2, y };
        }
        getTickLabelProps(datum, params) {
            const { label } = this;
            const { combinedRotation, textBaseline, textAlign, range } = params;
            const text = datum.tickLabel;
            const sideFlag = label.getSideFlag();
            const tickSize = this.tick.size;
            const labelX = sideFlag * (tickSize + label.padding + this.seriesAreaPadding);
            const visible = text !== '' && text != undefined;
            return {
                tickId: datum.tickId,
                translationY: datum.translationY,
                fill: label.color,
                fontFamily: label.fontFamily,
                fontSize: label.fontSize,
                fontStyle: label.fontStyle,
                fontWeight: label.fontWeight,
                rotation: combinedRotation,
                rotationCenterX: labelX,
                text,
                textAlign,
                textBaseline,
                visible,
                x: labelX,
                y: 0,
                range,
            };
        }
        setTitleProps(caption, params) {
            var _a;
            const { title } = this;
            if (!title) {
                caption.enabled = false;
                return;
            }
            caption.color = title.color;
            caption.fontFamily = title.fontFamily;
            caption.fontSize = title.fontSize;
            caption.fontStyle = title.fontStyle;
            caption.fontWeight = title.fontWeight;
            caption.enabled = title.enabled;
            caption.wrapping = title.wrapping;
            if (title.enabled) {
                const titleNode = caption.node;
                const { tickSpace } = params;
                const padding = ((_a = title.spacing) !== null && _a !== void 0 ? _a : 0) + tickSpace;
                const sideFlag = this.label.getSideFlag();
                const parallelFlipRotation = normalizeAngle360(this.rotation);
                const titleRotationFlag = sideFlag === -1 && parallelFlipRotation > Math.PI && parallelFlipRotation < Math.PI * 2 ? -1 : 1;
                const rotation = (titleRotationFlag * sideFlag * Math.PI) / 2;
                const textBaseline = titleRotationFlag === 1 ? 'bottom' : 'top';
                const { range } = this;
                const x = Math.floor((titleRotationFlag * sideFlag * (range[0] + range[1])) / 2);
                const y = sideFlag === -1 ? Math.floor(titleRotationFlag * -padding) : Math.floor(-padding);
                const { callbackCache } = this.moduleCtx;
                const { formatter = (params) => params.defaultValue } = title;
                const text = callbackCache.call(formatter, this.getTitleFormatterParams());
                titleNode.setProperties({
                    rotation,
                    text,
                    textBaseline,
                    visible: true,
                    x,
                    y,
                });
            }
        }
        calculateLayout(primaryTickCount) {
            var _a;
            const { rotation, parallelFlipRotation, regularFlipRotation } = this.calculateRotations();
            const sideFlag = this.label.getSideFlag();
            const labelX = sideFlag * (this.tick.size + this.label.padding + this.seriesAreaPadding);
            this.updateScale();
            this.tickGenerationResult = this.generateTicks({
                primaryTickCount,
                parallelFlipRotation,
                regularFlipRotation,
                labelX,
                sideFlag,
            });
            const _b = this.tickGenerationResult, { tickData, combinedRotation, textBaseline, textAlign } = _b, ticksResult = __rest(_b, ["tickData", "combinedRotation", "textBaseline", "textAlign"]);
            const boxes = [];
            const { x, y1, y2 } = this.getAxisLineCoordinates();
            const lineBox = new BBox(x, y1, 0, y2 - y1);
            boxes.push(lineBox);
            const { tick } = this;
            if (tick.enabled) {
                tickData.ticks.forEach((datum) => {
                    const { x1, x2, y } = this.getTickLineCoordinates(datum);
                    const tickLineBox = new BBox(x1, y, x2 - x1, 0);
                    boxes.push(tickLineBox);
                });
            }
            const { label } = this;
            if (label.enabled) {
                const tempText = new Text();
                tickData.ticks.forEach((datum) => {
                    const labelProps = this.getTickLabelProps(datum, {
                        combinedRotation,
                        textAlign,
                        textBaseline,
                        range: this.scale.range,
                    });
                    if (!labelProps.visible) {
                        return;
                    }
                    tempText.setProperties(Object.assign(Object.assign({}, labelProps), { translationY: Math.round(datum.translationY) }));
                    const box = tempText.computeTransformedBBox();
                    if (box) {
                        boxes.push(box);
                    }
                });
            }
            const getTransformBox = (bbox) => {
                const matrix = new Matrix();
                const { rotation: axisRotation, translationX, translationY, rotationCenterX, rotationCenterY, } = this.getAxisTransform();
                Matrix.updateTransformMatrix(matrix, 1, 1, axisRotation, translationX, translationY, {
                    scalingCenterX: 0,
                    scalingCenterY: 0,
                    rotationCenterX,
                    rotationCenterY,
                });
                return matrix.transformBBox(bbox);
            };
            const { title } = this;
            if (title === null || title === void 0 ? void 0 : title.enabled) {
                const caption = new Caption();
                let tickSpace = 0;
                if (tickData.ticks.length > 0) {
                    const contentBox = BBox.merge(boxes);
                    const tickWidth = contentBox.width;
                    if (isFinite(tickWidth)) {
                        tickSpace += tickWidth;
                    }
                }
                this.setTitleProps(caption, { tickSpace });
                const titleNode = caption.node;
                const titleBox = titleNode.computeTransformedBBox();
                if (titleBox) {
                    boxes.push(titleBox);
                }
            }
            const bbox = BBox.merge(boxes);
            const transformedBBox = getTransformBox(bbox);
            const anySeriesActive = this.isAnySeriesActive();
            (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {
                var _a;
                crossLine.sideFlag = -sideFlag;
                crossLine.direction = rotation === -Math.PI / 2 ? ChartAxisDirection.X : ChartAxisDirection.Y;
                if (crossLine instanceof CartesianCrossLine) {
                    crossLine.label.parallel = (_a = crossLine.label.parallel) !== null && _a !== void 0 ? _a : this.label.parallel;
                }
                crossLine.parallelFlipRotation = parallelFlipRotation;
                crossLine.regularFlipRotation = regularFlipRotation;
                crossLine.calculateLayout(anySeriesActive);
            });
            this.updateLayoutState();
            primaryTickCount = ticksResult.primaryTickCount;
            return { primaryTickCount, bbox: transformedBBox };
        }
        updateLayoutState() {
            this.layout.label = {
                fractionDigits: this.fractionDigits,
                padding: this.label.padding,
                format: this.label.format,
            };
        }
        updateScale() {
            this.updateRange();
            this.calculateDomain();
            this.setDomain();
            this.setTickInterval(this.tick.interval);
            const { scale, nice } = this;
            if (!ContinuousScale.is(scale)) {
                return;
            }
            scale.nice = nice;
            scale.update();
        }
        calculateRotations() {
            const rotation = toRadians(this.rotation);
            // When labels are parallel to the axis line, the `parallelFlipFlag` is used to
            // flip the labels to avoid upside-down text, when the axis is rotated
            // such that it is in the right hemisphere, i.e. the angle of rotation
            // is in the [0, π] interval.
            // The rotation angle is normalized, so that we have an easier time checking
            // if it's in the said interval. Since the axis is always rendered vertically
            // and then rotated, zero rotation means 12 (not 3) o-clock.
            // -1 = flip
            //  1 = don't flip (default)
            const parallelFlipRotation = normalizeAngle360(rotation);
            const regularFlipRotation = normalizeAngle360(rotation - Math.PI / 2);
            return { rotation, parallelFlipRotation, regularFlipRotation };
        }
        generateTicks({ primaryTickCount, parallelFlipRotation, regularFlipRotation, labelX, sideFlag, }) {
            var _a;
            const { scale, tick, label: { parallel, rotation, fontFamily, fontSize, fontStyle, fontWeight }, } = this;
            const secondaryAxis = primaryTickCount !== undefined;
            const { defaultRotation, configuredRotation, parallelFlipFlag, regularFlipFlag } = calculateLabelRotation({
                rotation,
                parallel,
                regularFlipRotation,
                parallelFlipRotation,
            });
            const initialRotation = configuredRotation + defaultRotation;
            const labelMatrix = new Matrix();
            const { maxTickCount } = this.estimateTickCount({
                minSpacing: tick.minSpacing,
                maxSpacing: (_a = tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN,
            });
            const continuous = ContinuousScale.is(scale);
            const maxIterations = !continuous || isNaN(maxTickCount) ? 10 : maxTickCount;
            let textAlign = getTextAlign(parallel, configuredRotation, 0, sideFlag, regularFlipFlag);
            const textBaseline = getTextBaseline(parallel, configuredRotation, sideFlag, parallelFlipFlag);
            const textProps = {
                fontFamily,
                fontSize,
                fontStyle,
                fontWeight,
                textBaseline,
                textAlign,
            };
            let tickData = {
                rawTicks: [],
                ticks: [],
                labelCount: 0,
            };
            let index = 0;
            let autoRotation = 0;
            let labelOverlap = true;
            let terminate = false;
            while (labelOverlap && index <= maxIterations) {
                if (terminate) {
                    break;
                }
                autoRotation = 0;
                textAlign = getTextAlign(parallel, configuredRotation, 0, sideFlag, regularFlipFlag);
                const tickStrategies = this.getTickStrategies({ secondaryAxis, index });
                for (const strategy of tickStrategies) {
                    ({ tickData, index, autoRotation, terminate } = strategy({
                        index,
                        tickData,
                        textProps,
                        labelOverlap,
                        terminate,
                        primaryTickCount,
                    }));
                    const rotated = configuredRotation !== 0 || autoRotation !== 0;
                    const rotation = initialRotation + autoRotation;
                    textAlign = getTextAlign(parallel, configuredRotation, autoRotation, sideFlag, regularFlipFlag);
                    labelOverlap = this.checkLabelOverlap(rotation, rotated, labelMatrix, tickData.ticks, labelX, Object.assign(Object.assign({}, textProps), { textAlign }));
                }
            }
            const combinedRotation = defaultRotation + configuredRotation + autoRotation;
            if (!secondaryAxis && tickData.rawTicks.length > 0) {
                primaryTickCount = tickData.rawTicks.length;
            }
            return { tickData, primaryTickCount, combinedRotation, textBaseline, textAlign };
        }
        getTickStrategies({ index, secondaryAxis }) {
            const { scale, label, tick } = this;
            const continuous = ContinuousScale.is(scale);
            const avoidLabelCollisions = label.enabled && label.avoidCollisions;
            const filterTicks = !continuous && index !== 0 && avoidLabelCollisions;
            const autoRotate = label.autoRotate === true && label.rotation === undefined;
            const strategies = [];
            let tickGenerationType;
            if (this.tick.values) {
                tickGenerationType = TickGenerationType.VALUES;
            }
            else if (secondaryAxis) {
                tickGenerationType = TickGenerationType.CREATE_SECONDARY;
            }
            else if (filterTicks) {
                tickGenerationType = TickGenerationType.FILTER;
            }
            else {
                tickGenerationType = TickGenerationType.CREATE;
            }
            const tickGenerationStrategy = ({ index, tickData, primaryTickCount, terminate }) => this.createTickData(tickGenerationType, index, tickData, terminate, primaryTickCount);
            strategies.push(tickGenerationStrategy);
            if (!continuous && !isNaN(tick.minSpacing)) {
                const tickFilterStrategy = ({ index, tickData, primaryTickCount, terminate }) => this.createTickData(TickGenerationType.FILTER, index, tickData, terminate, primaryTickCount);
                strategies.push(tickFilterStrategy);
            }
            if (!avoidLabelCollisions) {
                return strategies;
            }
            if (label.autoWrap) {
                const autoWrapStrategy = ({ index, tickData, textProps }) => this.wrapLabels(tickData, index, textProps);
                strategies.push(autoWrapStrategy);
            }
            else if (autoRotate) {
                const autoRotateStrategy = ({ index, tickData, labelOverlap, terminate }) => ({
                    index,
                    tickData,
                    autoRotation: this.getAutoRotation(labelOverlap),
                    terminate,
                });
                strategies.push(autoRotateStrategy);
            }
            return strategies;
        }
        createTickData(tickGenerationType, index, tickData, terminate, primaryTickCount) {
            var _a;
            const { scale, tick } = this;
            const { maxTickCount, minTickCount, defaultTickCount } = this.estimateTickCount({
                minSpacing: tick.minSpacing,
                maxSpacing: (_a = tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN,
            });
            const continuous = ContinuousScale.is(scale);
            const maxIterations = !continuous || isNaN(maxTickCount) ? 10 : maxTickCount;
            let tickCount = continuous ? Math.max(defaultTickCount - index, minTickCount) : maxTickCount;
            const regenerateTicks = tick.interval === undefined &&
                tick.values === undefined &&
                tickCount > minTickCount &&
                (continuous || tickGenerationType === TickGenerationType.FILTER);
            let unchanged = true;
            while (unchanged && index <= maxIterations) {
                const prevTicks = tickData.rawTicks;
                tickCount = continuous ? Math.max(defaultTickCount - index, minTickCount) : maxTickCount;
                const { rawTicks, ticks, labelCount } = this.getTicks({
                    tickGenerationType,
                    previousTicks: prevTicks,
                    tickCount,
                    minTickCount,
                    maxTickCount,
                    primaryTickCount,
                });
                tickData.rawTicks = rawTicks;
                tickData.ticks = ticks;
                tickData.labelCount = labelCount;
                unchanged = regenerateTicks ? areArrayNumbersEqual(rawTicks, prevTicks) : false;
                index++;
            }
            const shouldTerminate = tick.interval !== undefined || tick.values !== undefined;
            terminate || (terminate = shouldTerminate);
            return { tickData, index, autoRotation: 0, terminate };
        }
        checkLabelOverlap(rotation, rotated, labelMatrix, tickData, labelX, textProps) {
            Matrix.updateTransformMatrix(labelMatrix, 1, 1, rotation, 0, 0);
            const labelData = this.createLabelData(tickData, labelX, textProps, labelMatrix);
            const labelSpacing = getLabelSpacing(this.label.minSpacing, rotated);
            return axisLabelsOverlap(labelData, labelSpacing);
        }
        createLabelData(tickData, labelX, textProps, labelMatrix) {
            const labelData = [];
            for (const tickDatum of tickData) {
                const { tickLabel, translationY } = tickDatum;
                if (tickLabel === '' || tickLabel == undefined) {
                    // skip user hidden ticks
                    continue;
                }
                const lines = splitText(tickLabel);
                const { width, height } = measureText(lines, labelX, translationY, textProps);
                const bbox = new BBox(labelX, translationY, width, height);
                const labelDatum = calculateLabelBBox(tickLabel, bbox, labelX, translationY, labelMatrix);
                labelData.push(labelDatum);
            }
            return labelData;
        }
        getAutoRotation(labelOverlap) {
            var _a;
            return labelOverlap ? normalizeAngle360(toRadians((_a = this.label.autoRotateAngle) !== null && _a !== void 0 ? _a : 0)) : 0;
        }
        getTicks({ tickGenerationType, previousTicks, tickCount, minTickCount, maxTickCount, primaryTickCount, }) {
            var _a;
            const { range, scale, visibleRange } = this;
            let rawTicks = [];
            switch (tickGenerationType) {
                case TickGenerationType.VALUES:
                    rawTicks = this.tick.values;
                    break;
                case TickGenerationType.CREATE_SECONDARY:
                    // `updateSecondaryAxisTicks` mutates `scale.domain` based on `primaryTickCount`
                    rawTicks = this.updateSecondaryAxisTicks(primaryTickCount);
                    break;
                case TickGenerationType.FILTER:
                    rawTicks = this.filterTicks(previousTicks, tickCount);
                    break;
                default:
                    rawTicks = this.createTicks(tickCount, minTickCount, maxTickCount);
                    break;
            }
            // When the scale domain or the ticks change, the label format may change
            this.onLabelFormatChange(rawTicks, this.label.format);
            // `ticks instanceof NumericTicks` doesn't work here, so we feature detect.
            this.fractionDigits = rawTicks.fractionDigits >= 0 ? rawTicks.fractionDigits : 0;
            const halfBandwidth = ((_a = scale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;
            const ticks = [];
            let labelCount = 0;
            const tickIdCounts = new Map();
            // Only get the ticks within a sliding window of the visible range to improve performance
            const start = Math.max(0, Math.floor(visibleRange[0] * rawTicks.length));
            const end = Math.min(rawTicks.length, Math.ceil(visibleRange[1] * rawTicks.length));
            for (let i = start; i < end; i++) {
                const rawTick = rawTicks[i];
                const translationY = scale.convert(rawTick) + halfBandwidth;
                // Do not render ticks outside the range with a small tolerance. A clip rect would trim long labels, so
                // instead hide ticks based on their translation.
                if (range.length > 0 && !this.inRange(translationY, 0, 0.001))
                    continue;
                const tickLabel = this.formatTick(rawTick, i);
                // Create a tick id from the label, or as an increment of the last label if this tick label is blank
                let tickId = tickLabel;
                if (tickIdCounts.has(tickId)) {
                    const count = tickIdCounts.get(tickId);
                    tickIdCounts.set(tickId, count + 1);
                    tickId = `${tickId}_${count}`;
                }
                else {
                    tickIdCounts.set(tickId, 1);
                }
                ticks.push({ tick: rawTick, tickId, tickLabel, translationY });
                if (tickLabel === '' || tickLabel == undefined) {
                    continue;
                }
                labelCount++;
            }
            return { rawTicks, ticks, labelCount };
        }
        filterTicks(ticks, tickCount) {
            var _a;
            const tickSpacing = !isNaN(this.tick.minSpacing) || !isNaN((_a = this.tick.maxSpacing) !== null && _a !== void 0 ? _a : NaN);
            const keepEvery = tickSpacing ? Math.ceil(ticks.length / tickCount) : 2;
            return ticks.filter((_, i) => i % keepEvery === 0);
        }
        createTicks(tickCount, minTickCount, maxTickCount) {
            var _a, _b, _c;
            this.setTickCount(tickCount, minTickCount, maxTickCount);
            return (_c = (_b = (_a = this.scale).ticks) === null || _b === void 0 ? void 0 : _b.call(_a)) !== null && _c !== void 0 ? _c : [];
        }
        estimateTickCount({ minSpacing, maxSpacing }) {
            const { minRect } = this;
            const rangeWithBleed = this.calculateRangeWithBleed();
            const defaultMinSpacing = Math.max(this.defaultTickMinSpacing, rangeWithBleed / ContinuousScale.defaultMaxTickCount);
            let clampMaxTickCount = !isNaN(maxSpacing);
            if (isNaN(minSpacing)) {
                minSpacing = defaultMinSpacing;
            }
            if (isNaN(maxSpacing)) {
                maxSpacing = rangeWithBleed;
            }
            if (minSpacing > maxSpacing) {
                if (minSpacing === defaultMinSpacing) {
                    minSpacing = maxSpacing;
                }
                else {
                    maxSpacing = minSpacing;
                }
            }
            // Clamps the min spacing between ticks to be no more than the min distance between datums
            const minRectDistance = minRect
                ? this.direction === ChartAxisDirection.X
                    ? minRect.width
                    : minRect.height
                : 1;
            clampMaxTickCount && (clampMaxTickCount = minRectDistance < defaultMinSpacing);
            const maxTickCount = clamp(1, Math.floor(rangeWithBleed / minSpacing), clampMaxTickCount ? Math.floor(rangeWithBleed / minRectDistance) : Infinity);
            const minTickCount = Math.min(maxTickCount, Math.ceil(rangeWithBleed / maxSpacing));
            const defaultTickCount = clamp(minTickCount, ContinuousScale.defaultTickCount, maxTickCount);
            return { minTickCount, maxTickCount, defaultTickCount };
        }
        updateVisibility() {
            if (this.moduleCtx.animationManager.isSkipped()) {
                this.resetSelectionNodes();
            }
            this.tickLineGroup.visible = this.tick.enabled;
            this.gridLineGroup.visible = this.gridLine.enabled;
            this.tickLabelGroup.visible = this.label.enabled;
        }
        updateCrossLines({ rotation, parallelFlipRotation, regularFlipRotation, }) {
            var _a;
            const sideFlag = this.label.getSideFlag();
            const anySeriesActive = this.isAnySeriesActive();
            (_a = this.crossLines) === null || _a === void 0 ? void 0 : _a.forEach((crossLine) => {
                var _a;
                crossLine.sideFlag = -sideFlag;
                crossLine.direction = rotation === -Math.PI / 2 ? ChartAxisDirection.X : ChartAxisDirection.Y;
                if (crossLine instanceof CartesianCrossLine) {
                    crossLine.label.parallel = (_a = crossLine.label.parallel) !== null && _a !== void 0 ? _a : this.label.parallel;
                }
                crossLine.parallelFlipRotation = parallelFlipRotation;
                crossLine.regularFlipRotation = regularFlipRotation;
                crossLine.update(anySeriesActive);
            });
        }
        updateTickLines() {
            const { tick, label } = this;
            const sideFlag = label.getSideFlag();
            this.tickLineGroupSelection.each((line) => {
                line.strokeWidth = tick.width;
                line.stroke = tick.color;
                line.x1 = sideFlag * tick.size;
                line.x2 = 0;
                line.y1 = 0;
                line.y2 = 0;
            });
        }
        calculateAvailableRange() {
            const { range } = this;
            const min = Math.min(...range);
            const max = Math.max(...range);
            return max - min;
        }
        /**
         * Calculates the available range with an additional "bleed" beyond the canvas that encompasses the full axis when
         * the visible range is only a portion of the axis.
         */
        calculateRangeWithBleed() {
            const { visibleRange } = this;
            const visibleScale = 1 / (visibleRange[1] - visibleRange[0]);
            return round$1(this.calculateAvailableRange() * visibleScale, 2);
        }
        calculateDomain() {
            if (this.linkedTo) {
                this.dataDomain = this.linkedTo.dataDomain;
            }
            else {
                const visibleSeries = this.boundSeries.filter((s) => this.includeInvisibleDomains || s.isEnabled());
                const domains = visibleSeries.flatMap((series) => series.getDomain(this.direction));
                this.dataDomain = this.normaliseDataDomain(domains);
            }
        }
        getAxisTransform() {
            return {
                rotation: toRadians(this.rotation),
                rotationCenterX: 0,
                rotationCenterY: 0,
                translationX: this.translation.x,
                translationY: this.translation.y,
            };
        }
        updatePosition() {
            const { crossLineGroup, axisGroup, gridGroup, translation, gridLineGroupSelection, gridPadding, gridLength } = this;
            const { rotation } = this.calculateRotations();
            const sideFlag = this.label.getSideFlag();
            const translationX = Math.floor(translation.x);
            const translationY = Math.floor(translation.y);
            crossLineGroup.setProperties({ rotation, translationX, translationY });
            axisGroup.datum = this.getAxisTransform();
            gridGroup.setProperties({ rotation, translationX, translationY });
            gridLineGroupSelection.each((line) => {
                line.x1 = gridPadding;
                line.x2 = -sideFlag * gridLength + gridPadding;
                line.y = 0;
            });
        }
        updateSecondaryAxisTicks(_primaryTickCount) {
            throw new Error('AG Charts - unexpected call to updateSecondaryAxisTicks() - check axes configuration.');
        }
        updateSelections(lineData, data, params) {
            this.lineNode.datum = lineData;
            this.gridLineGroupSelection.update(this.gridLength ? data : [], (group) => group.append(new Line({ tag: Tags.GridLine })), (datum) => datum.tickId);
            this.tickLineGroupSelection.update(data, (group) => group.appendChild(new Line({ tag: Tags.TickLine })), (datum) => datum.tickId);
            this.tickLabelGroupSelection.update(data.map((d) => this.getTickLabelProps(d, params)), (group) => group.appendChild(new Text({ tag: Tags.TickLabel })), (datum) => datum.tickId);
        }
        updateAxisLine() {
            const { line } = this;
            // Without this the layout isn't consistent when enabling/disabling the line, padding configurations are not respected.
            const strokeWidth = line.enabled ? line.width : 0;
            this.lineNode.setProperties({
                stroke: line.color,
                strokeWidth,
            });
        }
        updateGridLines(sideFlag) {
            const { gridLine: { style, width }, gridPadding, gridLength, } = this;
            if (gridLength === 0 || style.length === 0) {
                return;
            }
            this.gridLineGroupSelection.each((line, _, index) => {
                const { stroke, lineDash } = style[index % style.length];
                line.setProperties({
                    x1: gridPadding,
                    x2: -sideFlag * gridLength + gridPadding,
                    y: 0,
                    fill: undefined,
                    stroke,
                    strokeWidth: width,
                    lineDash,
                });
            });
        }
        updateLabels() {
            const { label } = this;
            if (!label.enabled) {
                return;
            }
            // Apply label option values
            this.tickLabelGroupSelection.each((node, datum) => {
                node.setProperties(datum, [
                    'fill',
                    'fontFamily',
                    'fontSize',
                    'fontStyle',
                    'fontWeight',
                    'text',
                    'textAlign',
                    'textBaseline',
                ]);
            });
        }
        wrapLabels(tickData, index, labelProps) {
            const { parallel, maxWidth, maxHeight } = this.label;
            let defaultMaxWidth = this.maxThickness;
            let defaultMaxHeight = Math.round(this.calculateAvailableRange() / tickData.labelCount);
            if (parallel) {
                [defaultMaxWidth, defaultMaxHeight] = [defaultMaxHeight, defaultMaxWidth];
            }
            tickData.ticks.forEach((tickDatum) => {
                tickDatum.tickLabel = Text.wrap(tickDatum.tickLabel, maxWidth !== null && maxWidth !== void 0 ? maxWidth : defaultMaxWidth, maxHeight !== null && maxHeight !== void 0 ? maxHeight : defaultMaxHeight, labelProps, 'hyphenate');
            });
            return { tickData, index, autoRotation: 0, terminate: true };
        }
        updateTitle(params) {
            const { rotation, title, _titleCaption, lineNode, tickLineGroup, tickLabelGroup } = this;
            if (!title) {
                _titleCaption.enabled = false;
                return;
            }
            let tickSpace = 0;
            const { anyTickVisible } = params;
            if (title.enabled && anyTickVisible) {
                const tickBBox = Group.computeBBox([tickLineGroup, tickLabelGroup, lineNode]);
                const tickWidth = rotation === 0 ? tickBBox.width : tickBBox.height;
                if (Math.abs(tickWidth) < Infinity) {
                    tickSpace += tickWidth;
                }
            }
            this.setTitleProps(_titleCaption, { tickSpace });
        }
        // For formatting (nice rounded) tick values.
        formatTick(datum, index) {
            var _a, _b;
            const { label, labelFormatter, fractionDigits, moduleCtx: { callbackCache }, } = this;
            if (label.formatter) {
                const value = fractionDigits > 0 ? datum : String(datum);
                return ((_a = callbackCache.call(label.formatter, {
                    value,
                    index,
                    fractionDigits,
                    formatter: labelFormatter,
                })) !== null && _a !== void 0 ? _a : value);
            }
            else if (labelFormatter) {
                return (_b = callbackCache.call(labelFormatter, datum)) !== null && _b !== void 0 ? _b : String(datum);
            }
            // The axis is using a logScale or the`datum` is an integer, a string or an object
            return String(datum);
        }
        // For formatting arbitrary values between the ticks.
        formatDatum(datum) {
            return String(datum);
        }
        computeBBox() {
            return this.axisGroup.computeBBox();
        }
        initCrossLine(crossLine) {
            crossLine.scale = this.scale;
            crossLine.gridLength = this.gridLength;
        }
        isAnySeriesActive() {
            return this.boundSeries.some((s) => this.includeInvisibleDomains || s.isEnabled());
        }
        clipTickLines(x, y, width, height) {
            this.tickLineGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));
        }
        clipGrid(x, y, width, height) {
            this.gridGroup.setClipRectInGroupCoordinateSpace(new BBox(x, y, width, height));
        }
        calculatePadding(min, _max) {
            return [Math.abs(min * 0.01), Math.abs(min * 0.01)];
        }
        getTitleFormatterParams() {
            var _a;
            const boundSeries = this.boundSeries.reduce((acc, next) => {
                const keys = next.getKeys(this.direction);
                const names = next.getNames(this.direction);
                for (let idx = 0; idx < keys.length; idx++) {
                    acc.push({ key: keys[idx], name: names[idx] });
                }
                return acc;
            }, []);
            return {
                direction: this.direction,
                boundSeries,
                defaultValue: (_a = this.title) === null || _a === void 0 ? void 0 : _a.text,
            };
        }
        normaliseDataDomain(d) {
            return { domain: d, clipped: false };
        }
        getLayoutState() {
            return Object.assign({ rect: this.computeBBox(), gridPadding: this.gridPadding, seriesAreaPadding: this.seriesAreaPadding, tickSize: this.tick.size }, this.layout);
        }
        getModuleMap() {
            return this.moduleMap;
        }
        createModuleContext() {
            var _a;
            (_a = this.axisContext) !== null && _a !== void 0 ? _a : (this.axisContext = this.createAxisContext());
            return Object.assign(Object.assign({}, this.moduleCtx), { parent: this.axisContext });
        }
        createAxisContext() {
            return {
                axisId: this.id,
                direction: this.direction,
                continuous: ContinuousScale.is(this.scale),
                keys: () => this.boundSeries.flatMap((s) => s.getKeys(this.direction)),
                scaleValueFormatter: (specifier) => { var _a, _b; return (_b = (_a = this.scale).tickFormat) === null || _b === void 0 ? void 0 : _b.call(_a, { specifier }); },
                scaleBandwidth: () => { var _a; return (_a = this.scale.bandwidth) !== null && _a !== void 0 ? _a : 0; },
                scaleConvert: (val) => this.scale.convert(val),
                scaleInvert: (val) => { var _a, _b; return (_b = (_a = this.scale).invert) === null || _b === void 0 ? void 0 : _b.call(_a, val); },
            };
        }
        animateReadyUpdate(diff) {
            const { animationManager } = this.moduleCtx;
            const selectionCtx = prepareAxisAnimationContext(this);
            const fns = prepareAxisAnimationFunctions(selectionCtx);
            fromToMotion(this.id, 'axis-group', animationManager, [this.axisGroup], fns.group);
            fromToMotion(this.id, 'line', animationManager, [this.lineNode], fns.line);
            fromToMotion(this.id, 'line-paths', animationManager, [this.gridLineGroupSelection, this.tickLineGroupSelection], fns.tick, (_, d) => d.tickId, diff);
            fromToMotion(this.id, 'tick-labels', animationManager, [this.tickLabelGroupSelection], fns.label, (_, d) => d.tickId, diff);
        }
        resetSelectionNodes() {
            const { gridLineGroupSelection, tickLineGroupSelection, tickLabelGroupSelection, lineNode } = this;
            const selectionCtx = prepareAxisAnimationContext(this);
            resetMotion([this.axisGroup], resetAxisGroupFn());
            resetMotion([gridLineGroupSelection, tickLineGroupSelection], resetAxisSelectionFn(selectionCtx));
            resetMotion([tickLabelGroupSelection], resetAxisLabelSelectionFn());
            resetMotion([lineNode], resetAxisLineSelectionFn());
        }
        calculateUpdateDiff(previous, tickData) {
            const added = new Set();
            const removed = new Set();
            const tickCount = Math.max(previous.length, tickData.ticks.length);
            for (let i = 0; i < tickCount; i++) {
                const tickDatum = tickData.ticks[i];
                const prev = previous[i];
                const tick = tickDatum === null || tickDatum === void 0 ? void 0 : tickDatum.tickId;
                if (prev === tick) {
                    continue;
                }
                if (removed.has(tick)) {
                    removed.delete(tick);
                }
                else if (tick) {
                    added.add(tick);
                }
                if (added.has(prev)) {
                    added.delete(prev);
                }
                else if (prev) {
                    removed.add(prev);
                }
            }
            return {
                changed: added.size > 0 || removed.size > 0,
                added: [...added.values()],
                removed: [...removed.values()],
            };
        }
    }
    Axis.defaultTickMinSpacing = 50;
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], Axis.prototype, "nice", void 0);
    __decorate([
        Validate(STRING_ARRAY),
        __metadata("design:type", Array)
    ], Axis.prototype, "keys", void 0);

    class CartesianAxisLabel extends AxisLabel {
        constructor() {
            super(...arguments);
            /**
             * Rotation angle to use when autoRotate is applied.
             */
            this.autoRotateAngle = 335;
        }
    }
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], CartesianAxisLabel.prototype, "autoRotate", void 0);
    __decorate([
        Validate(NUMBER$1(-360, 360)),
        __metadata("design:type", Number)
    ], CartesianAxisLabel.prototype, "autoRotateAngle", void 0);

    class CartesianAxis extends Axis {
        constructor() {
            super(...arguments);
            this.thickness = 0;
            this.position = 'left';
        }
        get direction() {
            return ['top', 'bottom'].includes(this.position) ? ChartAxisDirection.X : ChartAxisDirection.Y;
        }
        updateDirection() {
            switch (this.position) {
                case 'top':
                    this.rotation = -90;
                    this.label.mirrored = true;
                    this.label.parallel = true;
                    break;
                case 'right':
                    this.rotation = 0;
                    this.label.mirrored = true;
                    this.label.parallel = false;
                    break;
                case 'bottom':
                    this.rotation = -90;
                    this.label.mirrored = false;
                    this.label.parallel = true;
                    break;
                case 'left':
                    this.rotation = 0;
                    this.label.mirrored = false;
                    this.label.parallel = false;
                    break;
            }
            if (this.axisContext) {
                this.axisContext.position = this.position;
                this.axisContext.direction = this.direction;
            }
        }
        update(primaryTickCount) {
            this.updateDirection();
            return super.update(primaryTickCount);
        }
        calculateLayout(primaryTickCount) {
            this.updateDirection();
            return super.calculateLayout(primaryTickCount);
        }
        createAxisContext() {
            return Object.assign(Object.assign({}, super.createAxisContext()), { position: this.position });
        }
        assignCrossLineArrayConstructor(crossLines) {
            assignJsonApplyConstructedArray(crossLines, CartesianCrossLine);
        }
        createLabel() {
            return new CartesianAxisLabel();
        }
    }
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], CartesianAxis.prototype, "thickness", void 0);
    __decorate([
        Validate(POSITION),
        __metadata("design:type", String)
    ], CartesianAxis.prototype, "position", void 0);

    class CategoryAxis extends CartesianAxis {
        constructor(moduleCtx) {
            super(moduleCtx, new BandScale());
            this._paddingOverrideEnabled = false;
            this.groupPaddingInner = 0.1;
            this.includeInvisibleDomains = true;
        }
        set paddingInner(value) {
            this._paddingOverrideEnabled = true;
            this.scale.paddingInner = value;
        }
        get paddingInner() {
            this._paddingOverrideEnabled = true;
            return this.scale.paddingInner;
        }
        set paddingOuter(value) {
            this.scale.paddingOuter = value;
        }
        get paddingOuter() {
            return this.scale.paddingOuter;
        }
        normaliseDataDomain(d) {
            const domain = [];
            const uniqueValues = new Set();
            for (const v of d) {
                const key = v instanceof Date ? v.getTime() : v;
                if (!uniqueValues.has(key)) {
                    uniqueValues.add(key);
                    // Only add unique values
                    domain.push(v);
                }
            }
            return { domain, clipped: false };
        }
        calculateDomain() {
            if (!this._paddingOverrideEnabled) {
                const paddings = this.boundSeries.map((s) => { var _a; return (_a = s.getBandScalePadding) === null || _a === void 0 ? void 0 : _a.call(s); }).filter((p) => p != null);
                if (paddings.length > 0) {
                    this.scale.paddingInner = Math.min(...paddings.map((p) => p.inner));
                    this.scale.paddingOuter = Math.max(...paddings.map((p) => p.outer));
                }
            }
            return super.calculateDomain();
        }
    }
    CategoryAxis.className = 'CategoryAxis';
    CategoryAxis.type = 'category';
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Number)
    ], CategoryAxis.prototype, "groupPaddingInner", void 0);

    /**
     * The tree layout is calculated in abstract x/y coordinates, where the root is at (0, 0)
     * and the tree grows downward from the root.
     */
    class TreeNode {
        constructor(label = '', parent, number = 0) {
            this.x = 0;
            this.y = 0;
            this.subtreeLeft = NaN;
            this.subtreeRight = NaN;
            this.screenX = 0;
            this.screenY = 0;
            this.children = [];
            this.leafCount = 0;
            this.prelim = 0;
            this.mod = 0;
            this.ancestor = this;
            this.change = 0;
            this.shift = 0;
            this.label = label;
            // screenX and screenY are meant to be recomputed from (layout) x and y
            // when the tree is resized (without performing another layout)
            this.parent = parent;
            this.depth = parent ? parent.depth + 1 : 0;
            this.number = number;
        }
        getLeftSibling() {
            return this.number > 0 && this.parent ? this.parent.children[this.number - 1] : undefined;
        }
        getLeftmostSibling() {
            return this.number > 0 && this.parent ? this.parent.children[0] : undefined;
        }
        // traverse the left contour of a subtree, return the successor of v on this contour
        nextLeft() {
            return this.children ? this.children[0] : this.thread;
        }
        // traverse the right contour of a subtree, return the successor of v on this contour
        nextRight() {
            return this.children ? this.children[this.children.length - 1] : this.thread;
        }
        getSiblings() {
            return this.parent ? this.parent.children.filter((_, i) => i !== this.number) : [];
        }
    }
    /**
     * Converts an array of ticks, where each tick has an array of labels, to a label tree.
     * If `pad` is `true`, will ensure that every branch matches the depth of the tree by
     * creating empty labels.
     */
    function ticksToTree(ticks, pad = true) {
        const root = new TreeNode();
        let depth = 0;
        if (pad) {
            ticks.forEach((tick) => (depth = Math.max(depth, tick.labels.length)));
        }
        ticks.forEach((tick) => {
            if (pad) {
                while (tick.labels.length < depth) {
                    tick.labels.unshift('');
                }
            }
            insertTick(root, tick);
        });
        return root;
    }
    function insertTick(root, tick) {
        const pathParts = tick.labels.slice().reverse(); // path elements from root to leaf label
        const lastPartIndex = pathParts.length - 1;
        pathParts.forEach((pathPart, partIndex) => {
            const children = root.children;
            const existingNode = children.find((child) => child.label === pathPart);
            const isNotLeaf = partIndex !== lastPartIndex;
            if (existingNode && isNotLeaf) {
                // the isNotLeaf check is to allow duplicate leafs
                root = existingNode;
            }
            else {
                const node = new TreeNode(pathPart, root);
                node.number = children.length;
                children.push(node);
                if (isNotLeaf) {
                    root = node;
                }
            }
        });
    }
    // Shift the subtree.
    function moveSubtree(wm, wp, shift) {
        const subtrees = wp.number - wm.number;
        const ratio = shift / subtrees;
        wp.change -= ratio;
        wp.shift += shift;
        wm.change += ratio;
        wp.prelim += shift;
        wp.mod += shift;
    }
    function ancestor(vim, v, defaultAncestor) {
        return v.getSiblings().indexOf(vim.ancestor) >= 0 ? vim.ancestor : defaultAncestor;
    }
    // Spaces out the children.
    function executeShifts(v) {
        const children = v.children;
        if (children) {
            let shift = 0;
            let change = 0;
            for (let i = children.length - 1; i >= 0; i--) {
                const w = children[i];
                w.prelim += shift;
                w.mod += shift;
                change += w.change;
                shift += w.shift + change;
            }
        }
    }
    // Moves current subtree with v as the root if some nodes are conflicting in space.
    function apportion(v, defaultAncestor, distance) {
        const w = v.getLeftSibling();
        if (w) {
            let vop = v;
            let vip = v;
            let vim = w;
            let vom = vip.getLeftmostSibling();
            let sip = vip.mod;
            let sop = vop.mod;
            let sim = vim.mod;
            let som = vom.mod;
            while (vim.nextRight() && vip.nextLeft()) {
                vim = vim.nextRight();
                vip = vip.nextLeft();
                vom = vom.nextLeft();
                vop = vop.nextRight();
                vop.ancestor = v;
                const shift = vim.prelim + sim - (vip.prelim + sip) + distance;
                if (shift > 0) {
                    moveSubtree(ancestor(vim, v, defaultAncestor), v, shift);
                    sip += shift;
                    sop += shift;
                }
                sim += vim.mod;
                sip += vip.mod;
                som += vom.mod;
                sop += vop.mod;
            }
            if (vim.nextRight() && !vop.nextRight()) {
                vop.thread = vim.nextRight();
                vop.mod += sim - sop;
            }
            else {
                if (vip.nextLeft() && !vom.nextLeft()) {
                    vom.thread = vip.nextLeft();
                    vom.mod += sip - som;
                }
                defaultAncestor = v;
            }
        }
        return defaultAncestor;
    }
    // Compute the preliminary x-coordinate of node and its children (recursively).
    function firstWalk(node, distance) {
        const children = node.children;
        if (children.length) {
            let defaultAncestor = children[0];
            children.forEach((child) => {
                firstWalk(child, distance);
                defaultAncestor = apportion(child, defaultAncestor, distance);
            });
            executeShifts(node);
            const midpoint = (children[0].prelim + children[children.length - 1].prelim) / 2;
            const leftSibling = node.getLeftSibling();
            if (leftSibling) {
                node.prelim = leftSibling.prelim + distance;
                node.mod = node.prelim - midpoint;
            }
            else {
                node.prelim = midpoint;
            }
        }
        else {
            const leftSibling = node.getLeftSibling();
            node.prelim = leftSibling ? leftSibling.prelim + distance : 0;
        }
    }
    class Dimensions {
        constructor() {
            this.top = Infinity;
            this.right = -Infinity;
            this.bottom = -Infinity;
            this.left = Infinity;
        }
        update(node, xy) {
            const { x, y } = xy(node);
            if (x > this.right) {
                this.right = x;
            }
            if (x < this.left) {
                this.left = x;
            }
            if (y > this.bottom) {
                this.bottom = y;
            }
            if (y < this.top) {
                this.top = y;
            }
        }
    }
    function secondWalk(v, m, layout) {
        v.x = v.prelim + m;
        v.y = v.depth;
        layout.update(v);
        v.children.forEach((w) => secondWalk(w, m + v.mod, layout));
    }
    // After the second walk the parent nodes are positioned at the center of their immediate children.
    // If we want the parent nodes to be positioned at the center of the subtree for which they are roots,
    // we need a third walk to adjust the positions.
    function thirdWalk(v) {
        const children = v.children;
        let leafCount = 0;
        children.forEach((w) => {
            thirdWalk(w);
            if (w.children.length) {
                leafCount += w.leafCount;
            }
            else {
                leafCount++;
            }
        });
        v.leafCount = leafCount;
        if (children.length) {
            v.subtreeLeft = children[0].subtreeLeft;
            v.subtreeRight = children[v.children.length - 1].subtreeRight;
            v.x = (v.subtreeLeft + v.subtreeRight) / 2;
        }
        else {
            v.subtreeLeft = v.x;
            v.subtreeRight = v.x;
        }
    }
    function treeLayout(root) {
        const layout = new TreeLayout();
        firstWalk(root, 1);
        secondWalk(root, -root.prelim, layout);
        thirdWalk(root);
        return layout;
    }
    class TreeLayout {
        constructor() {
            this.dimensions = new Dimensions();
            this.leafCount = 0;
            this.nodes = [];
            // One might want to process leaf nodes separately from the rest of the tree.
            // For example, position labels corresponding to leafs vertically, rather than horizontally.
            this.leafNodes = [];
            this.nonLeafNodes = [];
            this.depth = 0;
        }
        update(node) {
            this.dimensions.update(node, (node) => ({ x: node.x, y: node.y }));
            if (!node.children.length) {
                this.leafCount++;
                this.leafNodes.push(node);
            }
            else {
                this.nonLeafNodes.push(node);
            }
            if (node.depth > this.depth) {
                this.depth = node.depth;
            }
            this.nodes.push(node);
        }
        resize(width, height, shiftX = 0, shiftY = 0, flipX = false) {
            const xSteps = this.leafCount - 1;
            const ySteps = this.depth;
            const dimensions = this.dimensions;
            let scalingX = 1;
            let scalingY = 1;
            if (width > 0 && xSteps) {
                const existingSpacingX = (dimensions.right - dimensions.left) / xSteps;
                const desiredSpacingX = width / xSteps;
                scalingX = desiredSpacingX / existingSpacingX;
                if (flipX) {
                    scalingX = -scalingX;
                }
            }
            if (height > 0 && ySteps) {
                const existingSpacingY = (dimensions.bottom - dimensions.top) / ySteps;
                const desiredSpacingY = height / ySteps;
                scalingY = desiredSpacingY / existingSpacingY;
            }
            const screenDimensions = new Dimensions();
            this.nodes.forEach((node) => {
                node.screenX = node.x * scalingX;
                node.screenY = node.y * scalingY;
                screenDimensions.update(node, (node) => ({ x: node.screenX, y: node.screenY }));
            });
            // Normalize so that root top and leftmost leaf left start at zero.
            const offsetX = -screenDimensions.left;
            const offsetY = -screenDimensions.top;
            this.nodes.forEach((node) => {
                node.screenX += offsetX + shiftX;
                node.screenY += offsetY + shiftY;
            });
        }
    }

    class GroupedCategoryAxisLabel extends AxisLabel {
        constructor() {
            super(...arguments);
            this.grid = false;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], GroupedCategoryAxisLabel.prototype, "grid", void 0);
    class GroupedCategoryAxis extends CartesianAxis {
        constructor(moduleCtx) {
            super(moduleCtx, new BandScale());
            // Label scale (labels are positioned between ticks, tick count = label count + 1).
            // We don't call is `labelScale` for consistency with other axes.
            this.tickScale = new BandScale();
            this.line = new AxisLine();
            this.label = new GroupedCategoryAxisLabel();
            /**
             * The color of the labels.
             * Use `undefined` rather than `rgba(0, 0, 0, 0)` to make labels invisible.
             */
            this.labelColor = 'rgba(87, 87, 87, 1)';
            this.includeInvisibleDomains = true;
            const { tickLineGroup, tickLabelGroup, gridLineGroup, tickScale, scale } = this;
            scale.paddingOuter = 0.1;
            scale.paddingInner = scale.paddingOuter * 2;
            this.range = scale.range.slice();
            this.refreshScale();
            tickScale.paddingInner = 1;
            tickScale.paddingOuter = 0;
            this.gridLineSelection = Selection.select(gridLineGroup, Line);
            this.axisLineSelection = Selection.select(tickLineGroup, Line);
            this.separatorSelection = Selection.select(tickLineGroup, Line);
            this.labelSelection = Selection.select(tickLabelGroup, Text);
        }
        updateRange() {
            const { range: rr, visibleRange: vr, scale } = this;
            const span = (rr[1] - rr[0]) / (vr[1] - vr[0]);
            const shift = span * vr[0];
            const start = rr[0] - shift;
            this.tickScale.range = scale.range = [start, start + span];
            this.resizeTickTree();
        }
        resizeTickTree() {
            var _a;
            const s = this.scale;
            const range = s.domain.length ? [s.convert(s.domain[0]), s.convert(s.domain[s.domain.length - 1])] : s.range;
            const layout = this.tickTreeLayout;
            const lineHeight = this.lineHeight;
            if (layout) {
                layout.resize(Math.abs(range[1] - range[0]), layout.depth * lineHeight, (Math.min(range[0], range[1]) || 0) + ((_a = s.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2, -layout.depth * lineHeight, range[1] - range[0] < 0);
            }
        }
        get lineHeight() {
            return this.label.fontSize * 1.5;
        }
        /**
         * The length of the grid. The grid is only visible in case of a non-zero value.
         */
        set gridLength(value) {
            // Was visible and now invisible, or was invisible and now visible.
            if ((this._gridLength && !value) || (!this._gridLength && value)) {
                this.gridLineSelection.clear();
                this.labelSelection.clear();
            }
            this._gridLength = value;
        }
        get gridLength() {
            return this._gridLength;
        }
        calculateDomain() {
            var _a;
            const { direction } = this;
            const domains = [];
            let isNumericX;
            this.boundSeries
                .filter((s) => s.visible)
                .forEach((series) => {
                if (direction === ChartAxisDirection.X) {
                    if (isNumericX === undefined) {
                        // always add first X domain
                        const domain = series.getDomain(direction);
                        domains.push(domain);
                        isNumericX = typeof domain[0] === 'number';
                    }
                    else if (isNumericX) {
                        // only add further X domains if the axis is numeric
                        domains.push(series.getDomain(direction));
                    }
                }
                else {
                    domains.push(series.getDomain(direction));
                }
            });
            const domain = new Array().concat(...domains);
            const values = (_a = extent(domain)) !== null && _a !== void 0 ? _a : domain;
            this.dataDomain = this.normaliseDataDomain(values);
            this.scale.domain = this.dataDomain.domain;
        }
        normaliseDataDomain(d) {
            // Prevent duplicate categories.
            const values = d.filter((s, i, arr) => arr.indexOf(s) === i);
            const tickTree = ticksToTree(values);
            this.tickTreeLayout = treeLayout(tickTree);
            const tickScaleDomain = values.slice();
            tickScaleDomain.push('');
            this.tickScale.domain = tickScaleDomain;
            this.resizeTickTree();
            return { domain: values, clipped: false };
        }
        /**
         * Creates/removes/updates the scene graph nodes that constitute the axis.
         * Supposed to be called _manually_ after changing _any_ of the axis properties.
         * This allows to bulk set axis properties before updating the nodes.
         * The node changes made by this method are rendered on the next animation frame.
         * We could schedule this method call automatically on the next animation frame
         * when any of the axis properties change (the way we do when properties of scene graph's
         * nodes change), but this will mean that we first wait for the next animation
         * frame to make changes to the nodes of the axis, then wait for another animation
         * frame to render those changes. It's nice to have everything update automatically,
         * but this extra level of async indirection will not just introduce an unwanted delay,
         * it will also make it harder to reason about the program.
         */
        update() {
            if (!this.computedLayout) {
                return;
            }
            this.updatePosition();
            this.updateTitleCaption();
            this.updateCategoryLabels();
            this.updateSeparators();
            this.updateAxisLines();
            this.updateCategoryGridLines();
            this.resetSelectionNodes();
            return undefined;
        }
        updateTitleCaption() {
            // The Text `node` of the Caption is not used to render the title of the grouped category axis.
            // The phantom root of the tree layout is used instead.
            const { _titleCaption } = this;
            _titleCaption.node.visible = false;
        }
        updateCategoryLabels() {
            if (!this.computedLayout)
                return;
            const { tickLabelLayout } = this.computedLayout;
            const labelSelection = this.labelSelection.update(tickLabelLayout);
            labelSelection.each((node, datum) => {
                node.setProperties(datum);
            });
        }
        updateSeparators() {
            if (!this.computedLayout)
                return;
            const { separatorLayout } = this.computedLayout;
            const { range } = this;
            const epsilon = 0.0000001;
            const separatorSelection = this.separatorSelection.update(separatorLayout);
            separatorSelection.each((line, datum) => {
                line.x1 = datum.x1;
                line.x2 = datum.x2;
                line.y1 = datum.y;
                line.y2 = datum.y;
                line.visible = datum.y >= range[0] - epsilon && datum.y <= range[1] + epsilon;
                line.stroke = this.tick.color;
                line.fill = undefined;
                line.strokeWidth = 1;
            });
        }
        updateAxisLines() {
            if (!this.computedLayout)
                return;
            const { axisLineLayout } = this.computedLayout;
            const axisLineSelection = this.axisLineSelection.update(axisLineLayout);
            axisLineSelection.each((line, datum) => {
                line.setProperties(Object.assign(Object.assign({}, datum), { stroke: this.line.color, strokeWidth: this.line.width }));
                line.x1 = datum.x;
                line.x2 = datum.x;
                line.y1 = datum.y1;
                line.y2 = datum.y2;
                line.strokeWidth = this.line.width;
                line.stroke = this.line.color;
            });
        }
        updateCategoryGridLines() {
            const { gridLength, gridLine, label, range, tickScale } = this;
            const ticks = tickScale.ticks();
            const sideFlag = label.getSideFlag();
            const gridSelection = this.gridLineSelection.update(gridLength ? ticks : []);
            if (gridLength) {
                const { width, style } = gridLine;
                const styleCount = style.length;
                gridSelection.each((line, datum, index) => {
                    const y = Math.round(tickScale.convert(datum));
                    line.x1 = 0;
                    line.x2 = -sideFlag * gridLength;
                    line.y1 = y;
                    line.y2 = y;
                    line.visible = y >= range[0] && y <= range[1];
                    const { stroke, lineDash } = style[index % styleCount];
                    line.stroke = stroke;
                    line.strokeWidth = width;
                    line.lineDash = lineDash;
                    line.fill = undefined;
                });
            }
        }
        computeLayout() {
            this.updateDirection();
            this.calculateDomain();
            this.updateRange();
            const { scale, label, label: { parallel }, moduleCtx: { callbackCache }, range, title, title: { formatter = (p) => p.defaultValue } = {}, } = this;
            const rangeStart = scale.range[0];
            const rangeEnd = scale.range[1];
            const rangeLength = Math.abs(rangeEnd - rangeStart);
            const bandwidth = rangeLength / scale.domain.length || 0;
            const rotation = toRadians(this.rotation);
            const isHorizontal = Math.abs(Math.cos(rotation)) < 1e-8;
            const sideFlag = label.getSideFlag();
            // The Text `node` of the Caption is not used to render the title of the grouped category axis.
            // The phantom root of the tree layout is used instead.
            const lineHeight = this.lineHeight;
            // Render ticks and labels.
            const tickTreeLayout = this.tickTreeLayout;
            const labels = scale.ticks();
            const treeLabels = tickTreeLayout ? tickTreeLayout.nodes : [];
            const isLabelTree = tickTreeLayout ? tickTreeLayout.depth > 1 : false;
            // When labels are parallel to the axis line, the `parallelFlipFlag` is used to
            // flip the labels to avoid upside-down text, when the axis is rotated
            // such that it is in the right hemisphere, i.e. the angle of rotation
            // is in the [0, π] interval.
            // The rotation angle is normalized, so that we have an easier time checking
            // if it's in the said interval. Since the axis is always rendered vertically
            // and then rotated, zero rotation means 12 (not 3) o-clock.
            // -1 = flip
            //  1 = don't flip (default)
            const { defaultRotation, configuredRotation, parallelFlipFlag } = calculateLabelRotation({
                rotation: label.rotation,
                parallel,
                regularFlipRotation: normalizeAngle360(rotation - Math.PI / 2),
                parallelFlipRotation: normalizeAngle360(rotation),
            });
            const tickLabelLayout = [];
            const copyLabelProps = (node) => {
                return {
                    fill: node.fill,
                    fontFamily: node.fontFamily,
                    fontSize: node.fontSize,
                    fontStyle: node.fontStyle,
                    fontWeight: node.fontWeight,
                    rotation: node.rotation,
                    rotationCenterX: node.rotationCenterX,
                    rotationCenterY: node.rotationCenterY,
                    text: node.text,
                    textAlign: node.textAlign,
                    textBaseline: node.textBaseline,
                    translationX: node.translationX,
                    translationY: node.translationY,
                    visible: node.visible,
                    x: node.x,
                    y: node.y,
                };
            };
            const labelBBoxes = new Map();
            let maxLeafLabelWidth = 0;
            const tempText = new Text();
            const setLabelProps = (datum, index) => {
                var _a;
                tempText.setProperties({
                    fill: label.color,
                    fontFamily: label.fontFamily,
                    fontSize: label.fontSize,
                    fontStyle: label.fontStyle,
                    fontWeight: label.fontWeight,
                    textAlign: 'center',
                    textBaseline: parallelFlipFlag === -1 ? 'bottom' : 'hanging',
                    translationX: datum.screenY - label.fontSize * 0.25,
                    translationY: datum.screenX,
                });
                if (index === 0) {
                    const isCaptionEnabled = (title === null || title === void 0 ? void 0 : title.enabled) && labels.length > 0;
                    if (!isCaptionEnabled) {
                        return false;
                    }
                    const text = callbackCache.call(formatter, this.getTitleFormatterParams());
                    tempText.setProperties({
                        fill: title.color,
                        fontFamily: title.fontFamily,
                        fontSize: title.fontSize,
                        fontStyle: title.fontStyle,
                        fontWeight: title.fontWeight,
                        text,
                        textBaseline: 'hanging',
                        translationX: datum.screenY - label.fontSize * 0.25,
                        translationY: datum.screenX,
                    });
                }
                else {
                    const isInRange = datum.screenX >= range[0] && datum.screenX <= range[1];
                    if (!isInRange) {
                        return false;
                    }
                    if (label.formatter) {
                        tempText.text =
                            (_a = callbackCache.call(label.formatter, {
                                value: String(datum.label),
                                index,
                            })) !== null && _a !== void 0 ? _a : String(datum.label);
                    }
                    else {
                        tempText.text = String(datum.label);
                    }
                }
                return true;
            };
            treeLabels.forEach((datum, index) => {
                const isVisible = setLabelProps(datum, index);
                if (isVisible) {
                    const bbox = tempText.computeTransformedBBox();
                    if (bbox) {
                        labelBBoxes.set(index, bbox);
                        if (bbox.width > maxLeafLabelWidth) {
                            maxLeafLabelWidth = bbox.width;
                        }
                    }
                }
            });
            const labelX = sideFlag * label.padding;
            const labelGrid = this.label.grid;
            const separatorData = [];
            treeLabels.forEach((datum, index) => {
                let visible = setLabelProps(datum, index);
                const id = index;
                tempText.x = labelX;
                tempText.rotationCenterX = labelX;
                const isLeaf = !datum.children.length;
                if (isLeaf) {
                    tempText.rotation = configuredRotation;
                    tempText.textAlign = 'end';
                    tempText.textBaseline = 'middle';
                    const bbox = labelBBoxes.get(id);
                    if (bbox && bbox.height > bandwidth) {
                        visible = false;
                        labelBBoxes.delete(id);
                    }
                }
                else {
                    tempText.translationX -= maxLeafLabelWidth - lineHeight + this.label.padding;
                    const availableRange = datum.leafCount * bandwidth;
                    const bbox = labelBBoxes.get(id);
                    if (bbox && bbox.width > availableRange) {
                        visible = false;
                        labelBBoxes.delete(id);
                    }
                    else if (isHorizontal) {
                        tempText.rotation = defaultRotation;
                    }
                    else {
                        tempText.rotation = -Math.PI / 2;
                    }
                }
                // Calculate positions of label separators for all nodes except the root.
                // Each separator is placed to the top of the current label.
                if (datum.parent && isLabelTree) {
                    const y = isLeaf ? datum.screenX - bandwidth / 2 : datum.screenX - (datum.leafCount * bandwidth) / 2;
                    if (isLeaf) {
                        if (datum.number !== datum.children.length - 1 || labelGrid) {
                            separatorData.push({
                                y,
                                x1: 0,
                                x2: -maxLeafLabelWidth - this.label.padding * 2,
                            });
                        }
                    }
                    else {
                        const x = -maxLeafLabelWidth - this.label.padding * 2 + datum.screenY;
                        separatorData.push({
                            y,
                            x1: x + lineHeight,
                            x2: x,
                        });
                    }
                }
                let props;
                if (visible) {
                    const bbox = tempText.computeTransformedBBox();
                    if (bbox) {
                        labelBBoxes.set(index, bbox);
                    }
                    props = Object.assign(Object.assign({}, copyLabelProps(tempText)), { visible });
                }
                else {
                    labelBBoxes.delete(index);
                    props = { visible };
                }
                tickLabelLayout.push(props);
            });
            // Calculate the position of the long separator on the far bottom of the axis.
            let minX = 0;
            separatorData.forEach((d) => (minX = Math.min(minX, d.x2)));
            separatorData.push({
                y: Math.max(rangeStart, rangeEnd),
                x1: 0,
                x2: minX,
            });
            const separatorLayout = [];
            const separatorBoxes = [];
            const epsilon = 0.0000001;
            separatorData.forEach((datum) => {
                if (datum.y >= range[0] - epsilon && datum.y <= range[1] + epsilon) {
                    const { x1, x2, y } = datum;
                    const separatorBox = new BBox(Math.min(x1, x2), y, Math.abs(x1 - x2), 0);
                    separatorBoxes.push(separatorBox);
                    separatorLayout.push({ x1, x2, y });
                }
            });
            const axisLineLayout = [];
            const axisLineBoxes = [];
            const lineCount = tickTreeLayout ? tickTreeLayout.depth + 1 : 1;
            for (let i = 0; i < lineCount; i++) {
                const visible = labels.length > 0 && (i === 0 || (labelGrid && isLabelTree));
                const x = i > 0 ? -maxLeafLabelWidth - this.label.padding * 2 - (i - 1) * lineHeight : 0;
                const lineBox = new BBox(x, Math.min(...range), 0, Math.abs(range[1] - range[0]));
                axisLineBoxes.push(lineBox);
                axisLineLayout.push({ x, y1: range[0], y2: range[1], visible });
            }
            const getTransformBox = (bbox) => {
                const matrix = new Matrix();
                const { rotation: axisRotation, translationX, translationY, rotationCenterX, rotationCenterY, } = this.getAxisTransform();
                Matrix.updateTransformMatrix(matrix, 1, 1, axisRotation, translationX, translationY, {
                    scalingCenterX: 0,
                    scalingCenterY: 0,
                    rotationCenterX,
                    rotationCenterY,
                });
                return matrix.transformBBox(bbox);
            };
            const bbox = BBox.merge([...labelBBoxes.values(), ...separatorBoxes, ...axisLineBoxes]);
            const transformedBBox = getTransformBox(bbox);
            return {
                bbox: transformedBBox,
                tickLabelLayout,
                separatorLayout,
                axisLineLayout,
            };
        }
        calculateLayout() {
            const { axisLineLayout, separatorLayout, tickLabelLayout, bbox } = this.computeLayout();
            this.computedLayout = {
                axisLineLayout,
                separatorLayout,
                tickLabelLayout,
            };
            return { bbox, primaryTickCount: undefined };
        }
    }
    GroupedCategoryAxis.className = 'GroupedCategoryAxis';
    GroupedCategoryAxis.type = 'grouped-category';
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], GroupedCategoryAxis.prototype, "labelColor", void 0);

    /**
     * Wraps a native OffscreenCanvas and overrides its OffscreenCanvasRenderingContext2D to
     * provide resolution independent rendering based on `window.devicePixelRatio`.
     */
    class HdpiOffscreenCanvas {
        static isSupported() {
            return typeof OffscreenCanvas !== 'undefined' && OffscreenCanvas.prototype.transferToImageBitmap != null;
        }
        // The width/height attributes of the Canvas element default to
        // 300/150 according to w3.org.
        constructor({ width = 600, height = 300, overrideDevicePixelRatio }) {
            this.enabled = true;
            // `NaN` is deliberate here, so that overrides are always applied
            // and the `resetTransform` inside the `resize` method works in IE11.
            this._pixelRatio = NaN;
            this._width = 0;
            this._height = 0;
            this.canvas = new OffscreenCanvas(width, height);
            this.realContext = this.canvas.getContext('2d');
            this.imageSource = this.canvas.transferToImageBitmap();
            this.context = this.setPixelRatio(overrideDevicePixelRatio);
            this.resize(width, height);
        }
        snapshot() {
            this.imageSource.close();
            this.imageSource = this.canvas.transferToImageBitmap();
        }
        destroy() {
            this.imageSource.close();
            // Workaround memory allocation quirks in iOS Safari by resizing to 0x0 and clearing.
            // See https://bugs.webkit.org/show_bug.cgi?id=195325.
            this.canvas.width = 0;
            this.canvas.height = 0;
            this.context.clearRect(0, 0, 0, 0);
        }
        clear() {
            this.context.save();
            this.context.resetTransform();
            this.context.clearRect(0, 0, this.width, this.height);
            this.context.restore();
        }
        get pixelRatio() {
            return this._pixelRatio;
        }
        /**
         * Changes the pixel ratio of the Canvas element to the given value,
         * or uses the window.devicePixelRatio (default), then resizes the Canvas
         * element accordingly (default).
         */
        setPixelRatio(ratio) {
            let pixelRatio = ratio !== null && ratio !== void 0 ? ratio : window.devicePixelRatio;
            if (!isDesktop()) {
                // Mobile browsers have stricter memory limits, we reduce rendering resolution to
                // improve stability on mobile browsers. iOS Safari 12->16 are pain-points since they
                // have memory allocation quirks - see https://bugs.webkit.org/show_bug.cgi?id=195325.
                pixelRatio = 1;
            }
            this._pixelRatio = pixelRatio;
            return HdpiCanvas.overrideScale(this.realContext, pixelRatio);
        }
        get width() {
            return this._width;
        }
        get height() {
            return this._height;
        }
        resize(width, height) {
            if (!(width > 0 && height > 0)) {
                return;
            }
            const { canvas, context, pixelRatio } = this;
            canvas.width = Math.round(width * pixelRatio);
            canvas.height = Math.round(height * pixelRatio);
            context.resetTransform();
            this._width = width;
            this._height = height;
        }
    }

    var DebugSelectors;
    (function (DebugSelectors) {
        DebugSelectors["SCENE"] = "scene";
        DebugSelectors["SCENE_STATS"] = "scene:stats";
        DebugSelectors["SCENE_STATS_VERBOSE"] = "scene:stats:verbose";
        DebugSelectors["SCENE_DIRTY_TREE"] = "scene:dirtyTree";
    })(DebugSelectors || (DebugSelectors = {}));
    const advancedCompositeIdentifier = 'adv-composite';
    const domCompositeIdentifier = 'dom-composite';
    class Scene {
        constructor(opts) {
            var _a;
            this.id = createId(this);
            this.layers = [];
            this._nextZIndex = 0;
            this._nextLayerId = 0;
            this._dirty = false;
            this._root = null;
            this.debug = Debug.create(true, DebugSelectors.SCENE);
            const { document, window, mode = (_a = windowValue('agChartsSceneRenderModel')) !== null && _a !== void 0 ? _a : advancedCompositeIdentifier, width, height, overrideDevicePixelRatio = undefined, } = opts;
            this.overrideDevicePixelRatio = overrideDevicePixelRatio;
            this.opts = { document, window, mode };
            this.canvas = new HdpiCanvas({ document, window, width, height, overrideDevicePixelRatio });
        }
        set container(value) {
            this.canvas.container = value;
        }
        get container() {
            return this.canvas.container;
        }
        download(fileName, fileFormat) {
            this.canvas.download(fileName, fileFormat);
        }
        getDataURL(type) {
            return this.canvas.getDataURL(type);
        }
        get width() {
            return this.pendingSize ? this.pendingSize[0] : this.canvas.width;
        }
        get height() {
            return this.pendingSize ? this.pendingSize[1] : this.canvas.height;
        }
        resize(width, height) {
            width = Math.round(width);
            height = Math.round(height);
            // HdpiCanvas doesn't allow width/height <= 0.
            const lessThanZero = width <= 0 || height <= 0;
            const nan = isNaN(width) || isNaN(height);
            const unchanged = width === this.width && height === this.height;
            if (unchanged || nan || lessThanZero) {
                return false;
            }
            this.pendingSize = [width, height];
            this.markDirty();
            return true;
        }
        addLayer(opts) {
            var _a;
            const { mode } = this.opts;
            const layeredModes = ['composite', domCompositeIdentifier, advancedCompositeIdentifier];
            if (!layeredModes.includes(mode)) {
                return undefined;
            }
            const { zIndex = this._nextZIndex++, name, zIndexSubOrder, getComputedOpacity, getVisibility } = opts;
            const { width, height, overrideDevicePixelRatio } = this;
            const domLayer = mode === domCompositeIdentifier;
            const advLayer = mode === advancedCompositeIdentifier;
            const canvas = !advLayer || !HdpiOffscreenCanvas.isSupported()
                ? new HdpiCanvas({
                    document: this.opts.document,
                    window: this.opts.window,
                    width,
                    height,
                    domLayer,
                    zIndex,
                    name,
                    overrideDevicePixelRatio,
                })
                : new HdpiOffscreenCanvas({
                    width,
                    height,
                    overrideDevicePixelRatio,
                });
            const newLayer = {
                id: this._nextLayerId++,
                name,
                zIndex,
                zIndexSubOrder,
                canvas,
                getComputedOpacity,
                getVisibility,
            };
            if (zIndex >= this._nextZIndex) {
                this._nextZIndex = zIndex + 1;
            }
            this.layers.push(newLayer);
            this.sortLayers();
            if (domLayer) {
                const domCanvases = this.layers
                    .map((v) => v.canvas)
                    .filter((v) => v instanceof HdpiCanvas);
                const newLayerIndex = domCanvases.findIndex((v) => v === canvas);
                const lastLayer = (_a = domCanvases[newLayerIndex - 1]) !== null && _a !== void 0 ? _a : this.canvas;
                lastLayer.element.insertAdjacentElement('afterend', canvas.element);
            }
            this.debug('Scene.addLayer() - layers', this.layers);
            return newLayer.canvas;
        }
        removeLayer(canvas) {
            const index = this.layers.findIndex((l) => l.canvas === canvas);
            if (index >= 0) {
                this.layers.splice(index, 1);
                canvas.destroy();
                this.markDirty();
                this.debug('Scene.removeLayer() -  layers', this.layers);
            }
        }
        moveLayer(canvas, newZIndex, newZIndexSubOrder) {
            const layer = this.layers.find((l) => l.canvas === canvas);
            if (layer) {
                layer.zIndex = newZIndex;
                layer.zIndexSubOrder = newZIndexSubOrder;
                this.sortLayers();
                this.markDirty();
                this.debug('Scene.moveLayer() -  layers', this.layers);
            }
        }
        sortLayers() {
            this.layers.sort((a, b) => {
                var _a, _b;
                return compoundAscending([a.zIndex, ...((_a = a.zIndexSubOrder) !== null && _a !== void 0 ? _a : [undefined, undefined]), a.id], [b.zIndex, ...((_b = b.zIndexSubOrder) !== null && _b !== void 0 ? _b : [undefined, undefined]), b.id], ascendingStringNumberUndefined);
            });
        }
        markDirty() {
            this._dirty = true;
        }
        get dirty() {
            return this._dirty;
        }
        set root(node) {
            var _a;
            if (node === this._root) {
                return;
            }
            (_a = this._root) === null || _a === void 0 ? void 0 : _a._setLayerManager();
            this._root = node;
            if (node) {
                node._setLayerManager({
                    addLayer: (opts) => this.addLayer(opts),
                    moveLayer: (...opts) => this.moveLayer(...opts),
                    removeLayer: (...opts) => this.removeLayer(...opts),
                    markDirty: () => this.markDirty(),
                    canvas: this.canvas,
                    debug: Debug.create(DebugSelectors.SCENE),
                });
            }
            this.markDirty();
        }
        get root() {
            return this._root;
        }
        /** Alternative to destroy() that preserves re-usable resources. */
        strip() {
            const { layers } = this;
            for (const layer of layers) {
                layer.canvas.destroy();
                delete layer['canvas'];
            }
            layers.splice(0, layers.length);
            this.root = null;
            this._dirty = false;
            this.canvas.context.resetTransform();
        }
        destroy() {
            this.container = undefined;
            this.strip();
            this.canvas.destroy();
            Object.assign(this, { canvas: undefined, ctx: undefined });
        }
        render(opts) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const { debugSplitTimes = { start: performance.now() }, extraDebugStats = {} } = opts !== null && opts !== void 0 ? opts : {};
                const { canvas, canvas: { context: ctx }, root, layers, pendingSize, opts: { mode }, } = this;
                if (pendingSize) {
                    this.canvas.resize(...pendingSize);
                    this.layers.forEach((layer) => layer.canvas.resize(...pendingSize));
                    this.pendingSize = undefined;
                }
                if (root && !root.visible) {
                    this._dirty = false;
                    return;
                }
                if (root && !this.dirty) {
                    this.debug('Scene.render() - no-op', {
                        redrawType: RedrawType[root.dirty],
                        tree: this.buildTree(root),
                    });
                    this.debugStats(debugSplitTimes, ctx, undefined, extraDebugStats);
                    return;
                }
                const renderCtx = {
                    ctx,
                    devicePixelRatio: (_a = this.canvas.pixelRatio) !== null && _a !== void 0 ? _a : 1,
                    forceRender: true,
                    resized: !!pendingSize,
                    debugNodes: {},
                };
                if (Debug.check(DebugSelectors.SCENE_STATS_VERBOSE)) {
                    renderCtx.stats = { layersRendered: 0, layersSkipped: 0, nodesRendered: 0, nodesSkipped: 0 };
                }
                let canvasCleared = false;
                if (!root || root.dirty >= RedrawType.TRIVIAL) {
                    // start with a blank canvas, clear previous drawing
                    canvasCleared = true;
                    canvas.clear();
                }
                if (root) {
                    const { dirtyTree, paths } = this.buildDirtyTree(root);
                    Debug.create(DebugSelectors.SCENE_DIRTY_TREE)('Scene.render() - dirtyTree', {
                        dirtyTree,
                        paths,
                    });
                }
                if (root && canvasCleared) {
                    this.debug('Scene.render() - before', {
                        redrawType: RedrawType[root.dirty],
                        canvasCleared,
                        tree: this.buildTree(root),
                    });
                    if (root.visible) {
                        ctx.save();
                        root.render(renderCtx);
                        ctx.restore();
                    }
                }
                debugSplitTimes['✍️'] = performance.now();
                if (mode !== domCompositeIdentifier && layers.length > 0 && canvasCleared) {
                    this.sortLayers();
                    ctx.save();
                    ctx.setTransform(1 / canvas.pixelRatio, 0, 0, 1 / canvas.pixelRatio, 0, 0);
                    layers.forEach(({ canvas: { imageSource, enabled }, getComputedOpacity, getVisibility }) => {
                        if (!enabled || !getVisibility()) {
                            return;
                        }
                        ctx.globalAlpha = getComputedOpacity();
                        ctx.drawImage(imageSource, 0, 0);
                    });
                    ctx.restore();
                    debugSplitTimes['⛙'] = performance.now();
                }
                // Check for save/restore depth of zero!
                (_b = ctx.verifyDepthZero) === null || _b === void 0 ? void 0 : _b.call(ctx);
                this._dirty = false;
                this.debugStats(debugSplitTimes, ctx, renderCtx.stats, extraDebugStats);
                this.debugSceneNodeHighlight(ctx, renderCtx.debugNodes);
                if (root) {
                    this.debug('Scene.render() - after', {
                        redrawType: RedrawType[root.dirty],
                        canvasCleared,
                        tree: this.buildTree(root),
                    });
                }
            });
        }
        debugStats(debugSplitTimes, ctx, renderCtxStats, extraDebugStats = {}) {
            if (Debug.check(DebugSelectors.SCENE_STATS, DebugSelectors.SCENE_STATS_VERBOSE)) {
                const end = performance.now();
                const start = debugSplitTimes['start'];
                debugSplitTimes['end'] = performance.now();
                const pct = (rendered, skipped) => {
                    const total = rendered + skipped;
                    return `${rendered} / ${total} (${Math.round((100 * rendered) / total)}%)`;
                };
                const time = (name, start, end) => {
                    return `${name}: ${Math.round((end - start) * 100) / 100}ms`;
                };
                const { layersRendered = 0, layersSkipped = 0, nodesRendered = 0, nodesSkipped = 0 } = renderCtxStats !== null && renderCtxStats !== void 0 ? renderCtxStats : {};
                let lastSplit = 0;
                const splits = Object.entries(debugSplitTimes)
                    .filter(([n]) => n !== 'end')
                    .map(([n, t], i) => {
                    const result = i > 0 ? time(n, lastSplit, t) : null;
                    lastSplit = t;
                    return result;
                })
                    .filter((v) => v != null)
                    .join(' + ');
                const extras = Object.entries(extraDebugStats)
                    .map(([k, v]) => `${k}: ${v}`)
                    .join(' ; ');
                const detailedStats = Debug.check(DebugSelectors.SCENE_STATS_VERBOSE);
                const stats = [
                    `${time('⏱️', start, end)} (${splits})`,
                    `${extras}`,
                    `Layers: ${detailedStats ? pct(layersRendered, layersSkipped) : this.layers.length}`,
                    detailedStats ? `Nodes: ${pct(nodesRendered, nodesSkipped)}` : null,
                ].filter((v) => v != null);
                const statsSize = stats.map((t) => [t, HdpiCanvas.getTextSize(t, ctx.font)]);
                const width = Math.max(...statsSize.map(([, { width }]) => width));
                const height = statsSize.reduce((total, [, { height }]) => total + height, 0);
                ctx.save();
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, width, height);
                ctx.fillStyle = 'black';
                let y = 0;
                for (const [stat, size] of statsSize) {
                    y += size.height;
                    ctx.fillText(stat, 2, y);
                }
                ctx.restore();
            }
        }
        debugSceneNodeHighlight(ctx, debugNodes) {
            var _a;
            const regexpPredicate = (matcher) => (n) => {
                if (matcher.test(n.id)) {
                    return true;
                }
                return n instanceof Group && n.name != null && matcher.test(n.name);
            };
            const stringPredicate = (match) => (n) => {
                if (match === n.id) {
                    return true;
                }
                return n instanceof Group && n.name != null && match === n.name;
            };
            const sceneNodeHighlight = toArray(windowValue('agChartsSceneDebug')).flatMap((name) => name === 'layout' ? ['seriesRoot', 'legend', 'root', /.*Axis-\d+-axis.*/] : name);
            for (const next of sceneNodeHighlight) {
                if (typeof next === 'string' && debugNodes[next] != null)
                    continue;
                const predicate = typeof next === 'string' ? stringPredicate(next) : regexpPredicate(next);
                const nodes = (_a = this.root) === null || _a === void 0 ? void 0 : _a.findNodes(predicate);
                if (!nodes || nodes.length === 0) {
                    Logger.log(`Scene.render() - no debugging node with id [${next}] in scene graph.`);
                    continue;
                }
                for (const node of nodes) {
                    if (node instanceof Group && node.name) {
                        debugNodes[node.name] = node;
                    }
                    else {
                        debugNodes[node.id] = node;
                    }
                }
            }
            ctx.save();
            for (const [name, node] of Object.entries(debugNodes)) {
                const bbox = node.computeTransformedBBox();
                if (!bbox) {
                    Logger.log(`Scene.render() - no bbox for debugged node [${name}].`);
                    continue;
                }
                ctx.globalAlpha = 0.8;
                ctx.strokeStyle = 'red';
                ctx.lineWidth = 1;
                ctx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);
                ctx.fillStyle = 'red';
                ctx.strokeStyle = 'white';
                ctx.font = '16px sans-serif';
                ctx.textBaseline = 'top';
                ctx.textAlign = 'left';
                ctx.lineWidth = 2;
                ctx.strokeText(name, bbox.x, bbox.y, bbox.width);
                ctx.fillText(name, bbox.x, bbox.y, bbox.width);
            }
            ctx.restore();
        }
        buildTree(node) {
            var _a, _b;
            const name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;
            return Object.assign(Object.assign({ name,
                node, dirty: RedrawType[node.dirty] }, (((_b = node.parent) === null || _b === void 0 ? void 0 : _b.isVirtual)
                ? {
                    virtualParentDirty: RedrawType[node.parent.dirty],
                    virtualParent: node.parent,
                }
                : {})), node.children
                .map((c) => this.buildTree(c))
                .reduce((result, childTree) => {
                let { name: treeNodeName } = childTree;
                const { node: { visible, opacity, zIndex, zIndexSubOrder }, node: childNode, virtualParent, } = childTree;
                if (!visible || opacity <= 0) {
                    treeNodeName = `(${treeNodeName})`;
                }
                if (childNode instanceof Group && childNode.isLayer()) {
                    treeNodeName = `*${treeNodeName}*`;
                }
                const key = [
                    `${treeNodeName !== null && treeNodeName !== void 0 ? treeNodeName : '<unknown>'}`,
                    `z: ${zIndex}`,
                    zIndexSubOrder &&
                        `zo: ${zIndexSubOrder
                        .map((v) => (typeof v === 'function' ? `${v()} (fn)` : v))
                        .join(' / ')}`,
                    virtualParent && `(virtual parent)`,
                ]
                    .filter((v) => !!v)
                    .join(' ');
                let selectedKey = key;
                let index = 1;
                while (result[selectedKey] != null && index < 100) {
                    selectedKey = `${key} (${index++})`;
                }
                result[selectedKey] = childTree;
                return result;
            }, {}));
        }
        buildDirtyTree(node) {
            var _a;
            if (node.dirty === RedrawType.NONE) {
                return { dirtyTree: {}, paths: [] };
            }
            const childrenDirtyTree = node.children.map((c) => this.buildDirtyTree(c)).filter((c) => c.paths.length > 0);
            const name = (_a = (node instanceof Group ? node.name : null)) !== null && _a !== void 0 ? _a : node.id;
            const paths = childrenDirtyTree.length === 0
                ? [name]
                : childrenDirtyTree
                    .map((c) => c.paths)
                    .reduce((r, p) => r.concat(p), [])
                    .map((p) => `${name}.${p}`);
            return {
                dirtyTree: Object.assign({ name,
                    node, dirty: RedrawType[node.dirty] }, childrenDirtyTree
                    .map((c) => c.dirtyTree)
                    .filter((t) => t.dirty !== undefined)
                    .reduce((result, childTree) => {
                    var _a;
                    result[(_a = childTree.name) !== null && _a !== void 0 ? _a : '<unknown>'] = childTree;
                    return result;
                }, {})),
                paths,
            };
        }
    }
    Scene.className = 'Scene';

    function sleep(sleepTimeoutMs) {
        return new Promise((resolve) => {
            setTimeout(() => resolve(undefined), sleepTimeoutMs);
        });
    }

    class CallbackCache {
        constructor() {
            this.cache = new WeakMap();
        }
        call(fn, ...params) {
            let serialisedParams;
            let paramCache = this.cache.get(fn);
            const invoke = () => {
                try {
                    const result = fn(...params);
                    if (paramCache && serialisedParams != null) {
                        paramCache.set(serialisedParams, result);
                    }
                    return result;
                }
                catch (e) {
                    Logger.warnOnce(`User callback errored, ignoring`, e);
                    return undefined;
                }
            };
            try {
                serialisedParams = JSON.stringify(params);
            }
            catch (e) {
                // Unable to serialise params!
                // No caching possible.
                return invoke();
            }
            if (paramCache == null) {
                paramCache = new Map();
                this.cache.set(fn, paramCache);
            }
            if (!paramCache.has(serialisedParams)) {
                return invoke();
            }
            return paramCache.get(serialisedParams);
        }
        invalidateCache() {
            this.cache = new WeakMap();
        }
    }

    class Mutex {
        constructor() {
            this.available = true;
            this.acquireQueue = [];
        }
        acquire(cb) {
            return new Promise((resolve) => {
                this.acquireQueue.push([cb, resolve]);
                if (this.available) {
                    this.dispatchNext();
                }
            });
        }
        acquireImmediately(cb) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.available) {
                    return false;
                }
                yield this.acquire(cb);
                return true;
            });
        }
        waitForClearAcquireQueue() {
            return __awaiter(this, void 0, void 0, function* () {
                return this.acquire(() => __awaiter(this, void 0, void 0, function* () { return undefined; }));
            });
        }
        dispatchNext() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                this.available = false;
                let [next, done] = (_a = this.acquireQueue.shift()) !== null && _a !== void 0 ? _a : [];
                while (next) {
                    try {
                        yield next();
                        done === null || done === void 0 ? void 0 : done();
                    }
                    catch (error) {
                        Logger.error('mutex callback error', error);
                        done === null || done === void 0 ? void 0 : done();
                    }
                    [next, done] = (_b = this.acquireQueue.shift()) !== null && _b !== void 0 ? _b : [];
                }
                this.available = true;
            });
        }
    }

    /**
     * Wrap a function in debouncing trigger function. A requestAnimationFrame() is scheduled
     * after the first schedule() call, and subsequent schedule() calls will be ignored until the
     * animation callback executes.
     */
    function debouncedAnimationFrame(cb) {
        return buildScheduler((cb, _delayMs) => requestAnimationFrame(cb), cb);
    }
    function debouncedCallback(cb) {
        return buildScheduler((cb, delayMs = 0) => setTimeout(cb, delayMs), cb);
    }
    function buildScheduler(scheduleFn, cb) {
        let scheduleCount = 0;
        let promiseRunning = false;
        let awaitingPromise;
        let awaitingDone;
        const busy = () => {
            return promiseRunning;
        };
        const done = () => {
            promiseRunning = false;
            awaitingDone === null || awaitingDone === void 0 ? void 0 : awaitingDone();
            awaitingDone = undefined;
            awaitingPromise = undefined;
            if (scheduleCount > 0) {
                scheduleFn(scheduleCb);
            }
        };
        const scheduleCb = () => {
            const count = scheduleCount;
            scheduleCount = 0;
            promiseRunning = true;
            const maybePromise = cb({ count });
            if (!maybePromise) {
                done();
                return;
            }
            maybePromise.then(done).catch(done);
        };
        return {
            schedule(delayMs) {
                if (scheduleCount === 0 && !busy()) {
                    scheduleFn(scheduleCb, delayMs);
                }
                scheduleCount++;
            },
            await() {
                return __awaiter(this, void 0, void 0, function* () {
                    if (!busy()) {
                        return;
                    }
                    if (awaitingPromise == null) {
                        awaitingPromise = new Promise((resolve) => {
                            awaitingDone = resolve;
                        });
                    }
                    while (busy()) {
                        yield awaitingPromise;
                    }
                });
            },
        };
    }

    class SizeMonitor {
        static init(document) {
            if (typeof ResizeObserver !== 'undefined') {
                this.resizeObserver = new ResizeObserver((entries) => {
                    for (const entry of entries) {
                        const { width, height } = entry.contentRect;
                        this.checkSize(this.elements.get(entry.target), entry.target, width, height);
                    }
                });
            }
            else {
                // polyfill (more reliable even in browsers that support ResizeObserver)
                const step = () => {
                    this.elements.forEach((entry, element) => {
                        this.checkClientSize(element, entry);
                    });
                };
                this.pollerHandler = window.setInterval(step, 100);
            }
            this.ready = true;
            this.documentReady = document.readyState !== 'loading';
            if (this.documentReady)
                return;
            // Add DOMContentLoaded listener so we can check if the main document is ready again, and
            // if it is then attach any queued requests for resize monitoring.
            //
            // If we attach before ent.readyState !== 'loading', then additional incorrect resize events
            // are fired, leading to multiple re-renderings on chart initial load. Waiting for the
            // document to be loaded irons out this browser quirk.
            this.readyEventFn = () => {
                const newState = document.readyState !== 'loading';
                const oldState = this.documentReady;
                this.documentReady = newState;
                if (!newState)
                    return;
                if (newState === oldState)
                    return;
                for (const [el, cb] of this.queuedObserveRequests) {
                    this.observe(el, cb);
                }
                this.queuedObserveRequests.length = 0;
            };
            document.addEventListener('DOMContentLoaded', this.readyEventFn);
        }
        static destroy() {
            var _a;
            if (this.pollerHandler != null) {
                clearInterval(this.pollerHandler);
                this.pollerHandler = undefined;
            }
            if (this.readyEventFn) {
                document.removeEventListener('DOMContentLoaded', this.readyEventFn);
                this.readyEventFn = undefined;
            }
            (_a = this.resizeObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
            this.resizeObserver = undefined;
            this.ready = false;
        }
        static checkSize(entry, element, width, height) {
            if (!entry)
                return;
            if (!entry.size || width !== entry.size.width || height !== entry.size.height) {
                entry.size = { width, height };
                entry.cb(entry.size, element);
            }
        }
        // Only a single callback is supported.
        static observe(element, cb) {
            if (!this.ready) {
                this.init(element.ownerDocument);
            }
            if (!this.documentReady) {
                this.queuedObserveRequests.push([element, cb]);
                return;
            }
            this.unobserve(element, false);
            if (this.resizeObserver) {
                this.resizeObserver.observe(element);
            }
            this.elements.set(element, { cb });
        }
        static unobserve(element, cleanup = true) {
            if (this.resizeObserver) {
                this.resizeObserver.unobserve(element);
            }
            this.elements.delete(element);
            this.queuedObserveRequests = this.queuedObserveRequests.filter(([el]) => el === element);
            if (cleanup && this.elements.size === 0) {
                this.destroy();
            }
        }
        static checkClientSize(element, entry) {
            const width = element.clientWidth ? element.clientWidth : 0;
            const height = element.clientHeight ? element.clientHeight : 0;
            this.checkSize(entry, element, width, height);
        }
    }
    SizeMonitor.elements = new Map();
    SizeMonitor.ready = false;
    SizeMonitor.documentReady = false;
    SizeMonitor.queuedObserveRequests = [];

    class ChartHighlight {
        constructor() {
            this.range = 'tooltip';
        }
    }
    __decorate([
        Validate(STRING_UNION('tooltip', 'node')),
        __metadata("design:type", String)
    ], ChartHighlight.prototype, "range", void 0);

    /** Types of chart-update, in pipeline execution order. */
    var ChartUpdateType;
    (function (ChartUpdateType) {
        ChartUpdateType[ChartUpdateType["FULL"] = 0] = "FULL";
        ChartUpdateType[ChartUpdateType["PROCESS_DATA"] = 1] = "PROCESS_DATA";
        ChartUpdateType[ChartUpdateType["PERFORM_LAYOUT"] = 2] = "PERFORM_LAYOUT";
        ChartUpdateType[ChartUpdateType["SERIES_UPDATE"] = 3] = "SERIES_UPDATE";
        ChartUpdateType[ChartUpdateType["TOOLTIP_RECALCULATION"] = 4] = "TOOLTIP_RECALCULATION";
        ChartUpdateType[ChartUpdateType["SCENE_RENDER"] = 5] = "SCENE_RENDER";
        ChartUpdateType[ChartUpdateType["NONE"] = 6] = "NONE";
    })(ChartUpdateType || (ChartUpdateType = {}));

    class DataDomain {
        constructor(type) {
            this.type = type;
            this.continuousDomain = [Infinity, -Infinity];
            this.discreteDomain = new Set();
        }
        extend(val) {
            if (this.type === 'discrete') {
                this.discreteDomain.add(val);
            }
            else if (this.type === 'continuous') {
                if (this.continuousDomain[0] > val) {
                    this.continuousDomain[0] = val;
                }
                if (this.continuousDomain[1] < val) {
                    this.continuousDomain[1] = val;
                }
            }
        }
        getDomain() {
            if (this.type === 'discrete') {
                return this.discreteDomain;
            }
            else if (this.type === 'continuous') {
                return this.continuousDomain;
            }
            throw new Error('AG Charts - Unsupported data domain type: ' + this.type);
        }
    }

    function toKeyString(keys) {
        return keys
            .map((v) => {
            if (v == null) {
                return v;
            }
            else if (typeof v === 'number' || typeof v === 'string' || typeof v === 'boolean') {
                return v;
            }
            else if (typeof v === 'object') {
                return JSON.stringify(v);
            }
            return v;
        })
            .join('-');
    }
    function round(val) {
        const accuracy = 10000;
        if (Number.isInteger(val)) {
            return val;
        }
        else if (Math.abs(val) > accuracy) {
            return Math.trunc(val);
        }
        return Math.round(val * accuracy) / accuracy;
    }
    function fixNumericExtentInternal(extent) {
        if (extent === undefined) {
            // Don't return a range, there is no range.
            return [];
        }
        let [min, max] = extent;
        min = +min;
        max = +max;
        if (min === 0 && max === 0) {
            // domain has zero length and the single valid value is 0. Use the default of [0, 1].
            return [0, 1];
        }
        if (min === Infinity && max === -Infinity) {
            // There's no data in the domain.
            return [];
        }
        if (min === Infinity) {
            min = 0;
        }
        if (max === -Infinity) {
            max = 0;
        }
        if (!(isNumber(min) && isNumber(max))) {
            return [];
        }
        return [min, max];
    }
    function fixNumericExtent(extent, axis) {
        var _a;
        const fixedExtent = fixNumericExtentInternal(extent);
        if (fixedExtent.length === 0) {
            return fixedExtent;
        }
        let [min, max] = fixedExtent;
        if (min === max) {
            // domain has zero length, there is only a single valid value in data
            const [paddingMin, paddingMax] = (_a = axis === null || axis === void 0 ? void 0 : axis.calculatePadding(min, max)) !== null && _a !== void 0 ? _a : [1, 1];
            min -= paddingMin;
            max += paddingMax;
        }
        return [min, max];
    }
    const INVALID_VALUE = Symbol('invalid');
    class DataModel {
        constructor(opts) {
            const { props, mode = 'standalone' } = opts;
            this.mode = mode;
            // Validate that keys appear before values in the definitions, as output ordering depends
            // on configuration ordering, but we process keys before values.
            let keys = true;
            for (const next of props) {
                if (next.type === 'key' && !keys) {
                    throw new Error('AG Charts - internal config error: keys must come before values.');
                }
                if (next.type === 'value' && keys) {
                    keys = false;
                }
            }
            this.opts = Object.assign({ dataVisible: true }, opts);
            this.keys = props
                .filter((def) => def.type === 'key')
                .map((def, index) => (Object.assign(Object.assign({}, def), { index, missing: 0 })));
            this.values = props
                .filter((def) => def.type === 'value')
                .map((def, index) => (Object.assign(Object.assign({}, def), { index, missing: 0 })));
            this.aggregates = props
                .filter((def) => def.type === 'aggregate')
                .map((def, index) => (Object.assign(Object.assign({}, def), { index })));
            this.groupProcessors = props
                .filter((def) => def.type === 'group-value-processor')
                .map((def, index) => (Object.assign(Object.assign({}, def), { index })));
            this.propertyProcessors = props
                .filter((def) => def.type === 'property-value-processor')
                .map((def, index) => (Object.assign(Object.assign({}, def), { index })));
            this.reducers = props
                .filter((def) => def.type === 'reducer')
                .map((def, index) => (Object.assign(Object.assign({}, def), { index })));
            this.processors = props
                .filter((def) => def.type === 'processor')
                .map((def, index) => (Object.assign(Object.assign({}, def), { index })));
            for (const def of this.values) {
                if (def.property == null) {
                    throw new Error(`AG Charts - internal config error: no properties specified for value definitions: ${JSON.stringify(def)}`);
                }
            }
            const verifyMatchGroupId = ({ matchGroupIds }) => {
                for (const matchGroupId of matchGroupIds !== null && matchGroupIds !== void 0 ? matchGroupIds : []) {
                    if (!this.values.some((def) => def.groupId === matchGroupId)) {
                        throw new Error(`AG Charts - internal config error: matchGroupIds properties must match defined groups (${matchGroupId}).`);
                    }
                }
            };
            const verifyMatchIds = ({ matchIds }) => {
                for (const matchId of matchIds !== null && matchIds !== void 0 ? matchIds : []) {
                    if (!this.values.some((def) => { var _a; return (_a = def.ids) === null || _a === void 0 ? void 0 : _a.some(([scope, id]) => scope === matchId[0] && id === matchId[1]); })) {
                        throw new Error(`AG Charts - internal config error: matchGroupIds properties must match defined groups (${matchId}).`);
                    }
                }
            };
            for (const def of [...this.groupProcessors, ...this.aggregates]) {
                verifyMatchIds(def);
                verifyMatchGroupId(def);
            }
        }
        resolveProcessedDataIndexById(scope, searchId) {
            var _a;
            const { index, def } = (_a = this.resolveProcessedDataDefById(scope, searchId)) !== null && _a !== void 0 ? _a : {};
            return { index, def };
        }
        resolveProcessedDataIndicesById(scope, searchId) {
            return this.resolveProcessedDataDefsById(scope, searchId).map(({ index, def }) => ({ index, def }));
        }
        resolveProcessedDataDefById(scope, searchId) {
            return this.resolveProcessedDataDefsById(scope, searchId)[0];
        }
        resolveProcessedDataDefsByIds(scope, searchIds) {
            const defs = [];
            for (const searchId of searchIds) {
                defs.push([searchId, this.resolveProcessedDataDefsById(scope, searchId)]);
            }
            return defs;
        }
        resolveProcessedDataDefsValues(defs, { keys, values }) {
            const result = {};
            for (const [searchId, [{ index, def }]] of defs) {
                const processedData = def.type === 'key' ? keys : values;
                result[searchId] = processedData[index];
            }
            return result;
        }
        resolveProcessedDataDefsById(searchScope, searchId) {
            const { keys, values, aggregates, groupProcessors, reducers } = this;
            const match = (prop) => {
                const { ids, scopes } = prop;
                if (ids == null)
                    return false;
                if (searchScope != null && !(scopes === null || scopes === void 0 ? void 0 : scopes.some((scope) => scope === searchScope.id)))
                    return false;
                return ids.some(([scope, id]) => scope === searchScope.id && (typeof searchId === 'string' ? id === searchId : searchId.test(id)));
            };
            const allDefs = [
                keys,
                values,
                aggregates,
                groupProcessors,
                reducers,
            ];
            const result = [];
            for (const defs of allDefs) {
                result.push(...defs.filter(match).map((def) => ({ index: def.index, def })));
            }
            if (result.length > 0) {
                return result;
            }
            throw new Error(`AG Charts - didn't find property definition for [${searchId}, ${searchScope.id}]`);
        }
        getDomain(scope, searchId, type = 'value', processedData) {
            var _a, _b, _c, _d;
            let matches;
            try {
                matches = this.resolveProcessedDataIndicesById(scope, searchId);
            }
            catch (e) {
                if (typeof searchId !== 'string' && /didn't find property definition/.test(e.message))
                    return [];
                throw e;
            }
            let domainProp;
            switch (type) {
                case 'key':
                    domainProp = 'keys';
                    break;
                case 'value':
                    domainProp = 'values';
                    break;
                case 'aggregate':
                    domainProp = 'aggValues';
                    break;
                case 'group-value-processor':
                    domainProp = 'groups';
                    break;
                default:
                    return [];
            }
            const firstMatch = (_b = (_a = processedData.domain[domainProp]) === null || _a === void 0 ? void 0 : _a[matches[0].index]) !== null && _b !== void 0 ? _b : [];
            if (matches.length === 1) {
                return firstMatch;
            }
            const result = [...firstMatch];
            for (const idx of matches.slice(1)) {
                extendDomain((_d = (_c = processedData.domain[domainProp]) === null || _c === void 0 ? void 0 : _c[idx.index]) !== null && _d !== void 0 ? _d : [], result);
            }
            return result;
        }
        processData(data) {
            const { opts: { groupByKeys, groupByFn }, aggregates, groupProcessors, reducers, processors, propertyProcessors, } = this;
            const start = performance.now();
            for (const def of [...this.keys, ...this.values]) {
                def.missing = 0;
            }
            if (groupByKeys && this.keys.length === 0) {
                return undefined;
            }
            let processedData = this.extractData(data);
            if (groupByKeys) {
                processedData = this.groupData(processedData);
            }
            else if (groupByFn) {
                processedData = this.groupData(processedData, groupByFn(processedData));
            }
            if (groupProcessors.length > 0) {
                this.postProcessGroups(processedData);
            }
            if (aggregates.length > 0) {
                this.aggregateData(processedData);
            }
            if (propertyProcessors.length > 0) {
                this.postProcessProperties(processedData);
            }
            if (reducers.length > 0) {
                this.reduceData(processedData);
            }
            if (processors.length > 0) {
                this.postProcessData(processedData);
            }
            for (const def of [...this.keys, ...this.values]) {
                if (data.length > 0 && def.missing >= data.length) {
                    Logger.warnOnce(`the key '${def.property}' was not found in any data element.`);
                }
            }
            const end = performance.now();
            processedData.time = end - start;
            if (Debug.check(true, 'data-model')) {
                logProcessedData(processedData);
            }
            return processedData;
        }
        valueGroupIdxLookup({ matchGroupIds, matchIds }) {
            return this.values
                .map((def, index) => ({ def, index }))
                .filter(({ def }) => {
                if (matchGroupIds && (def.groupId == null || !matchGroupIds.includes(def.groupId))) {
                    return false;
                }
                if (!matchIds)
                    return true;
                if (def.ids == null)
                    return false;
                return matchIds.some(([matchScope, matchId]) => { var _a; return (_a = def.ids) === null || _a === void 0 ? void 0 : _a.some(([defScope, defId]) => defScope === matchScope && defId === matchId); });
            })
                .map(({ index }) => index);
        }
        valueIdxLookup(scopes, prop) {
            const noScopesToMatch = scopes == null || scopes.length === 0;
            const scopeMatch = (compareTo) => {
                const anyScope = compareTo == null;
                if (anyScope)
                    return true;
                const noScopes = compareTo == null || compareTo.length === 0;
                if (noScopesToMatch === noScopes)
                    return true;
                return compareTo === null || compareTo === void 0 ? void 0 : compareTo.some((s) => scopes.includes(s));
            };
            const propId = typeof prop === 'string' ? prop : prop.id;
            const idMatch = ([scope, id]) => {
                return scopeMatch([scope]) && id === propId;
            };
            const result = this.values.findIndex((def) => {
                var _a;
                return (scopeMatch(def.scopes) &&
                    (((_a = def.ids) === null || _a === void 0 ? void 0 : _a.some((id) => idMatch(id))) || def.property === propId || def.id === propId));
            });
            if (result >= 0) {
                return result;
            }
            throw new Error(`AG Charts - configuration error, unknown property ${JSON.stringify(prop)} in scope(s) ${JSON.stringify(scopes)}`);
        }
        extractData(data) {
            var _a;
            const { keys: keyDefs, values: valueDefs, opts: { dataVisible }, } = this;
            const { dataDomain, processValue, scopes, allScopesHaveSameDefs } = this.initDataDomainProcessor();
            const resultData = new Array(dataVisible ? data.length : 0);
            let resultDataIdx = 0;
            let partialValidDataCount = 0;
            for (const datum of data) {
                const validScopes = scopes.size > 0 ? new Set(scopes) : undefined;
                const keys = dataVisible ? new Array(keyDefs.length) : undefined;
                let keyIdx = 0;
                let key;
                for (const def of keyDefs) {
                    key = processValue(def, datum, key);
                    if (key === INVALID_VALUE)
                        break;
                    if (keys) {
                        keys[keyIdx++] = key;
                    }
                }
                if (key === INVALID_VALUE)
                    continue;
                const values = dataVisible && valueDefs.length > 0 ? new Array(valueDefs.length) : undefined;
                let valueIdx = 0;
                let value;
                for (const def of valueDefs) {
                    value = processValue(def, datum, value);
                    if (value === INVALID_VALUE) {
                        if (allScopesHaveSameDefs)
                            break;
                        for (const scope of (_a = def.scopes) !== null && _a !== void 0 ? _a : scopes) {
                            validScopes === null || validScopes === void 0 ? void 0 : validScopes.delete(scope);
                        }
                        valueIdx++;
                        if ((validScopes === null || validScopes === void 0 ? void 0 : validScopes.size) === 0)
                            break;
                    }
                    else if (values) {
                        values[valueIdx++] = value;
                    }
                }
                if (value === INVALID_VALUE && allScopesHaveSameDefs)
                    continue;
                if ((validScopes === null || validScopes === void 0 ? void 0 : validScopes.size) === 0)
                    continue;
                if (dataVisible) {
                    const result = {
                        datum,
                        keys: keys,
                        values,
                    };
                    if (!allScopesHaveSameDefs && validScopes && validScopes.size < scopes.size) {
                        partialValidDataCount++;
                        result.validScopes = [...validScopes];
                    }
                    resultData[resultDataIdx++] = result;
                }
            }
            resultData.length = resultDataIdx;
            const propertyDomain = (def) => {
                const result = dataDomain.get(def).getDomain();
                if (Array.isArray(result) && result[0] > result[1]) {
                    // Ignore starting values.
                    return [];
                }
                return [...result];
            };
            return {
                type: 'ungrouped',
                input: { count: data.length },
                data: resultData,
                domain: {
                    keys: keyDefs.map((def) => propertyDomain(def)),
                    values: valueDefs.map((def) => propertyDomain(def)),
                },
                defs: {
                    allScopesHaveSameDefs,
                    keys: keyDefs,
                    values: valueDefs,
                },
                partialValidDataCount,
                time: 0,
            };
        }
        groupData(data, groupingFn) {
            var _a, _b, _c, _d;
            const processedData = new Map();
            for (const dataEntry of data.data) {
                const { keys, values, datum, validScopes } = dataEntry;
                const group = groupingFn ? groupingFn(dataEntry) : keys;
                const groupStr = toKeyString(group);
                if (processedData.has(groupStr)) {
                    const existingData = processedData.get(groupStr);
                    existingData.values.push(values);
                    existingData.datum.push(datum);
                    if (validScopes != null) {
                        // Intersection of existing validScopes with new validScopes.
                        for (let index = 0; index < ((_b = (_a = existingData.validScopes) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0); index++) {
                            const scope = (_c = existingData.validScopes) === null || _c === void 0 ? void 0 : _c[index];
                            if (validScopes.some((s) => s === scope))
                                continue;
                            (_d = existingData.validScopes) === null || _d === void 0 ? void 0 : _d.splice(index, 1);
                        }
                    }
                }
                else {
                    processedData.set(groupStr, {
                        keys: group,
                        values: [values],
                        datum: [datum],
                        validScopes,
                    });
                }
            }
            const resultData = new Array(processedData.size);
            const resultGroups = new Array(processedData.size);
            let dataIndex = 0;
            for (const [, { keys, values, datum, validScopes }] of processedData.entries()) {
                if ((validScopes === null || validScopes === void 0 ? void 0 : validScopes.length) === 0)
                    continue;
                resultGroups[dataIndex] = keys;
                resultData[dataIndex++] = {
                    keys,
                    values,
                    datum,
                    validScopes,
                };
            }
            return Object.assign(Object.assign({}, data), { type: 'grouped', data: resultData, domain: Object.assign(Object.assign({}, data.domain), { groups: resultGroups }) });
        }
        aggregateData(processedData) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const { aggregates: aggDefs } = this;
            if (!aggDefs)
                return;
            const resultAggValues = aggDefs.map(() => [Infinity, -Infinity]);
            const resultAggValueIndices = aggDefs.map((def) => this.valueGroupIdxLookup(def));
            const resultAggFns = aggDefs.map((def) => def.aggregateFunction);
            const resultGroupAggFns = aggDefs.map((def) => def.groupAggregateFunction);
            const resultFinalFns = aggDefs.map((def) => def.finalFunction);
            for (const group of processedData.data) {
                let { values } = group;
                const { validScopes } = group;
                (_a = group.aggValues) !== null && _a !== void 0 ? _a : (group.aggValues = new Array(resultAggValueIndices.length));
                if (processedData.type === 'ungrouped') {
                    values = [values];
                }
                let resultIdx = 0;
                for (const indices of resultAggValueIndices) {
                    const scopeValid = (_b = validScopes === null || validScopes === void 0 ? void 0 : validScopes.some((s) => { var _a; return (_a = aggDefs[resultIdx].matchScopes) === null || _a === void 0 ? void 0 : _a.some((as) => s === as); })) !== null && _b !== void 0 ? _b : true;
                    if (!scopeValid) {
                        resultIdx++;
                        continue;
                    }
                    let groupAggValues = (_d = (_c = resultGroupAggFns[resultIdx]) === null || _c === void 0 ? void 0 : _c.call(resultGroupAggFns)) !== null && _d !== void 0 ? _d : extendDomain([]);
                    for (const distinctValues of values) {
                        const valuesToAgg = indices.map((valueIdx) => distinctValues[valueIdx]);
                        const valuesAgg = resultAggFns[resultIdx](valuesToAgg, group.keys);
                        if (valuesAgg) {
                            groupAggValues =
                                (_f = (_e = resultGroupAggFns[resultIdx]) === null || _e === void 0 ? void 0 : _e.call(resultGroupAggFns, valuesAgg, groupAggValues)) !== null && _f !== void 0 ? _f : extendDomain(valuesAgg, groupAggValues);
                        }
                    }
                    const finalValues = ((_h = (_g = resultFinalFns[resultIdx]) === null || _g === void 0 ? void 0 : _g.call(resultFinalFns, groupAggValues)) !== null && _h !== void 0 ? _h : groupAggValues).map((v) => round(v));
                    extendDomain(finalValues, resultAggValues[resultIdx]);
                    group.aggValues[resultIdx++] = finalValues;
                }
            }
            processedData.domain.aggValues = resultAggValues;
        }
        postProcessGroups(processedData) {
            var _a, _b, _c, _d, _e;
            const { groupProcessors } = this;
            if (!groupProcessors)
                return;
            const affectedIndices = new Set();
            const updatedDomains = new Map();
            const groupProcessorIndices = new Map();
            const groupProcessorInitFns = new Map();
            for (const processor of groupProcessors) {
                const indices = this.valueGroupIdxLookup(processor);
                groupProcessorIndices.set(processor, indices);
                groupProcessorInitFns.set(processor, processor.adjust());
                for (const idx of indices) {
                    const valueDef = this.values[idx];
                    affectedIndices.add(idx);
                    updatedDomains.set(idx, new DataDomain(valueDef.valueType === 'category' ? 'discrete' : 'continuous'));
                }
            }
            const updateDomains = (values) => {
                var _a;
                for (const valueIndex of affectedIndices) {
                    (_a = updatedDomains.get(valueIndex)) === null || _a === void 0 ? void 0 : _a.extend(values[valueIndex]);
                }
            };
            for (const group of processedData.data) {
                for (const processor of groupProcessors) {
                    const scopeValid = (_b = (_a = group.validScopes) === null || _a === void 0 ? void 0 : _a.some((s) => { var _a; return (_a = processor.matchScopes) === null || _a === void 0 ? void 0 : _a.some((as) => s === as); })) !== null && _b !== void 0 ? _b : true;
                    if (!scopeValid) {
                        continue;
                    }
                    const valueIndexes = (_c = groupProcessorIndices.get(processor)) !== null && _c !== void 0 ? _c : [];
                    const adjustFn = (_e = (_d = groupProcessorInitFns.get(processor)) === null || _d === void 0 ? void 0 : _d()) !== null && _e !== void 0 ? _e : (() => undefined);
                    if (processedData.type === 'grouped') {
                        for (const values of group.values) {
                            if (values) {
                                adjustFn(values, valueIndexes);
                            }
                        }
                        continue;
                    }
                    if (group.values) {
                        adjustFn(group.values, valueIndexes);
                    }
                }
                if (processedData.type === 'grouped') {
                    for (const values of group.values) {
                        updateDomains(values);
                    }
                }
                else {
                    updateDomains(group.values);
                }
            }
            for (const [idx, dataDomain] of updatedDomains) {
                processedData.domain.values[idx] = [...dataDomain.getDomain()];
            }
        }
        postProcessProperties(processedData) {
            const { propertyProcessors } = this;
            if (!propertyProcessors)
                return;
            for (const { adjust, property, scopes } of propertyProcessors) {
                adjust()(processedData, this.valueIdxLookup(scopes !== null && scopes !== void 0 ? scopes : [], property));
            }
        }
        reduceData(processedData) {
            var _a, _b, _c;
            const { reducers: reducerDefs } = this;
            const scopes = reducerDefs.map((def) => def.scopes);
            const reducers = reducerDefs.map((def) => def.reducer());
            const accValues = reducerDefs.map((def) => def.initialValue);
            for (const group of processedData.data) {
                let reducerIndex = 0;
                for (const reducer of reducers) {
                    const scopeValid = (_b = (_a = group.validScopes) === null || _a === void 0 ? void 0 : _a.some((s) => { var _a; return (_a = scopes[reducerIndex]) === null || _a === void 0 ? void 0 : _a.some((as) => s === as); })) !== null && _b !== void 0 ? _b : true;
                    if (!scopeValid) {
                        reducerIndex++;
                        continue;
                    }
                    accValues[reducerIndex] = reducer(accValues[reducerIndex], group);
                    reducerIndex++;
                }
            }
            for (let accIdx = 0; accIdx < accValues.length; accIdx++) {
                (_c = processedData.reduced) !== null && _c !== void 0 ? _c : (processedData.reduced = {});
                processedData.reduced[reducerDefs[accIdx].property] = accValues[accIdx];
            }
        }
        postProcessData(processedData) {
            var _a;
            const { processors: processorDefs } = this;
            for (const def of processorDefs) {
                (_a = processedData.reduced) !== null && _a !== void 0 ? _a : (processedData.reduced = {});
                processedData.reduced[def.property] = def.calculate(processedData);
            }
        }
        initDataDomainProcessor() {
            var _a;
            const { keys: keyDefs, values: valueDefs } = this;
            const scopes = new Set();
            for (const valueDef of valueDefs) {
                for (const scope of (_a = valueDef.scopes) !== null && _a !== void 0 ? _a : []) {
                    scopes.add(scope);
                }
            }
            const scopesCount = scopes.size;
            const dataDomain = new Map();
            const processorFns = new Map();
            let allScopesHaveSameDefs = true;
            const initDataDomainKey = (key, type, updateDataDomain = dataDomain) => {
                var _a;
                if (type === 'category') {
                    updateDataDomain.set(key, new DataDomain('discrete'));
                }
                else {
                    updateDataDomain.set(key, new DataDomain('continuous'));
                    allScopesHaveSameDefs && (allScopesHaveSameDefs = ((_a = key.scopes) !== null && _a !== void 0 ? _a : []).length === scopesCount);
                }
            };
            const initDataDomain = () => {
                keyDefs.forEach((def) => initDataDomainKey(def, def.valueType));
                valueDefs.forEach((def) => initDataDomainKey(def, def.valueType));
            };
            initDataDomain();
            const accessors = this.buildAccessors(...keyDefs, ...valueDefs);
            const processValue = (def, datum, previousDatum) => {
                var _a, _b, _c, _d;
                const hasAccessor = def.property in accessors;
                let valueInDatum = false;
                let value;
                if (hasAccessor) {
                    try {
                        value = accessors[def.property](datum);
                    }
                    catch (error) {
                        // Swallow errors - these get reported as missing values to the user later.
                    }
                    valueInDatum = value !== undefined;
                }
                else {
                    valueInDatum = def.property in datum;
                    value = valueInDatum ? datum[def.property] : def.missingValue;
                }
                if (def.forceValue != null) {
                    // Maintain sign of forceValue from actual value, this maybe significant later when
                    // we account fo the value falling into positive/negative buckets.
                    const valueNegative = valueInDatum && isNegative(value);
                    value = valueNegative ? -1 * def.forceValue : def.forceValue;
                    valueInDatum = true;
                }
                const missingValueDef = 'missingValue' in def;
                if (!valueInDatum && !missingValueDef) {
                    def.missing++;
                }
                if (!dataDomain.has(def)) {
                    initDataDomain();
                }
                if (valueInDatum) {
                    const valid = (_b = (_a = def.validation) === null || _a === void 0 ? void 0 : _a.call(def, value, datum)) !== null && _b !== void 0 ? _b : true;
                    if (!valid) {
                        if ('invalidValue' in def) {
                            value = def.invalidValue;
                        }
                        else {
                            return INVALID_VALUE;
                        }
                    }
                }
                if (def.processor) {
                    if (!processorFns.has(def)) {
                        processorFns.set(def, def.processor());
                    }
                    value = (_c = processorFns.get(def)) === null || _c === void 0 ? void 0 : _c(value, previousDatum !== INVALID_VALUE ? previousDatum : undefined);
                }
                (_d = dataDomain.get(def)) === null || _d === void 0 ? void 0 : _d.extend(value);
                return value;
            };
            return { dataDomain, processValue, initDataDomain, scopes, allScopesHaveSameDefs };
        }
        buildAccessors(...defs) {
            const result = {};
            if (this.mode === 'integrated')
                return result;
            for (const def of defs) {
                const isPath = def.property.indexOf('.') >= 0 || def.property.indexOf('[') >= 0;
                if (!isPath)
                    continue;
                let fnBody;
                if (def.property.startsWith('[')) {
                    fnBody = `return datum${def.property};`;
                }
                else {
                    fnBody = `return datum.${def.property};`;
                }
                result[def.property] = new Function('datum', fnBody);
            }
            return result;
        }
    }
    function logProcessedData(processedData) {
        var _a, _b;
        const logValues = (name, data) => {
            if (data.length > 0) {
                Logger.log(`DataModel.processData() - ${name}`);
                Logger.table(data);
            }
        };
        Logger.log('DataModel.processData() - processedData', processedData);
        logValues('Key Domains', processedData.domain.keys);
        logValues('Group Domains', (_a = processedData.domain.groups) !== null && _a !== void 0 ? _a : []);
        logValues('Value Domains', processedData.domain.values);
        logValues('Aggregate Domains', (_b = processedData.domain.aggValues) !== null && _b !== void 0 ? _b : []);
        if (processedData.type === 'grouped') {
            const flattenedValues = processedData.data.reduce((acc, next) => {
                var _a, _b;
                const keys = (_a = next.keys) !== null && _a !== void 0 ? _a : [];
                const aggValues = (_b = next.aggValues) !== null && _b !== void 0 ? _b : [];
                const skipKeys = next.keys.map(() => undefined);
                const skipAggValues = aggValues === null || aggValues === void 0 ? void 0 : aggValues.map(() => undefined);
                acc.push(...next.values.map((v, i) => [
                    ...(i === 0 ? keys : skipKeys),
                    ...(v !== null && v !== void 0 ? v : []),
                    ...(i == 0 ? aggValues : skipAggValues),
                ]));
                return acc;
            }, []);
            logValues('Values', flattenedValues);
        }
        else {
            const flattenedValues = processedData.data.reduce((acc, next) => {
                var _a;
                const aggValues = (_a = next.aggValues) !== null && _a !== void 0 ? _a : [];
                acc.push([...next.keys, ...next.values, ...aggValues]);
                return acc;
            }, []);
            logValues('Values', flattenedValues);
        }
    }

    /** Implements cross-series data model coordination. */
    class DataController {
        constructor(mode) {
            this.mode = mode;
            this.debug = Debug.create(true, 'data-model');
            this.requested = [];
            this.status = 'setup';
        }
        request(id, data, opts) {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.status !== 'setup')
                    throw new Error(`AG Charts - data request after data setup phase.`);
                return new Promise((resolve, reject) => {
                    this.requested.push({
                        id,
                        opts,
                        data,
                        resultCb: resolve,
                        reject,
                    });
                });
            });
        }
        execute() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.status !== 'setup')
                    throw new Error(`AG Charts - data request after data setup phase.`);
                this.status = 'executed';
                this.debug('DataController.execute() - requested', this.requested);
                const merged = this.mergeRequested();
                this.debug('DataController.execute() - merged', merged);
                const debugMode = Debug.check(true, 'data-model');
                if (debugMode) {
                    window.processedData = [];
                }
                for (const { opts, data, resultCbs, rejects, ids } of merged) {
                    try {
                        const dataModel = new DataModel(Object.assign(Object.assign({}, opts), { mode: this.mode }));
                        const processedData = dataModel.processData(data);
                        if (debugMode) {
                            window.processedData.push(processedData);
                        }
                        if (processedData && processedData.partialValidDataCount === 0) {
                            resultCbs.forEach((cb) => cb({ dataModel, processedData }));
                        }
                        else if (processedData) {
                            this.splitResult(dataModel, processedData, ids, resultCbs);
                        }
                        else {
                            rejects.forEach((cb) => cb(new Error(`AG Charts - no processed data generated`)));
                        }
                    }
                    catch (error) {
                        rejects.forEach((cb) => cb(error));
                    }
                }
            });
        }
        mergeRequested() {
            const grouped = [];
            const keys = (props) => {
                return props
                    .filter((p) => p.type === 'key')
                    .map((p) => p.property)
                    .join(';');
            };
            const groupMatch = ({ opts, data }) => (gr) => {
                return (gr[0].data === data &&
                    gr[0].opts.groupByKeys === opts.groupByKeys &&
                    gr[0].opts.dataVisible === opts.dataVisible &&
                    gr[0].opts.groupByFn === opts.groupByFn &&
                    keys(gr[0].opts.props) === keys(opts.props));
            };
            const propMatch = (prop) => (existing) => {
                var _a;
                if (existing.type !== prop.type)
                    return false;
                const diff = (_a = jsonDiff(existing, prop)) !== null && _a !== void 0 ? _a : {};
                delete diff['scopes'];
                delete diff['id'];
                delete diff['ids'];
                return Object.keys(diff).length === 0;
            };
            const mergeOpts = (opts) => {
                return Object.assign(Object.assign({}, opts[0]), { props: opts.reduce((result, next) => {
                        var _a, _b, _c, _d, _e, _f;
                        for (const prop of next.props) {
                            if (prop.id != null) {
                                (_a = prop.ids) !== null && _a !== void 0 ? _a : (prop.ids = []);
                                (_b = prop.scopes) === null || _b === void 0 ? void 0 : _b.forEach((scope) => { var _a; return (_a = prop.ids) === null || _a === void 0 ? void 0 : _a.push([scope, prop.id]); });
                            }
                            const match = result.find(propMatch(prop));
                            if (!match) {
                                result.push(prop);
                                continue;
                            }
                            (_c = match.scopes) !== null && _c !== void 0 ? _c : (match.scopes = []);
                            match.scopes.push(...((_d = prop.scopes) !== null && _d !== void 0 ? _d : []));
                            if (match.type !== 'key' && match.type !== 'value')
                                continue;
                            (_e = match.ids) === null || _e === void 0 ? void 0 : _e.push(...((_f = prop.ids) !== null && _f !== void 0 ? _f : []));
                        }
                        return result;
                    }, []) });
            };
            const merge = (props) => {
                return {
                    ids: props.map(({ id }) => id),
                    resultCbs: props.map(({ resultCb }) => resultCb),
                    rejects: props.map(({ reject }) => reject),
                    data: props[0].data,
                    opts: mergeOpts(props.map(({ opts }) => opts)),
                };
            };
            for (const request of this.requested) {
                const match = grouped.find(groupMatch(request));
                if (match) {
                    match.push(request);
                }
                else {
                    grouped.push([request]);
                }
            }
            return grouped.map(merge);
        }
        splitResult(dataModel, processedData, scopes, resultCbs) {
            for (let index = 0; index < scopes.length; index++) {
                const scope = scopes[index];
                const resultCb = resultCbs[index];
                resultCb({
                    dataModel,
                    processedData: Object.assign(Object.assign({}, processedData), { data: processedData.data.filter(({ validScopes }) => {
                            return validScopes == null || validScopes.some((s) => s === scope);
                        }) }),
                });
            }
        }
    }

    class DataService {
        constructor(getSeries) {
            this.getSeries = getSeries;
        }
    }

    class BaseManager {
        constructor() {
            this.listeners = new Listeners();
        }
        addListener(type, handler, meta) {
            return this.listeners.addListener(type, handler, meta);
        }
        removeListener(listenerSymbol) {
            this.listeners.removeListener(listenerSymbol);
        }
    }

    const DEBUG_SELECTORS = [true, 'animation'];
    /**
     * Manage animations across a chart, running all animations through only one `requestAnimationFrame` callback,
     * preventing duplicate animations and handling their lifecycle.
     */
    class AnimationManager extends BaseManager {
        constructor(interactionManager, chartUpdateMutex) {
            super();
            this.interactionManager = interactionManager;
            this.chartUpdateMutex = chartUpdateMutex;
            this.defaultDuration = 1000;
            this.batch = new AnimationBatch();
            this.debug = Debug.create(...DEBUG_SELECTORS);
            this.isPlaying = false;
            this.requestId = null;
            this.skipAnimations = false;
        }
        /**
         * Create an animation to tween a value between the `from` and `to` properties. If an animation already exists
         * with the same `id`, immediately stop it.
         */
        animate(_a) {
            var _b, _c;
            var { disableInteractions = true, immutable = true } = _a, opts = __rest(_a, ["disableInteractions", "immutable"]);
            const { batch } = this;
            try {
                if (opts.id != null && batch.controllers.has(opts.id)) {
                    if (!immutable) {
                        return batch.controllers.get(opts.id).reset(opts);
                    }
                    batch.controllers.get(opts.id).stop();
                    this.debug(`Skipping animation batch due to update of existing animation: ${opts.id}`);
                    this.batch.skip();
                }
            }
            catch (error) {
                this.failsafeOnError(error);
                return;
            }
            const id = (_b = opts.id) !== null && _b !== void 0 ? _b : Math.random().toString();
            const skip = this.isSkipped();
            if (skip) {
                this.debug('AnimationManager - skipping animation');
            }
            return new Animation(Object.assign(Object.assign({}, opts), { id,
                skip, autoplay: this.isPlaying ? opts.autoplay : false, duration: (_c = opts.duration) !== null && _c !== void 0 ? _c : this.defaultDuration, onPlay: (controller) => {
                    var _a;
                    batch.controllers.set(id, controller);
                    this.requestAnimation();
                    if (disableInteractions) {
                        this.interactionManager.pause('animation');
                    }
                    (_a = opts.onPlay) === null || _a === void 0 ? void 0 : _a.call(controller, controller);
                }, onStop: (controller) => {
                    var _a;
                    batch.controllers.delete(id);
                    if (disableInteractions) {
                        this.interactionManager.resume('animation');
                    }
                    (_a = opts.onStop) === null || _a === void 0 ? void 0 : _a.call(controller, controller);
                } }));
        }
        play() {
            if (this.isPlaying) {
                return;
            }
            this.isPlaying = true;
            this.debug('AnimationManager.play()');
            for (const controller of this.batch.controllers.values()) {
                try {
                    controller.play();
                }
                catch (error) {
                    this.failsafeOnError(error);
                }
            }
            this.requestAnimation();
        }
        pause() {
            if (!this.isPlaying) {
                return;
            }
            this.isPlaying = false;
            this.cancelAnimation();
            this.debug('AnimationManager.pause()');
            for (const controller of this.batch.controllers.values()) {
                try {
                    controller.pause();
                }
                catch (error) {
                    this.failsafeOnError(error);
                }
            }
        }
        stop() {
            this.isPlaying = false;
            this.cancelAnimation();
            this.debug('AnimationManager.stop()');
            for (const controller of this.batch.controllers.values()) {
                try {
                    controller.stop();
                }
                catch (error) {
                    this.failsafeOnError(error, false);
                }
            }
        }
        stopByAnimationId(id) {
            var _a;
            try {
                if (id != null && this.batch.controllers.has(id)) {
                    (_a = this.batch.controllers.get(id)) === null || _a === void 0 ? void 0 : _a.stop();
                }
            }
            catch (error) {
                this.failsafeOnError(error);
                return;
            }
        }
        stopByAnimationGroupId(id) {
            for (const controller of this.batch.controllers.values()) {
                if (controller.groupId === id) {
                    this.stopByAnimationId(controller.id);
                }
            }
        }
        reset() {
            if (this.isPlaying) {
                this.stop();
                this.play();
            }
            else {
                this.stop();
            }
        }
        skip(skip = true) {
            this.skipAnimations = skip;
        }
        isSkipped() {
            return this.skipAnimations || this.batch.isSkipped();
        }
        isActive() {
            return this.isPlaying && this.batch.isActive();
        }
        skipCurrentBatch() {
            if (Debug.check(...DEBUG_SELECTORS)) {
                this.debug(`AnimationManager - skipCurrentBatch()`, { stack: new Error().stack });
            }
            this.batch.skip();
        }
        /** Mocking point for tests to guarantee that animation updates happen. */
        isSkippingFrames() {
            return true;
        }
        /** Mocking point for tests to capture requestAnimationFrame callbacks. */
        scheduleAnimationFrame(cb) {
            this.requestId = requestAnimationFrame(cb);
        }
        requestAnimation() {
            if (!this.batch.isActive() || this.requestId !== null)
                return;
            let prevTime;
            const onAnimationFrame = (time) => __awaiter(this, void 0, void 0, function* () {
                const executeAnimationFrame = () => __awaiter(this, void 0, void 0, function* () {
                    const deltaTime = time - (prevTime !== null && prevTime !== void 0 ? prevTime : time);
                    prevTime = time;
                    this.debug('AnimationManager - onAnimationFrame()', {
                        controllersCount: this.batch.controllers.size,
                    });
                    for (const controller of this.batch.controllers.values()) {
                        try {
                            controller.update(deltaTime);
                        }
                        catch (error) {
                            this.failsafeOnError(error);
                        }
                    }
                    this.listeners.dispatch('animation-frame', {
                        type: 'animation-frame',
                        deltaMs: deltaTime,
                    });
                });
                if (this.isSkippingFrames()) {
                    // Only run the animation frame if we can acquire the chart update mutex immediately.
                    yield this.chartUpdateMutex.acquireImmediately(executeAnimationFrame);
                }
                else {
                    // Wait for the next available point we can execute.
                    yield this.chartUpdateMutex.acquire(executeAnimationFrame);
                }
                if (this.batch.isActive()) {
                    this.scheduleAnimationFrame(onAnimationFrame);
                }
            });
            this.scheduleAnimationFrame(onAnimationFrame);
        }
        cancelAnimation() {
            if (this.requestId === null)
                return;
            cancelAnimationFrame(this.requestId);
            this.requestId = null;
            this.startBatch();
        }
        failsafeOnError(error, cancelAnimation = true) {
            Logger.error('Error during animation, skipping animations', error);
            if (cancelAnimation) {
                this.cancelAnimation();
            }
        }
        startBatch(skipAnimations) {
            this.debug(`AnimationManager - startBatch() with skipAnimations=${skipAnimations}.`);
            this.reset();
            this.batch.destroy();
            this.batch = new AnimationBatch();
            if (skipAnimations === true) {
                this.batch.skip();
            }
        }
        endBatch() {
            this.debug(`AnimationManager - endBatch() with ${this.batch.controllers.size} animations; skipped: ${this.batch.isSkipped()}.`);
            if (this.batch.isSkipped() && !this.batch.isActive()) {
                this.batch.skip(false);
            }
        }
    }
    /**
     * A batch of animations that are synchronised together. Can be skipped independently of other batches and the main
     * animation skipping status.
     */
    class AnimationBatch {
        constructor() {
            this.controllers = new Map();
            this.skipAnimations = false;
        }
        // private phase?: 'initial-load' | 'remove' | 'update' | 'add';
        isActive() {
            return this.controllers.size > 0;
        }
        skip(skip = true) {
            if (this.skipAnimations === false && skip === true) {
                for (const controller of this.controllers.values()) {
                    controller.stop();
                }
                this.controllers.clear();
            }
            this.skipAnimations = skip;
        }
        isSkipped() {
            return this.skipAnimations;
        }
        destroy() { }
    }

    class ChartEventManager extends BaseManager {
        legendItemClick(series, itemId, enabled, legendItemName) {
            const event = {
                type: 'legend-item-click',
                series,
                itemId,
                enabled,
                legendItemName,
            };
            this.listeners.dispatch('legend-item-click', event);
        }
        legendItemDoubleClick(series, itemId, enabled, numVisibleItems, legendItemName) {
            const event = {
                type: 'legend-item-double-click',
                series,
                itemId,
                enabled,
                legendItemName,
                numVisibleItems,
            };
            this.listeners.dispatch('legend-item-double-click', event);
        }
        axisHover(axisId, direction) {
            const event = {
                type: 'axis-hover',
                axisId,
                direction,
            };
            this.listeners.dispatch('axis-hover', event);
        }
    }

    /**
     * Manages the cursor styling for an element. Tracks the requested styling from distinct
     * dependents and handles conflicting styling requests.
     */
    class CursorManager {
        constructor(element) {
            this.states = {};
            this.element = element;
        }
        updateCursor(callerId, style) {
            delete this.states[callerId];
            if (style != null) {
                this.states[callerId] = { style };
            }
            this.applyStates();
        }
        applyStates() {
            let styleToApply = 'default';
            // Last added entry wins.
            Object.entries(this.states)
                .reverse()
                .slice(0, 1)
                .forEach(([_, { style }]) => (styleToApply = style));
            this.element.style.cursor = styleToApply;
        }
        getCursor() {
            return this.element.style.cursor;
        }
    }

    /**
     * Manages the actively highlighted series/datum for a chart. Tracks the requested highlights from
     * distinct dependents and handles conflicting highlight requests.
     */
    class HighlightManager extends BaseManager {
        constructor() {
            super(...arguments);
            this.highlightStates = new Map();
            this.pickedStates = new Map();
        }
        updateHighlight(callerId, highlightedDatum) {
            this.highlightStates.delete(callerId);
            if (highlightedDatum != null) {
                this.highlightStates.set(callerId, highlightedDatum);
            }
            this.applyHighlightStates();
        }
        getActiveHighlight() {
            return this.activeHighlight;
        }
        updatePicked(callerId, clickableDatum) {
            this.pickedStates.delete(callerId);
            if (clickableDatum != null) {
                this.pickedStates.set(callerId, clickableDatum);
            }
            this.applyPickedStates();
        }
        getActivePicked() {
            return this.activePicked;
        }
        applyHighlightStates() {
            // Last added entry wins.
            const { activeHighlight: previousHighlight } = this;
            this.activeHighlight = Array.from(this.highlightStates.values()).pop();
            if (!this.isEqual(this.activeHighlight, previousHighlight)) {
                this.listeners.dispatch('highlight-change', {
                    type: 'highlight-change',
                    currentHighlight: this.activeHighlight,
                    previousHighlight,
                });
            }
        }
        applyPickedStates() {
            this.activePicked = Array.from(this.pickedStates.values()).pop();
        }
        isEqual(a, b) {
            return a === b || ((a === null || a === void 0 ? void 0 : a.series) === (b === null || b === void 0 ? void 0 : b.series) && (a === null || a === void 0 ? void 0 : a.itemId) === (b === null || b === void 0 ? void 0 : b.itemId) && (a === null || a === void 0 ? void 0 : a.datum) === (b === null || b === void 0 ? void 0 : b.datum));
        }
    }

    const WINDOW_EVENT_HANDLERS = ['pagehide', 'mousemove', 'mouseup'];
    const EVENT_HANDLERS = [
        'click',
        'dblclick',
        'contextmenu',
        'mousedown',
        'mouseout',
        'mouseenter',
        'touchstart',
        'touchmove',
        'touchend',
        'touchcancel',
        'wheel',
    ];
    const CSS = `
.ag-chart-wrapper {
    touch-action: none;
}
`;
    /**
     * Manages user interactions with a specific HTMLElement (or interactions that bubble from it's
     * children)
     */
    class InteractionManager extends BaseManager {
        constructor(element, document, window) {
            super();
            this.eventHandler = (event) => this.processEvent(event);
            this.mouseDown = false;
            this.touchDown = false;
            this.pausers = { animation: 0, 'context-menu': 0 };
            this.rootElement = document.body;
            this.element = element;
            this.window = window;
            for (const type of EVENT_HANDLERS) {
                if (type.startsWith('touch')) {
                    element.addEventListener(type, this.eventHandler, { passive: true });
                }
                else if (type === 'wheel') {
                    element.addEventListener(type, this.eventHandler, { passive: false });
                }
                else {
                    element.addEventListener(type, this.eventHandler);
                }
            }
            for (const type of WINDOW_EVENT_HANDLERS) {
                this.window.addEventListener(type, this.eventHandler);
            }
            if (!InteractionManager.interactionDocuments.includes(document)) {
                injectStyle(document, CSS);
                InteractionManager.interactionDocuments.push(document);
            }
        }
        destroy() {
            for (const type of WINDOW_EVENT_HANDLERS) {
                this.window.removeEventListener(type, this.eventHandler);
            }
            for (const type of EVENT_HANDLERS) {
                this.element.removeEventListener(type, this.eventHandler);
            }
        }
        resume(pauseType) {
            this.pausers[pauseType]--;
        }
        pause(pauseType) {
            this.pausers[pauseType]++;
        }
        processEvent(event) {
            const types = this.decideInteractionEventTypes(event);
            if (types.length > 0) {
                // Async dispatch to avoid blocking the event-processing thread.
                this.dispatchEvent(event, types).catch((e) => Logger.errorOnce(e));
            }
        }
        dispatchEvent(event, types) {
            return __awaiter(this, void 0, void 0, function* () {
                const coords = this.calculateCoordinates(event);
                if (coords == null) {
                    return;
                }
                const pauses = Object.entries(this.pausers)
                    .filter(([, count]) => count > 0)
                    .map(([pause]) => pause);
                for (const type of types) {
                    this.listeners.dispatchWrapHandlers(type, (handler, meta, interactionEvent) => {
                        var _a;
                        if (pauses.length > 0 && !((_a = meta === null || meta === void 0 ? void 0 : meta.bypassPause) === null || _a === void 0 ? void 0 : _a.some((p) => pauses.includes(p)))) {
                            return;
                        }
                        if (!interactionEvent.consumed) {
                            handler(interactionEvent);
                        }
                    }, this.buildEvent(Object.assign({ type, event, pauses }, coords)));
                }
            });
        }
        decideInteractionEventTypes(event) {
            const dragStart = 'drag-start';
            switch (event.type) {
                case 'click':
                    return ['click'];
                case 'dblclick':
                    return ['dblclick'];
                case 'contextmenu':
                    return ['contextmenu'];
                case 'mousedown':
                    this.mouseDown = true;
                    this.dragStartElement = event.target;
                    return [dragStart];
                case 'touchstart':
                    this.touchDown = true;
                    this.dragStartElement = event.target;
                    return [dragStart];
                case 'touchmove':
                case 'mousemove':
                    if (!this.mouseDown && !this.touchDown && !this.isEventOverElement(event)) {
                        // We only care about these events if the target is the canvas, unless
                        // we're in the middle of a drag/slide.
                        return [];
                    }
                    return this.mouseDown || this.touchDown ? ['drag'] : ['hover'];
                case 'mouseup':
                    if (!this.mouseDown && !this.isEventOverElement(event)) {
                        // We only care about these events if the target is the canvas, unless
                        // we're in the middle of a drag.
                        return [];
                    }
                    this.mouseDown = false;
                    this.dragStartElement = undefined;
                    return ['drag-end'];
                case 'touchend':
                    if (!this.touchDown && !this.isEventOverElement(event)) {
                        // We only care about these events if the target is the canvas, unless
                        // we're in the middle of a slide.
                        return [];
                    }
                    this.touchDown = false;
                    this.dragStartElement = undefined;
                    return ['drag-end'];
                case 'mouseout':
                case 'touchcancel':
                    return ['leave'];
                case 'mouseenter':
                    const mouseButtonDown = event instanceof MouseEvent && (event.buttons & 1) === 1;
                    if (this.mouseDown !== mouseButtonDown) {
                        this.mouseDown = mouseButtonDown;
                        return [mouseButtonDown ? dragStart : 'drag-end'];
                    }
                    return [];
                case 'pagehide':
                    return ['page-left'];
                case 'wheel':
                    return ['wheel'];
            }
            return [];
        }
        isEventOverElement(event) {
            var _a;
            return event.target === this.element || ((_a = event.target) === null || _a === void 0 ? void 0 : _a.parentElement) === this.element;
        }
        calculateCoordinates(event) {
            var _a;
            if (event instanceof MouseEvent) {
                const { clientX, clientY, pageX, pageY, offsetX, offsetY } = event;
                return this.fixOffsets(event, { clientX, clientY, pageX, pageY, offsetX, offsetY });
            }
            else if (typeof TouchEvent !== 'undefined' && event instanceof TouchEvent) {
                const lastTouch = (_a = event.touches[0]) !== null && _a !== void 0 ? _a : event.changedTouches[0];
                const { clientX, clientY, pageX, pageY } = lastTouch;
                return Object.assign(Object.assign({}, InteractionManager.NULL_COORDS), { clientX, clientY, pageX, pageY });
            }
            else if (event instanceof PageTransitionEvent) {
                if (event.persisted) {
                    // Don't fire the page-left event since the page maybe revisited.
                    return;
                }
                return InteractionManager.NULL_COORDS;
            }
            // Unsupported event - abort.
        }
        fixOffsets(event, coords) {
            const offsets = (el) => {
                let x = 0;
                let y = 0;
                while (el) {
                    x += el.offsetLeft;
                    y += el.offsetTop;
                    el = el.offsetParent;
                }
                return { x, y };
            };
            if (this.dragStartElement != null && event.target !== this.dragStartElement) {
                // Offsets need to be relative to the drag-start element to avoid jumps when
                // the pointer moves between element boundaries.
                const offsetDragStart = offsets(this.dragStartElement);
                const offsetEvent = offsets(event.target);
                coords.offsetX -= offsetDragStart.x - offsetEvent.x;
                coords.offsetY -= offsetDragStart.y - offsetEvent.y;
            }
            return coords;
        }
        buildEvent(opts) {
            const { type, event, clientX, clientY, pauses } = opts;
            let { offsetX, offsetY, pageX, pageY } = opts;
            if (!isNumber(offsetX) || !isNumber(offsetY)) {
                const rect = this.element.getBoundingClientRect();
                offsetX = clientX - rect.left;
                offsetY = clientY - rect.top;
            }
            if (!isNumber(pageX) || !isNumber(pageY)) {
                const pageRect = this.rootElement.getBoundingClientRect();
                pageX = clientX - pageRect.left;
                pageY = clientY - pageRect.top;
            }
            const builtEvent = {
                type,
                offsetX: offsetX,
                offsetY: offsetY,
                pageX: pageX,
                pageY: pageY,
                sourceEvent: event,
                consumed: false,
                pauses,
                consume() {
                    builtEvent.consumed = true;
                },
            };
            return builtEvent;
        }
    }
    InteractionManager.interactionDocuments = [];
    InteractionManager.NULL_COORDS = {
        clientX: -Infinity,
        clientY: -Infinity,
        pageX: -Infinity,
        pageY: -Infinity,
        offsetX: -Infinity,
        offsetY: -Infinity,
    };

    /**
     * Manages the tooltip HTML an element. Tracks the requested HTML from distinct dependents and
     * handles conflicting tooltip requests.
     */
    class TooltipManager {
        constructor(tooltip, interactionManager) {
            this.states = {};
            this.exclusiveAreas = {};
            this.destroyFns = [];
            this.tooltip = tooltip;
            this.destroyFns.push(interactionManager.addListener('hover', (e) => this.checkExclusiveRects(e)));
        }
        getRange() {
            return this.tooltip.range;
        }
        updateTooltip(callerId, meta, content) {
            var _a;
            if (content == null) {
                content = (_a = this.states[callerId]) === null || _a === void 0 ? void 0 : _a.content;
            }
            this.states[callerId] = { content, meta };
            this.applyStates();
        }
        updateExclusiveRect(callerId, area) {
            if (area) {
                this.exclusiveAreas[callerId] = area;
            }
            else {
                delete this.exclusiveAreas[callerId];
            }
        }
        removeTooltip(callerId) {
            delete this.states[callerId];
            this.applyStates();
        }
        getTooltipMeta(callerId) {
            var _a;
            return (_a = this.states[callerId]) === null || _a === void 0 ? void 0 : _a.meta;
        }
        destroy() {
            for (const destroyFn of this.destroyFns) {
                destroyFn();
            }
        }
        checkExclusiveRects(e) {
            let newAppliedExclusiveArea;
            for (const [entryId, area] of Object.entries(this.exclusiveAreas)) {
                if (!area.containsPoint(e.offsetX, e.offsetY)) {
                    continue;
                }
                newAppliedExclusiveArea = entryId;
                break;
            }
            if (newAppliedExclusiveArea === this.appliedExclusiveArea) {
                return;
            }
            this.appliedExclusiveArea = newAppliedExclusiveArea;
            this.applyStates();
        }
        applyStates() {
            var _a;
            const ids = this.appliedExclusiveArea ? [this.appliedExclusiveArea] : Object.keys(this.states);
            let contentToApply;
            let metaToApply;
            // Last added entry wins.
            ids.reverse();
            ids.slice(0, 1).forEach((id) => {
                var _a;
                const { content, meta } = (_a = this.states[id]) !== null && _a !== void 0 ? _a : {};
                contentToApply = content;
                metaToApply = meta;
            });
            if (metaToApply === undefined || contentToApply === undefined) {
                this.appliedState = undefined;
                this.tooltip.toggle(false);
                return;
            }
            if (((_a = this.appliedState) === null || _a === void 0 ? void 0 : _a.content) === contentToApply) {
                const renderInstantly = this.tooltip.isVisible();
                this.tooltip.show(metaToApply, undefined, renderInstantly);
            }
            else {
                this.tooltip.show(metaToApply, contentToApply);
            }
            this.appliedState = { content: contentToApply, meta: metaToApply };
        }
        static makeTooltipMeta(event, canvas, datum, window) {
            var _a, _b, _c, _d;
            const { pageX, pageY, offsetX, offsetY } = event;
            const position = {
                xOffset: datum.series.tooltip.position.xOffset,
                yOffset: datum.series.tooltip.position.yOffset,
            };
            const meta = {
                pageX,
                pageY,
                offsetX,
                offsetY,
                event: event,
                showArrow: datum.series.tooltip.showArrow,
                position,
            };
            // On line and scatter series, the tooltip covers the top of errorbars when using
            // datum.midPoint. Using datum.yBar.upperPoint renders the tooltip higher up.
            const refPoint = (_b = (_a = datum.yBar) === null || _a === void 0 ? void 0 : _a.upperPoint) !== null && _b !== void 0 ? _b : datum.midPoint;
            if (datum.series.tooltip.position.type === 'node' && refPoint) {
                const { x, y } = refPoint;
                const point = datum.series.contentGroup.inverseTransformPoint(x, y);
                const canvasRect = canvas.element.getBoundingClientRect();
                return Object.assign(Object.assign({}, meta), { pageX: Math.round(canvasRect.left + window.scrollX + point.x), pageY: Math.round(canvasRect.top + window.scrollY + point.y), offsetX: Math.round(point.x), offsetY: Math.round(point.y) });
            }
            meta.enableInteraction = (_d = (_c = datum.series.tooltip.interaction) === null || _c === void 0 ? void 0 : _c.enabled) !== null && _d !== void 0 ? _d : false;
            return meta;
        }
    }

    /**
     * Manages the current zoom state for a chart. Tracks the requested zoom from distinct dependents
     * and handles conflicting zoom requests.
     */
    class ZoomManager extends BaseManager {
        constructor() {
            super(...arguments);
            this.axes = {};
        }
        updateAxes(axes) {
            var _a;
            const removedAxes = new Set(Object.keys(this.axes));
            axes.forEach((axis) => {
                var _a;
                var _b, _c;
                removedAxes.delete(axis.id);
                (_a = (_b = this.axes)[_c = axis.id]) !== null && _a !== void 0 ? _a : (_b[_c] = new AxisZoomManager(axis));
            });
            removedAxes.forEach((axisId) => {
                delete this.axes[axisId];
            });
            if ((_a = this.initialZoom) === null || _a === void 0 ? void 0 : _a.newZoom) {
                this.updateZoom(this.initialZoom.callerId, this.initialZoom.newZoom);
            }
            this.initialZoom = undefined;
        }
        updateZoom(callerId, newZoom) {
            if (Object.keys(this.axes).length === 0) {
                this.initialZoom = { callerId, newZoom };
                return;
            }
            Object.values(this.axes).forEach((axis) => {
                axis.updateZoom(callerId, newZoom === null || newZoom === void 0 ? void 0 : newZoom[axis.getDirection()]);
            });
            this.applyStates();
        }
        updateAxisZoom(callerId, axisId, newZoom) {
            var _a;
            (_a = this.axes[axisId]) === null || _a === void 0 ? void 0 : _a.updateZoom(callerId, newZoom);
            this.applyStates();
        }
        getZoom() {
            let x;
            let y;
            // TODO: this only works when there is a single axis on each direction as it gets the last of each
            Object.values(this.axes).forEach((axis) => {
                if (axis.getDirection() === ChartAxisDirection.X) {
                    x = axis.getZoom();
                }
                else if (axis.getDirection() === ChartAxisDirection.Y) {
                    y = axis.getZoom();
                }
            });
            if (x || y) {
                return { x, y };
            }
        }
        getAxisZoom(axisId) {
            var _a;
            return (_a = this.axes[axisId]) === null || _a === void 0 ? void 0 : _a.getZoom();
        }
        getAxisZooms() {
            const axes = {};
            for (const [axisId, axis] of Object.entries(this.axes)) {
                axes[axisId] = {
                    direction: axis.getDirection(),
                    zoom: axis.getZoom(),
                };
            }
            return axes;
        }
        applyStates() {
            const changed = Object.values(this.axes)
                .map((axis) => axis.applyStates())
                .some(Boolean);
            if (!changed) {
                return;
            }
            const currentZoom = this.getZoom();
            const axes = {};
            for (const [axisId, axis] of Object.entries(this.axes)) {
                axes[axisId] = axis.getZoom();
            }
            this.listeners.dispatch('zoom-change', Object.assign(Object.assign({ type: 'zoom-change' }, (currentZoom !== null && currentZoom !== void 0 ? currentZoom : {})), { axes }));
        }
    }
    class AxisZoomManager {
        constructor(axis) {
            this.states = {};
            this.axis = axis;
            const [min = 0, max = 1] = axis.visibleRange;
            this.currentZoom = { min, max };
            this.states['__initial__'] = this.currentZoom;
        }
        getDirection() {
            return this.axis.direction;
        }
        updateZoom(callerId, newZoom) {
            delete this.states[callerId];
            if (newZoom != null) {
                this.states[callerId] = Object.assign({}, newZoom);
            }
        }
        getZoom() {
            return this.currentZoom;
        }
        applyStates() {
            var _a, _b;
            const prevZoom = this.currentZoom;
            const last = Object.keys(this.states)[Object.keys(this.states).length - 1];
            this.currentZoom = Object.assign({}, this.states[last]);
            return (prevZoom === null || prevZoom === void 0 ? void 0 : prevZoom.min) !== ((_a = this.currentZoom) === null || _a === void 0 ? void 0 : _a.min) || (prevZoom === null || prevZoom === void 0 ? void 0 : prevZoom.max) !== ((_b = this.currentZoom) === null || _b === void 0 ? void 0 : _b.max);
        }
    }

    class LayoutService extends Listeners {
        constructor() {
            super(...arguments);
            this.layoutComplete = 'layout-complete';
        }
        addListener(eventType, handler) {
            if (this.isLayoutStage(eventType) || this.isLayoutComplete(eventType)) {
                return super.addListener(eventType, handler);
            }
            throw new Error(`AG Charts - unsupported listener type: ${eventType}`);
        }
        dispatchPerformLayout(stage, ctx) {
            if (this.isLayoutStage(stage)) {
                return this.getListenersByType(stage).reduce((result, listener) => {
                    try {
                        return listener.handler(result);
                    }
                    catch (e) {
                        Logger.errorOnce(e);
                        return result;
                    }
                }, ctx);
            }
            return ctx;
        }
        dispatchLayoutComplete(event) {
            this.dispatch(this.layoutComplete, event);
        }
        isLayoutStage(eventType) {
            return eventType !== this.layoutComplete;
        }
        isLayoutComplete(eventType) {
            return eventType === this.layoutComplete;
        }
    }

    function gridLayout({ orientation, bboxes, maxHeight, maxWidth, itemPaddingY = 0, itemPaddingX = 0, forceResult = false, }) {
        const horizontal = orientation === 'horizontal';
        const primary = {
            max: horizontal ? maxWidth : maxHeight,
            fn: horizontal ? (b) => b.width : (b) => b.height,
            padding: horizontal ? itemPaddingX : itemPaddingY,
        };
        const secondary = {
            max: !horizontal ? maxWidth : maxHeight,
            fn: !horizontal ? (b) => b.width : (b) => b.height,
            padding: !horizontal ? itemPaddingX : itemPaddingY,
        };
        let processedBBoxCount = 0;
        const rawPages = [];
        while (processedBBoxCount < bboxes.length) {
            const unprocessedBBoxes = bboxes.slice(processedBBoxCount);
            const result = processBBoxes(unprocessedBBoxes, processedBBoxCount, primary, secondary, forceResult);
            if (!result) {
                return;
            }
            processedBBoxCount += result.processedBBoxCount;
            rawPages.push(result.pageIndices);
        }
        return buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX);
    }
    function processBBoxes(bboxes, indexOffset, primary, secondary, forceResult) {
        // If calculatePage() fails on the first guess, we could use the number of items that fit
        // as a good guess for the next iteration.
        const minGuess = 1;
        let startingGuess = estimateStartingGuess(bboxes, primary);
        if (startingGuess < minGuess) {
            if (!forceResult) {
                return undefined;
            }
            // Legend constraints too small! Display at least one row/column if forceResult is true
            startingGuess = minGuess;
        }
        for (let guess = startingGuess; guess >= minGuess; guess--) {
            const pageIndices = calculatePage(bboxes, indexOffset, guess, primary, secondary, forceResult);
            if (pageIndices == null && guess <= minGuess) {
                // Can't layout!
                return undefined;
            }
            if (pageIndices == null) {
                // Guess again!
                continue;
            }
            if (typeof pageIndices === 'number') {
                // calculatePage() suggested a better guess, use that if it's more than minGuess.
                if (pageIndices <= minGuess) {
                    // Can't layout!
                    return undefined;
                }
                guess = pageIndices < guess && pageIndices > minGuess ? pageIndices : guess;
                continue;
            }
            const processedBBoxCount = pageIndices.length * pageIndices[0].length; // this is an estimate, not all rows/columns will have the same length
            return { processedBBoxCount, pageIndices };
        }
    }
    function calculatePage(bboxes, indexOffset, primaryCount, primary, secondary, forceResult) {
        var _a;
        const result = [];
        let sumSecondary = 0;
        let currentMaxSecondary = 0;
        let currentPrimaryIndices = [];
        const maxPrimaryValues = [];
        for (let bboxIndex = 0; bboxIndex < bboxes.length; bboxIndex++) {
            const primaryValueIdx = (bboxIndex + primaryCount) % primaryCount;
            if (primaryValueIdx === 0) {
                sumSecondary += currentMaxSecondary;
                currentMaxSecondary = 0;
                if (currentPrimaryIndices.length > 0) {
                    result.push(currentPrimaryIndices);
                }
                currentPrimaryIndices = [];
            }
            const primaryValue = primary.fn(bboxes[bboxIndex]) + primary.padding;
            maxPrimaryValues[primaryValueIdx] = Math.max((_a = maxPrimaryValues[primaryValueIdx]) !== null && _a !== void 0 ? _a : 0, primaryValue);
            currentMaxSecondary = Math.max(currentMaxSecondary, secondary.fn(bboxes[bboxIndex]) + secondary.padding);
            const currentSecondaryDimension = sumSecondary + currentMaxSecondary;
            const returnResult = !forceResult || result.length > 0;
            if (currentSecondaryDimension > secondary.max && returnResult) {
                // Breached max secondary dimension size, return indices accumlated so far (but not in-progress row/column).
                currentPrimaryIndices = [];
                break;
            }
            const sumPrimary = maxPrimaryValues.reduce((sum, next) => sum + next, 0);
            if (sumPrimary > primary.max && !forceResult) {
                // Breached max main dimension size.
                if (maxPrimaryValues.length < primaryCount) {
                    // Feedback as guess for next iteration if we're on the first round still.
                    return maxPrimaryValues.length;
                }
                return undefined;
            }
            currentPrimaryIndices.push(bboxIndex + indexOffset);
        }
        if (currentPrimaryIndices.length > 0) {
            result.push(currentPrimaryIndices);
        }
        return result.length > 0 ? result : undefined;
    }
    function buildPages(rawPages, orientation, bboxes, itemPaddingY, itemPaddingX) {
        let maxPageWidth = 0;
        let maxPageHeight = 0;
        const pages = rawPages.map((indices) => {
            if (orientation === 'horizontal') {
                indices = transpose(indices);
            }
            let endIndex = 0;
            const columns = indices.map((colIndices) => {
                const colBBoxes = colIndices.map((bboxIndex) => {
                    endIndex = Math.max(bboxIndex, endIndex);
                    return bboxes[bboxIndex];
                });
                let columnHeight = 0;
                let columnWidth = 0;
                colBBoxes.forEach((bbox) => {
                    columnHeight += bbox.height + itemPaddingY;
                    columnWidth = Math.max(columnWidth, bbox.width + itemPaddingX);
                });
                return {
                    indices: colIndices,
                    bboxes: colBBoxes,
                    columnHeight: Math.ceil(columnHeight),
                    columnWidth: Math.ceil(columnWidth),
                };
            });
            let pageWidth = 0;
            let pageHeight = 0;
            columns.forEach((column) => {
                pageWidth += column.columnWidth;
                pageHeight = Math.max(pageHeight, column.columnHeight);
            });
            maxPageWidth = Math.max(pageWidth, maxPageWidth);
            maxPageHeight = Math.max(pageHeight, maxPageHeight);
            return {
                columns,
                startIndex: indices[0][0],
                endIndex,
                pageWidth,
                pageHeight,
            };
        });
        return { pages, maxPageWidth, maxPageHeight };
    }
    function transpose(data) {
        const result = [];
        for (const _ of data[0]) {
            result.push([]);
        }
        data.forEach((innerData, dataIdx) => {
            innerData.forEach((item, itemIdx) => {
                result[itemIdx][dataIdx] = item;
            });
        });
        return result;
    }
    function estimateStartingGuess(bboxes, primary) {
        const n = bboxes.length;
        let primarySum = 0;
        for (let bboxIndex = 0; bboxIndex < n; bboxIndex++) {
            primarySum += primary.fn(bboxes[bboxIndex]) + primary.padding;
            if (primarySum > primary.max) {
                const ratio = n / bboxIndex;
                if (ratio < 2) {
                    return Math.ceil(n / 2);
                }
                return bboxIndex;
            }
        }
        return n;
    }

    class Cross extends Marker {
        updatePath() {
            const s = this.size / 4.2;
            super.applyPath(s, Cross.moves);
        }
    }
    Cross.className = 'Cross';
    Cross.moves = [
        { x: -1, y: 0, t: 'move' },
        { x: -1, y: -1 },
        { x: +1, y: -1 },
        { x: +1, y: +1 },
        { x: +1, y: -1 },
        { x: +1, y: +1 },
        { x: -1, y: +1 },
        { x: +1, y: +1 },
        { x: -1, y: +1 },
        { x: -1, y: -1 },
        { x: -1, y: +1 },
        { x: -1, y: -1 },
    ];

    class Diamond extends Marker {
        updatePath() {
            const s = this.size / 2;
            super.applyPath(s, Diamond.moves);
        }
    }
    Diamond.className = 'Diamond';
    Diamond.moves = [
        { x: 0, y: -1, t: 'move' },
        { x: +1, y: +1 },
        { x: -1, y: +1 },
        { x: -1, y: -1 },
        { x: +1, y: -1 },
    ];

    class Heart extends Marker {
        rad(degree) {
            return (degree / 180) * Math.PI;
        }
        updatePath() {
            const { x, path, size, rad } = this;
            const r = size / 4;
            const y = this.y + r / 2;
            path.clear();
            path.arc(x - r, y - r, r, rad(130), rad(330));
            path.arc(x + r, y - r, r, rad(220), rad(50));
            path.lineTo(x, y + r);
            path.closePath();
        }
    }
    Heart.className = 'Heart';

    class Plus extends Marker {
        updatePath() {
            const s = this.size / 3;
            super.applyPath(s, Plus.moves);
        }
    }
    Plus.className = 'Plus';
    Plus.moves = [
        { x: -0.5, y: -0.5, t: 'move' },
        { x: 0, y: -1 },
        { x: +1, y: 0 },
        { x: 0, y: +1 },
        { x: +1, y: 0 },
        { x: 0, y: +1 },
        { x: -1, y: 0 },
        { x: 0, y: +1 },
        { x: -1, y: 0 },
        { x: 0, y: -1 },
        { x: -1, y: 0 },
        { x: 0, y: -1 },
    ];

    class Square extends Marker {
        updatePath() {
            const { path, x, y } = this;
            const hs = this.size / 2;
            path.clear();
            path.moveTo(this.align(x - hs), this.align(y - hs));
            path.lineTo(this.align(x + hs), this.align(y - hs));
            path.lineTo(this.align(x + hs), this.align(y + hs));
            path.lineTo(this.align(x - hs), this.align(y + hs));
            path.closePath();
        }
    }
    Square.className = 'Square';

    class Triangle extends Marker {
        updatePath() {
            const s = this.size * 1.1;
            super.applyPath(s, Triangle.moves);
        }
    }
    Triangle.className = 'Triangle';
    Triangle.moves = [
        { x: 0, y: -0.48, t: 'move' },
        { x: 0.5, y: 0.87 },
        { x: -1, y: 0 },
    ];

    const MARKER_SHAPES = {
        circle: Circle,
        cross: Cross,
        diamond: Diamond,
        heart: Heart,
        plus: Plus,
        square: Square,
        triangle: Triangle,
    };
    const MARKER_SUPPORTED_SHAPES = Object.keys(MARKER_SHAPES);
    function isMarkerShape(shape) {
        return MARKER_SUPPORTED_SHAPES.includes(shape);
    }
    // This function is in its own file because putting it into SeriesMarker makes the Legend
    // suddenly aware of the series (it's an agnostic component), and putting it into Marker
    // introduces circular dependencies.
    function getMarker(shape = Square) {
        if (isMarkerShape(shape)) {
            return MARKER_SHAPES[shape];
        }
        if (typeof shape === 'function') {
            return shape;
        }
        return Square;
    }

    class MarkerLabel extends Group {
        constructor() {
            super({ name: 'markerLabelGroup' });
            this.label = new Text();
            this._marker = new Square();
            this._markerSize = 15;
            this._spacing = 8;
            const label = this.label;
            label.textBaseline = 'middle';
            label.fontSize = 12;
            label.fontFamily = 'Verdana, sans-serif';
            label.fill = 'black';
            // For better looking vertical alignment of labels to markers.
            label.y = HdpiCanvas.has.textMetrics ? 1 : 0;
            this.append([this.marker, label]);
            this.update();
        }
        set marker(value) {
            if (this._marker !== value) {
                this.removeChild(this._marker);
                this._marker = value;
                this.appendChild(value);
                this.update();
            }
        }
        get marker() {
            return this._marker;
        }
        set markerSize(value) {
            if (this._markerSize !== value) {
                this._markerSize = value;
                this.update();
            }
        }
        get markerSize() {
            return this._markerSize;
        }
        set spacing(value) {
            if (this._spacing !== value) {
                this._spacing = value;
                this.update();
            }
        }
        get spacing() {
            return this._spacing;
        }
        update() {
            const marker = this.marker;
            const markerSize = this.markerSize;
            marker.size = markerSize;
            this.label.x = markerSize / 2 + this.spacing;
        }
        render(renderCtx) {
            // Cannot override field Group.opacity with get/set pair, so
            // propagate opacity changes here.
            this.marker.opacity = this.opacity;
            this.label.opacity = this.opacity;
            super.render(renderCtx);
        }
    }
    MarkerLabel.className = 'MarkerLabel';
    __decorate([
        ProxyPropertyOnWrite('label'),
        __metadata("design:type", String)
    ], MarkerLabel.prototype, "text", void 0);
    __decorate([
        ProxyPropertyOnWrite('label'),
        __metadata("design:type", String)
    ], MarkerLabel.prototype, "fontStyle", void 0);
    __decorate([
        ProxyPropertyOnWrite('label'),
        __metadata("design:type", String)
    ], MarkerLabel.prototype, "fontWeight", void 0);
    __decorate([
        ProxyPropertyOnWrite('label'),
        __metadata("design:type", Number)
    ], MarkerLabel.prototype, "fontSize", void 0);
    __decorate([
        ProxyPropertyOnWrite('label'),
        __metadata("design:type", String)
    ], MarkerLabel.prototype, "fontFamily", void 0);
    __decorate([
        ProxyPropertyOnWrite('label', 'fill'),
        __metadata("design:type", String)
    ], MarkerLabel.prototype, "color", void 0);
    __decorate([
        ProxyPropertyOnWrite('marker', 'fill'),
        __metadata("design:type", String)
    ], MarkerLabel.prototype, "markerFill", void 0);
    __decorate([
        ProxyPropertyOnWrite('marker', 'stroke'),
        __metadata("design:type", String)
    ], MarkerLabel.prototype, "markerStroke", void 0);
    __decorate([
        ProxyPropertyOnWrite('marker', 'strokeWidth'),
        __metadata("design:type", Number)
    ], MarkerLabel.prototype, "markerStrokeWidth", void 0);
    __decorate([
        ProxyPropertyOnWrite('marker', 'fillOpacity'),
        __metadata("design:type", Number)
    ], MarkerLabel.prototype, "markerFillOpacity", void 0);
    __decorate([
        ProxyPropertyOnWrite('marker', 'strokeOpacity'),
        __metadata("design:type", Number)
    ], MarkerLabel.prototype, "markerStrokeOpacity", void 0);

    class PaginationLabel {
        constructor() {
            this.color = 'black';
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
        }
    }
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", String)
    ], PaginationLabel.prototype, "color", void 0);
    __decorate([
        Validate(OPT_FONT_STYLE),
        __metadata("design:type", String)
    ], PaginationLabel.prototype, "fontStyle", void 0);
    __decorate([
        Validate(OPT_FONT_WEIGHT),
        __metadata("design:type", String)
    ], PaginationLabel.prototype, "fontWeight", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], PaginationLabel.prototype, "fontSize", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", String)
    ], PaginationLabel.prototype, "fontFamily", void 0);
    class PaginationMarkerStyle {
        constructor() {
            this.size = 15;
            this.fill = undefined;
            this.fillOpacity = undefined;
            this.stroke = undefined;
            this.strokeWidth = 1;
            this.strokeOpacity = 1;
        }
    }
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PaginationMarkerStyle.prototype, "size", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], PaginationMarkerStyle.prototype, "fill", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        __metadata("design:type", Number)
    ], PaginationMarkerStyle.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], PaginationMarkerStyle.prototype, "stroke", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], PaginationMarkerStyle.prototype, "strokeWidth", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Number)
    ], PaginationMarkerStyle.prototype, "strokeOpacity", void 0);
    class PaginationMarker {
        constructor(parent) {
            this.parent = parent;
            this.shape = Triangle;
            this.size = 15;
            /**
             * Inner padding between a pagination button and the label.
             */
            this.padding = 8;
        }
    }
    __decorate([
        ActionOnSet({
            changeValue() {
                if (this.parent.marker === this) {
                    this.parent.onMarkerShapeChange();
                }
            },
        }),
        __metadata("design:type", Object)
    ], PaginationMarker.prototype, "shape", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], PaginationMarker.prototype, "size", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], PaginationMarker.prototype, "padding", void 0);
    class Pagination {
        constructor(chartUpdateCallback, pageUpdateCallback, interactionManager, cursorManager) {
            this.chartUpdateCallback = chartUpdateCallback;
            this.pageUpdateCallback = pageUpdateCallback;
            this.interactionManager = interactionManager;
            this.cursorManager = cursorManager;
            this.id = createId(this);
            this.group = new Group({ name: 'pagination' });
            this.labelNode = new Text();
            this.marker = new PaginationMarker(this);
            this.activeStyle = new PaginationMarkerStyle();
            this.inactiveStyle = new PaginationMarkerStyle();
            this.highlightStyle = new PaginationMarkerStyle();
            this.label = new PaginationLabel();
            this.totalPages = 0;
            this.currentPage = 0;
            this.translationX = 0;
            this.translationY = 0;
            this.nextButtonDisabled = false;
            this.previousButtonDisabled = false;
            this._visible = true;
            this._enabled = true;
            this._orientation = 'vertical';
            this._nextButton = new Triangle();
            this._previousButton = new Triangle();
            const { labelNode } = this;
            labelNode.textBaseline = 'middle';
            labelNode.fontSize = 12;
            labelNode.fontFamily = 'Verdana, sans-serif';
            labelNode.fill = 'black';
            labelNode.y = HdpiCanvas.has.textMetrics ? 1 : 0;
            this.group.append([this.nextButton, this.previousButton, labelNode]);
            this.interactionManager.addListener('click', (event) => this.onPaginationClick(event));
            this.interactionManager.addListener('hover', (event) => this.onPaginationMouseMove(event));
            this.update();
            this.updateMarkers();
        }
        set visible(value) {
            this._visible = value;
            this.updateGroupVisibility();
        }
        get visible() {
            return this._visible;
        }
        set enabled(value) {
            this._enabled = value;
            this.updateGroupVisibility();
        }
        get enabled() {
            return this._enabled;
        }
        updateGroupVisibility() {
            this.group.visible = this.enabled && this.visible;
        }
        set orientation(value) {
            this._orientation = value;
            switch (value) {
                case 'horizontal': {
                    this.previousButton.rotation = -Math.PI / 2;
                    this.nextButton.rotation = Math.PI / 2;
                    break;
                }
                case 'vertical':
                default: {
                    this.previousButton.rotation = 0;
                    this.nextButton.rotation = Math.PI;
                }
            }
        }
        get orientation() {
            return this._orientation;
        }
        set nextButton(value) {
            if (this._nextButton !== value) {
                this.group.removeChild(this._nextButton);
                this._nextButton = value;
                this.group.appendChild(value);
            }
        }
        get nextButton() {
            return this._nextButton;
        }
        set previousButton(value) {
            if (this._previousButton !== value) {
                this.group.removeChild(this._previousButton);
                this._previousButton = value;
                this.group.appendChild(value);
            }
        }
        get previousButton() {
            return this._previousButton;
        }
        update() {
            this.updateLabel();
            this.updatePositions();
            this.enableOrDisableButtons();
        }
        updatePositions() {
            this.group.translationX = this.translationX;
            this.group.translationY = this.translationY;
            this.updateLabelPosition();
            this.updateNextButtonPosition();
        }
        updateLabelPosition() {
            const { size: markerSize, padding: markerPadding } = this.marker;
            this.nextButton.size = markerSize;
            this.previousButton.size = markerSize;
            this.labelNode.x = markerSize / 2 + markerPadding;
        }
        updateNextButtonPosition() {
            const labelBBox = this.labelNode.computeBBox();
            this.nextButton.translationX = labelBBox.x + labelBBox.width + this.marker.size / 2 + this.marker.padding;
        }
        updateLabel() {
            const { currentPage, totalPages: pages, labelNode, label: { color, fontStyle, fontWeight, fontSize, fontFamily }, } = this;
            labelNode.text = `${currentPage + 1} / ${pages}`;
            labelNode.fill = color;
            labelNode.fontStyle = fontStyle;
            labelNode.fontWeight = fontWeight;
            labelNode.fontSize = fontSize;
            labelNode.fontFamily = fontFamily;
        }
        updateMarkers() {
            const { nextButton, previousButton, nextButtonDisabled, previousButtonDisabled, activeStyle, inactiveStyle, highlightStyle, highlightActive, } = this;
            const buttonStyle = (button, disabled) => {
                if (disabled) {
                    return inactiveStyle;
                }
                else if (button === highlightActive) {
                    return highlightStyle;
                }
                return activeStyle;
            };
            this.updateMarker(nextButton, buttonStyle('next', nextButtonDisabled));
            this.updateMarker(previousButton, buttonStyle('previous', previousButtonDisabled));
        }
        updateMarker(marker, style) {
            var _a;
            const { size } = this.marker;
            marker.size = size;
            marker.fill = style.fill;
            marker.fillOpacity = (_a = style.fillOpacity) !== null && _a !== void 0 ? _a : 1;
            marker.stroke = style.stroke;
            marker.strokeWidth = style.strokeWidth;
            marker.strokeOpacity = style.strokeOpacity;
        }
        enableOrDisableButtons() {
            const { currentPage, totalPages } = this;
            const zeroPagesToDisplay = totalPages === 0;
            const onLastPage = currentPage === totalPages - 1;
            const onFirstPage = currentPage === 0;
            this.nextButtonDisabled = onLastPage || zeroPagesToDisplay;
            this.previousButtonDisabled = onFirstPage || zeroPagesToDisplay;
        }
        nextButtonContainsPoint(offsetX, offsetY) {
            return !this.nextButtonDisabled && this.nextButton.containsPoint(offsetX, offsetY);
        }
        previousButtonContainsPoint(offsetX, offsetY) {
            return !this.previousButtonDisabled && this.previousButton.containsPoint(offsetX, offsetY);
        }
        onPaginationClick(event) {
            const { offsetX, offsetY } = event;
            if (this.nextButtonContainsPoint(offsetX, offsetY)) {
                this.incrementPage();
                this.onPaginationChanged();
                event.consume();
            }
            else if (this.previousButtonContainsPoint(offsetX, offsetY)) {
                this.decrementPage();
                this.onPaginationChanged();
                event.consume();
            }
        }
        onPaginationMouseMove(event) {
            const { offsetX, offsetY } = event;
            if (this.nextButtonContainsPoint(offsetX, offsetY)) {
                this.cursorManager.updateCursor(this.id, 'pointer');
                this.highlightActive = 'next';
            }
            else if (this.previousButtonContainsPoint(offsetX, offsetY)) {
                this.cursorManager.updateCursor(this.id, 'pointer');
                this.highlightActive = 'previous';
            }
            else {
                this.cursorManager.updateCursor(this.id);
                this.highlightActive = undefined;
            }
            this.updateMarkers();
            this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);
        }
        onPaginationChanged() {
            this.pageUpdateCallback(this.currentPage);
        }
        incrementPage() {
            this.currentPage = Math.min(this.currentPage + 1, this.totalPages - 1);
        }
        decrementPage() {
            this.currentPage = Math.max(this.currentPage - 1, 0);
        }
        onMarkerShapeChange() {
            const Marker = getMarker(this.marker.shape || Triangle);
            this.previousButton = new Marker();
            this.nextButton = new Marker();
            this.updatePositions();
            this.updateMarkers();
            this.chartUpdateCallback(ChartUpdateType.SCENE_RENDER);
        }
        attachPagination(node) {
            node.append(this.group);
        }
        computeBBox() {
            return this.group.computeBBox();
        }
    }
    Pagination.className = 'Pagination';

    const ORIENTATIONS = ['horizontal', 'vertical'];
    const OPT_ORIENTATION = predicateWithMessage((v, ctx) => OPTIONAL(v, ctx, (v) => ORIENTATIONS.includes(v)), `expecting an orientation keyword such as 'horizontal' or 'vertical'`);
    class LegendLabel {
        constructor() {
            this.maxLength = undefined;
            this.color = 'black';
            this.fontStyle = undefined;
            this.fontWeight = undefined;
            this.fontSize = 12;
            this.fontFamily = 'Verdana, sans-serif';
            this.formatter = undefined;
        }
    }
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], LegendLabel.prototype, "maxLength", void 0);
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", String)
    ], LegendLabel.prototype, "color", void 0);
    __decorate([
        Validate(OPT_FONT_STYLE),
        __metadata("design:type", String)
    ], LegendLabel.prototype, "fontStyle", void 0);
    __decorate([
        Validate(OPT_FONT_WEIGHT),
        __metadata("design:type", String)
    ], LegendLabel.prototype, "fontWeight", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], LegendLabel.prototype, "fontSize", void 0);
    __decorate([
        Validate(STRING),
        __metadata("design:type", String)
    ], LegendLabel.prototype, "fontFamily", void 0);
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], LegendLabel.prototype, "formatter", void 0);
    class LegendMarker {
        constructor() {
            this.size = 15;
            /**
             * If the marker type is set, the legend will always use that marker type for all its items,
             * regardless of the type that comes from the `data`.
             */
            this._shape = undefined;
            /**
             * Padding between the marker and the label within each legend item.
             */
            this.padding = 8;
            this.strokeWidth = undefined;
        }
        set shape(value) {
            var _a;
            this._shape = value;
            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.onMarkerShapeChange();
        }
        get shape() {
            return this._shape;
        }
    }
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], LegendMarker.prototype, "size", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], LegendMarker.prototype, "padding", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Object)
    ], LegendMarker.prototype, "strokeWidth", void 0);
    class LegendItem {
        constructor() {
            this.marker = new LegendMarker();
            this.label = new LegendLabel();
            /** Used to constrain the width of legend items. */
            this.maxWidth = undefined;
            /**
             * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,
             * and as few rows as possible when positioned to top or bottom. This config specifies the amount of horizontal
             * padding between legend items.
             */
            this.paddingX = 16;
            /**
             * The legend uses grid layout for its items, occupying as few columns as possible when positioned to left or right,
             * and as few rows as possible when positioned to top or bottom. This config specifies the amount of vertical
             * padding between legend items.
             */
            this.paddingY = 8;
            this.toggleSeriesVisible = true;
        }
    }
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], LegendItem.prototype, "maxWidth", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], LegendItem.prototype, "paddingX", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], LegendItem.prototype, "paddingY", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], LegendItem.prototype, "toggleSeriesVisible", void 0);
    class LegendListeners {
        constructor() {
            this.legendItemClick = undefined;
            this.legendItemDoubleClick = undefined;
        }
    }
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], LegendListeners.prototype, "legendItemClick", void 0);
    class Legend {
        set data(value) {
            this._data = value;
            this.updateGroupVisibility();
        }
        get data() {
            return this._data;
        }
        set enabled(value) {
            this._enabled = value;
            this.updateGroupVisibility();
        }
        get enabled() {
            return this._enabled;
        }
        getOrientation() {
            if (this.orientation !== undefined) {
                return this.orientation;
            }
            switch (this.position) {
                case 'right':
                case 'left':
                    return 'vertical';
                case 'bottom':
                case 'top':
                    return 'horizontal';
            }
        }
        constructor(ctx) {
            this.ctx = ctx;
            this.id = createId(this);
            this.group = new Group({ name: 'legend', layer: true, zIndex: Layers.LEGEND_ZINDEX });
            this.itemSelection = Selection.select(this.group, MarkerLabel);
            this.oldSize = [0, 0];
            this.pages = [];
            this.maxPageSize = [0, 0];
            /** Item index to track on re-pagination, so current page updates appropriately. */
            this.paginationTrackingIndex = 0;
            this.item = new LegendItem();
            this.listeners = new LegendListeners();
            this.truncatedItems = new Set();
            this._data = [];
            this._enabled = true;
            this.position = 'bottom';
            /** Used to constrain the width of the legend. */
            this.maxWidth = undefined;
            /** Used to constrain the height of the legend. */
            this.maxHeight = undefined;
            /** Reverse the display order of legend items if `true`. */
            this.reverseOrder = undefined;
            this.destroyFns = [];
            /**
             * Spacing between the legend and the edge of the chart's element.
             */
            this.spacing = 20;
            this.characterWidths = new Map();
            this.size = [0, 0];
            this._visible = true;
            this.item.marker.parent = this;
            this.pagination = new Pagination((type) => ctx.updateService.update(type), (page) => this.updatePageNumber(page), ctx.interactionManager, ctx.cursorManager);
            this.pagination.attachPagination(this.group);
            this.item.marker.parent = this;
            const bypass = { bypassPause: ['animation'] };
            this.destroyFns.push(ctx.interactionManager.addListener('click', (e) => this.checkLegendClick(e), bypass), ctx.interactionManager.addListener('dblclick', (e) => this.checkLegendDoubleClick(e), bypass), ctx.interactionManager.addListener('hover', (e) => this.handleLegendMouseMove(e)), ctx.layoutService.addListener('start-layout', (e) => this.positionLegend(e.shrinkRect)), () => this.detachLegend());
        }
        destroy() {
            this.destroyFns.forEach((f) => f());
        }
        onMarkerShapeChange() {
            this.itemSelection.clear();
            this.group.markDirty(this.group, RedrawType.MINOR);
        }
        getCharacterWidths(font) {
            const { characterWidths } = this;
            if (characterWidths.has(font)) {
                return characterWidths.get(font);
            }
            const cw = {
                '...': HdpiCanvas.getTextSize('...', font).width,
            };
            characterWidths.set(font, cw);
            return cw;
        }
        set visible(value) {
            this._visible = value;
            this.updateGroupVisibility();
        }
        get visible() {
            return this._visible;
        }
        updateGroupVisibility() {
            this.group.visible = this.enabled && this.visible && this.data.length > 0;
        }
        attachLegend(node) {
            node.append(this.group);
        }
        detachLegend() {
            var _a;
            (_a = this.group.parent) === null || _a === void 0 ? void 0 : _a.removeChild(this.group);
        }
        getItemLabel(datum) {
            const { ctx: { callbackCache }, } = this;
            const { formatter } = this.item.label;
            if (formatter) {
                return callbackCache.call(formatter, {
                    itemId: datum.itemId,
                    value: datum.label.text,
                    seriesId: datum.seriesId,
                });
            }
            return datum.label.text;
        }
        /**
         * The method is given the desired size of the legend, which only serves as a hint.
         * The vertically oriented legend will take as much horizontal space as needed, but will
         * respect the height constraints, and the horizontal legend will take as much vertical
         * space as needed in an attempt not to exceed the given width.
         * After the layout is done, the {@link size} will contain the actual size of the legend.
         * If the actual size is not the same as the previous actual size, the legend will fire
         * the 'layoutChange' event to communicate that another layout is needed, and the above
         * process should be repeated.
         * @param width
         * @param height
         */
        performLayout(width, height) {
            const { paddingX, paddingY, label, maxWidth, marker: { size: markerSize, padding: markerPadding, shape: markerShape }, label: { maxLength = Infinity, fontStyle, fontWeight, fontSize, fontFamily }, } = this.item;
            const data = [...this.data];
            if (this.reverseOrder) {
                data.reverse();
            }
            this.itemSelection.update(data);
            // Update properties that affect the size of the legend items and measure them.
            const bboxes = [];
            const font = getFont(label);
            const itemMaxWidthPercentage = 0.8;
            const maxItemWidth = maxWidth !== null && maxWidth !== void 0 ? maxWidth : width * itemMaxWidthPercentage;
            const paddedMarkerWidth = markerSize + markerPadding + paddingX;
            this.itemSelection.each((markerLabel, datum) => {
                var _a;
                const Marker = getMarker(markerShape !== null && markerShape !== void 0 ? markerShape : datum.marker.shape);
                if (!(markerLabel.marker && markerLabel.marker instanceof Marker)) {
                    markerLabel.marker = new Marker();
                }
                markerLabel.markerSize = markerSize;
                markerLabel.spacing = markerPadding;
                markerLabel.fontStyle = fontStyle;
                markerLabel.fontWeight = fontWeight;
                markerLabel.fontSize = fontSize;
                markerLabel.fontFamily = fontFamily;
                const id = (_a = datum.itemId) !== null && _a !== void 0 ? _a : datum.id;
                const labelText = this.getItemLabel(datum);
                const text = (labelText !== null && labelText !== void 0 ? labelText : '<unknown>').replace(/\r?\n/g, ' ');
                markerLabel.text = this.truncate(text, maxLength, maxItemWidth, paddedMarkerWidth, font, id);
                bboxes.push(markerLabel.computeBBox());
            });
            width = Math.max(1, width);
            height = Math.max(1, height);
            if (!isFinite(width)) {
                return false;
            }
            const size = this.size;
            const oldSize = this.oldSize;
            size[0] = width;
            size[1] = height;
            if (size[0] !== oldSize[0] || size[1] !== oldSize[1]) {
                oldSize[0] = size[0];
                oldSize[1] = size[1];
            }
            const { pages, maxPageHeight, maxPageWidth } = this.updatePagination(bboxes, width, height);
            this.pages = pages;
            this.maxPageSize = [maxPageWidth - paddingX, maxPageHeight - paddingY];
            const pageNumber = this.pagination.currentPage;
            const page = this.pages[pageNumber];
            if (this.pages.length < 1 || !page) {
                this.visible = false;
                return;
            }
            this.visible = true;
            // Position legend items
            this.updatePositions(pageNumber);
            // Update legend item properties that don't affect the layout.
            this.update();
        }
        truncate(text, maxCharLength, maxItemWidth, paddedMarkerWidth, font, id) {
            const ellipsis = `...`;
            const textChars = text.split('');
            let addEllipsis = false;
            if (text.length > maxCharLength) {
                text = `${text.substring(0, maxCharLength)}`;
                addEllipsis = true;
            }
            const labelWidth = Math.floor(paddedMarkerWidth + HdpiCanvas.getTextSize(text, font).width);
            if (labelWidth > maxItemWidth) {
                let truncatedText = '';
                const characterWidths = this.getCharacterWidths(font);
                let cumulativeWidth = paddedMarkerWidth + characterWidths[ellipsis];
                for (const char of textChars) {
                    if (!characterWidths[char]) {
                        characterWidths[char] = HdpiCanvas.getTextSize(char, font).width;
                    }
                    cumulativeWidth += characterWidths[char];
                    if (cumulativeWidth > maxItemWidth) {
                        break;
                    }
                    truncatedText += char;
                }
                text = truncatedText;
                addEllipsis = true;
            }
            if (addEllipsis) {
                text += ellipsis;
                this.truncatedItems.add(id);
            }
            else {
                this.truncatedItems.delete(id);
            }
            return text;
        }
        updatePagination(bboxes, width, height) {
            const orientation = this.getOrientation();
            const trackingIndex = Math.min(this.paginationTrackingIndex, bboxes.length);
            this.pagination.orientation = orientation;
            this.pagination.translationX = 0;
            this.pagination.translationY = 0;
            const { pages, maxPageHeight, maxPageWidth, paginationBBox, paginationVertical } = this.calculatePagination(bboxes, width, height);
            const newCurrentPage = pages.findIndex((p) => p.endIndex >= trackingIndex);
            this.pagination.currentPage = Math.min(Math.max(newCurrentPage, 0), pages.length - 1);
            const { paddingX: itemPaddingX, paddingY: itemPaddingY } = this.item;
            const paginationComponentPadding = 8;
            const legendItemsWidth = maxPageWidth - itemPaddingX;
            const legendItemsHeight = maxPageHeight - itemPaddingY;
            let paginationX = 0;
            let paginationY = -paginationBBox.y - this.item.marker.size / 2;
            if (paginationVertical) {
                paginationY += legendItemsHeight + paginationComponentPadding;
            }
            else {
                paginationX += -paginationBBox.x + legendItemsWidth + paginationComponentPadding;
                paginationY += (legendItemsHeight - paginationBBox.height) / 2;
            }
            this.pagination.translationX = paginationX;
            this.pagination.translationY = paginationY;
            this.pagination.update();
            this.pagination.updateMarkers();
            return {
                maxPageHeight,
                maxPageWidth,
                pages,
            };
        }
        calculatePagination(bboxes, width, height) {
            var _a, _b, _c;
            const { paddingX: itemPaddingX, paddingY: itemPaddingY } = this.item;
            const orientation = this.getOrientation();
            const paginationVertical = ['left', 'right'].includes(this.position);
            let paginationBBox = this.pagination.computeBBox();
            let lastPassPaginationBBox = new BBox(0, 0, 0, 0);
            let pages = [];
            let maxPageWidth = 0;
            let maxPageHeight = 0;
            let count = 0;
            const stableOutput = (lastPassPaginationBBox) => {
                const { width, height } = lastPassPaginationBBox;
                return width === paginationBBox.width && height === paginationBBox.height;
            };
            const forceResult = this.maxWidth !== undefined || this.maxHeight !== undefined;
            do {
                if (count++ > 10) {
                    Logger.warn('unable to find stable legend layout.');
                    break;
                }
                paginationBBox = lastPassPaginationBBox;
                const maxWidth = width - (paginationVertical ? 0 : paginationBBox.width);
                const maxHeight = height - (paginationVertical ? paginationBBox.height : 0);
                const layout = gridLayout({
                    orientation,
                    bboxes,
                    maxHeight,
                    maxWidth,
                    itemPaddingY,
                    itemPaddingX,
                    forceResult,
                });
                pages = (_a = layout === null || layout === void 0 ? void 0 : layout.pages) !== null && _a !== void 0 ? _a : [];
                maxPageWidth = (_b = layout === null || layout === void 0 ? void 0 : layout.maxPageWidth) !== null && _b !== void 0 ? _b : 0;
                maxPageHeight = (_c = layout === null || layout === void 0 ? void 0 : layout.maxPageHeight) !== null && _c !== void 0 ? _c : 0;
                const totalPages = pages.length;
                this.pagination.visible = totalPages > 1;
                this.pagination.totalPages = totalPages;
                this.pagination.update();
                lastPassPaginationBBox = this.pagination.computeBBox();
                if (!this.pagination.visible) {
                    break;
                }
            } while (!stableOutput(lastPassPaginationBBox));
            return { maxPageWidth, maxPageHeight, pages, paginationBBox, paginationVertical };
        }
        updatePositions(pageNumber = 0) {
            const { item: { paddingY }, itemSelection, pages, } = this;
            if (pages.length < 1 || !pages[pageNumber]) {
                return;
            }
            const { columns, startIndex: visibleStart, endIndex: visibleEnd } = pages[pageNumber];
            // Position legend items using the layout computed above.
            let x = 0;
            let y = 0;
            const columnCount = columns.length;
            const rowCount = columns[0].indices.length;
            const horizontal = this.getOrientation() === 'horizontal';
            const itemHeight = columns[0].bboxes[0].height + paddingY;
            const rowSumColumnWidths = [];
            itemSelection.each((markerLabel, _, i) => {
                var _a, _b;
                if (i < visibleStart || i > visibleEnd) {
                    markerLabel.visible = false;
                    return;
                }
                const pageIndex = i - visibleStart;
                let columnIndex = 0;
                let rowIndex = 0;
                if (horizontal) {
                    columnIndex = pageIndex % columnCount;
                    rowIndex = Math.floor(pageIndex / columnCount);
                }
                else {
                    columnIndex = Math.floor(pageIndex / rowCount);
                    rowIndex = pageIndex % rowCount;
                }
                markerLabel.visible = true;
                const column = columns[columnIndex];
                if (!column) {
                    return;
                }
                y = itemHeight * rowIndex;
                x = (_a = rowSumColumnWidths[rowIndex]) !== null && _a !== void 0 ? _a : 0;
                rowSumColumnWidths[rowIndex] = ((_b = rowSumColumnWidths[rowIndex]) !== null && _b !== void 0 ? _b : 0) + column.columnWidth;
                // Round off for pixel grid alignment to work properly.
                markerLabel.translationX = Math.floor(x);
                markerLabel.translationY = Math.floor(y);
            });
        }
        updatePageNumber(pageNumber) {
            const { pages } = this;
            // Track an item on the page in re-pagination cases (e.g. resize).
            const { startIndex, endIndex } = pages[pageNumber];
            if (startIndex === 0) {
                // Stay on first page on pagination update.
                this.paginationTrackingIndex = 0;
            }
            else if (pageNumber === pages.length - 1) {
                // Stay on last page on pagination update.
                this.paginationTrackingIndex = endIndex;
            }
            else {
                // Track the middle item on the page).
                this.paginationTrackingIndex = Math.floor((startIndex + endIndex) / 2);
            }
            this.pagination.update();
            this.pagination.updateMarkers();
            this.updatePositions(pageNumber);
            this.ctx.updateService.update(ChartUpdateType.SCENE_RENDER);
        }
        update() {
            const { label: { color }, marker: itemMarker, } = this.item;
            this.itemSelection.each((markerLabel, datum) => {
                var _a;
                const marker = datum.marker;
                markerLabel.markerFill = marker.fill;
                markerLabel.markerStroke = marker.stroke;
                markerLabel.markerStrokeWidth = (_a = itemMarker.strokeWidth) !== null && _a !== void 0 ? _a : Math.min(2, marker.strokeWidth);
                markerLabel.markerFillOpacity = marker.fillOpacity;
                markerLabel.markerStrokeOpacity = marker.strokeOpacity;
                markerLabel.opacity = datum.enabled ? 1 : 0.5;
                markerLabel.color = color;
            });
        }
        getDatumForPoint(x, y) {
            const visibleChildBBoxes = [];
            const closestLeftTop = { dist: Infinity, datum: undefined };
            for (const child of this.group.children) {
                if (!child.visible)
                    continue;
                if (!(child instanceof MarkerLabel))
                    continue;
                const childBBox = child.computeBBox();
                childBBox.grow(this.item.paddingX / 2, 'horizontal');
                childBBox.grow(this.item.paddingY / 2, 'vertical');
                if (childBBox.containsPoint(x, y)) {
                    return child.datum;
                }
                const distX = x - childBBox.x - this.item.paddingX / 2;
                const distY = y - childBBox.y - this.item.paddingY / 2;
                const dist = Math.pow(distX, 2) + Math.pow(distY, 2);
                const toTheLeftTop = distX >= 0 && distY >= 0;
                if (toTheLeftTop && dist < closestLeftTop.dist) {
                    closestLeftTop.dist = dist;
                    closestLeftTop.datum = child.datum;
                }
                visibleChildBBoxes.push(childBBox);
            }
            const pageBBox = BBox.merge(visibleChildBBoxes);
            if (!pageBBox.containsPoint(x, y)) {
                // We're not in-between legend items.
                return undefined;
            }
            // Fallback to returning closest match to the left/up.
            return closestLeftTop.datum;
        }
        computeBBox() {
            return this.group.computeBBox();
        }
        computePagedBBox() {
            const actualBBox = this.group.computeBBox();
            if (this.pages.length <= 1) {
                return actualBBox;
            }
            const [maxPageWidth, maxPageHeight] = this.maxPageSize;
            actualBBox.height = Math.max(maxPageHeight, actualBBox.height);
            actualBBox.width = Math.max(maxPageWidth, actualBBox.width);
            return actualBBox;
        }
        checkLegendClick(event) {
            const { listeners: { legendItemClick }, ctx: { dataService, highlightManager }, item: { toggleSeriesVisible }, } = this;
            const { offsetX, offsetY } = event;
            const legendBBox = this.computeBBox();
            const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);
            const datum = this.getDatumForPoint(offsetX, offsetY);
            if (!pointerInsideLegend || !datum) {
                return;
            }
            const { id, itemId, enabled } = datum;
            const chartSeries = dataService.getSeries();
            const series = chartSeries.find((s) => s.id === id);
            if (!series) {
                return;
            }
            event.consume();
            let newEnabled = enabled;
            if (toggleSeriesVisible) {
                newEnabled = !enabled;
                this.ctx.chartEventManager.legendItemClick(series, itemId, newEnabled, datum.legendItemName);
            }
            if (!newEnabled) {
                highlightManager.updateHighlight(this.id);
            }
            else {
                highlightManager.updateHighlight(this.id, {
                    series,
                    itemId,
                    datum: undefined,
                });
            }
            this.ctx.updateService.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });
            legendItemClick === null || legendItemClick === void 0 ? void 0 : legendItemClick({ type: 'click', enabled: newEnabled, itemId, seriesId: series.id });
        }
        checkLegendDoubleClick(event) {
            var _a;
            const { listeners: { legendItemDoubleClick }, ctx: { dataService }, item: { toggleSeriesVisible }, } = this;
            const { offsetX, offsetY } = event;
            // Integrated charts do not handle double click behaviour correctly due to multiple instances of the
            // chart being created. See https://ag-grid.atlassian.net/browse/RTI-1381
            if (this.ctx.mode === 'integrated') {
                return;
            }
            const legendBBox = this.computeBBox();
            const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);
            const datum = this.getDatumForPoint(offsetX, offsetY);
            if (!pointerInsideLegend || !datum) {
                return;
            }
            const { id, itemId, seriesId } = datum;
            const chartSeries = dataService.getSeries();
            const series = chartSeries.find((s) => s.id === id);
            if (!series) {
                return;
            }
            event.consume();
            if (toggleSeriesVisible) {
                const numVisibleItems = {};
                const legendData = chartSeries.flatMap((series) => series.getLegendData('category'));
                legendData.forEach((d) => {
                    var _a;
                    var _b;
                    (_a = numVisibleItems[_b = d.seriesId]) !== null && _a !== void 0 ? _a : (numVisibleItems[_b] = 0);
                    if (d.enabled) {
                        numVisibleItems[d.seriesId]++;
                    }
                });
                const clickedItem = legendData.find((d) => d.itemId === itemId && d.seriesId === seriesId);
                this.ctx.chartEventManager.legendItemDoubleClick(series, itemId, (_a = clickedItem === null || clickedItem === void 0 ? void 0 : clickedItem.enabled) !== null && _a !== void 0 ? _a : false, numVisibleItems, clickedItem === null || clickedItem === void 0 ? void 0 : clickedItem.legendItemName);
            }
            this.ctx.updateService.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true });
            legendItemDoubleClick === null || legendItemDoubleClick === void 0 ? void 0 : legendItemDoubleClick({ type: 'dblclick', enabled: true, itemId, seriesId: series.id });
        }
        handleLegendMouseMove(event) {
            var _a;
            const { enabled, item: { toggleSeriesVisible }, listeners, } = this;
            if (!enabled) {
                return;
            }
            const legendBBox = this.computeBBox();
            const { pageX, pageY, offsetX, offsetY } = event;
            const pointerInsideLegend = this.group.visible && legendBBox.containsPoint(offsetX, offsetY);
            if (!pointerInsideLegend) {
                this.ctx.cursorManager.updateCursor(this.id);
                this.ctx.highlightManager.updateHighlight(this.id);
                this.ctx.tooltipManager.removeTooltip(this.id);
                return;
            }
            // Prevent other handlers from consuming this event if it's generated inside the legend
            // boundaries.
            event.consume();
            const datum = this.getDatumForPoint(offsetX, offsetY);
            const pointerOverLegendDatum = pointerInsideLegend && datum !== undefined;
            if (!pointerOverLegendDatum) {
                this.ctx.cursorManager.updateCursor(this.id);
                this.ctx.highlightManager.updateHighlight(this.id);
                return;
            }
            const series = datum ? this.ctx.dataService.getSeries().find((series) => series.id === (datum === null || datum === void 0 ? void 0 : datum.id)) : undefined;
            if (datum && this.truncatedItems.has((_a = datum.itemId) !== null && _a !== void 0 ? _a : datum.id)) {
                this.ctx.tooltipManager.updateTooltip(this.id, { pageX, pageY, offsetX, offsetY, event, showArrow: false }, toTooltipHtml({ content: this.getItemLabel(datum) }));
            }
            else {
                this.ctx.tooltipManager.removeTooltip(this.id);
            }
            if (toggleSeriesVisible || listeners.legendItemClick != null || listeners.legendItemDoubleClick != null) {
                this.ctx.cursorManager.updateCursor(this.id, 'pointer');
            }
            if ((datum === null || datum === void 0 ? void 0 : datum.enabled) && series) {
                this.ctx.highlightManager.updateHighlight(this.id, {
                    series,
                    itemId: datum === null || datum === void 0 ? void 0 : datum.itemId,
                    datum: undefined,
                });
            }
            else {
                this.ctx.highlightManager.updateHighlight(this.id);
            }
        }
        positionLegend(shrinkRect) {
            const newShrinkRect = shrinkRect.clone();
            if (!this.enabled || !this.data.length) {
                return { shrinkRect: newShrinkRect };
            }
            const [legendWidth, legendHeight] = this.calculateLegendDimensions(shrinkRect);
            this.group.translationX = 0;
            this.group.translationY = 0;
            this.performLayout(legendWidth, legendHeight);
            const legendBBox = this.computePagedBBox();
            const calculateTranslationPerpendicularDimension = () => {
                switch (this.position) {
                    case 'top':
                    case 'left':
                        return 0;
                    case 'bottom':
                        return shrinkRect.height - legendBBox.height;
                    case 'right':
                    default:
                        return shrinkRect.width - legendBBox.width;
                }
            };
            if (this.visible) {
                let translationX;
                let translationY;
                switch (this.position) {
                    case 'top':
                    case 'bottom':
                        translationX = (shrinkRect.width - legendBBox.width) / 2;
                        translationY = calculateTranslationPerpendicularDimension();
                        newShrinkRect.shrink(legendBBox.height, this.position);
                        break;
                    case 'left':
                    case 'right':
                    default:
                        translationX = calculateTranslationPerpendicularDimension();
                        translationY = (shrinkRect.height - legendBBox.height) / 2;
                        newShrinkRect.shrink(legendBBox.width, this.position);
                }
                // Round off for pixel grid alignment to work properly.
                this.group.translationX = Math.floor(-legendBBox.x + shrinkRect.x + translationX);
                this.group.translationY = Math.floor(-legendBBox.y + shrinkRect.y + translationY);
            }
            if (this.visible && this.enabled && this.data.length) {
                const legendPadding = this.spacing;
                newShrinkRect.shrink(legendPadding, this.position);
                const legendPositionedBBox = legendBBox.clone();
                legendPositionedBBox.x += this.group.translationX;
                legendPositionedBBox.y += this.group.translationY;
                this.ctx.tooltipManager.updateExclusiveRect(this.id, legendPositionedBBox);
            }
            else {
                this.ctx.tooltipManager.updateExclusiveRect(this.id);
            }
            return { shrinkRect: newShrinkRect };
        }
        calculateLegendDimensions(shrinkRect) {
            const { width, height } = shrinkRect;
            const aspectRatio = width / height;
            const maxCoefficient = 0.5;
            const minHeightCoefficient = 0.2;
            const minWidthCoefficient = 0.25;
            let legendWidth, legendHeight;
            switch (this.position) {
                case 'top':
                case 'bottom':
                    // A horizontal legend should take maximum between 20 to 50 percent of the chart height if height is larger than width
                    // and maximum 20 percent of the chart height if height is smaller than width.
                    const heightCoefficient = aspectRatio < 1
                        ? Math.min(maxCoefficient, minHeightCoefficient * (1 / aspectRatio))
                        : minHeightCoefficient;
                    legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : width;
                    legendHeight = this.maxHeight
                        ? Math.min(this.maxHeight, height)
                        : Math.round(height * heightCoefficient);
                    break;
                case 'left':
                case 'right':
                default:
                    // A vertical legend should take maximum between 25 to 50 percent of the chart width if width is larger than height
                    // and maximum 25 percent of the chart width if width is smaller than height.
                    const widthCoefficient = aspectRatio > 1 ? Math.min(maxCoefficient, minWidthCoefficient * aspectRatio) : minWidthCoefficient;
                    legendWidth = this.maxWidth ? Math.min(this.maxWidth, width) : Math.round(width * widthCoefficient);
                    legendHeight = this.maxHeight ? Math.min(this.maxHeight, height) : height;
            }
            return [legendWidth, legendHeight];
        }
    }
    Legend.className = 'Legend';
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], Legend.prototype, "_enabled", void 0);
    __decorate([
        Validate(POSITION),
        __metadata("design:type", String)
    ], Legend.prototype, "position", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], Legend.prototype, "maxWidth", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], Legend.prototype, "maxHeight", void 0);
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], Legend.prototype, "reverseOrder", void 0);
    __decorate([
        Validate(OPT_ORIENTATION),
        __metadata("design:type", String)
    ], Legend.prototype, "orientation", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], Legend.prototype, "spacing", void 0);

    class Overlay {
        constructor(className, parent, document) {
            this.text = undefined;
            this.className = className;
            this.parentElement = parent;
            this.document = document;
        }
        show(rect) {
            var _a, _b;
            let element = this.element;
            if (!element) {
                element = this.document.createElement('div');
                element.className = this.className;
                this.element = element;
            }
            element.style.position = 'absolute';
            element.style.left = `${rect.x}px`;
            element.style.top = `${rect.y}px`;
            element.style.width = `${rect.width}px`;
            element.style.height = `${rect.height}px`;
            if (this.renderer) {
                element.innerHTML = this.renderer();
            }
            else {
                const content = this.document.createElement('div');
                content.style.alignItems = 'center';
                content.style.boxSizing = 'border-box';
                content.style.display = 'flex';
                content.style.justifyContent = 'center';
                content.style.margin = '8px';
                content.style.height = '100%';
                content.style.font = '12px Verdana, sans-serif';
                content.innerText = (_a = this.text) !== null && _a !== void 0 ? _a : 'No data to display';
                element.append(content);
            }
            (_b = this.parentElement) === null || _b === void 0 ? void 0 : _b.append(element);
        }
        hide() {
            var _a;
            (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();
            this.element = undefined;
        }
    }
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], Overlay.prototype, "renderer", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], Overlay.prototype, "text", void 0);

    class ChartOverlays {
        constructor(parent) {
            this.noData = new Overlay('ag-chart-no-data-overlay', parent, parent.ownerDocument);
        }
    }

    const SERIES_THRESHOLD_FOR_AGGRESSIVE_LAYER_REDUCTION = 30;
    class SeriesLayerManager {
        constructor(rootGroup) {
            this.groups = {};
            this.series = {};
            this.expectedSeriesCount = 1;
            this.mode = 'normal';
            this.rootGroup = rootGroup;
        }
        setSeriesCount(count) {
            this.expectedSeriesCount = count;
        }
        requestGroup(seriesConfig) {
            var _a, _b;
            var _c, _d;
            const { id, type, rootGroup: seriesRootGroup, highlightGroup: seriesHighlightGroup, annotationGroup: seriesAnnotationGroup, seriesGrouping, } = seriesConfig;
            const { groupIndex = id } = seriesGrouping !== null && seriesGrouping !== void 0 ? seriesGrouping : {};
            if (this.series[id] != null) {
                throw new Error(`AG Charts - series already has an allocated layer: ${this.series[id]}`);
            }
            // Re-evaluate mode only on first series addition - we can't swap strategy mid-setup.
            if (Object.keys(this.series).length === 0) {
                this.mode =
                    this.expectedSeriesCount >= SERIES_THRESHOLD_FOR_AGGRESSIVE_LAYER_REDUCTION
                        ? 'aggressive-grouping'
                        : 'normal';
            }
            (_a = (_c = this.groups)[type]) !== null && _a !== void 0 ? _a : (_c[type] = {});
            const lookupIndex = this.lookupIdx(groupIndex);
            let groupInfo = this.groups[type][lookupIndex];
            if (!groupInfo) {
                groupInfo = (_b = (_d = this.groups[type])[lookupIndex]) !== null && _b !== void 0 ? _b : (_d[lookupIndex] = {
                    seriesIds: [],
                    group: this.rootGroup.appendChild(new Group({
                        name: `${type}-content`,
                        layer: true,
                        zIndex: Layers.SERIES_LAYER_ZINDEX,
                        zIndexSubOrder: seriesConfig.getGroupZIndexSubOrder('data'),
                    })),
                    highlight: this.rootGroup.appendChild(new Group({
                        name: `${type}-highlight`,
                        layer: true,
                        zIndex: Layers.SERIES_LAYER_ZINDEX,
                        zIndexSubOrder: seriesConfig.getGroupZIndexSubOrder('highlight'),
                    })),
                    annotation: this.rootGroup.appendChild(new Group({
                        name: `${type}-annotation`,
                        layer: true,
                        zIndex: Layers.SERIES_LAYER_ZINDEX,
                        zIndexSubOrder: seriesConfig.getGroupZIndexSubOrder('annotation'),
                    })),
                });
            }
            this.series[id] = { layerState: groupInfo, seriesConfig };
            groupInfo.seriesIds.push(id);
            groupInfo.group.appendChild(seriesRootGroup);
            groupInfo.highlight.appendChild(seriesHighlightGroup);
            groupInfo.annotation.appendChild(seriesAnnotationGroup);
            return groupInfo.group;
        }
        changeGroup(seriesConfig) {
            var _a, _b;
            const { id, seriesGrouping, type, rootGroup, highlightGroup, annotationGroup, oldGrouping } = seriesConfig;
            const { groupIndex = id } = seriesGrouping !== null && seriesGrouping !== void 0 ? seriesGrouping : {};
            if ((_b = (_a = this.groups[type]) === null || _a === void 0 ? void 0 : _a[groupIndex]) === null || _b === void 0 ? void 0 : _b.seriesIds.includes(id)) {
                // Already in the right group, nothing to do.
                return;
            }
            if (this.series[id] != null) {
                this.releaseGroup({ id, seriesGrouping: oldGrouping, type, rootGroup, highlightGroup, annotationGroup });
            }
            this.requestGroup(seriesConfig);
        }
        releaseGroup(seriesConfig) {
            var _a, _b, _c, _d, _e;
            const { id, seriesGrouping, rootGroup, highlightGroup, annotationGroup, type } = seriesConfig;
            const { groupIndex = id } = seriesGrouping !== null && seriesGrouping !== void 0 ? seriesGrouping : {};
            if (this.series[id] == null) {
                throw new Error(`AG Charts - series doesn't have an allocated layer: ${id}`);
            }
            const lookupIndex = this.lookupIdx(groupIndex);
            const groupInfo = (_b = (_a = this.groups[type]) === null || _a === void 0 ? void 0 : _a[lookupIndex]) !== null && _b !== void 0 ? _b : (_c = this.series[id]) === null || _c === void 0 ? void 0 : _c.layerState;
            if (groupInfo) {
                groupInfo.seriesIds = groupInfo.seriesIds.filter((v) => v !== id);
                groupInfo.group.removeChild(rootGroup);
                groupInfo.highlight.removeChild(highlightGroup);
                groupInfo.annotation.removeChild(annotationGroup);
            }
            if ((groupInfo === null || groupInfo === void 0 ? void 0 : groupInfo.seriesIds.length) === 0) {
                // Last member of the layer, cleanup.
                this.rootGroup.removeChild(groupInfo.group);
                this.rootGroup.removeChild(groupInfo.highlight);
                this.rootGroup.removeChild(groupInfo.annotation);
                delete this.groups[type][lookupIndex];
                delete this.groups[type][id];
            }
            else if ((groupInfo === null || groupInfo === void 0 ? void 0 : groupInfo.seriesIds.length) > 0) {
                // Update zIndexSubOrder to avoid it becoming stale as series are removed and re-added
                // with the same groupIndex, but are otherwise unrelated.
                const leadSeriesConfig = (_e = this.series[(_d = groupInfo === null || groupInfo === void 0 ? void 0 : groupInfo.seriesIds) === null || _d === void 0 ? void 0 : _d[0]]) === null || _e === void 0 ? void 0 : _e.seriesConfig;
                groupInfo.group.zIndexSubOrder = leadSeriesConfig === null || leadSeriesConfig === void 0 ? void 0 : leadSeriesConfig.getGroupZIndexSubOrder('data');
                groupInfo.highlight.zIndexSubOrder = leadSeriesConfig === null || leadSeriesConfig === void 0 ? void 0 : leadSeriesConfig.getGroupZIndexSubOrder('highlight');
                groupInfo.annotation.zIndexSubOrder = leadSeriesConfig === null || leadSeriesConfig === void 0 ? void 0 : leadSeriesConfig.getGroupZIndexSubOrder('annotation');
            }
            delete this.series[id];
        }
        lookupIdx(groupIndex) {
            if (this.mode === 'normal') {
                return groupIndex;
            }
            if (typeof groupIndex === 'string') {
                groupIndex = Number(groupIndex.split('-').slice(-1)[0]);
                if (!groupIndex)
                    return 0;
            }
            return Math.floor(Math.max(Math.min(groupIndex / this.expectedSeriesCount, 1), 0) *
                SERIES_THRESHOLD_FOR_AGGRESSIVE_LAYER_REDUCTION);
        }
        destroy() {
            for (const groups of Object.values(this.groups)) {
                for (const groupInfo of Object.values(groups)) {
                    this.rootGroup.removeChild(groupInfo.group);
                    this.rootGroup.removeChild(groupInfo.highlight);
                    this.rootGroup.removeChild(groupInfo.annotation);
                }
            }
            this.groups = {};
            this.series = {};
        }
    }

    class SeriesStateManager {
        constructor() {
            this.groups = {};
        }
        registerSeries({ id, seriesGrouping, visible, type, }) {
            var _a;
            var _b;
            if (!seriesGrouping)
                return;
            (_a = (_b = this.groups)[type]) !== null && _a !== void 0 ? _a : (_b[type] = {});
            this.groups[type][id] = { grouping: seriesGrouping, visible };
        }
        deregisterSeries({ id, type }) {
            if (this.groups[type]) {
                delete this.groups[type][id];
            }
            if (this.groups[type] && Object.keys(this.groups[type]).length === 0) {
                delete this.groups[type];
            }
        }
        getVisiblePeerGroupIndex({ type, seriesGrouping }) {
            var _a;
            if (!seriesGrouping)
                return { visibleGroupCount: 1, index: 0 };
            const visibleGroups = [
                ...Object.entries((_a = this.groups[type]) !== null && _a !== void 0 ? _a : {})
                    .filter(([_, entry]) => entry.visible)
                    .reduce((result, [_, next]) => {
                    if (next.visible) {
                        result.add(next.grouping.groupIndex);
                    }
                    return result;
                }, new Set())
                    .values(),
            ];
            visibleGroups.sort((a, b) => a - b);
            return {
                visibleGroupCount: visibleGroups.length,
                index: visibleGroups.indexOf(seriesGrouping.groupIndex),
            };
        }
    }

    class BaseLayoutProcessor {
        constructor(chartLike, layoutService) {
            this.chartLike = chartLike;
            this.layoutService = layoutService;
            this.destroyFns = [];
            this.destroyFns.push(
            // eslint-disable-next-line sonarjs/no-duplicate-string
            this.layoutService.addListener('layout-complete', (e) => this.layoutComplete(e)), this.layoutService.addListener('start-layout', (e) => this.positionPadding(e.shrinkRect)), this.layoutService.addListener('start-layout', (e) => this.positionCaptions(e.shrinkRect)));
        }
        destroy() {
            this.destroyFns.forEach((cb) => cb());
        }
        layoutComplete({ clipSeries, series: { paddedRect } }) {
            const { seriesArea, seriesRoot } = this.chartLike;
            if (seriesArea.clip || clipSeries) {
                seriesRoot.setClipRectInGroupCoordinateSpace(paddedRect);
            }
            else {
                seriesRoot.setClipRectInGroupCoordinateSpace();
            }
        }
        positionPadding(shrinkRect) {
            const { padding } = this.chartLike;
            shrinkRect.shrink(padding.left, 'left');
            shrinkRect.shrink(padding.top, 'top');
            shrinkRect.shrink(padding.right, 'right');
            shrinkRect.shrink(padding.bottom, 'bottom');
            return { shrinkRect };
        }
        positionCaptions(shrinkRect) {
            var _a, _b, _c, _d;
            const { title, subtitle, footnote } = this.chartLike;
            const newShrinkRect = shrinkRect.clone();
            const updateCaption = (caption) => {
                var _a;
                const defaultCaptionHeight = shrinkRect.height / 10;
                const captionLineHeight = (_a = caption.lineHeight) !== null && _a !== void 0 ? _a : caption.fontSize * Text.defaultLineHeightRatio;
                const maxWidth = shrinkRect.width;
                const maxHeight = Math.max(captionLineHeight, defaultCaptionHeight);
                caption.computeTextWrap(maxWidth, maxHeight);
            };
            const positionTopAndShrinkBBox = (caption, spacing) => {
                const baseY = newShrinkRect.y;
                caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;
                caption.node.y = baseY;
                caption.node.textBaseline = 'top';
                updateCaption(caption);
                const bbox = caption.node.computeBBox();
                // As the bbox (x,y) ends up at a different location than specified above, we need to
                // take it into consideration when calculating how much space needs to be reserved to
                // accommodate the caption.
                const bboxHeight = Math.ceil(bbox.y - baseY + bbox.height + spacing);
                newShrinkRect.shrink(bboxHeight, 'top');
            };
            const positionBottomAndShrinkBBox = (caption, spacing) => {
                const baseY = newShrinkRect.y + newShrinkRect.height;
                caption.node.x = newShrinkRect.x + newShrinkRect.width / 2;
                caption.node.y = baseY;
                caption.node.textBaseline = 'bottom';
                updateCaption(caption);
                const bbox = caption.node.computeBBox();
                const bboxHeight = Math.ceil(baseY - bbox.y + spacing);
                newShrinkRect.shrink(bboxHeight, 'bottom');
            };
            if (subtitle) {
                subtitle.node.visible = (_a = subtitle.enabled) !== null && _a !== void 0 ? _a : false;
            }
            if (title) {
                title.node.visible = title.enabled;
                if (title.node.visible) {
                    const defaultTitleSpacing = (subtitle === null || subtitle === void 0 ? void 0 : subtitle.node.visible) ? Caption.SMALL_PADDING : Caption.LARGE_PADDING;
                    const spacing = (_b = title.spacing) !== null && _b !== void 0 ? _b : defaultTitleSpacing;
                    positionTopAndShrinkBBox(title, spacing);
                }
            }
            if (subtitle && subtitle.node.visible) {
                positionTopAndShrinkBBox(subtitle, (_c = subtitle.spacing) !== null && _c !== void 0 ? _c : 0);
            }
            if (footnote) {
                footnote.node.visible = footnote.enabled;
                if (footnote.node.visible) {
                    positionBottomAndShrinkBBox(footnote, (_d = footnote.spacing) !== null && _d !== void 0 ? _d : 0);
                }
            }
            return { shrinkRect: newShrinkRect };
        }
    }

    class UpdateService extends Listeners {
        constructor(updateCallback) {
            super();
            this.updateCallback = updateCallback;
        }
        update(type = ChartUpdateType.FULL, { forceNodeDataRefresh = false, skipAnimations = false } = {}) {
            this.updateCallback(type, { forceNodeDataRefresh, skipAnimations });
        }
        dispatchUpdateComplete(minRect) {
            const event = { type: 'update-complete', minRect };
            this.dispatch('update-complete', event);
        }
    }

    function initialiseSpecialOverrides(opts) {
        let globalWindow;
        if (opts.window != null) {
            globalWindow = opts.window;
        }
        else if (typeof window !== 'undefined') {
            globalWindow = window;
        }
        else if (typeof global !== 'undefined') {
            globalWindow = global.window;
        }
        else {
            throw new Error('AG Charts - unable to resolve global window');
        }
        let globalDocument;
        if (opts.document != null) {
            globalDocument = opts.document;
        }
        else if (typeof document !== 'undefined') {
            globalDocument = document;
        }
        else if (typeof global !== 'undefined') {
            globalDocument = global.document;
        }
        else {
            throw new Error('AG Charts - unable to resolve global document');
        }
        return {
            document: globalDocument,
            window: globalWindow,
            overrideDevicePixelRatio: opts.overrideDevicePixelRatio,
            sceneMode: opts.sceneMode,
        };
    }
    class SeriesArea {
        constructor() {
            this.clip = undefined;
            this.padding = new Padding(0);
        }
    }
    __decorate([
        Validate(OPT_BOOLEAN),
        __metadata("design:type", Boolean)
    ], SeriesArea.prototype, "clip", void 0);
    class Chart extends Observable {
        getOptions() {
            var _a;
            const { queuedUserOptions } = this;
            const lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : this.userOptions;
            return jsonMerge([lastUpdateOptions]);
        }
        autoSizeChanged(value) {
            const { style } = this.element;
            if (value) {
                style.display = 'block';
                style.width = '100%';
                style.height = '100%';
                if (!this._lastAutoSize) {
                    return;
                }
                this.resize(undefined, undefined, 'autoSize option');
            }
            else {
                style.display = 'inline-block';
                style.width = 'auto';
                style.height = 'auto';
            }
        }
        download(fileName, fileFormat) {
            this.scene.download(fileName, fileFormat);
        }
        get destroyed() {
            return this._destroyed;
        }
        constructor(specialOverrides, resources) {
            var _a;
            super();
            this.id = createId(this);
            this.processedOptions = {};
            this.userOptions = {};
            this.queuedUserOptions = [];
            this.seriesRoot = new Group({ name: `${this.id}-Series-root` });
            this.debug = Debug.create();
            this.extraDebugStats = {};
            this.container = undefined;
            this.data = [];
            this._firstAutoSize = true;
            this.padding = new Padding(20);
            this.seriesArea = new SeriesArea();
            this.title = undefined;
            this.subtitle = undefined;
            this.footnote = undefined;
            this.mode = 'standalone';
            this._destroyed = false;
            this._destroyFns = [];
            this.modules = {};
            this.legendModules = {};
            this.processors = [];
            this.legends = new Map();
            this._pendingFactoryUpdatesCount = 0;
            this._performUpdateNoRenderCount = 0;
            this._performUpdateType = ChartUpdateType.NONE;
            this._performUpdateSkipAnimations = false;
            this.updateShortcutCount = 0;
            this.seriesToUpdate = new Set();
            this.updateMutex = new Mutex();
            this.updateRequestors = {};
            this.performUpdateTrigger = debouncedCallback(({ count }) => __awaiter(this, void 0, void 0, function* () {
                if (this._destroyed)
                    return;
                this.updateMutex.acquire(() => __awaiter(this, void 0, void 0, function* () {
                    try {
                        yield this.performUpdate(count);
                    }
                    catch (error) {
                        this._lastPerformUpdateError = error;
                        Logger.error('update error', error);
                    }
                }));
            }));
            this._axes = [];
            this._series = [];
            this.lastInteractionEvent = undefined;
            this.pointerScheduler = debouncedAnimationFrame(() => {
                if (this.lastInteractionEvent) {
                    this.handlePointer(this.lastInteractionEvent);
                }
                this.lastInteractionEvent = undefined;
            });
            this.onSeriesNodeClick = (event) => {
                const seriesNodeClickEvent = Object.assign(Object.assign({}, event), { type: 'seriesNodeClick' });
                Object.defineProperty(seriesNodeClickEvent, 'series', {
                    enumerable: false,
                    // Should display the deprecation warning
                    get: () => event.series,
                });
                this.fireEvent(seriesNodeClickEvent);
            };
            this.onSeriesNodeDoubleClick = (event) => {
                const seriesNodeDoubleClick = Object.assign(Object.assign({}, event), { type: 'seriesNodeDoubleClick' });
                this.fireEvent(seriesNodeDoubleClick);
            };
            this.specialOverrides = initialiseSpecialOverrides(specialOverrides);
            const { window, document } = this.specialOverrides;
            const scene = resources === null || resources === void 0 ? void 0 : resources.scene;
            const element = (_a = resources === null || resources === void 0 ? void 0 : resources.element) !== null && _a !== void 0 ? _a : document.createElement('div');
            const container = resources === null || resources === void 0 ? void 0 : resources.container;
            const root = new Group({ name: 'root' });
            // Prevent the scene from rendering chart components in an invalid state
            // (before first layout is performed).
            root.visible = false;
            root.append(this.seriesRoot);
            this.axisGridGroup = new Group({ name: 'Axes-Grids', layer: true, zIndex: Layers.AXIS_GRID_ZINDEX });
            root.appendChild(this.axisGridGroup);
            this.axisGroup = new Group({ name: 'Axes', layer: true, zIndex: Layers.AXIS_ZINDEX });
            root.appendChild(this.axisGroup);
            this.element = element;
            element.classList.add('ag-chart-wrapper');
            element.style.position = 'relative';
            this.scene = scene !== null && scene !== void 0 ? scene : new Scene(this.specialOverrides);
            this.scene.root = root;
            this.scene.container = element;
            this.autoSize = true;
            this.chartEventManager = new ChartEventManager();
            this.cursorManager = new CursorManager(element);
            this.highlightManager = new HighlightManager();
            this.interactionManager = new InteractionManager(element, document, window);
            this.zoomManager = new ZoomManager();
            this.dataService = new DataService(() => this.series);
            this.layoutService = new LayoutService();
            this.updateService = new UpdateService((type = ChartUpdateType.FULL, { forceNodeDataRefresh, skipAnimations }) => this.update(type, { forceNodeDataRefresh, skipAnimations }));
            this.seriesStateManager = new SeriesStateManager();
            this.seriesLayerManager = new SeriesLayerManager(this.seriesRoot);
            this.callbackCache = new CallbackCache();
            this.animationManager = new AnimationManager(this.interactionManager, this.updateMutex);
            this.animationManager.skip();
            this.animationManager.play();
            this.processors = [new BaseLayoutProcessor(this, this.layoutService)];
            this.tooltip = new Tooltip(this.scene.canvas.element, document, window, document.body);
            this.tooltipManager = new TooltipManager(this.tooltip, this.interactionManager);
            this.overlays = new ChartOverlays(this.element);
            this.highlight = new ChartHighlight();
            this.container = container;
            SizeMonitor.observe(this.element, (size) => this.rawResize(size));
            this._destroyFns.push(this.interactionManager.addListener('click', (event) => this.onClick(event)), this.interactionManager.addListener('dblclick', (event) => this.onDoubleClick(event)), this.interactionManager.addListener('hover', (event) => this.onMouseMove(event)), this.interactionManager.addListener('leave', (event) => this.onLeave(event)), this.interactionManager.addListener('page-left', () => this.destroy()), this.interactionManager.addListener('wheel', () => this.disablePointer()), 
            // Block redundant and interfering attempts to update the hovered element during dragging.
            this.interactionManager.addListener('drag-start', () => this.disablePointer()), this.animationManager.addListener('animation-frame', (_) => {
                this.update(ChartUpdateType.SCENE_RENDER);
            }), this.highlightManager.addListener('highlight-change', (event) => this.changeHighlightDatum(event)), this.zoomManager.addListener('zoom-change', (_) => this.update(ChartUpdateType.PROCESS_DATA, { forceNodeDataRefresh: true, skipAnimations: true })));
            this.legend = this.attachLegend('category', Legend);
        }
        addModule(module) {
            if (this.modules[module.optionsKey] != null) {
                throw new Error('AG Charts - module already initialised: ' + module.optionsKey);
            }
            const moduleInstance = new module.instanceConstructor(this.getModuleContext());
            this.modules[module.optionsKey] = { instance: moduleInstance };
            this[module.optionsKey] = moduleInstance; // TODO remove
        }
        removeModule(module) {
            var _a;
            (_a = this.modules[module.optionsKey]) === null || _a === void 0 ? void 0 : _a.instance.destroy();
            delete this.modules[module.optionsKey];
            delete this[module.optionsKey]; // TODO remove
        }
        attachLegend(legendType, legendConstructor) {
            const legend = new legendConstructor(this.getModuleContext());
            this.legends.set(legendType, legend);
            legend.attachLegend(this.scene.root);
            return legend;
        }
        addLegendModule(module) {
            if (this.modules[module.optionsKey] != null) {
                throw new Error('AG Charts - module already initialised: ' + module.optionsKey);
            }
            const legend = this.attachLegend(module.identifier, module.instanceConstructor);
            this.modules[module.optionsKey] = { instance: legend };
            this[module.optionsKey] = legend;
        }
        removeLegendModule(module) {
            this.legends.delete(module.identifier);
            this.removeModule(module);
        }
        isModuleEnabled(module) {
            return this.modules[module.optionsKey] != null;
        }
        getModuleContext() {
            const { scene, animationManager, chartEventManager, cursorManager, highlightManager, interactionManager, tooltipManager, zoomManager, dataService, layoutService, updateService, seriesStateManager, seriesLayerManager, mode, callbackCache, specialOverrides: { window, document }, } = this;
            return {
                window,
                document,
                scene,
                animationManager,
                chartEventManager,
                cursorManager,
                highlightManager,
                interactionManager,
                tooltipManager,
                zoomManager,
                dataService,
                layoutService,
                updateService,
                mode,
                seriesStateManager,
                seriesLayerManager,
                callbackCache,
            };
        }
        destroy(opts) {
            if (this._destroyed) {
                return;
            }
            const keepTransferableResources = opts === null || opts === void 0 ? void 0 : opts.keepTransferableResources;
            let result;
            this._performUpdateType = ChartUpdateType.NONE;
            this._destroyFns.forEach((fn) => fn());
            this.processors.forEach((p) => p.destroy());
            this.tooltipManager.destroy();
            this.tooltip.destroy();
            Object.values(this.legends).forEach((legend) => legend.destroy());
            this.legends.clear();
            this.overlays.noData.hide();
            SizeMonitor.unobserve(this.element);
            for (const optionsKey of Object.keys(this.modules)) {
                this.removeModule({ optionsKey });
            }
            this.interactionManager.destroy();
            this.animationManager.stop();
            if (keepTransferableResources) {
                this.scene.strip();
                result = { container: this.container, scene: this.scene, element: this.element };
            }
            else {
                this.scene.destroy();
                this.container = undefined;
            }
            this.removeAllSeries();
            this.seriesLayerManager.destroy();
            this.axes.forEach((a) => a.destroy());
            this.axes = [];
            this.callbackCache.invalidateCache();
            this._destroyed = true;
            return result;
        }
        disablePointer(highlightOnly = false) {
            if (!highlightOnly) {
                this.tooltipManager.removeTooltip(this.id);
            }
            this.highlightManager.updateHighlight(this.id);
            if (this.lastInteractionEvent) {
                this.lastInteractionEvent = undefined;
            }
        }
        requestFactoryUpdate(cb) {
            this._pendingFactoryUpdatesCount++;
            this.updateMutex.acquire(() => __awaiter(this, void 0, void 0, function* () {
                yield cb();
                this._pendingFactoryUpdatesCount--;
            }));
        }
        get performUpdateType() {
            return this._performUpdateType;
        }
        get lastPerformUpdateError() {
            return this._lastPerformUpdateError;
        }
        update(type = ChartUpdateType.FULL, opts) {
            var _a, _b;
            const { forceNodeDataRefresh = false, skipAnimations, seriesToUpdate = this.series, newAnimationBatch, } = opts !== null && opts !== void 0 ? opts : {};
            if (forceNodeDataRefresh) {
                this.series.forEach((series) => series.markNodeDataDirty());
            }
            for (const series of seriesToUpdate) {
                this.seriesToUpdate.add(series);
            }
            if (skipAnimations) {
                this.animationManager.skipCurrentBatch();
                this._performUpdateSkipAnimations = true;
            }
            if (newAnimationBatch) {
                if (this.animationManager.isActive()) {
                    this._performUpdateSkipAnimations = true;
                }
                else {
                    (_a = this._performUpdateSkipAnimations) !== null && _a !== void 0 ? _a : (this._performUpdateSkipAnimations = false);
                }
            }
            if (Debug.check(true)) {
                let stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : '<unknown>';
                stack = stack.replace(/\([^)]*/g, '');
                this.updateRequestors[stack] = type;
            }
            if (type < this._performUpdateType) {
                this._performUpdateType = type;
                this.performUpdateTrigger.schedule(opts === null || opts === void 0 ? void 0 : opts.backOffMs);
            }
        }
        performUpdate(count) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { _performUpdateType: performUpdateType, extraDebugStats } = this;
                const seriesToUpdate = [...this.seriesToUpdate];
                // Clear state immediately so that side-effects can be detected prior to SCENE_RENDER.
                this._performUpdateType = ChartUpdateType.NONE;
                this.seriesToUpdate.clear();
                if (this.updateShortcutCount === 0 && performUpdateType < ChartUpdateType.SCENE_RENDER) {
                    this.animationManager.startBatch(this._performUpdateSkipAnimations);
                }
                this.debug('Chart.performUpdate() - start', ChartUpdateType[performUpdateType]);
                const splits = { start: performance.now() };
                switch (performUpdateType) {
                    case ChartUpdateType.FULL:
                    case ChartUpdateType.PROCESS_DATA:
                        yield this.processData();
                        this.disablePointer(true);
                        splits['🏭'] = performance.now();
                    // fallthrough
                    case ChartUpdateType.PERFORM_LAYOUT:
                        if (this.checkUpdateShortcut(ChartUpdateType.PERFORM_LAYOUT))
                            break;
                        if (!this.checkFirstAutoSize(seriesToUpdate))
                            break;
                        yield this.processLayout();
                        splits['⌖'] = performance.now();
                    // fallthrough
                    case ChartUpdateType.SERIES_UPDATE:
                        if (this.checkUpdateShortcut(ChartUpdateType.SERIES_UPDATE))
                            break;
                        const { seriesRect } = this;
                        const seriesUpdates = [...seriesToUpdate].map((series) => series.update({ seriesRect }));
                        yield Promise.all(seriesUpdates);
                        splits['🤔'] = performance.now();
                    // fallthrough
                    case ChartUpdateType.TOOLTIP_RECALCULATION:
                        if (this.checkUpdateShortcut(ChartUpdateType.TOOLTIP_RECALCULATION))
                            break;
                        const tooltipMeta = this.tooltipManager.getTooltipMeta(this.id);
                        const isHovered = ((_a = tooltipMeta === null || tooltipMeta === void 0 ? void 0 : tooltipMeta.event) === null || _a === void 0 ? void 0 : _a.type) === 'hover';
                        if (performUpdateType <= ChartUpdateType.SERIES_UPDATE && isHovered) {
                            this.handlePointer(tooltipMeta.event);
                        }
                        splits['↖'] = performance.now();
                    // fallthrough
                    case ChartUpdateType.SCENE_RENDER:
                        if (this.checkUpdateShortcut(ChartUpdateType.SCENE_RENDER))
                            break;
                        extraDebugStats['updateShortcutCount'] = this.updateShortcutCount;
                        yield this.scene.render({ debugSplitTimes: splits, extraDebugStats });
                        this.extraDebugStats = {};
                    // fallthrough
                    case ChartUpdateType.NONE:
                        // Do nothing.
                        this.updateShortcutCount = 0;
                        this.updateRequestors = {};
                        this._performUpdateSkipAnimations = undefined;
                        this.animationManager.endBatch();
                }
                this.updateService.dispatchUpdateComplete(this.getMinRect());
                const end = performance.now();
                this.debug('Chart.performUpdate() - end', {
                    chart: this,
                    durationMs: Math.round((end - splits['start']) * 100) / 100,
                    count,
                    performUpdateType: ChartUpdateType[performUpdateType],
                });
            });
        }
        checkUpdateShortcut(checkUpdateType) {
            const maxShortcuts = 3;
            if (this.updateShortcutCount > maxShortcuts) {
                Logger.warn(`exceeded the maximum number of simultaneous updates (${maxShortcuts + 1}), discarding changes and rendering`, this.updateRequestors);
                return false;
            }
            if (this.performUpdateType <= checkUpdateType) {
                // A previous step modified series state, and we need to re-run this or an earlier step before rendering.
                this.updateShortcutCount++;
                return true;
            }
            return false;
        }
        checkFirstAutoSize(seriesToUpdate) {
            if (this.autoSize && !this._lastAutoSize) {
                const count = this._performUpdateNoRenderCount++;
                const backOffMs = (count ^ 2) * 10;
                if (count < 8) {
                    // Reschedule if canvas size hasn't been set yet to avoid a race.
                    this.update(ChartUpdateType.PERFORM_LAYOUT, { seriesToUpdate, backOffMs });
                    this.debug('Chart.checkFirstAutoSize() - backing off until first size update', backOffMs);
                    return false;
                }
                // After several failed passes, continue and accept there maybe a redundant
                // render. Sometimes this case happens when we already have the correct
                // width/height, and we end up never rendering the chart in that scenario.
                this.debug('Chart.checkFirstAutoSize() - timeout for first size update.');
            }
            this._performUpdateNoRenderCount = 0;
            return true;
        }
        set axes(values) {
            const removedAxes = new Set();
            this._axes.forEach((axis) => {
                axis.detachAxis(this.axisGroup, this.axisGridGroup);
                removedAxes.add(axis);
            });
            // make linked axes go after the regular ones (simulates stable sort by `linkedTo` property)
            this._axes = values.filter((a) => !a.linkedTo).concat(values.filter((a) => a.linkedTo));
            this._axes.forEach((axis) => {
                axis.attachAxis(this.axisGroup, this.axisGridGroup);
                removedAxes.delete(axis);
            });
            this.zoomManager.updateAxes(this._axes);
            removedAxes.forEach((axis) => axis.destroy());
        }
        get axes() {
            return this._axes;
        }
        set series(values) {
            this.removeAllSeries();
            this.seriesLayerManager.setSeriesCount(values.length);
            values.forEach((series) => this.addSeries(series));
        }
        get series() {
            return this._series;
        }
        addSeries(series) {
            const { series: allSeries } = this;
            const canAdd = allSeries.indexOf(series) < 0;
            if (canAdd) {
                allSeries.push(series);
                if (series.rootGroup.parent == null) {
                    this.seriesLayerManager.requestGroup(series);
                }
                this.initSeries(series);
                return true;
            }
            return false;
        }
        initSeries(series) {
            const chart = this;
            series.chart = {
                get mode() {
                    return chart.mode;
                },
                get seriesRect() {
                    return chart.seriesRect;
                },
                placeLabels() {
                    return chart.placeLabels();
                },
            };
            series.setChartData(this.data);
            this.addSeriesListeners(series);
            series.addChartEventListeners();
        }
        removeAllSeries() {
            this.series.forEach((series) => {
                series.removeEventListener('nodeClick', this.onSeriesNodeClick);
                series.removeEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);
                series.destroy();
                series.chart = undefined;
            });
            this._series = []; // using `_series` instead of `series` to prevent infinite recursion
        }
        addSeriesListeners(series) {
            if (this.hasEventListener('seriesNodeClick')) {
                series.addEventListener('nodeClick', this.onSeriesNodeClick);
            }
            if (this.hasEventListener('seriesNodeDoubleClick')) {
                series.addEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);
            }
        }
        updateAllSeriesListeners() {
            this.series.forEach((series) => {
                series.removeEventListener('nodeClick', this.onSeriesNodeClick);
                series.removeEventListener('nodeDoubleClick', this.onSeriesNodeDoubleClick);
                this.addSeriesListeners(series);
            });
        }
        assignSeriesToAxes() {
            this.axes.forEach((axis) => {
                axis.boundSeries = this.series.filter((s) => {
                    const seriesAxis = s.axes[axis.direction];
                    return seriesAxis === axis;
                });
            });
        }
        assignAxesToSeries() {
            // This method has to run before `assignSeriesToAxes`.
            const directionToAxesMap = {};
            this.axes.forEach((axis) => {
                var _a;
                const direction = axis.direction;
                const directionAxes = ((_a = directionToAxesMap[direction]) !== null && _a !== void 0 ? _a : (directionToAxesMap[direction] = []));
                directionAxes.push(axis);
            });
            this.series.forEach((series) => {
                series.directions.forEach((direction) => {
                    const directionAxes = directionToAxesMap[direction];
                    if (!directionAxes) {
                        Logger.warnOnce(`no available axis for direction [${direction}]; check series and axes configuration.`);
                        return;
                    }
                    const seriesKeys = series.getKeys(direction);
                    const newAxis = this.findMatchingAxis(directionAxes, seriesKeys);
                    if (!newAxis) {
                        Logger.warnOnce(`no matching axis for direction [${direction}] and keys [${seriesKeys}]; check series and axes configuration.`);
                        return;
                    }
                    series.axes[direction] = newAxis;
                });
            });
        }
        findMatchingAxis(directionAxes, directionKeys) {
            for (const axis of directionAxes) {
                const axisKeys = axis.keys;
                if (!axisKeys.length) {
                    return axis;
                }
                if (!directionKeys) {
                    continue;
                }
                for (const directionKey of directionKeys) {
                    if (axisKeys.indexOf(directionKey) >= 0) {
                        return axis;
                    }
                }
            }
        }
        rawResize(size) {
            var _a;
            let { width, height } = size;
            width = Math.floor(width);
            height = Math.floor(height);
            if (!this.autoSize) {
                return;
            }
            if (width === 0 && height === 0) {
                return;
            }
            const [autoWidth = 0, authHeight = 0] = (_a = this._lastAutoSize) !== null && _a !== void 0 ? _a : [];
            if (autoWidth === width && authHeight === height) {
                return;
            }
            this._lastAutoSize = [width, height];
            this.resize(undefined, undefined, 'SizeMonitor');
        }
        resize(width, height, source) {
            var _a, _b, _c, _d;
            width !== null && width !== void 0 ? width : (width = (_a = this.width) !== null && _a !== void 0 ? _a : (this.autoSize ? (_b = this._lastAutoSize) === null || _b === void 0 ? void 0 : _b[0] : this.scene.canvas.width));
            height !== null && height !== void 0 ? height : (height = (_c = this.height) !== null && _c !== void 0 ? _c : (this.autoSize ? (_d = this._lastAutoSize) === null || _d === void 0 ? void 0 : _d[1] : this.scene.canvas.height));
            this.debug(`Chart.resize() from ${source}`, { width, height, stack: new Error().stack });
            if (!width || !height || !Number.isFinite(width) || !Number.isFinite(height))
                return;
            if (this.scene.resize(width, height)) {
                this.disablePointer();
                this.animationManager.reset();
                let skipAnimations = true;
                if (this.autoSize && this._firstAutoSize) {
                    skipAnimations = false;
                    this._firstAutoSize = false;
                }
                this.update(ChartUpdateType.PERFORM_LAYOUT, { forceNodeDataRefresh: true, skipAnimations });
            }
        }
        processData() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.series.some((s) => s.canHaveAxes)) {
                    this.assignAxesToSeries();
                    this.assignSeriesToAxes();
                }
                const dataController = new DataController(this.mode);
                const seriesPromises = this.series.map((s) => s.processData(dataController));
                yield dataController.execute();
                yield Promise.all(seriesPromises);
                yield this.updateLegend();
            });
        }
        placeLabels() {
            const visibleSeries = [];
            const data = [];
            for (const series of this.series) {
                if (!series.visible) {
                    continue;
                }
                const labelData = series.getLabelData();
                if (!(labelData && isPointLabelDatum(labelData[0]))) {
                    continue;
                }
                data.push(labelData);
                visibleSeries.push(series);
            }
            const { seriesRect } = this;
            const labels = seriesRect && data.length > 0
                ? placeLabels(data, { x: 0, y: 0, width: seriesRect.width, height: seriesRect.height })
                : [];
            return new Map(labels.map((l, i) => [visibleSeries[i], l]));
        }
        updateLegend() {
            return __awaiter(this, void 0, void 0, function* () {
                this.legends.forEach((legend, legendType) => {
                    const isCategoryLegendData = (data) => data.every((d) => d.legendType === 'category');
                    const legendData = this.series.filter((s) => s.showInLegend).flatMap((s) => s.getLegendData(legendType));
                    if (isCategoryLegendData(legendData)) {
                        this.validateCategoryLegendData(legendData);
                    }
                    legend.data = legendData;
                });
            });
        }
        validateCategoryLegendData(legendData) {
            // Validate each series that shares a legend item label uses the same fill colour
            const labelMarkerFills = {};
            legendData.forEach((d) => {
                var _a, _b, _c;
                var _d, _e;
                const seriesType = (_a = this.series.find((s) => s.id === d.seriesId)) === null || _a === void 0 ? void 0 : _a.type;
                if (!seriesType)
                    return;
                (_b = labelMarkerFills[seriesType]) !== null && _b !== void 0 ? _b : (labelMarkerFills[seriesType] = {});
                (_c = (_d = labelMarkerFills[seriesType])[_e = d.label.text]) !== null && _c !== void 0 ? _c : (_d[_e] = new Set());
                if (d.marker.fill != null) {
                    labelMarkerFills[seriesType][d.label.text].add(d.marker.fill);
                }
            });
            for (const seriesMarkers of Object.values(labelMarkerFills)) {
                for (const [name, fills] of Object.entries(seriesMarkers)) {
                    if (fills.size > 1) {
                        Logger.warnOnce(`legend item '${name}' has multiple fill colors, this may cause unexpected behaviour.`);
                    }
                }
            }
        }
        processLayout() {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const oldRect = this.animationRect;
                yield this.performLayout();
                if (oldRect && !((_a = this.animationRect) === null || _a === void 0 ? void 0 : _a.equals(oldRect))) {
                    // Skip animations if the layout changed.
                    this.animationManager.skipCurrentBatch();
                }
                this.handleNoDataOverlay();
                this.debug('Chart.performUpdate() - seriesRect', this.seriesRect);
            });
        }
        performLayout() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.scene.root) {
                    this.scene.root.visible = true;
                }
                const { width, height } = this.scene;
                let ctx = { shrinkRect: new BBox(0, 0, width, height) };
                ctx = this.layoutService.dispatchPerformLayout('start-layout', ctx);
                ctx = this.layoutService.dispatchPerformLayout('before-series', ctx);
                return ctx.shrinkRect;
            });
        }
        // x/y are local canvas coordinates in CSS pixels, not actual pixels
        pickSeriesNode(point, exactMatchOnly, maxDistance) {
            var _a, _b;
            const start = performance.now();
            // Disable 'nearest match' options if looking for exact matches only
            const pickModes = exactMatchOnly ? [SeriesNodePickMode.EXACT_SHAPE_MATCH] : undefined;
            // Iterate through series in reverse, as later declared series appears on top of earlier
            // declared series.
            const reverseSeries = [...this.series].reverse();
            let result;
            for (const series of reverseSeries) {
                if (!series.visible || !series.rootGroup.visible) {
                    continue;
                }
                const { match, distance } = (_a = series.pickNode(point, pickModes)) !== null && _a !== void 0 ? _a : {};
                if (!match || distance == null) {
                    continue;
                }
                if ((!result || result.distance > distance) && distance <= (maxDistance !== null && maxDistance !== void 0 ? maxDistance : Infinity)) {
                    result = { series, distance, datum: match };
                }
                if (distance === 0) {
                    break;
                }
            }
            this.extraDebugStats['pickSeriesNode'] = Math.round(((_b = this.extraDebugStats['pickSeriesNode']) !== null && _b !== void 0 ? _b : 0) + (performance.now() - start));
            return result;
        }
        onMouseMove(event) {
            this.lastInteractionEvent = event;
            this.pointerScheduler.schedule();
            this.extraDebugStats['mouseX'] = event.offsetX;
            this.extraDebugStats['mouseY'] = event.offsetY;
            this.update(ChartUpdateType.SCENE_RENDER);
        }
        onLeave(event) {
            if (this.tooltip.pointerLeftOntoTooltip(event)) {
                return;
            }
            this.disablePointer();
        }
        handlePointer(event) {
            const { lastPick, hoverRect } = this;
            const { offsetX, offsetY } = event;
            const disablePointer = (highlightOnly = false) => {
                if (lastPick) {
                    // Cursor moved from a non-marker node to empty space.
                    this.disablePointer(highlightOnly);
                }
            };
            if (!(hoverRect === null || hoverRect === void 0 ? void 0 : hoverRect.containsPoint(offsetX, offsetY))) {
                disablePointer();
                return;
            }
            // Handle node highlighting and tooltip toggling when pointer within `tooltip.range`
            this.handlePointerTooltip(event, disablePointer);
            // Handle node highlighting and mouse cursor when pointer withing `series[].nodeClickRange`
            this.handlePointerNode(event);
        }
        handlePointerTooltip(event, disablePointer) {
            const { lastPick, tooltip } = this;
            const { range } = tooltip;
            const { offsetX, offsetY } = event;
            let pixelRange;
            if (typeof range === 'number' && Number.isFinite(range)) {
                pixelRange = range;
            }
            const pick = this.pickSeriesNode({ x: offsetX, y: offsetY }, range === 'exact', pixelRange);
            if (!pick) {
                this.tooltipManager.removeTooltip(this.id);
                if (this.highlight.range === 'tooltip')
                    disablePointer(true);
                return;
            }
            const isNewDatum = this.highlight.range === 'node' || !lastPick || lastPick.datum !== pick.datum;
            let html;
            if (isNewDatum) {
                html = pick.series.getTooltipHtml(pick.datum);
                if (this.highlight.range === 'tooltip') {
                    this.highlightManager.updateHighlight(this.id, pick.datum);
                }
            }
            else if (lastPick) {
                lastPick.event = event.sourceEvent;
            }
            const isPixelRange = pixelRange != null;
            const tooltipEnabled = this.tooltip.enabled && pick.series.tooltip.enabled;
            const exactlyMatched = range === 'exact' && pick.distance === 0;
            const rangeMatched = range === 'nearest' || isPixelRange || exactlyMatched;
            const shouldUpdateTooltip = tooltipEnabled && rangeMatched && (!isNewDatum || html !== undefined);
            const meta = TooltipManager.makeTooltipMeta(event, this.scene.canvas, pick.datum, this.specialOverrides.window);
            if (shouldUpdateTooltip) {
                this.tooltipManager.updateTooltip(this.id, meta, html);
            }
        }
        handlePointerNode(event) {
            const found = this.checkSeriesNodeRange(event, (series, datum) => {
                if (series.hasEventListener('nodeClick') || series.hasEventListener('nodeDoubleClick')) {
                    this.cursorManager.updateCursor('chart', 'pointer');
                }
                if (this.highlight.range === 'node') {
                    this.highlightManager.updateHighlight(this.id, datum);
                }
            });
            if (!found) {
                this.cursorManager.updateCursor('chart');
                if (this.highlight.range === 'node') {
                    this.highlightManager.updateHighlight(this.id);
                }
            }
        }
        onClick(event) {
            if (this.checkSeriesNodeClick(event)) {
                this.update(ChartUpdateType.SERIES_UPDATE);
                return;
            }
            this.fireEvent({
                type: 'click',
                event: event.sourceEvent,
            });
        }
        onDoubleClick(event) {
            if (this.checkSeriesNodeDoubleClick(event)) {
                this.update(ChartUpdateType.SERIES_UPDATE);
                return;
            }
            this.fireEvent({
                type: 'doubleClick',
                event: event.sourceEvent,
            });
        }
        checkSeriesNodeClick(event) {
            return this.checkSeriesNodeRange(event, (series, datum) => series.fireNodeClickEvent(event.sourceEvent, datum));
        }
        checkSeriesNodeDoubleClick(event) {
            return this.checkSeriesNodeRange(event, (series, datum) => series.fireNodeDoubleClickEvent(event.sourceEvent, datum));
        }
        checkSeriesNodeRange(event, callback) {
            const nearestNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, false);
            const datum = nearestNode === null || nearestNode === void 0 ? void 0 : nearestNode.datum;
            const nodeClickRange = datum === null || datum === void 0 ? void 0 : datum.series.nodeClickRange;
            let pixelRange;
            if (typeof nodeClickRange === 'number' && Number.isFinite(nodeClickRange)) {
                pixelRange = nodeClickRange;
            }
            // Find the node if exactly matched and update the highlight picked node
            let pickedNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, true);
            if (pickedNode) {
                this.highlightManager.updatePicked(this.id, pickedNode.datum);
            }
            else {
                this.highlightManager.updatePicked(this.id);
            }
            // First check if we should trigger the callback based on nearest node
            if (datum && nodeClickRange === 'nearest') {
                callback(datum.series, datum);
                return true;
            }
            if (nodeClickRange !== 'exact') {
                pickedNode = this.pickSeriesNode({ x: event.offsetX, y: event.offsetY }, false, pixelRange);
            }
            if (!pickedNode)
                return false;
            // Then if we've picked a node within the pixel range, or exactly, trigger the callback
            const isPixelRange = pixelRange != null;
            const exactlyMatched = nodeClickRange === 'exact' && pickedNode.distance === 0;
            if (isPixelRange || exactlyMatched) {
                callback(pickedNode.series, pickedNode.datum);
                return true;
            }
            return false;
        }
        changeHighlightDatum(event) {
            var _a, _b;
            const seriesToUpdate = new Set();
            const { series: newSeries = undefined, datum: newDatum } = (_a = event.currentHighlight) !== null && _a !== void 0 ? _a : {};
            const { series: lastSeries = undefined, datum: lastDatum } = (_b = event.previousHighlight) !== null && _b !== void 0 ? _b : {};
            if (lastSeries) {
                seriesToUpdate.add(lastSeries);
            }
            if (newSeries) {
                seriesToUpdate.add(newSeries);
            }
            // Adjust cursor if a specific datum is highlighted, rather than just a series.
            if ((lastSeries === null || lastSeries === void 0 ? void 0 : lastSeries.cursor) && lastDatum) {
                this.cursorManager.updateCursor(lastSeries.id);
            }
            if ((newSeries === null || newSeries === void 0 ? void 0 : newSeries.cursor) && newDatum) {
                this.cursorManager.updateCursor(newSeries.id, newSeries.cursor);
            }
            this.lastPick = event.currentHighlight ? { datum: event.currentHighlight } : undefined;
            const updateAll = newSeries == null || lastSeries == null;
            if (updateAll) {
                this.update(ChartUpdateType.SERIES_UPDATE);
            }
            else {
                this.update(ChartUpdateType.SERIES_UPDATE, { seriesToUpdate });
            }
        }
        waitForUpdate(timeoutMs = 5000) {
            return __awaiter(this, void 0, void 0, function* () {
                const start = performance.now();
                if (this._pendingFactoryUpdatesCount > 0) {
                    // Await until any pending updates are flushed through.
                    yield this.updateMutex.waitForClearAcquireQueue();
                }
                while (this._performUpdateType !== ChartUpdateType.NONE) {
                    if (performance.now() - start > timeoutMs) {
                        throw new Error('waitForUpdate() timeout reached.');
                    }
                    yield sleep(5);
                }
                // Await until any remaining updates are flushed through.
                yield this.updateMutex.waitForClearAcquireQueue();
            });
        }
        handleNoDataOverlay() {
            const shouldDisplayNoDataOverlay = !this.series.some((s) => s.hasData());
            if (shouldDisplayNoDataOverlay && this.seriesRect) {
                this.overlays.noData.show(this.seriesRect);
            }
            else {
                this.overlays.noData.hide();
            }
        }
        getMinRect() {
            const minRects = this.series.map((series) => series.getMinRect()).filter((rect) => rect !== undefined);
            if (!minRects.length)
                return undefined;
            return new BBox(0, 0, minRects.reduce((max, rect) => Math.max(max, rect.width), 0), minRects.reduce((max, rect) => Math.max(max, rect.height), 0));
        }
    }
    __decorate([
        ActionOnSet({
            newValue(value) {
                if (this.destroyed)
                    return;
                value.appendChild(this.element);
            },
            oldValue(value) {
                value.removeChild(this.element);
            },
        }),
        __metadata("design:type", Object)
    ], Chart.prototype, "container", void 0);
    __decorate([
        ActionOnSet({
            newValue(value) {
                var _a;
                (_a = this.series) === null || _a === void 0 ? void 0 : _a.forEach((series) => {
                    series.setChartData(value);
                });
            },
        }),
        __metadata("design:type", Object)
    ], Chart.prototype, "data", void 0);
    __decorate([
        ActionOnSet({
            newValue(value) {
                this.resize(value, undefined, 'width option');
            },
        }),
        __metadata("design:type", Number)
    ], Chart.prototype, "width", void 0);
    __decorate([
        ActionOnSet({
            newValue(value) {
                this.resize(undefined, value, 'height option');
            },
        }),
        __metadata("design:type", Number)
    ], Chart.prototype, "height", void 0);
    __decorate([
        ActionOnSet({
            changeValue(value) {
                this.autoSizeChanged(value);
            },
        }),
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], Chart.prototype, "autoSize", void 0);
    __decorate([
        ActionOnSet({
            newValue(value) {
                var _a;
                (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);
            },
            oldValue(oldValue) {
                var _a;
                (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);
            },
        }),
        __metadata("design:type", Function)
    ], Chart.prototype, "title", void 0);
    __decorate([
        ActionOnSet({
            newValue(value) {
                var _a;
                (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);
            },
            oldValue(oldValue) {
                var _a;
                (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);
            },
        }),
        __metadata("design:type", Function)
    ], Chart.prototype, "subtitle", void 0);
    __decorate([
        ActionOnSet({
            newValue(value) {
                var _a;
                (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(value.node);
            },
            oldValue(oldValue) {
                var _a;
                (_a = this.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(oldValue.node);
            },
        }),
        __metadata("design:type", Function)
    ], Chart.prototype, "footnote", void 0);
    __decorate([
        Validate(STRING_UNION('standalone', 'integrated')),
        __metadata("design:type", String)
    ], Chart.prototype, "mode", void 0);

    var ArcType;
    (function (ArcType) {
        ArcType[ArcType["Open"] = 0] = "Open";
        ArcType[ArcType["Chord"] = 1] = "Chord";
        ArcType[ArcType["Round"] = 2] = "Round";
    })(ArcType || (ArcType = {}));
    /**
     * Elliptical arc node.
     */
    class Arc extends Path {
        constructor() {
            super();
            this.centerX = 0;
            this.centerY = 0;
            this.radius = 10;
            this.startAngle = 0;
            this.endAngle = Math.PI * 2;
            this.counterClockwise = false;
            /**
             * The type of arc to render:
             * - {@link ArcType.Open} - end points of the arc segment are not connected (default)
             * - {@link ArcType.Chord} - end points of the arc segment are connected by a line segment
             * - {@link ArcType.Round} - each of the end points of the arc segment are connected
             *                           to the center of the arc
             * Arcs with {@link ArcType.Open} do not support hit testing, even if they have their
             * {@link Shape.fillStyle} set, because they are not closed paths. Hit testing support
             * would require using two paths - one for rendering, another for hit testing - and there
             * doesn't seem to be a compelling reason to do that, when one can just use {@link ArcType.Chord}
             * to create a closed path.
             */
            this.type = ArcType.Open;
            this.restoreOwnStyles();
        }
        get fullPie() {
            return isEqual(normalizeAngle360(this.startAngle), normalizeAngle360(this.endAngle));
        }
        updatePath() {
            const path = this.path;
            path.clear(); // No need to recreate the Path, can simply clear the existing one.
            path.arc(this.centerX, this.centerY, this.radius, this.startAngle, this.endAngle, this.counterClockwise);
            if (this.type === ArcType.Chord) {
                path.closePath();
            }
            else if (this.type === ArcType.Round && !this.fullPie) {
                path.lineTo(this.centerX, this.centerY);
                path.closePath();
            }
        }
        computeBBox() {
            // Only works with full arcs (circles) and untransformed ellipses.
            return new BBox(this.centerX - this.radius, this.centerY - this.radius, this.radius * 2, this.radius * 2);
        }
        isPointInPath(x, y) {
            const point = this.transformPoint(x, y);
            const bbox = this.computeBBox();
            return (this.type !== ArcType.Open &&
                bbox.containsPoint(point.x, point.y) &&
                this.path.isPointInPath(point.x, point.y));
        }
    }
    Arc.className = 'Arc';
    Arc.defaultStyles = Object.assign({}, Shape.defaultStyles, {
        lineWidth: 1,
        fillStyle: null,
    });
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Arc.prototype, "centerX", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Arc.prototype, "centerY", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Arc.prototype, "radius", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Arc.prototype, "startAngle", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Arc.prototype, "endAngle", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Boolean)
    ], Arc.prototype, "counterClockwise", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Arc.prototype, "type", void 0);

    const convertColorStringToHsla = (v) => {
        const color = Color.fromString(v);
        const [h, s, l] = Color.RGBtoHSL(color.r, color.g, color.b);
        return { h, s, l, a: color.a };
    };
    const interpolateHsla = (x, y, d) => {
        d = Math.min(Math.max(d, 0), 1);
        let h;
        let s;
        if (Number.isNaN(x.h) && Number.isNaN(y.h)) {
            h = 0;
            s = 0;
        }
        else if (Number.isNaN(x.h)) {
            h = y.h;
            s = y.s;
        }
        else if (Number.isNaN(y.h)) {
            h = x.h;
            s = x.s;
        }
        else {
            const xH = x.h;
            let yH = y.h;
            const deltaH = y.h - x.h;
            if (deltaH > 180) {
                yH -= 360;
            }
            else if (deltaH < -180) {
                yH += 360;
            }
            h = xH * (1 - d) + yH * d;
            s = x.s * (1 - d) + y.s * d;
        }
        const l = x.l * (1 - d) + y.l * d;
        const a = x.a * (1 - d) + y.a * d;
        return Color.fromHSL(h, s, l, a);
    };
    class ColorScale {
        constructor() {
            this.domain = [0, 1];
            this.range = ['red', 'blue'];
            this.parsedRange = this.range.map(convertColorStringToHsla);
        }
        update() {
            const { domain, range } = this;
            if (domain.length < 2) {
                Logger.warnOnce('`colorDomain` should have at least 2 values.');
                if (domain.length === 0) {
                    domain.push(0, 1);
                }
                else if (domain.length === 1) {
                    domain.push(domain[0] + 1);
                }
            }
            for (let i = 1; i < domain.length; i++) {
                const a = domain[i - 1];
                const b = domain[i];
                if (a >= b) {
                    Logger.warnOnce('`colorDomain` values should be supplied in ascending order.');
                    domain.sort((a, b) => a - b);
                    break;
                }
            }
            if (range.length < domain.length) {
                for (let i = range.length; i < domain.length; i++) {
                    range.push(range.length > 0 ? range[0] : 'black');
                }
            }
            this.parsedRange = this.range.map(convertColorStringToHsla);
        }
        convert(x) {
            const { domain, range, parsedRange } = this;
            const d0 = domain[0];
            const d1 = domain[domain.length - 1];
            const r0 = range[0];
            const r1 = range[range.length - 1];
            if (x <= d0) {
                return r0;
            }
            if (x >= d1) {
                return r1;
            }
            let index;
            let q;
            if (domain.length === 2) {
                const t = (x - d0) / (d1 - d0);
                const step = 1 / (range.length - 1);
                index = range.length <= 2 ? 0 : Math.min(Math.floor(t * (range.length - 1)), range.length - 2);
                q = (t - index * step) / step;
            }
            else {
                for (index = 0; index < domain.length - 2; index++) {
                    if (x < domain[index + 1]) {
                        break;
                    }
                }
                const a = domain[index];
                const b = domain[index + 1];
                q = (x - a) / (b - a);
            }
            const c0 = parsedRange[index];
            const c1 = parsedRange[index + 1];
            return interpolateHsla(c0, c1, q).toRgbaString();
        }
    }

    class LinearGradientFill extends Shape {
        constructor() {
            super(...arguments);
            this.direction = 'to-right';
            this.stops = undefined;
            this._mask = undefined;
        }
        get mask() {
            return this._mask;
        }
        set mask(newMask) {
            if (this._mask != null) {
                this.removeChild(this._mask);
            }
            if (newMask != null) {
                this.appendChild(newMask);
            }
            this._mask = newMask;
        }
        isPointInPath(x, y) {
            var _a, _b;
            return (_b = (_a = this.mask) === null || _a === void 0 ? void 0 : _a.isPointInPath(x, y)) !== null && _b !== void 0 ? _b : false;
        }
        computeBBox() {
            var _a;
            return (_a = this.mask) === null || _a === void 0 ? void 0 : _a.computeBBox();
        }
        render(renderCtx) {
            const { mask, stops } = this;
            const { ctx, devicePixelRatio } = renderCtx;
            const pixelLength = 1 / devicePixelRatio;
            const maskBbox = mask === null || mask === void 0 ? void 0 : mask.computeTransformedBBox();
            if (mask == null || stops == null || maskBbox == null)
                return;
            if (mask.dirtyPath) {
                mask.updatePath();
                mask.dirtyPath = false;
            }
            ctx.save();
            ctx.beginPath();
            mask.path.draw(ctx);
            ctx.clip();
            ctx.resetTransform();
            const x0 = Math.floor(maskBbox.x);
            const x1 = Math.ceil(maskBbox.x + maskBbox.width);
            const y0 = Math.floor(maskBbox.y);
            const y1 = Math.ceil(maskBbox.y + maskBbox.height);
            const colorScale = new ColorScale();
            const [i0, i1] = this.direction === 'to-right' ? [x0, x1] : [y0, y1];
            colorScale.domain = stops.map((_, index) => {
                return i0 + ((i1 - i0) * index) / (stops.length - 1);
            });
            colorScale.range = stops;
            colorScale.update();
            if (this.direction === 'to-right') {
                const height = y1 - y0;
                for (let x = x0; x <= x1; x += pixelLength) {
                    ctx.fillStyle = colorScale.convert(x);
                    ctx.fillRect(x, y0, pixelLength, height);
                }
            }
            else {
                const width = x1 - x0;
                for (let y = y0; y <= y1; y += pixelLength) {
                    ctx.fillStyle = colorScale.convert(y);
                    ctx.fillRect(x0, y, width, pixelLength);
                }
            }
            ctx.restore();
        }
    }
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", String)
    ], LinearGradientFill.prototype, "direction", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Array)
    ], LinearGradientFill.prototype, "stops", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Function)
    ], LinearGradientFill.prototype, "_mask", void 0);

    class Rect extends Path {
        constructor() {
            super(...arguments);
            this.borderPath = new Path2D();
            this.x = 0;
            this.y = 0;
            this.width = 10;
            this.height = 10;
            this.radius = 0;
            /**
             * If `true`, the rect is aligned to the pixel grid for crisp looking lines.
             * Animated rects may not look nice with this option enabled, for example
             * when a rect is translated by a sub-pixel value on each frame.
             */
            this.crisp = false;
            this.lastUpdatePathStrokeWidth = Shape.defaultStyles.strokeWidth;
            this.effectiveStrokeWidth = Shape.defaultStyles.strokeWidth;
            /**
             * When the rectangle's width or height is less than a pixel
             * and crisp mode is on, the rectangle will still fit into the pixel,
             * but will be less opaque to make an effect of holding less space.
             */
            this.microPixelEffectOpacity = 1;
        }
        isDirtyPath() {
            var _a;
            if (this.lastUpdatePathStrokeWidth !== this.strokeWidth) {
                return true;
            }
            return !!(this.path.isDirty() || this.borderPath.isDirty() || ((_a = this.clipPath) === null || _a === void 0 ? void 0 : _a.isDirty()));
        }
        updatePath() {
            var _a, _b, _c;
            const { path, borderPath, crisp } = this;
            let { x, y, width: w, height: h, strokeWidth } = this;
            const pixelRatio = (_b = (_a = this.layerManager) === null || _a === void 0 ? void 0 : _a.canvas.pixelRatio) !== null && _b !== void 0 ? _b : 1;
            const pixelSize = 1 / pixelRatio;
            let microPixelEffectOpacity = 1;
            path.clear({ trackChanges: true });
            borderPath.clear({ trackChanges: true });
            if (crisp) {
                if (w <= pixelSize) {
                    microPixelEffectOpacity *= w / pixelSize;
                }
                if (h <= pixelSize) {
                    microPixelEffectOpacity *= h / pixelSize;
                }
                w = this.align(x, w);
                h = this.align(y, h);
                x = this.align(x);
                y = this.align(y);
            }
            if (strokeWidth) {
                if (w < pixelSize) {
                    // Too narrow, draw a vertical stroke
                    const lx = x + pixelSize / 2;
                    borderPath.moveTo(lx, y);
                    borderPath.lineTo(lx, y + h);
                    strokeWidth = pixelSize;
                    this.borderClipPath = undefined;
                }
                else if (h < pixelSize) {
                    // Too narrow, draw a horizontal stroke
                    const ly = y + pixelSize / 2;
                    borderPath.moveTo(x, ly);
                    borderPath.lineTo(x + w, ly);
                    strokeWidth = pixelSize;
                    this.borderClipPath = undefined;
                }
                else if (strokeWidth < w && strokeWidth < h) {
                    const halfStrokeWidth = strokeWidth / 2;
                    x += halfStrokeWidth;
                    y += halfStrokeWidth;
                    w -= strokeWidth;
                    h -= strokeWidth;
                    // Clipping not needed in this case; fill to center of stroke.
                    this.borderClipPath = undefined;
                    path.rect(x, y, w, h);
                    borderPath.rect(x, y, w, h);
                }
                else {
                    // Skip the fill and just render the stroke.
                    this.borderClipPath = (_c = this.borderClipPath) !== null && _c !== void 0 ? _c : new Path2D();
                    this.borderClipPath.clear({ trackChanges: true });
                    this.borderClipPath.rect(x, y, w, h);
                    borderPath.rect(x, y, w, h);
                }
            }
            else {
                // No borderPath needed, and thus no clipPath needed either. Fill to full extent of
                // Rect.
                this.borderClipPath = undefined;
                path.rect(x, y, w, h);
            }
            this.effectiveStrokeWidth = strokeWidth;
            this.lastUpdatePathStrokeWidth = strokeWidth;
            this.microPixelEffectOpacity = microPixelEffectOpacity;
        }
        computeBBox() {
            const { x, y, width, height } = this;
            return new BBox(x, y, width, height);
        }
        isPointInPath(x, y) {
            const point = this.transformPoint(x, y);
            const bbox = this.computeBBox();
            return bbox.containsPoint(point.x, point.y);
        }
        applyFillAlpha(ctx) {
            const { fillOpacity, microPixelEffectOpacity, opacity } = this;
            const { globalAlpha } = ctx;
            ctx.globalAlpha = globalAlpha * opacity * fillOpacity * microPixelEffectOpacity;
        }
        renderStroke(ctx) {
            const { stroke, effectiveStrokeWidth, borderPath, borderClipPath, opacity, microPixelEffectOpacity } = this;
            const borderActive = !!stroke && !!effectiveStrokeWidth;
            if (borderActive) {
                const { strokeOpacity, lineDash, lineDashOffset, lineCap, lineJoin } = this;
                if (borderClipPath) {
                    // strokeWidth is larger than width or height, so use clipping to render correctly.
                    // This is the simplest way to achieve the correct rendering due to nuances with ~0
                    // width/height lines in Canvas operations.
                    borderClipPath.draw(ctx);
                    ctx.clip();
                }
                borderPath.draw(ctx);
                const { globalAlpha } = ctx;
                ctx.strokeStyle = stroke;
                ctx.globalAlpha = globalAlpha * opacity * strokeOpacity * microPixelEffectOpacity;
                ctx.lineWidth = effectiveStrokeWidth;
                if (lineDash) {
                    ctx.setLineDash(lineDash);
                }
                if (lineDashOffset) {
                    ctx.lineDashOffset = lineDashOffset;
                }
                if (lineCap) {
                    ctx.lineCap = lineCap;
                }
                if (lineJoin) {
                    ctx.lineJoin = lineJoin;
                }
                ctx.stroke();
                ctx.globalAlpha = globalAlpha;
            }
        }
    }
    Rect.className = 'Rect';
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Rect.prototype, "x", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Rect.prototype, "y", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Rect.prototype, "width", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Rect.prototype, "height", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Number)
    ], Rect.prototype, "radius", void 0);
    __decorate([
        ScenePathChangeDetection(),
        __metadata("design:type", Boolean)
    ], Rect.prototype, "crisp", void 0);

    class Image extends Node {
        constructor(sourceImage) {
            super();
            this.x = 0;
            this.y = 0;
            this.width = 0;
            this.height = 0;
            this.opacity = 1;
            this.sourceImage = sourceImage;
        }
        render(renderCtx) {
            const { ctx, forceRender, stats } = renderCtx;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped++;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            const image = this.sourceImage;
            ctx.globalAlpha = this.opacity;
            ctx.drawImage(image, 0, 0, image.width, image.height, this.x, this.y, this.width, this.height);
            super.render(renderCtx);
        }
    }
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Image.prototype, "x", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Image.prototype, "y", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Image.prototype, "width", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Image.prototype, "height", void 0);
    __decorate([
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], Image.prototype, "opacity", void 0);

    const motion = Object.assign(Object.assign({}, fromToMotion$1), resetMotion$1);

    var integratedChartsScene = /*#__PURE__*/Object.freeze({
        __proto__: null,
        motion: motion,
        Caption: Caption,
        DropShadow: DropShadow,
        Group: Group,
        Scene: Scene,
        Node: Node,
        get PointerEvents () { return PointerEvents; },
        get RedrawType () { return RedrawType; },
        SceneChangeDetection: SceneChangeDetection,
        Selection: Selection,
        Arc: Arc,
        Line: Line,
        LinearGradientFill: LinearGradientFill,
        Path: Path,
        ScenePathChangeDetection: ScenePathChangeDetection,
        Rect: Rect,
        Sector: Sector,
        Shape: Shape,
        Text: Text,
        getFont: getFont,
        ContinuousScale: ContinuousScale,
        BandScale: BandScale,
        LinearScale: LinearScale,
        toRadians: toRadians,
        Label: Label,
        Marker: Marker,
        getMarker: getMarker,
        Circle: Circle,
        Diamond: Diamond,
        Square: Square,
        Triangle: Triangle,
        Tooltip: Tooltip,
        toTooltipHtml: toTooltipHtml,
        BBox: BBox,
        nearestSquared: nearestSquared,
        nearestSquaredInContainer: nearestSquaredInContainer,
        HdpiCanvas: HdpiCanvas,
        Image: Image,
        Path2D: Path2D,
        easing: easing
    });

    const DEFAULT_DIRECTION_KEYS = {
        [ChartAxisDirection.X]: ['xKey'],
        [ChartAxisDirection.Y]: ['yKey'],
    };
    const DEFAULT_DIRECTION_NAMES = {
        [ChartAxisDirection.X]: ['xName'],
        [ChartAxisDirection.Y]: ['yName'],
    };
    class CartesianSeriesNodeClickEvent extends SeriesNodeClickEvent {
        constructor(type, nativeEvent, datum, series) {
            super(type, nativeEvent, datum, series);
            this.xKey = series.xKey;
            this.yKey = series.yKey;
        }
    }
    class CartesianSeries extends DataModelSeries {
        get contextNodeData() {
            return this._contextNodeData.slice();
        }
        constructor(_a) {
            var { pathsPerSeries = 1, hasMarkers = false, hasHighlightedLabels = false, pathsZIndexSubOrderOffset = [], directionKeys = DEFAULT_DIRECTION_KEYS, directionNames = DEFAULT_DIRECTION_NAMES, datumSelectionGarbageCollection = true, markerSelectionGarbageCollection = true, animationResetFns } = _a, otherOpts = __rest(_a, ["pathsPerSeries", "hasMarkers", "hasHighlightedLabels", "pathsZIndexSubOrderOffset", "directionKeys", "directionNames", "datumSelectionGarbageCollection", "markerSelectionGarbageCollection", "animationResetFns"]);
            super(Object.assign({ directionKeys,
                directionNames, useSeriesGroupLayer: true, canHaveAxes: true }, otherOpts));
            this.legendItemName = undefined;
            this._contextNodeData = [];
            this.NodeClickEvent = CartesianSeriesNodeClickEvent;
            this.highlightSelection = Selection.select(this.highlightNode, () => this.opts.hasMarkers ? this.markerFactory() : this.nodeFactory());
            this.highlightLabelSelection = Selection.select(this.highlightLabel, Text);
            this.annotationSelections = new Set();
            this.subGroups = [];
            this.subGroupId = 0;
            this.debug = Debug.create();
            this.opts = {
                pathsPerSeries,
                hasMarkers,
                hasHighlightedLabels,
                pathsZIndexSubOrderOffset,
                directionKeys,
                directionNames,
                animationResetFns,
                datumSelectionGarbageCollection,
                markerSelectionGarbageCollection,
            };
            this.animationState = new StateMachine('empty', {
                empty: {
                    update: {
                        target: 'ready',
                        action: (data) => this.animateEmptyUpdateReady(data),
                    },
                },
                ready: {
                    updateData: 'waiting',
                    clear: 'clearing',
                    highlight: (data) => this.animateReadyHighlight(data),
                    highlightMarkers: (data) => this.animateReadyHighlightMarkers(data),
                    resize: (data) => this.animateReadyResize(data),
                },
                waiting: {
                    update: {
                        target: 'ready',
                        action: (data) => this.animateWaitingUpdateReady(data),
                    },
                },
                clearing: {
                    update: {
                        target: 'empty',
                        action: (data) => this.animateClearingUpdateEmpty(data),
                    },
                },
            }, () => this.checkProcessedDataAnimatable());
        }
        addChartEventListeners() {
            this.ctx.chartEventManager.addListener('legend-item-click', (event) => this.onLegendItemClick(event));
            this.ctx.chartEventManager.addListener('legend-item-double-click', (event) => this.onLegendItemDoubleClick(event));
        }
        destroy() {
            super.destroy();
            this._contextNodeData.splice(0, this._contextNodeData.length);
            this.subGroups.splice(0, this.subGroups.length);
        }
        update({ seriesRect }) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const { visible, _contextNodeData: previousContextData } = this;
                const { series } = (_b = (_a = this.ctx.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight()) !== null && _b !== void 0 ? _b : {};
                const seriesHighlighted = series ? series === this : undefined;
                const resize = this.checkResize(seriesRect);
                const highlightItems = yield this.updateHighlightSelection(seriesHighlighted);
                yield this.updateSelections(visible);
                yield this.updateNodes(highlightItems, seriesHighlighted, visible);
                const animationData = this.getAnimationData(seriesRect, previousContextData);
                if (resize) {
                    this.animationState.transition('resize', animationData);
                }
                this.animationState.transition('update', animationData);
            });
        }
        updateSelections(anySeriesItemEnabled) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!anySeriesItemEnabled && this.ctx.animationManager.isSkipped()) {
                    return;
                }
                if (!this.nodeDataRefresh && !this.isPathOrSelectionDirty()) {
                    return;
                }
                if (this.nodeDataRefresh) {
                    this.nodeDataRefresh = false;
                    this.debug(`CartesianSeries.updateSelections() - calling createNodeData() for`, this.id);
                    this._contextNodeData = yield this.createNodeData();
                    const animationValid = this.isProcessedDataAnimatable();
                    this._contextNodeData.forEach((nodeData) => {
                        var _a;
                        (_a = nodeData.animationValid) !== null && _a !== void 0 ? _a : (nodeData.animationValid = animationValid);
                    });
                    yield this.updateSeriesGroups();
                    const { dataModel, processedData } = this;
                    if (dataModel !== undefined && processedData !== undefined) {
                        this.dispatch('data-update', { dataModel, processedData });
                    }
                }
                yield Promise.all(this.subGroups.map((g, i) => this.updateSeriesGroupSelections(g, i)));
            });
        }
        updateSeriesGroupSelections(subGroup, seriesIdx, seriesHighlighted) {
            return __awaiter(this, void 0, void 0, function* () {
                const { datumSelection, labelSelection, markerSelection, paths } = subGroup;
                const contextData = this._contextNodeData[seriesIdx];
                const { nodeData, labelData, itemId } = contextData;
                yield this.updatePaths({ seriesHighlighted, itemId, contextData, paths, seriesIdx });
                subGroup.datumSelection = yield this.updateDatumSelection({ nodeData, datumSelection, seriesIdx });
                subGroup.labelSelection = yield this.updateLabelSelection({ labelData, labelSelection, seriesIdx });
                if (markerSelection) {
                    subGroup.markerSelection = yield this.updateMarkerSelection({
                        nodeData,
                        markerSelection,
                        seriesIdx,
                    });
                }
            });
        }
        markerFactory() {
            const MarkerShape = getMarker();
            return new MarkerShape();
        }
        updateSeriesGroups() {
            return __awaiter(this, void 0, void 0, function* () {
                const { _contextNodeData: contextNodeData, contentGroup, subGroups, opts: { pathsPerSeries, hasMarkers, datumSelectionGarbageCollection, markerSelectionGarbageCollection }, } = this;
                if (contextNodeData.length === subGroups.length) {
                    return;
                }
                if (contextNodeData.length < subGroups.length) {
                    subGroups.splice(contextNodeData.length).forEach(({ dataNodeGroup, markerGroup, labelGroup, paths }) => {
                        contentGroup.removeChild(dataNodeGroup);
                        if (markerGroup) {
                            contentGroup.removeChild(markerGroup);
                        }
                        if (labelGroup) {
                            contentGroup.removeChild(labelGroup);
                        }
                        for (const path of paths) {
                            contentGroup.removeChild(path);
                        }
                    });
                }
                const totalGroups = contextNodeData.length;
                while (totalGroups > subGroups.length) {
                    const layer = false;
                    const subGroupId = this.subGroupId++;
                    const dataNodeGroup = new Group({
                        name: `${this.id}-series-sub${subGroupId}-dataNodes`,
                        layer,
                        zIndex: Layers.SERIES_LAYER_ZINDEX,
                        zIndexSubOrder: this.getGroupZIndexSubOrder('data', subGroupId),
                    });
                    const markerGroup = hasMarkers
                        ? new Group({
                            name: `${this.id}-series-sub${this.subGroupId++}-markers`,
                            layer,
                            zIndex: Layers.SERIES_LAYER_ZINDEX,
                            zIndexSubOrder: this.getGroupZIndexSubOrder('marker', subGroupId),
                        })
                        : undefined;
                    const labelGroup = new Group({
                        name: `${this.id}-series-sub${this.subGroupId++}-labels`,
                        layer,
                        zIndex: Layers.SERIES_LABEL_ZINDEX,
                        zIndexSubOrder: this.getGroupZIndexSubOrder('labels', subGroupId),
                    });
                    contentGroup.appendChild(dataNodeGroup);
                    contentGroup.appendChild(labelGroup);
                    if (markerGroup) {
                        contentGroup.appendChild(markerGroup);
                    }
                    const paths = [];
                    for (let index = 0; index < pathsPerSeries; index++) {
                        paths[index] = new Path();
                        paths[index].zIndex = Layers.SERIES_LAYER_ZINDEX;
                        paths[index].zIndexSubOrder = this.getGroupZIndexSubOrder('paths', index);
                        contentGroup.appendChild(paths[index]);
                    }
                    subGroups.push({
                        paths,
                        dataNodeGroup,
                        markerGroup,
                        labelGroup,
                        labelSelection: Selection.select(labelGroup, Text),
                        datumSelection: Selection.select(dataNodeGroup, () => this.nodeFactory(), datumSelectionGarbageCollection),
                        markerSelection: markerGroup
                            ? Selection.select(markerGroup, () => this.markerFactory(), markerSelectionGarbageCollection)
                            : undefined,
                    });
                }
            });
        }
        getGroupZIndexSubOrder(type, subIndex = 0) {
            var _a;
            const result = super.getGroupZIndexSubOrder(type, subIndex);
            if (type === 'paths') {
                const pathOffset = (_a = this.opts.pathsZIndexSubOrderOffset[subIndex]) !== null && _a !== void 0 ? _a : 0;
                const superFn = result[0];
                if (typeof superFn === 'function') {
                    result[0] = () => +superFn() + pathOffset;
                }
                else {
                    result[0] = +superFn + pathOffset;
                }
            }
            return result;
        }
        updateNodes(highlightedItems, seriesHighlighted, anySeriesItemEnabled) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { highlightSelection, highlightLabelSelection, opts: { hasMarkers, hasHighlightedLabels }, } = this;
                const animationEnabled = !this.ctx.animationManager.isSkipped();
                const visible = this.visible && ((_a = this._contextNodeData) === null || _a === void 0 ? void 0 : _a.length) > 0 && anySeriesItemEnabled;
                this.rootGroup.visible = animationEnabled || visible;
                this.contentGroup.visible = animationEnabled || visible;
                this.highlightGroup.visible = (animationEnabled || visible) && !!seriesHighlighted;
                const subGroupOpacity = this.getOpacity();
                if (hasMarkers) {
                    yield this.updateMarkerNodes({
                        markerSelection: highlightSelection,
                        isHighlight: true,
                        seriesIdx: -1,
                    });
                    this.animationState.transition('highlightMarkers', highlightSelection);
                }
                else {
                    yield this.updateDatumNodes({
                        datumSelection: highlightSelection,
                        isHighlight: true,
                        seriesIdx: -1,
                    });
                    this.animationState.transition('highlight', highlightSelection);
                }
                if (hasHighlightedLabels) {
                    yield this.updateLabelNodes({ labelSelection: highlightLabelSelection, seriesIdx: -1 });
                }
                yield Promise.all(this.subGroups.map((subGroup, seriesIdx) => __awaiter(this, void 0, void 0, function* () {
                    const { dataNodeGroup, markerGroup, datumSelection, labelSelection, markerSelection, paths, labelGroup, } = subGroup;
                    const { itemId } = this.contextNodeData[seriesIdx];
                    const subGroupVisible = visible;
                    dataNodeGroup.opacity = subGroupOpacity;
                    dataNodeGroup.visible = animationEnabled || subGroupVisible;
                    labelGroup.visible = subGroupVisible;
                    if (markerGroup) {
                        markerGroup.opacity = subGroupOpacity;
                        markerGroup.zIndex =
                            dataNodeGroup.zIndex >= Layers.SERIES_LAYER_ZINDEX
                                ? dataNodeGroup.zIndex
                                : dataNodeGroup.zIndex + 1;
                        markerGroup.visible = subGroupVisible;
                    }
                    if (labelGroup) {
                        labelGroup.opacity = subGroupOpacity;
                    }
                    yield this.updatePathNodes({
                        seriesHighlighted,
                        itemId,
                        paths,
                        seriesIdx,
                        opacity: subGroupOpacity,
                        visible: subGroupVisible,
                        animationEnabled,
                    });
                    if (!dataNodeGroup.visible) {
                        return;
                    }
                    yield this.updateDatumNodes({ datumSelection, highlightedItems, isHighlight: false, seriesIdx });
                    yield this.updateLabelNodes({ labelSelection, seriesIdx });
                    if (hasMarkers && markerSelection) {
                        yield this.updateMarkerNodes({ markerSelection, isHighlight: false, seriesIdx });
                    }
                })));
            });
        }
        getHighlightLabelData(labelData, highlightedItem) {
            const labelItem = labelData.find((ld) => ld.datum === highlightedItem.datum && ld.itemId === highlightedItem.itemId);
            return labelItem ? [labelItem] : undefined;
        }
        getHighlightData(_nodeData, highlightedItem) {
            return highlightedItem ? [highlightedItem] : undefined;
        }
        updateHighlightSelection(seriesHighlighted) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { highlightSelection, highlightLabelSelection, _contextNodeData: contextNodeData } = this;
                const highlightedDatum = (_a = this.ctx.highlightManager) === null || _a === void 0 ? void 0 : _a.getActiveHighlight();
                const item = seriesHighlighted && (highlightedDatum === null || highlightedDatum === void 0 ? void 0 : highlightedDatum.datum) ? highlightedDatum : undefined;
                let labelItems;
                let highlightItems;
                if (item != null) {
                    const labelsEnabled = this.isLabelEnabled();
                    for (const { labelData, nodeData } of contextNodeData) {
                        highlightItems = this.getHighlightData(nodeData, item);
                        labelItems = labelsEnabled ? this.getHighlightLabelData(labelData, item) : undefined;
                        if ((!labelsEnabled || labelItems != null) && highlightItems != null) {
                            break;
                        }
                    }
                }
                this.highlightSelection = yield this.updateHighlightSelectionItem({
                    items: highlightItems,
                    highlightSelection,
                });
                this.highlightLabelSelection = yield this.updateHighlightSelectionLabel({
                    items: labelItems,
                    highlightLabelSelection,
                });
                return highlightItems;
            });
        }
        pickNodeExactShape(point) {
            var _a;
            const result = super.pickNodeExactShape(point);
            if (result) {
                return result;
            }
            const { x, y } = point;
            const { opts: { hasMarkers }, } = this;
            for (const { dataNodeGroup, markerGroup } of this.subGroups) {
                let match = dataNodeGroup.pickNode(x, y);
                if (!match && hasMarkers) {
                    match = markerGroup === null || markerGroup === void 0 ? void 0 : markerGroup.pickNode(x, y);
                }
                if (match) {
                    break;
                }
            }
            {
                for (const mod of this.moduleMap) {
                    const { datum } = (_a = mod.pickNodeExact(point)) !== null && _a !== void 0 ? _a : {};
                    if (datum !== undefined) {
                        return { datum, distance: 0 };
                    }
                }
            }
        }
        pickNodeClosestDatum(point) {
            var _a, _b;
            const { x, y } = point;
            const { axes, rootGroup, _contextNodeData: contextNodeData } = this;
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            const hitPoint = rootGroup.transformPoint(x, y);
            let minDistance = Infinity;
            let closestDatum;
            for (const context of contextNodeData) {
                for (const datum of context.nodeData) {
                    const { point: { x: datumX = NaN, y: datumY = NaN } = {} } = datum;
                    if (isNaN(datumX) || isNaN(datumY)) {
                        continue;
                    }
                    const isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));
                    if (!isInRange) {
                        continue;
                    }
                    // No need to use Math.sqrt() since x < y implies Math.sqrt(x) < Math.sqrt(y) for
                    // values > 1
                    const distance = Math.max(Math.pow((hitPoint.x - datumX), 2) + Math.pow((hitPoint.y - datumY), 2), 0);
                    if (distance < minDistance) {
                        minDistance = distance;
                        closestDatum = datum;
                    }
                }
            }
            for (const mod of this.moduleMap) {
                const modPick = mod.pickNodeNearest(point);
                if (modPick !== undefined && modPick.distanceSquared < minDistance) {
                    minDistance = modPick.distanceSquared;
                    closestDatum = modPick.datum;
                    break;
                }
            }
            if (closestDatum) {
                const distance = Math.max(Math.sqrt(minDistance) - ((_b = (_a = closestDatum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0), 0);
                return { datum: closestDatum, distance };
            }
        }
        pickNodeMainAxisFirst(point, requireCategoryAxis) {
            var _a, _b;
            const { x, y } = point;
            const { axes, rootGroup, _contextNodeData: contextNodeData } = this;
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            // Prefer to start search with any available category axis.
            const directions = [xAxis, yAxis]
                .filter((a) => a instanceof CategoryAxis)
                .map((a) => a.direction);
            if (requireCategoryAxis && directions.length === 0) {
                return;
            }
            // Default to X-axis unless we found a suitable category axis.
            const [primaryDirection = ChartAxisDirection.X] = directions;
            const hitPoint = rootGroup.transformPoint(x, y);
            const hitPointCoords = primaryDirection === ChartAxisDirection.X ? [hitPoint.x, hitPoint.y] : [hitPoint.y, hitPoint.x];
            const minDistance = [Infinity, Infinity];
            let closestDatum;
            for (const context of contextNodeData) {
                for (const datum of context.nodeData) {
                    const { point: { x: datumX = NaN, y: datumY = NaN } = {} } = datum;
                    if (isNaN(datumX) || isNaN(datumY)) {
                        continue;
                    }
                    const isInRange = (xAxis === null || xAxis === void 0 ? void 0 : xAxis.inRange(datumX)) && (yAxis === null || yAxis === void 0 ? void 0 : yAxis.inRange(datumY));
                    if (!isInRange) {
                        continue;
                    }
                    const point = primaryDirection === ChartAxisDirection.X ? [datumX, datumY] : [datumY, datumX];
                    // Compare distances from most significant dimension to least.
                    let newMinDistance = true;
                    for (let i = 0; i < point.length; i++) {
                        const dist = Math.abs(point[i] - hitPointCoords[i]);
                        if (dist > minDistance[i]) {
                            newMinDistance = false;
                            break;
                        }
                        if (dist < minDistance[i]) {
                            minDistance[i] = dist;
                            minDistance.fill(Infinity, i + 1, minDistance.length);
                        }
                    }
                    if (newMinDistance) {
                        closestDatum = datum;
                    }
                }
            }
            if (closestDatum) {
                let closestDistanceSquared = Math.max(Math.pow(minDistance[0], 2) + Math.pow(minDistance[1], 2) - ((_b = (_a = closestDatum.point) === null || _a === void 0 ? void 0 : _a.size) !== null && _b !== void 0 ? _b : 0), 0);
                for (const mod of this.moduleMap) {
                    const modPick = mod.pickNodeMainAxisFirst(point);
                    if (modPick !== undefined && modPick.distanceSquared < closestDistanceSquared) {
                        closestDatum = modPick.datum;
                        closestDistanceSquared = modPick.distanceSquared;
                        break;
                    }
                }
                return { datum: closestDatum, distance: Math.sqrt(closestDistanceSquared) };
            }
        }
        onLegendItemClick(event) {
            const { enabled, itemId, series, legendItemName } = event;
            const matchedLegendItemName = this.legendItemName != null && this.legendItemName === legendItemName;
            if (series.id === this.id || matchedLegendItemName) {
                this.toggleSeriesItem(itemId, enabled);
            }
        }
        onLegendItemDoubleClick(event) {
            const { enabled, itemId, series, numVisibleItems, legendItemName } = event;
            const totalVisibleItems = Object.values(numVisibleItems).reduce((p, v) => p + v, 0);
            const matchedLegendItemName = this.legendItemName != null && this.legendItemName === legendItemName;
            if (series.id === this.id || matchedLegendItemName) {
                // Double-clicked item should always become visible.
                this.toggleSeriesItem(itemId, true);
            }
            else if (enabled && totalVisibleItems === 1) {
                // Other items should become visible if there is only one existing visible item.
                this.toggleSeriesItem(itemId, true);
            }
            else {
                // Disable other items if not exactly one enabled.
                this.toggleSeriesItem(itemId, false);
            }
        }
        isPathOrSelectionDirty() {
            // Override point to allow more sophisticated dirty selection detection.
            return false;
        }
        getLabelData() {
            return [];
        }
        shouldFlipXY() {
            return false;
        }
        /**
         * Get the minimum bounding box that contains any adjacent two nodes. The axes are treated independently, so this
         * may not represent the same two points for both directions. The dimensions represent the greatest distance
         * between any two adjacent nodes.
         */
        getMinRect() {
            const [context] = this._contextNodeData;
            if (!context || context.nodeData.length == 0)
                return;
            const width = context.nodeData
                .map(({ midPoint }) => { var _a; return (_a = midPoint === null || midPoint === void 0 ? void 0 : midPoint.x) !== null && _a !== void 0 ? _a : 0; })
                .sort((a, b) => a - b)
                .reduce((max, x, i, array) => (i > 0 ? Math.max(max, x - array[i - 1]) : max), 0);
            const height = context.nodeData
                .map(({ midPoint }) => { var _a; return (_a = midPoint === null || midPoint === void 0 ? void 0 : midPoint.y) !== null && _a !== void 0 ? _a : 0; })
                .sort((a, b) => a - b)
                .reduce((max, y, i, array) => (i > 0 ? Math.max(max, y - array[i - 1]) : max), 0);
            return new BBox(0, 0, width, height);
        }
        updateHighlightSelectionItem(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { opts: { hasMarkers }, } = this;
                const { items, highlightSelection } = opts;
                const nodeData = items !== null && items !== void 0 ? items : [];
                if (hasMarkers) {
                    const markerSelection = highlightSelection;
                    return this.updateMarkerSelection({ nodeData, markerSelection, seriesIdx: -1 });
                }
                else {
                    return this.updateDatumSelection({
                        nodeData,
                        datumSelection: highlightSelection,
                        seriesIdx: -1,
                    });
                }
            });
        }
        updateHighlightSelectionLabel(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { items, highlightLabelSelection } = opts;
                const labelData = items !== null && items !== void 0 ? items : [];
                return this.updateLabelSelection({ labelData, labelSelection: highlightLabelSelection, seriesIdx: -1 });
            });
        }
        updateDatumSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                // Override point for sub-classes.
                return opts.datumSelection;
            });
        }
        updateDatumNodes(_opts) {
            return __awaiter(this, void 0, void 0, function* () {
                // Override point for sub-classes.
            });
        }
        updateMarkerSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                // Override point for sub-classes.
                return opts.markerSelection;
            });
        }
        updateMarkerNodes(_opts) {
            return __awaiter(this, void 0, void 0, function* () {
                // Override point for sub-classes.
            });
        }
        updatePaths(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                // Override point for sub-classes.
                opts.paths.forEach((p) => (p.visible = false));
            });
        }
        updatePathNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { paths, opacity, visible } = opts;
                for (const path of paths) {
                    path.opacity = opacity;
                    path.visible = visible;
                }
            });
        }
        resetAllAnimation(data) {
            var _a, _b;
            const { path, datum, label, marker } = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.animationResetFns) !== null && _b !== void 0 ? _b : {};
            // Stop any running animations by prefix convention.
            this.ctx.animationManager.stopByAnimationGroupId(this.id);
            if (path) {
                data.paths.forEach((paths) => {
                    resetMotion(paths, path);
                });
            }
            if (datum) {
                resetMotion(data.datumSelections, datum);
            }
            if (label) {
                resetMotion(data.labelSelections, label);
            }
            if (marker) {
                resetMotion(data.markerSelections, marker);
            }
            if (data.contextData.some((d) => d.animationValid === false)) {
                this.ctx.animationManager.skipCurrentBatch();
            }
        }
        animateEmptyUpdateReady(data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation(data);
        }
        animateWaitingUpdateReady(data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation(data);
        }
        animateReadyHighlight(data) {
            var _a, _b;
            const { datum } = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.animationResetFns) !== null && _b !== void 0 ? _b : {};
            if (datum) {
                resetMotion([data], datum);
            }
        }
        animateReadyHighlightMarkers(data) {
            var _a, _b;
            const { marker } = (_b = (_a = this.opts) === null || _a === void 0 ? void 0 : _a.animationResetFns) !== null && _b !== void 0 ? _b : {};
            if (marker) {
                resetMotion([data], marker);
            }
        }
        animateReadyResize(data) {
            this.resetAllAnimation(data);
        }
        animateClearingUpdateEmpty(data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation(data);
        }
        animationTransitionClear() {
            this.animationState.transition('clear', this.getAnimationData());
        }
        getAnimationData(seriesRect, previousContextData) {
            const animationData = {
                datumSelections: this.subGroups.map(({ datumSelection }) => datumSelection),
                markerSelections: this.subGroups
                    .filter(({ markerSelection }) => markerSelection !== undefined)
                    .map(({ markerSelection }) => markerSelection),
                labelSelections: this.subGroups.map(({ labelSelection }) => labelSelection),
                annotationSelections: [...this.annotationSelections],
                contextData: this._contextNodeData,
                previousContextData,
                paths: this.subGroups.map(({ paths }) => paths),
                seriesRect,
            };
            return animationData;
        }
        calculateScaling() {
            const result = {};
            const addScale = (direction) => {
                const axis = this.axes[direction];
                if (!axis)
                    return;
                if (axis.scale instanceof LogScale) {
                    const { range, domain } = axis.scale;
                    result[direction] = {
                        type: 'log',
                        convert: (domain) => axis.scale.convert(domain),
                        domain: [domain[0], domain[1]],
                        range: [range[0], range[1]],
                    };
                }
                else if (axis.scale instanceof ContinuousScale) {
                    const { range } = axis.scale;
                    const domain = axis.scale.getDomain();
                    result[direction] = {
                        type: 'continuous',
                        domain: [domain[0], domain[1]],
                        range: [range[0], range[1]],
                    };
                }
                else if (axis.scale) {
                    const { domain } = axis.scale;
                    result[direction] = {
                        type: 'category',
                        domain,
                        range: domain.map((d) => axis.scale.convert(d)),
                    };
                }
            };
            addScale(ChartAxisDirection.X);
            addScale(ChartAxisDirection.Y);
            return result;
        }
    }
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], CartesianSeries.prototype, "legendItemName", void 0);

    const directions = ['top', 'right', 'bottom', 'left'];
    class CartesianChart extends Chart {
        constructor(specialOverrides, resources) {
            super(specialOverrides, resources);
            /** Integrated Charts feature state - not used in Standalone Charts. */
            this.paired = true;
            this._lastAxisWidths = {
                top: 0,
                bottom: 0,
                left: 0,
                right: 0,
            };
            this._lastVisibility = {
                crossLines: true,
                series: true,
            };
        }
        performLayout() {
            const _super = Object.create(null, {
                performLayout: { get: () => super.performLayout }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const shrinkRect = yield _super.performLayout.call(this);
                const { animationRect, seriesRect, visibility, clipSeries } = this.updateAxes(shrinkRect);
                this.seriesRoot.visible = visibility.series;
                this.seriesRect = seriesRect;
                this.animationRect = animationRect;
                this.seriesRoot.translationX = Math.floor(seriesRect.x);
                this.seriesRoot.translationY = Math.floor(seriesRect.y);
                const { seriesArea: { padding }, } = this;
                // Recreate padding object to prevent issues with getters in `BBox.shrink()`
                const seriesPaddedRect = seriesRect.clone().grow({
                    top: padding.top,
                    right: padding.right,
                    bottom: padding.bottom,
                    left: padding.left,
                });
                this.hoverRect = seriesPaddedRect;
                this.layoutService.dispatchLayoutComplete({
                    type: 'layout-complete',
                    chart: { width: this.scene.width, height: this.scene.height },
                    clipSeries,
                    series: {
                        rect: seriesRect,
                        paddedRect: seriesPaddedRect,
                        visible: visibility.series,
                        shouldFlipXY: this.shouldFlipXY(),
                    },
                    axes: this.axes.map((axis) => (Object.assign({ id: axis.id }, axis.getLayoutState()))),
                });
                return shrinkRect;
            });
        }
        updateAxes(inputShrinkRect) {
            var _a;
            // Start with a good approximation from the last update - this should mean that in many resize
            // cases that only a single pass is needed \o/.
            const axisWidths = Object.assign({}, this._lastAxisWidths);
            const visibility = Object.assign({}, this._lastVisibility);
            // Clean any positions which aren't valid with the current axis status (otherwise we end up
            // never being able to find a stable result).
            const liveAxisWidths = new Set(this._axes.map((a) => a.position));
            for (const position of Object.keys(axisWidths)) {
                if (!liveAxisWidths.has(position)) {
                    delete axisWidths[position];
                }
            }
            const stableOutputs = (otherAxisWidths, otherVisibility) => {
                // Check for new axis positions.
                if (Object.keys(otherAxisWidths).some((k) => axisWidths[k] == null)) {
                    return false;
                }
                return (visibility.crossLines === otherVisibility.crossLines &&
                    visibility.series === otherVisibility.series &&
                    // Check for existing axis positions and equality.
                    Object.entries(axisWidths).every(([p, w]) => {
                        const otherW = otherAxisWidths[p];
                        if (w != null || otherW != null) {
                            return w === otherW;
                        }
                        return true;
                    }));
            };
            const ceilValues = (records) => {
                return Object.entries(records).reduce((out, [key, value]) => {
                    if (value && Math.abs(value) === Infinity) {
                        value = 0;
                    }
                    out[key] = value != null ? Math.ceil(value) : value;
                    return out;
                }, {});
            };
            // Iteratively try to resolve axis widths - since X axis width affects Y axis range,
            // and vice-versa, we need to iteratively try and find a fit for the axes and their
            // ticks/labels.
            let lastPassAxisWidths = {};
            let lastPassVisibility = {};
            let clipSeries = false;
            let seriesRect = (_a = this.seriesRect) === null || _a === void 0 ? void 0 : _a.clone();
            let count = 0;
            let primaryTickCounts = {};
            do {
                Object.assign(axisWidths, lastPassAxisWidths);
                Object.assign(visibility, lastPassVisibility);
                const result = this.updateAxesPass(axisWidths, inputShrinkRect.clone(), seriesRect);
                lastPassAxisWidths = ceilValues(result.axisWidths);
                lastPassVisibility = result.visibility;
                clipSeries = result.clipSeries;
                seriesRect = result.seriesRect;
                primaryTickCounts = result.primaryTickCounts;
                if (count++ > 10) {
                    Logger.warn('unable to find stable axis layout.');
                    break;
                }
            } while (!stableOutputs(lastPassAxisWidths, lastPassVisibility));
            this.axes.forEach((axis) => {
                const { direction } = axis;
                const primaryTickCount = primaryTickCounts[direction];
                axis.update(primaryTickCount);
            });
            const clipRectPadding = 5;
            this.axes.forEach((axis) => {
                // update visibility of crosslines
                axis.setCrossLinesVisible(visibility.crossLines);
                if (!seriesRect) {
                    return;
                }
                axis.clipGrid(seriesRect.x, seriesRect.y, seriesRect.width + clipRectPadding, seriesRect.height + clipRectPadding);
                switch (axis.position) {
                    case 'left':
                    case 'right':
                        axis.clipTickLines(inputShrinkRect.x, seriesRect.y, inputShrinkRect.width + clipRectPadding, seriesRect.height + clipRectPadding);
                        break;
                    case 'top':
                    case 'bottom':
                        axis.clipTickLines(seriesRect.x, inputShrinkRect.y, seriesRect.width + clipRectPadding, inputShrinkRect.height + clipRectPadding);
                        break;
                }
            });
            this._lastAxisWidths = axisWidths;
            this._lastVisibility = visibility;
            return { seriesRect, animationRect: inputShrinkRect, visibility, clipSeries };
        }
        updateAxesPass(axisWidths, bounds, lastPassSeriesRect) {
            const { axes } = this;
            const visited = {};
            const newAxisWidths = {};
            const visibility = {
                series: true,
                crossLines: true,
            };
            let clipSeries = false;
            const primaryTickCounts = {};
            const paddedBounds = this.applySeriesPadding(bounds);
            const crossLinePadding = lastPassSeriesRect ? this.buildCrossLinePadding(axisWidths) : {};
            const axisBound = this.buildAxisBound(paddedBounds, axisWidths, crossLinePadding, visibility);
            const seriesRect = this.buildSeriesRect(axisBound, axisWidths);
            // Set the number of ticks for continuous axes based on the available range
            // before updating the axis domain via `this.updateAxes()` as the tick count has an effect on the calculated `nice` domain extent
            axes.forEach((axis) => {
                var _a, _b;
                const { position = 'left' } = axis;
                const { clipSeries: newClipSeries, axisThickness, axisOffset, } = this.calculateAxisDimensions({
                    axis,
                    seriesRect,
                    paddedBounds,
                    axisWidths,
                    newAxisWidths,
                    primaryTickCounts,
                    clipSeries,
                    addInterAxisPadding: ((_a = visited[position]) !== null && _a !== void 0 ? _a : 0) > 0,
                });
                visited[position] = ((_b = visited[position]) !== null && _b !== void 0 ? _b : 0) + 1;
                clipSeries = clipSeries || newClipSeries;
                this.positionAxis({
                    axis,
                    axisBound,
                    axisOffset,
                    axisThickness,
                    axisWidths,
                    primaryTickCounts,
                    seriesRect,
                });
            });
            return { clipSeries, seriesRect, axisWidths: newAxisWidths, visibility, primaryTickCounts };
        }
        buildCrossLinePadding(axisWidths) {
            var _a;
            const crossLinePadding = {};
            this.axes.forEach((axis) => {
                if (axis.crossLines) {
                    axis.crossLines.forEach((crossLine) => {
                        crossLine.calculatePadding(crossLinePadding);
                    });
                }
            });
            // Reduce cross-line padding to account for overlap with axes.
            for (const [side, padding = 0] of Object.entries(crossLinePadding)) {
                crossLinePadding[side] = Math.max(padding - ((_a = axisWidths[side]) !== null && _a !== void 0 ? _a : 0), 0);
            }
            return crossLinePadding;
        }
        applySeriesPadding(bounds) {
            const paddedRect = bounds.clone();
            const reversedAxes = this.axes.slice().reverse();
            directions.forEach((dir) => {
                const padding = this.seriesArea.padding[dir];
                const axis = reversedAxes.find((axis) => axis.position === dir);
                if (axis) {
                    axis.seriesAreaPadding = padding;
                }
                else {
                    paddedRect.shrink(padding, dir);
                }
            });
            return paddedRect;
        }
        buildAxisBound(bounds, axisWidths, crossLinePadding, visibility) {
            var _a, _b, _c, _d;
            const result = bounds.clone();
            const { top = 0, right = 0, bottom = 0, left = 0 } = crossLinePadding;
            const horizontalPadding = left + right;
            const verticalPadding = top + bottom;
            const totalWidth = ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0) + ((_b = axisWidths.right) !== null && _b !== void 0 ? _b : 0) + horizontalPadding;
            const totalHeight = ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0) + ((_d = axisWidths.bottom) !== null && _d !== void 0 ? _d : 0) + verticalPadding;
            if (result.width <= totalWidth || result.height <= totalHeight) {
                // Not enough space for crossLines and series
                visibility.crossLines = false;
                visibility.series = false;
                return result;
            }
            result.x += left;
            result.y += top;
            result.width -= horizontalPadding;
            result.height -= verticalPadding;
            return result;
        }
        buildSeriesRect(axisBound, axisWidths) {
            const result = axisBound.clone();
            const { top, bottom, left, right } = axisWidths;
            result.x += left !== null && left !== void 0 ? left : 0;
            result.y += top !== null && top !== void 0 ? top : 0;
            result.width -= (left !== null && left !== void 0 ? left : 0) + (right !== null && right !== void 0 ? right : 0);
            result.height -= (top !== null && top !== void 0 ? top : 0) + (bottom !== null && bottom !== void 0 ? bottom : 0);
            // Width and height should not be negative.
            result.width = Math.max(0, result.width);
            result.height = Math.max(0, result.height);
            return result;
        }
        clampToOutsideSeriesRect(seriesRect, value, dimension, direction) {
            const { x, y, width, height } = seriesRect;
            const clampBounds = [x, y, x + width, y + height];
            const fn = direction === 1 ? Math.min : Math.max;
            const compareTo = clampBounds[(dimension === 'x' ? 0 : 1) + (direction === 1 ? 0 : 2)];
            return fn(value, compareTo);
        }
        calculateAxisDimensions(opts) {
            var _a, _b, _c, _d, _e;
            const { axis, seriesRect, paddedBounds, axisWidths, newAxisWidths, primaryTickCounts, addInterAxisPadding } = opts;
            let { clipSeries } = opts;
            const { position = 'left', direction } = axis;
            const axisLeftRightRange = (axis) => {
                if (axis instanceof CategoryAxis || axis instanceof GroupedCategoryAxis) {
                    return [0, seriesRect.height];
                }
                return [seriesRect.height, 0];
            };
            const axisOffset = (_a = newAxisWidths[position]) !== null && _a !== void 0 ? _a : 0;
            switch (position) {
                case 'top':
                case 'bottom':
                    axis.range = [0, seriesRect.width];
                    axis.gridLength = seriesRect.height;
                    break;
                case 'right':
                case 'left':
                    axis.range = axisLeftRightRange(axis);
                    axis.gridLength = seriesRect.width;
                    break;
            }
            const zoom = this.zoomManager.getAxisZoom(axis.id);
            const { min = 0, max = 1 } = zoom !== null && zoom !== void 0 ? zoom : {};
            axis.visibleRange = [min, max];
            const rangeClipped = axis.dataDomain.clipped || axis.visibleRange[0] > 0 || axis.visibleRange[1] < 1;
            clipSeries || (clipSeries = rangeClipped);
            let primaryTickCount = axis.nice ? primaryTickCounts[direction] : undefined;
            const paddedBoundsCoefficient = 0.3;
            if (axis.thickness != null && axis.thickness > 0) {
                axis.maxThickness = axis.thickness;
            }
            else if (direction === ChartAxisDirection.Y) {
                axis.maxThickness = paddedBounds.width * paddedBoundsCoefficient;
            }
            else {
                axis.maxThickness = paddedBounds.height * paddedBoundsCoefficient;
            }
            const layout = axis.calculateLayout(primaryTickCount);
            primaryTickCount = layout.primaryTickCount;
            primaryTickCounts[direction] = (_b = primaryTickCounts[direction]) !== null && _b !== void 0 ? _b : primaryTickCount;
            let axisThickness = 0;
            if (axis.thickness != null && axis.thickness > 0) {
                axisThickness = axis.thickness;
            }
            else {
                const { bbox } = layout;
                axisThickness = direction === ChartAxisDirection.X ? bbox.height : bbox.width;
            }
            // for multiple axes in the same direction and position, apply padding at the top of each inner axis (i.e. between axes).
            const axisPadding = 15;
            if (addInterAxisPadding) {
                axisThickness += axisPadding;
            }
            axisThickness = Math.ceil(axisThickness);
            newAxisWidths[position] = ((_c = newAxisWidths[position]) !== null && _c !== void 0 ? _c : 0) + axisThickness;
            axis.gridPadding = ((_d = axisWidths[position]) !== null && _d !== void 0 ? _d : 0) - ((_e = newAxisWidths[position]) !== null && _e !== void 0 ? _e : 0);
            return { clipSeries, axisThickness, axisOffset, primaryTickCount };
        }
        positionAxis(opts) {
            var _a, _b, _c, _d;
            const { axis, axisBound, axisWidths, seriesRect, axisOffset, axisThickness } = opts;
            const { position } = axis;
            switch (position) {
                case 'top':
                    axis.translation.x = axisBound.x + ((_a = axisWidths.left) !== null && _a !== void 0 ? _a : 0);
                    axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + 1 + axisOffset + axisThickness, 'y', 1);
                    break;
                case 'bottom':
                    axis.translation.x = axisBound.x + ((_b = axisWidths.left) !== null && _b !== void 0 ? _b : 0);
                    axis.translation.y = this.clampToOutsideSeriesRect(seriesRect, axisBound.y + axisBound.height + 1 - axisThickness - axisOffset, 'y', -1);
                    break;
                case 'left':
                    axis.translation.y = axisBound.y + ((_c = axisWidths.top) !== null && _c !== void 0 ? _c : 0);
                    axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisOffset + axisThickness, 'x', 1);
                    break;
                case 'right':
                    axis.translation.y = axisBound.y + ((_d = axisWidths.top) !== null && _d !== void 0 ? _d : 0);
                    axis.translation.x = this.clampToOutsideSeriesRect(seriesRect, axisBound.x + axisBound.width - axisThickness - axisOffset, 'x', -1);
                    break;
            }
            axis.updatePosition({ rotation: toRadians(axis.rotation), sideFlag: axis.label.getSideFlag() });
        }
        shouldFlipXY() {
            // Only flip the xy axes if all the series agree on flipping
            return !this.series.some((series) => !(series instanceof CartesianSeries && series.shouldFlipXY()));
        }
    }
    CartesianChart.className = 'CartesianChart';
    CartesianChart.type = 'cartesian';

    /**
     * Proxy class, to allow library users to keep a stable reference to their chart, even if we need
     * to switch concrete class (e.g. when switching between CartesianChart vs. PolarChart).
     */
    class AgChartInstanceProxy {
        static isInstance(x) {
            var _a;
            if (x instanceof AgChartInstanceProxy) {
                // Simple case.
                return true;
            }
            if (((_a = x.constructor) === null || _a === void 0 ? void 0 : _a.name) === 'AgChartInstanceProxy' && x.chart != null) {
                // instanceof can fail if mixing bundles (e.g. grid all-modules vs. standalone).
                return true;
            }
            return x.chart != null && this.validateImplementation(x);
        }
        static validateImplementation(x) {
            var _a, _b;
            const chartProps = ['getOptions', 'destroy'];
            const signatureProps = Object.keys((_b = (_a = x.constructor) === null || _a === void 0 ? void 0 : _a.prototype) !== null && _b !== void 0 ? _b : {});
            return chartProps.every((prop) => signatureProps.includes(prop));
        }
        constructor(chart) {
            this.chart = chart;
        }
        getOptions() {
            return this.chart.getOptions();
        }
        destroy() {
            this.chart.destroy();
        }
    }

    function calculateNiceSecondaryAxis(domain, primaryTickCount) {
        // Make secondary axis domain nice using strict tick count, matching the tick count from the primary axis.
        // This is to make the secondary axis grid lines/ tick positions align with the ones from the primary axis.
        let start = Math.floor(domain[0]);
        let stop = domain[1];
        start = calculateNiceStart(start, stop, primaryTickCount);
        const step = getTickStep(start, stop, primaryTickCount);
        const segments = primaryTickCount - 1;
        stop = start + segments * step;
        const d = [start, stop];
        const ticks = getTicks(start, step, primaryTickCount);
        return [d, ticks];
    }
    function calculateNiceStart(a, b, count) {
        const rawStep = Math.abs(b - a) / (count - 1);
        const order = Math.floor(Math.log10(rawStep));
        const magnitude = Math.pow(10, order);
        return Math.floor(a / magnitude) * magnitude;
    }
    function getTicks(start, step, count) {
        // power of the step will be negative if the step is a fraction (between 0 and 1)
        const stepPower = Math.floor(Math.log10(step));
        const fractionDigits = step > 0 && step < 1 ? Math.abs(stepPower) : 0;
        const f = Math.pow(10, fractionDigits);
        const ticks = new NumericTicks(fractionDigits);
        for (let i = 0; i < count; i++) {
            const tick = start + step * i;
            ticks[i] = Math.round(tick * f) / f;
        }
        return ticks;
    }
    function getTickStep(start, stop, count) {
        const segments = count - 1;
        const rawStep = (stop - start) / segments;
        return calculateNextNiceStep(rawStep);
    }
    function calculateNextNiceStep(rawStep) {
        const order = Math.floor(Math.log10(rawStep));
        const magnitude = Math.pow(10, order);
        // Make order 1
        const step = (rawStep / magnitude) * 10;
        if (step > 0 && step <= 1) {
            return magnitude / 10;
        }
        if (step > 1 && step <= 2) {
            return (2 * magnitude) / 10;
        }
        if (step > 1 && step <= 5) {
            return (5 * magnitude) / 10;
        }
        if (step > 5 && step <= 10) {
            return (10 * magnitude) / 10;
        }
        if (step > 10 && step <= 20) {
            return (20 * magnitude) / 10;
        }
        if (step > 20 && step <= 40) {
            return (40 * magnitude) / 10;
        }
        if (step > 40 && step <= 50) {
            return (50 * magnitude) / 10;
        }
        if (step > 50 && step <= 100) {
            return (100 * magnitude) / 10;
        }
        return step;
    }

    class NumberAxisTick extends AxisTick {
        constructor() {
            super(...arguments);
            this.maxSpacing = NaN;
        }
    }
    __decorate([
        Validate(AND(NUMBER_OR_NAN(1), GREATER_THAN('minSpacing'))),
        Default(NaN),
        __metadata("design:type", Number)
    ], NumberAxisTick.prototype, "maxSpacing", void 0);
    class NumberAxis extends CartesianAxis {
        constructor(moduleCtx, scale = new LinearScale()) {
            super(moduleCtx, scale);
            this.min = NaN;
            this.max = NaN;
        }
        normaliseDataDomain(d) {
            const { min, max } = this;
            const { extent, clipped } = normalisedExtentWithMetadata(d, min, max);
            return { domain: extent, clipped };
        }
        formatDatum(datum) {
            if (typeof datum === 'number') {
                return datum.toFixed(2);
            }
            else {
                Logger.warnOnce('data contains Date objects which are being plotted against a number axis, please only use a number axis for numbers.');
                return String(datum);
            }
        }
        createTick() {
            return new NumberAxisTick();
        }
        updateSecondaryAxisTicks(primaryTickCount) {
            if (this.dataDomain == null) {
                throw new Error('AG Charts - dataDomain not calculated, cannot perform tick calculation.');
            }
            if (this.dataDomain.domain.length === 0)
                return [];
            const [d, ticks] = calculateNiceSecondaryAxis(this.dataDomain.domain, primaryTickCount !== null && primaryTickCount !== void 0 ? primaryTickCount : 0);
            this.scale.nice = false;
            this.scale.domain = d;
            this.scale.update();
            return ticks;
        }
    }
    NumberAxis.className = 'NumberAxis';
    NumberAxis.type = 'number';
    __decorate([
        Validate(AND(NUMBER_OR_NAN(), LESS_THAN('max'))),
        Default(NaN),
        __metadata("design:type", Number)
    ], NumberAxis.prototype, "min", void 0);
    __decorate([
        Validate(AND(NUMBER_OR_NAN(), GREATER_THAN('min'))),
        Default(NaN),
        __metadata("design:type", Number)
    ], NumberAxis.prototype, "max", void 0);

    function NON_ZERO_NUMBER() {
        // Cannot be 0
        const message = `expecting a non-zero Number`;
        return predicateWithMessage((v) => typeof v === 'number' && v !== 0, message);
    }
    class LogAxis extends NumberAxis {
        normaliseDataDomain(d) {
            const { min, max } = this;
            const { extent, clipped } = normalisedExtentWithMetadata(d, min, max);
            const isInverted = extent[0] > extent[1];
            const crossesZero = extent[0] < 0 && extent[1] > 0;
            const hasZeroExtent = extent[0] === 0 && extent[1] === 0;
            const invalidDomain = isInverted || crossesZero || hasZeroExtent;
            if (invalidDomain) {
                d = [];
                if (crossesZero) {
                    Logger.warn(`the data domain crosses zero, the chart data cannot be rendered. See log axis documentation for more information.`);
                }
                else if (hasZeroExtent) {
                    Logger.warn(`the data domain has 0 extent, no data is rendered.`);
                }
            }
            if (extent[0] === 0) {
                extent[0] = 1;
            }
            if (extent[1] === 0) {
                extent[1] = -1;
            }
            return { domain: extent, clipped };
        }
        set base(value) {
            this.scale.base = value;
        }
        get base() {
            return this.scale.base;
        }
        constructor(moduleCtx) {
            super(moduleCtx, new LogScale());
            this.min = NaN;
            this.max = NaN;
        }
    }
    LogAxis.className = 'LogAxis';
    LogAxis.type = 'log';
    __decorate([
        Validate(AND(NUMBER_OR_NAN(), LESS_THAN('max'), NON_ZERO_NUMBER())),
        Default(NaN),
        __metadata("design:type", Number)
    ], LogAxis.prototype, "min", void 0);
    __decorate([
        Validate(AND(NUMBER_OR_NAN(), GREATER_THAN('min'), NON_ZERO_NUMBER())),
        Default(NaN),
        __metadata("design:type", Number)
    ], LogAxis.prototype, "max", void 0);

    class TimeAxisTick extends AxisTick {
        constructor() {
            super(...arguments);
            this.maxSpacing = NaN;
        }
    }
    __decorate([
        Validate(AND(NUMBER_OR_NAN(1), GREATER_THAN('minSpacing'))),
        Default(NaN),
        __metadata("design:type", Number)
    ], TimeAxisTick.prototype, "maxSpacing", void 0);
    class TimeAxis extends CartesianAxis {
        constructor(moduleCtx) {
            super(moduleCtx, new TimeScale());
            this.datumFormat = '%m/%d/%y, %H:%M:%S';
            this.min = undefined;
            this.max = undefined;
            const { scale } = this;
            this.refreshScale();
            this.datumFormatter = scale.tickFormat({
                specifier: this.datumFormat,
            });
        }
        normaliseDataDomain(d) {
            var _a;
            let { min, max } = this;
            let clipped = false;
            if (typeof min === 'number') {
                min = new Date(min);
            }
            if (typeof max === 'number') {
                max = new Date(max);
            }
            if (d.length > 2) {
                d = ((_a = extent(d)) !== null && _a !== void 0 ? _a : [0, 1000]).map((x) => new Date(x));
            }
            if (min instanceof Date) {
                clipped || (clipped = min > d[0]);
                d = [min, d[1]];
            }
            if (max instanceof Date) {
                clipped || (clipped = max < d[1]);
                d = [d[0], max];
            }
            if (d[0] > d[1]) {
                d = [];
            }
            return { domain: d, clipped };
        }
        createTick() {
            return new TimeAxisTick();
        }
        onLabelFormatChange(ticks, format) {
            if (format) {
                super.onLabelFormatChange(ticks, format);
            }
            else {
                // For time axis labels to look nice, even if date format wasn't set.
                this.labelFormatter = this.scale.tickFormat({ ticks });
            }
        }
        formatDatum(datum) {
            var _a;
            return (_a = this.moduleCtx.callbackCache.call(this.datumFormatter, datum)) !== null && _a !== void 0 ? _a : String(datum);
        }
        calculatePadding(_min, _max) {
            // numbers in domain correspond to Unix timestamps
            // automatically expand domain by 1 in forward direction
            return [0, 1];
        }
    }
    TimeAxis.className = 'TimeAxis';
    TimeAxis.type = 'time';
    __decorate([
        Validate(AND(OPT_DATE_OR_DATETIME_MS, LESS_THAN('max'))),
        __metadata("design:type", Object)
    ], TimeAxis.prototype, "min", void 0);
    __decorate([
        Validate(AND(OPT_DATE_OR_DATETIME_MS, GREATER_THAN('min'))),
        __metadata("design:type", Object)
    ], TimeAxis.prototype, "max", void 0);

    const AXIS_CONSTRUCTORS = {
        [NumberAxis.type]: NumberAxis,
        [CategoryAxis.type]: CategoryAxis,
        [TimeAxis.type]: TimeAxis,
        [GroupedCategoryAxis.type]: GroupedCategoryAxis,
        [LogAxis.type]: LogAxis,
    };
    function registerAxis(axisType, ctor) {
        AXIS_CONSTRUCTORS[axisType] = ctor;
    }
    function getAxis(axisType, moduleCtx) {
        const axisConstructor = AXIS_CONSTRUCTORS[axisType];
        if (axisConstructor) {
            return new axisConstructor(moduleCtx);
        }
        throw new Error(`AG Charts - unknown axis type: ${axisType}`);
    }
    const AXIS_TYPES = {
        has(axisType) {
            return Object.prototype.hasOwnProperty.call(AXIS_CONSTRUCTORS, axisType);
        },
        get axesTypes() {
            return Object.keys(AXIS_CONSTRUCTORS);
        },
    };
    const AXIS_THEME_TEMPLATES = {};
    function registerAxisThemeTemplate(axisType, theme) {
        AXIS_THEME_TEMPLATES[axisType] = theme;
    }
    function getAxisThemeTemplate(axisType) {
        var _a;
        return (_a = AXIS_THEME_TEMPLATES[axisType]) !== null && _a !== void 0 ? _a : {};
    }

    const EXPECTED_ENTERPRISE_MODULES = [
        { type: 'root', optionsKey: 'animation', chartTypes: ['cartesian', 'polar', 'hierarchy'] },
        {
            type: 'root',
            optionsKey: 'background',
            chartTypes: ['cartesian', 'polar', 'hierarchy'],
            optionsInnerKey: 'image',
        },
        { type: 'root', optionsKey: 'contextMenu', chartTypes: ['cartesian', 'polar', 'hierarchy'] },
        { type: 'root', optionsKey: 'zoom', chartTypes: ['cartesian'] },
        {
            type: 'legend',
            optionsKey: 'gradientLegend',
            chartTypes: ['cartesian', 'polar', 'hierarchy'],
            identifier: 'gradient',
        },
        { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'angle-category' },
        { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'angle-number' },
        { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'radius-category' },
        { type: 'axis', optionsKey: 'axes[]', chartTypes: ['polar'], identifier: 'radius-number' },
        { type: 'axis-option', optionsKey: 'crosshair', chartTypes: ['cartesian'] },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'box-plot' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'bullet' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'heatmap' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'nightingale' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radar-area' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radar-line' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radial-bar' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['polar'], identifier: 'radial-column' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'range-area' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'range-bar' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['hierarchy'], identifier: 'sunburst' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['hierarchy'], identifier: 'treemap' },
        { type: 'series', optionsKey: 'series[]', chartTypes: ['cartesian'], identifier: 'waterfall' },
        { type: 'series-option', optionsKey: 'errorBar', chartTypes: ['cartesian'], identifier: 'error-bars' },
    ];
    function isEnterpriseSeriesType(type) {
        return EXPECTED_ENTERPRISE_MODULES.some((s) => s.type === 'series' && s.identifier === type);
    }
    function getEnterpriseSeriesChartTypes(type) {
        var _a;
        return (_a = EXPECTED_ENTERPRISE_MODULES.find((s) => s.type === 'series' && s.identifier === type)) === null || _a === void 0 ? void 0 : _a.chartTypes;
    }
    function isEnterpriseSeriesTypeLoaded(type) {
        var _a, _b;
        return ((_b = (_a = EXPECTED_ENTERPRISE_MODULES.find((s) => s.type === 'series' && s.identifier === type)) === null || _a === void 0 ? void 0 : _a.useCount) !== null && _b !== void 0 ? _b : 0) > 0;
    }
    function isEnterpriseCartesian(seriesType) {
        var _a;
        const type = (_a = getEnterpriseSeriesChartTypes(seriesType)) === null || _a === void 0 ? void 0 : _a.find((v) => v === 'cartesian');
        return type === 'cartesian';
    }
    function isEnterprisePolar(seriesType) {
        var _a;
        const type = (_a = getEnterpriseSeriesChartTypes(seriesType)) === null || _a === void 0 ? void 0 : _a.find((v) => v === 'polar');
        return type === 'polar';
    }
    function isEnterpriseHierarchy(seriesType) {
        var _a;
        const type = (_a = getEnterpriseSeriesChartTypes(seriesType)) === null || _a === void 0 ? void 0 : _a.find((v) => v === 'hierarchy');
        return type === 'hierarchy';
    }
    function verifyIfModuleExpected(module) {
        var _a;
        if (module.packageType !== 'enterprise') {
            throw new Error('AG Charts - internal configuration error, only enterprise modules need verification.');
        }
        const stub = EXPECTED_ENTERPRISE_MODULES.find((s) => {
            return (s.type === module.type &&
                s.optionsKey === module.optionsKey &&
                s.identifier === module.identifier &&
                module.chartTypes.every((t) => s.chartTypes.includes(t)));
        });
        if (stub) {
            (_a = stub.useCount) !== null && _a !== void 0 ? _a : (stub.useCount = 0);
            stub.useCount++;
        }
        return stub != null;
    }
    function getUnusedExpectedModules() {
        return EXPECTED_ENTERPRISE_MODULES.filter(({ useCount }) => useCount == null || useCount === 0);
    }

    const LEGEND_KEYS = {
        category: 'legend',
    };
    function registerLegend(type, key, ctr, theme) {
        LEGEND_KEYS[type] = key;
        LEGEND_THEME_TEMPLATES[key] = theme;
    }
    const LEGEND_THEME_TEMPLATES = {};
    function getLegendThemeTemplates() {
        return LEGEND_THEME_TEMPLATES;
    }
    function getLegendKeys() {
        return LEGEND_KEYS;
    }

    class Background extends BaseModuleInstance {
        constructor(ctx) {
            var _a;
            super();
            this.node = new Group({ name: 'background', zIndex: Layers.SERIES_BACKGROUND_ZINDEX });
            this.rectNode = new Rect();
            this.visible = true;
            this.fill = 'white';
            // placeholder for enterprise module
            this.image = undefined;
            this.node.appendChild(this.rectNode);
            (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(this.node);
            this.destroyFns.push(() => { var _a; return (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(this.node); }, ctx.layoutService.addListener('layout-complete', (e) => this.onLayoutComplete(e)));
        }
        onLayoutComplete(e) {
            const { width, height } = e.chart;
            this.rectNode.width = width;
            this.rectNode.height = height;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        ProxyPropertyOnWrite('node', 'visible'),
        __metadata("design:type", Boolean)
    ], Background.prototype, "visible", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        ProxyPropertyOnWrite('rectNode', 'fill'),
        __metadata("design:type", String)
    ], Background.prototype, "fill", void 0);

    const BackgroundModule = {
        type: 'root',
        optionsKey: 'background',
        packageType: 'community',
        chartTypes: ['cartesian', 'polar', 'hierarchy'],
        instanceConstructor: Background,
    };

    class NavigatorHandle {
        set fill(value) {
            this.rh.fill = value;
        }
        get fill() {
            return this.rh.fill;
        }
        set stroke(value) {
            this.rh.stroke = value;
        }
        get stroke() {
            return this.rh.stroke;
        }
        set strokeWidth(value) {
            this.rh.strokeWidth = value;
        }
        get strokeWidth() {
            return this.rh.strokeWidth;
        }
        set width(value) {
            this.rh.width = value;
        }
        get width() {
            return this.rh.width;
        }
        set height(value) {
            this.rh.height = value;
        }
        get height() {
            return this.rh.height;
        }
        set gripLineGap(value) {
            this.rh.gripLineGap = value;
        }
        get gripLineGap() {
            return this.rh.gripLineGap;
        }
        set gripLineLength(value) {
            this.rh.gripLineLength = value;
        }
        get gripLineLength() {
            return this.rh.gripLineLength;
        }
        constructor(rangeHandle) {
            this.rh = rangeHandle;
        }
    }

    class NavigatorMask {
        set fill(value) {
            this.rm.fill = value;
        }
        get fill() {
            return this.rm.fill;
        }
        set stroke(value) {
            this.rm.stroke = value;
        }
        get stroke() {
            return this.rm.stroke;
        }
        set strokeWidth(value) {
            this.rm.strokeWidth = value;
        }
        get strokeWidth() {
            return this.rm.strokeWidth;
        }
        set fillOpacity(value) {
            this.rm.fillOpacity = value;
        }
        get fillOpacity() {
            return this.rm.fillOpacity;
        }
        constructor(rangeMask) {
            this.rm = rangeMask;
        }
    }

    class RangeHandle extends Path {
        constructor() {
            super(...arguments);
            this._fill = '#f2f2f2';
            this._stroke = '#999999';
            this._strokeWidth = 1;
            this._lineCap = 'square';
            this._centerX = 0;
            this._centerY = 0;
            // Use an even number for better looking results.
            this._width = 8;
            // Use an even number for better looking results.
            this._gripLineGap = 2;
            // Use an even number for better looking results.
            this._gripLineLength = 8;
            this._height = 16;
        }
        set centerX(value) {
            if (this._centerX !== value) {
                this._centerX = value;
                this.dirtyPath = true;
            }
        }
        get centerX() {
            return this._centerX;
        }
        set centerY(value) {
            if (this._centerY !== value) {
                this._centerY = value;
                this.dirtyPath = true;
            }
        }
        get centerY() {
            return this._centerY;
        }
        set width(value) {
            if (this._width !== value) {
                this._width = value;
                this.dirtyPath = true;
            }
        }
        get width() {
            return this._width;
        }
        set gripLineGap(value) {
            if (this._gripLineGap !== value) {
                this._gripLineGap = value;
                this.dirtyPath = true;
            }
        }
        get gripLineGap() {
            return this._gripLineGap;
        }
        set gripLineLength(value) {
            if (this._gripLineLength !== value) {
                this._gripLineLength = value;
                this.dirtyPath = true;
            }
        }
        get gripLineLength() {
            return this._gripLineLength;
        }
        set height(value) {
            if (this._height !== value) {
                this._height = value;
                this.dirtyPath = true;
            }
        }
        get height() {
            return this._height;
        }
        computeBBox() {
            const { centerX, centerY, width, height } = this;
            const x = centerX - width / 2;
            const y = centerY - height / 2;
            return new BBox(x, y, width, height);
        }
        isPointInPath(x, y) {
            const point = this.transformPoint(x, y);
            const bbox = this.computeBBox();
            return bbox.containsPoint(point.x, point.y);
        }
        updatePath() {
            const { path, centerX, centerY, width, height } = this;
            path.clear();
            const x = centerX - width / 2;
            const y = centerY - height / 2;
            const ax = this.align(x);
            const ay = this.align(y);
            const axw = ax + this.align(x, width);
            const ayh = ay + this.align(y, height);
            // Handle.
            path.moveTo(ax, ay);
            path.lineTo(axw, ay);
            path.lineTo(axw, ayh);
            path.lineTo(ax, ayh);
            path.lineTo(ax, ay);
            // Grip lines.
            const dx = this.gripLineGap / 2;
            const dy = this.gripLineLength / 2;
            path.moveTo(this.align(centerX - dx), this.align(centerY - dy));
            path.lineTo(this.align(centerX - dx), this.align(centerY + dy));
            path.moveTo(this.align(centerX + dx), this.align(centerY - dy));
            path.lineTo(this.align(centerX + dx), this.align(centerY + dy));
        }
    }
    RangeHandle.className = 'RangeHandle';
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", Object)
    ], RangeHandle.prototype, "_fill", void 0);
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", Object)
    ], RangeHandle.prototype, "_stroke", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], RangeHandle.prototype, "_strokeWidth", void 0);
    __decorate([
        Validate(LINE_CAP),
        __metadata("design:type", Object)
    ], RangeHandle.prototype, "_lineCap", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], RangeHandle.prototype, "_width", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], RangeHandle.prototype, "_gripLineGap", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], RangeHandle.prototype, "_gripLineLength", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], RangeHandle.prototype, "_height", void 0);

    function markDirtyOnChange(newValue, oldValue) {
        if (newValue !== oldValue) {
            this.dirtyPath = true;
        }
    }
    class RangeMask extends Path {
        constructor() {
            super(...arguments);
            this.x = 0;
            this.y = 0;
            this.width = 200;
            this.height = 30;
            this.minRange = 0.05;
            this._min = 0;
            this._max = 1;
        }
        set min(value) {
            var _a;
            value = clamp(0, value, this.max - this.minRange);
            if (this._min !== value && !isNaN(value)) {
                this._min = value;
                this.dirtyPath = true;
                (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);
            }
        }
        get min() {
            return this._min;
        }
        set max(value) {
            var _a;
            value = clamp(this.min + this.minRange, value, 1);
            if (this._max !== value && !isNaN(value)) {
                this._max = value;
                this.dirtyPath = true;
                (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);
            }
        }
        get max() {
            return this._max;
        }
        computeBBox() {
            const { x, y, width, height } = this;
            return new BBox(x, y, width, height);
        }
        computeVisibleRangeBBox() {
            const { x, y, width, height, min, max } = this;
            const minX = x + width * min;
            const maxX = x + width * max;
            return new BBox(minX, y, maxX - minX, height);
        }
        updatePath() {
            const { path, x, y, width, height, min, max } = this;
            path.clear();
            const ax = this.align(x);
            const ay = this.align(y);
            const axw = ax + this.align(x, width);
            const ayh = ay + this.align(y, height);
            // Whole range.
            path.moveTo(ax, ay);
            path.lineTo(axw, ay);
            path.lineTo(axw, ayh);
            path.lineTo(ax, ayh);
            path.lineTo(ax, ay);
            const minX = this.align(x + width * min);
            const maxX = this.align(x + width * max);
            // Visible range.
            path.moveTo(minX, ay);
            path.lineTo(minX, ayh);
            path.lineTo(maxX, ayh);
            path.lineTo(maxX, ay);
            path.lineTo(minX, ay);
        }
    }
    RangeMask.className = 'RangeMask';
    __decorate([
        ActionOnSet({ changeValue: markDirtyOnChange }),
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], RangeMask.prototype, "x", void 0);
    __decorate([
        ActionOnSet({ changeValue: markDirtyOnChange }),
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], RangeMask.prototype, "y", void 0);
    __decorate([
        ActionOnSet({ changeValue: markDirtyOnChange }),
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], RangeMask.prototype, "width", void 0);
    __decorate([
        ActionOnSet({ changeValue: markDirtyOnChange }),
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], RangeMask.prototype, "height", void 0);
    __decorate([
        Validate(NUMBER$1()),
        __metadata("design:type", Number)
    ], RangeMask.prototype, "_min", void 0);
    __decorate([
        Validate(NUMBER$1()),
        __metadata("design:type", Number)
    ], RangeMask.prototype, "_max", void 0);

    class RangeSelector extends Group {
        set x(value) {
            this.mask.x = value;
            this.updateHandles();
        }
        get x() {
            return this.mask.x;
        }
        set y(value) {
            this.mask.y = value;
            this.updateHandles();
        }
        get y() {
            return this.mask.y;
        }
        set width(value) {
            this.mask.width = value;
            this.updateHandles();
        }
        get width() {
            return this.mask.width;
        }
        set height(value) {
            this.mask.height = value;
            this.updateHandles();
        }
        get height() {
            return this.mask.height;
        }
        set min(value) {
            this.mask.min = value;
        }
        get min() {
            return this.mask.min;
        }
        set max(value) {
            this.mask.max = value;
        }
        get max() {
            return this.mask.max;
        }
        constructor() {
            super({ name: 'rangeSelectorGroup' });
            this.minHandle = new RangeHandle();
            this.maxHandle = new RangeHandle();
            this.mask = (() => {
                const { x, y, width, height, min, max } = RangeSelector.defaults;
                const mask = new RangeMask();
                mask.x = x;
                mask.y = y;
                mask.width = width;
                mask.height = height;
                mask.min = min;
                mask.max = max;
                const { minHandle, maxHandle } = this;
                minHandle.centerX = x;
                maxHandle.centerX = x + width;
                minHandle.centerY = maxHandle.centerY = y + height / 2;
                this.append([mask, minHandle, maxHandle]);
                mask.onRangeChange = () => {
                    var _a;
                    this.updateHandles();
                    (_a = this.onRangeChange) === null || _a === void 0 ? void 0 : _a.call(this);
                };
                return mask;
            })();
            this._x = RangeSelector.defaults.x;
            this._y = RangeSelector.defaults.y;
            this._width = RangeSelector.defaults.width;
            this._height = RangeSelector.defaults.height;
            this._min = RangeSelector.defaults.min;
            this._max = RangeSelector.defaults.max;
            this.isContainerNode = true;
        }
        updateHandles() {
            const { minHandle, maxHandle, x, y, width, height, mask } = this;
            minHandle.centerX = x + width * mask.min;
            maxHandle.centerX = x + width * mask.max;
            minHandle.centerY = maxHandle.centerY = y + height / 2;
        }
        computeBBox() {
            return this.mask.computeBBox();
        }
        computeVisibleRangeBBox() {
            return this.mask.computeVisibleRangeBBox();
        }
        render(renderCtx) {
            const { ctx, forceRender, stats } = renderCtx;
            if (this.dirty === RedrawType.NONE && !forceRender) {
                if (stats)
                    stats.nodesSkipped++;
                return;
            }
            this.computeTransformMatrix();
            this.matrix.toContext(ctx);
            const { mask, minHandle, maxHandle } = this;
            [mask, minHandle, maxHandle].forEach((child) => {
                if (child.visible && (forceRender || child.dirty > RedrawType.NONE)) {
                    ctx.save();
                    child.render(Object.assign(Object.assign({}, renderCtx), { ctx, forceRender }));
                    ctx.restore();
                }
            });
            this.markClean({ force: true });
            if (stats)
                stats.nodesRendered++;
        }
    }
    RangeSelector.className = 'Range';
    RangeSelector.defaults = {
        x: 0,
        y: 0,
        width: 200,
        height: 30,
        min: 0,
        max: 1,
    };

    class Navigator extends BaseModuleInstance {
        set width(value) {
            this.rs.width = value;
        }
        get width() {
            return this.rs.width;
        }
        set height(value) {
            this.rs.height = value;
        }
        get height() {
            return this.rs.height;
        }
        set min(value) {
            this.rs.min = value;
        }
        get min() {
            return this.rs.min;
        }
        set max(value) {
            this.rs.max = value;
        }
        get max() {
            return this.rs.max;
        }
        set visible(value) {
            this._visible = value;
            this.updateGroupVisibility();
        }
        get visible() {
            return this._visible;
        }
        updateGroupVisibility() {
            const visible = this.enabled && this.visible;
            this.rs.visible = visible;
            if (visible) {
                this.ctx.zoomManager.updateZoom('navigator', {
                    x: { min: this.rs.min, max: this.rs.max },
                    y: { min: 0, max: 1 },
                });
            }
            else {
                this.ctx.zoomManager.updateZoom('navigator');
            }
        }
        constructor(ctx) {
            var _a;
            super();
            this.ctx = ctx;
            this.rs = new RangeSelector();
            // Wrappers to allow option application to the scene graph nodes.
            this.mask = new NavigatorMask(this.rs.mask);
            this.minHandle = new NavigatorHandle(this.rs.minHandle);
            this.maxHandle = new NavigatorHandle(this.rs.maxHandle);
            this.minHandleDragging = false;
            this.maxHandleDragging = false;
            this.panHandleOffset = NaN;
            this.enabled = false;
            this.margin = 10;
            this._visible = true;
            this.rs.onRangeChange = () => ctx.zoomManager.updateZoom('navigator', {
                x: { min: this.rs.min, max: this.rs.max },
                y: { min: 0, max: 1 },
            });
            (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.appendChild(this.rs);
            const interactionOpts = { bypassPause: ['animation'] };
            this.destroyFns.push(ctx.interactionManager.addListener('drag-start', (event) => this.onDragStart(event), interactionOpts), ctx.interactionManager.addListener('drag', (event) => this.onDrag(event), interactionOpts), ctx.interactionManager.addListener('hover', (event) => this.onDrag(event), interactionOpts), ctx.interactionManager.addListener('drag-end', () => this.onDragStop(), interactionOpts), ctx.layoutService.addListener('before-series', (event) => this.layout(event)), ctx.layoutService.addListener('layout-complete', (event) => this.layoutComplete(event)), () => { var _a; return (_a = ctx.scene.root) === null || _a === void 0 ? void 0 : _a.removeChild(this.rs); }, () => this.ctx.zoomManager.updateZoom('navigator'));
            this.updateGroupVisibility();
        }
        layout({ shrinkRect }) {
            if (this.enabled) {
                const navigatorTotalHeight = this.rs.height + this.margin;
                shrinkRect.shrink(navigatorTotalHeight, 'bottom');
                this.rs.y = shrinkRect.y + shrinkRect.height + this.margin;
            }
            return { shrinkRect };
        }
        layoutComplete({ series: { rect, visible } }) {
            if (this.enabled && visible) {
                this.rs.x = rect.x;
                this.rs.width = rect.width;
            }
            this.visible = visible;
        }
        onDragStart(offset) {
            if (!this.enabled) {
                return;
            }
            const { offsetX, offsetY } = offset;
            const { rs } = this;
            const { minHandle, maxHandle, x, width, min } = rs;
            const visibleRange = rs.computeVisibleRangeBBox();
            if (!(this.minHandleDragging || this.maxHandleDragging)) {
                if (minHandle.containsPoint(offsetX, offsetY)) {
                    this.minHandleDragging = true;
                }
                else if (maxHandle.containsPoint(offsetX, offsetY)) {
                    this.maxHandleDragging = true;
                }
                else if (visibleRange.containsPoint(offsetX, offsetY)) {
                    this.panHandleOffset = (offsetX - x) / width - min;
                }
            }
        }
        onDrag(offset) {
            if (!this.enabled) {
                return;
            }
            const { rs, panHandleOffset } = this;
            const { x, y, width, height, minHandle, maxHandle } = rs;
            const { offsetX, offsetY } = offset;
            const minX = x + width * rs.min;
            const maxX = x + width * rs.max;
            const visibleRange = new BBox(minX, y, maxX - minX, height);
            const getRatio = () => Math.min(Math.max((offsetX - x) / width, 0), 1);
            if (minHandle.containsPoint(offsetX, offsetY) || maxHandle.containsPoint(offsetX, offsetY)) {
                this.ctx.cursorManager.updateCursor('navigator', 'ew-resize');
            }
            else if (visibleRange.containsPoint(offsetX, offsetY)) {
                this.ctx.cursorManager.updateCursor('navigator', 'grab');
            }
            else {
                this.ctx.cursorManager.updateCursor('navigator');
            }
            if (this.minHandleDragging) {
                rs.min = getRatio();
            }
            else if (this.maxHandleDragging) {
                rs.max = getRatio();
            }
            else if (!isNaN(panHandleOffset)) {
                const span = rs.max - rs.min;
                const min = Math.min(getRatio() - panHandleOffset, 1 - span);
                if (min <= rs.min) {
                    // pan left
                    rs.min = min;
                    rs.max = rs.min + span;
                }
                else {
                    // pan right
                    rs.max = min + span;
                    rs.min = rs.max - span;
                }
            }
        }
        onDragStop() {
            this.stopHandleDragging();
        }
        stopHandleDragging() {
            this.minHandleDragging = this.maxHandleDragging = false;
            this.panHandleOffset = NaN;
        }
    }
    __decorate([
        ActionOnSet({
            changeValue(newValue) {
                if (newValue) {
                    this.min = 0;
                    this.max = 1;
                }
                this.updateGroupVisibility();
            },
        }),
        Validate(BOOLEAN),
        __metadata("design:type", Object)
    ], Navigator.prototype, "enabled", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], Navigator.prototype, "margin", void 0);

    const NavigatorModule = {
        type: 'root',
        optionsKey: 'navigator',
        packageType: 'community',
        chartTypes: ['cartesian'],
        instanceConstructor: Navigator,
        themeTemplate: {
            navigator: {
                enabled: false,
                height: 30,
                mask: {
                    fill: '#999999',
                    stroke: '#999999',
                    strokeWidth: 1,
                    fillOpacity: 0.2,
                },
                minHandle: {
                    fill: '#f2f2f2',
                    stroke: '#999999',
                    strokeWidth: 1,
                    width: 8,
                    height: 16,
                    gripLineGap: 2,
                    gripLineLength: 8,
                },
                maxHandle: {
                    fill: '#f2f2f2',
                    stroke: '#999999',
                    strokeWidth: 1,
                    width: 8,
                    height: 16,
                    gripLineGap: 2,
                    gripLineLength: 8,
                },
            },
        },
    };

    const singleSeriesPaletteFactory = ({ takeColors }) => {
        const { fills: [fill], strokes: [stroke], } = takeColors(1);
        return { fill, stroke };
    };
    const markerPaletteFactory = (params) => {
        const { fill, stroke } = singleSeriesPaletteFactory(params);
        return { marker: { fill, stroke } };
    };

    const FONT_SIZE = {
        SMALL: 12,
        MEDIUM: 13,
        LARGE: 17,
    };
    const BOLD = 'bold';
    const NORMAL = 'normal';
    const BOTTOM = 'bottom';
    const LEFT = 'left';
    const TOP = 'top';
    const CARTESIAN_AXIS_POSITIONS = {
        BOTTOM,
        LEFT,
        TOP,
    };
    const CATEGORY = 'category';
    const NUMBER = 'number';
    const TIME = 'time';
    const LOG = 'log';
    const CARTESIAN_AXIS_TYPES = {
        CATEGORY,
        NUMBER,
        TIME,
        LOG,
    };
    const ANGLE_CATEGORY = 'angle-category';
    const ANGLE_NUMBER = 'angle-number';
    const RADIUS_CATEGORY = 'radius-category';
    const RADIUS_NUMBER = 'radius-number';
    const POLAR_AXIS_TYPES = {
        ANGLE_CATEGORY,
        ANGLE_NUMBER,
        RADIUS_CATEGORY,
        RADIUS_NUMBER,
    };
    const CIRCLE = 'circle';

    const TYPES = {};
    const DEFAULTS = {};
    const CHART_TYPES = {
        has(seriesType) {
            return Object.prototype.hasOwnProperty.call(TYPES, seriesType);
        },
        isCartesian(seriesType) {
            return TYPES[seriesType] === 'cartesian';
        },
        isPolar(seriesType) {
            return TYPES[seriesType] === 'polar';
        },
        isHierarchy(seriesType) {
            return TYPES[seriesType] === 'hierarchy';
        },
        get seriesTypes() {
            return Object.keys(TYPES);
        },
        get cartesianTypes() {
            return this.seriesTypes.filter((t) => this.isCartesian(t));
        },
        get polarTypes() {
            return this.seriesTypes.filter((t) => this.isPolar(t));
        },
        get hierarchyTypes() {
            return this.seriesTypes.filter((t) => this.isHierarchy(t));
        },
    };
    function registerChartSeriesType(seriesType, chartType) {
        TYPES[seriesType] = chartType;
    }
    function registerChartDefaults(chartType, defaults) {
        var _a;
        DEFAULTS[chartType] = jsonMerge([(_a = DEFAULTS[chartType]) !== null && _a !== void 0 ? _a : {}, defaults]);
    }
    function getChartDefaults(chartType) {
        var _a;
        return (_a = DEFAULTS[chartType]) !== null && _a !== void 0 ? _a : {};
    }
    function getChartType(seriesType) {
        var _a;
        return (_a = TYPES[seriesType]) !== null && _a !== void 0 ? _a : 'unknown';
    }

    function optionsType(input) {
        var _a, _b, _c, _d;
        return (_d = (_a = input.type) !== null && _a !== void 0 ? _a : (_c = (_b = input.series) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.type) !== null && _d !== void 0 ? _d : 'line';
    }
    function isAgCartesianChartOptions(input) {
        const specifiedType = optionsType(input);
        if (specifiedType == null) {
            return true;
        }
        if (specifiedType === 'cartesian') {
            Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);
            return true;
        }
        return CHART_TYPES.isCartesian(specifiedType) || isEnterpriseCartesian(specifiedType);
    }
    function isAgHierarchyChartOptions(input) {
        const specifiedType = optionsType(input);
        if (specifiedType == null) {
            return false;
        }
        if (specifiedType === 'hierarchy') {
            Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);
            return true;
        }
        return CHART_TYPES.isHierarchy(specifiedType) || isEnterpriseHierarchy(specifiedType);
    }
    function isAgPolarChartOptions(input) {
        const specifiedType = optionsType(input);
        if (specifiedType == null) {
            return false;
        }
        if (specifiedType === 'polar') {
            Logger.warnOnce(`type '${specifiedType}' is deprecated, use a series type instead`);
            return true;
        }
        return CHART_TYPES.isPolar(specifiedType) || isEnterprisePolar(specifiedType);
    }
    function isSeriesOptionType(input) {
        if (input == null) {
            return false;
        }
        return CHART_TYPES.has(input);
    }
    function isAxisOptionType(input) {
        if (input == null) {
            return false;
        }
        return AXIS_TYPES.has(input);
    }

    const DEFAULT_CARTESIAN_CHART_OVERRIDES = {
        axes: [
            {
                type: CARTESIAN_AXIS_TYPES.NUMBER,
                position: CARTESIAN_AXIS_POSITIONS.LEFT,
            },
            {
                type: CARTESIAN_AXIS_TYPES.CATEGORY,
                position: CARTESIAN_AXIS_POSITIONS.BOTTOM,
            },
        ],
    };
    function swapAxes(opts) {
        var _a;
        if (!isAgCartesianChartOptions(opts)) {
            return opts;
        }
        const [axis0, axis1] = (_a = opts.axes) !== null && _a !== void 0 ? _a : [];
        return Object.assign(Object.assign({}, opts), { axes: [
                Object.assign(Object.assign({}, axis0), { position: axis1.position }),
                Object.assign(Object.assign({}, axis1), { position: axis0.position }),
            ] });
    }
    function resolveModuleConflicts(opts) {
        var _a, _b, _c, _d;
        const conflictOverrides = {};
        for (const [source, conflicts] of MODULE_CONFLICTS.entries()) {
            if (opts[source] == null || !conflicts.length) {
                continue;
            }
            (_a = conflictOverrides[source]) !== null && _a !== void 0 ? _a : (conflictOverrides[source] = {});
            for (const conflict of conflicts) {
                if (((_b = opts[source]) === null || _b === void 0 ? void 0 : _b.enabled) && ((_c = opts[conflict]) === null || _c === void 0 ? void 0 : _c.enabled)) {
                    Logger.warnOnce(`the [${source}] module can not be used at the same time as [${conflict}], it will be disabled.`);
                    conflictOverrides[source].enabled = false;
                }
                else {
                    conflictOverrides[source].enabled = (_d = opts[source]) === null || _d === void 0 ? void 0 : _d.enabled;
                }
            }
        }
        return conflictOverrides;
    }

    const EXTENDS_CHART_DEFAULTS = Symbol('extends-chart-defaults');
    const EXTENDS_LEGEND_DEFAULTS = Symbol('extends-legend-defaults');
    const EXTENDS_LEGEND_ITEM_DEFAULTS = Symbol('extends-legend-item-defaults');
    const EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS = Symbol('extends-legend-item-marker-defaults');
    const EXTENDS_AXES_DEFAULTS = Symbol('extends-axes-defaults');
    const EXTENDS_AXES_LABEL_DEFAULTS = Symbol('extends-axes-label-defaults');
    const EXTENDS_AXES_LINE_DEFAULTS = Symbol('extends-axes-line-defaults');
    const EXTENDS_AXES_TICK_DEFAULTS = Symbol('extends-axes-tick-defaults');
    const EXTENDS_AXES_GRID_LINE_DEFAULTS = Symbol('extends-axes-grid-line-defaults');
    const EXTENDS_SERIES_DEFAULTS = Symbol('extends-series-defaults');
    const EXTENDS_CARTESIAN_MARKER_DEFAULTS = Symbol('extends-cartesian-marker-defaults');
    const OVERRIDE_SERIES_LABEL_DEFAULTS = Symbol('override-series-label-defaults');
    const DEFAULT_FONT_FAMILY = Symbol('default-font');
    const DEFAULT_LABEL_COLOUR = Symbol('default-label-colour');
    const DEFAULT_INVERTED_LABEL_COLOUR = Symbol('default-inverted-label-colour');
    const DEFAULT_INSIDE_SERIES_LABEL_COLOUR = Symbol('default-inside-series-label-colour');
    const DEFAULT_MUTED_LABEL_COLOUR = Symbol('default-muted-label-colour');
    const DEFAULT_AXIS_GRID_COLOUR = Symbol('default-axis-grid-colour');
    const DEFAULT_AXIS_LINE_COLOUR = Symbol('default-axis-line-colour');
    const DEFAULT_CROSS_LINES_COLOUR = Symbol('default-cross-lines-colour');
    const DEFAULT_BACKGROUND_COLOUR = Symbol('default-background-colour');
    const DEFAULT_SHADOW_COLOUR = Symbol('default-shadow-colour');
    const DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS = Symbol('default-waterfall-series-positive-colors');
    const DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS = Symbol('default-waterfall-series-negative-colors');
    const DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS = Symbol('default-waterfall-series-total-colors');
    const DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE = Symbol('default-waterfall-series-connector-line-stroke');
    const DEFAULT_POLAR_SERIES_STROKE = Symbol('default-polar-series-stroke');
    const DEFAULT_DIVERGING_SERIES_COLOUR_RANGE = Symbol('default-diverging-series-colour-range');
    const DEFAULT_HIERARCHY_FILLS = Symbol('default-hierarchy-fills');
    const DEFAULT_HIERARCHY_STROKES = Symbol('default-hierarchy-strokes');

    /**
     * Implements a per-path "to/from" animation.
     *
     * @param id prefix for all animation ids generated by this call
     * @param animationManager used to schedule generated animations
     * @param paths contains paths to be animated
     * @param intermediateFn callback to update path
     * @param extraOpts optional additional animation properties to pass to AnimationManager#animate.
     */
    function pathMotion(groupId, subId, animationManager, paths, fns) {
        const { defaultDuration } = animationManager;
        const { addPhaseFn, updatePhaseFn, removePhaseFn } = fns;
        const animate = (phase, path, updateFn) => {
            animationManager.animate({
                id: `${groupId}_${subId}_${path.id}_${phase}`,
                groupId,
                from: 0,
                to: 1,
                ease: easeOut,
                onUpdate(ratio, preInit) {
                    if (preInit && phase !== 'removed')
                        return;
                    path.path.clear({ trackChanges: true });
                    updateFn(ratio, path);
                    path.checkPathDirty();
                },
                onStop() {
                    if (phase !== 'added')
                        return;
                    path.path.clear({ trackChanges: true });
                    updateFn(1, path);
                    path.checkPathDirty();
                },
                duration: FROM_TO_MIXINS[phase].animationDuration * defaultDuration,
                delay: FROM_TO_MIXINS[phase].animationDelay * defaultDuration,
            });
        };
        for (const path of paths) {
            if (!animationManager.isSkipped()) {
                animate('removed', path, removePhaseFn);
                animate('updated', path, updatePhaseFn);
            }
            animate('added', path, addPhaseFn);
        }
    }

    const MARKER_SHAPE = predicateWithMessage((v) => isMarkerShape(v) || Object.getPrototypeOf(v) === Marker, `expecting a marker shape keyword such as 'circle', 'diamond' or 'square' or an object extending the Marker class`);
    class SeriesMarker extends ChangeDetectable {
        constructor() {
            super(...arguments);
            this.enabled = true;
            /** One of the predefined marker names, or a marker constructor function (for user-defined markers). */
            this.shape = Circle;
            this.size = 6;
            this.fillOpacity = 1;
            this.strokeWidth = 1;
            this.strokeOpacity = 1;
        }
        getStyle() {
            const { size, fill, fillOpacity, stroke, strokeWidth, strokeOpacity } = this;
            return { size, fill, fillOpacity, stroke, strokeWidth, strokeOpacity };
        }
        getDiameter() {
            return this.size + this.strokeWidth;
        }
    }
    __decorate([
        Validate(BOOLEAN),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], SeriesMarker.prototype, "enabled", void 0);
    __decorate([
        Validate(MARKER_SHAPE),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], SeriesMarker.prototype, "shape", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], SeriesMarker.prototype, "size", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", String)
    ], SeriesMarker.prototype, "fill", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], SeriesMarker.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", String)
    ], SeriesMarker.prototype, "stroke", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], SeriesMarker.prototype, "strokeWidth", void 0);
    __decorate([
        Validate(OPT_NUMBER(0, 1)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Number)
    ], SeriesMarker.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_FUNCTION),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Function)
    ], SeriesMarker.prototype, "formatter", void 0);

    function markerFadeInAnimation({ id }, animationManager, markerSelections, status = 'unknown') {
        const params = Object.assign({}, FROM_TO_MIXINS[status]);
        staticFromToMotion(id, 'markers', animationManager, markerSelections, { opacity: 0 }, { opacity: 1 }, params);
        markerSelections.forEach((s) => s.cleanup());
    }
    function markerScaleInAnimation({ id }, animationManager, markerSelections) {
        staticFromToMotion(id, 'markers', animationManager, markerSelections, { scalingX: 0, scalingY: 0 }, { scalingX: 1, scalingY: 1 });
        markerSelections.forEach((s) => s.cleanup());
    }
    function markerSwipeScaleInAnimation({ id }, animationManager, markerSelections, seriesWidth) {
        // Improves consistency with matching parallel animations.
        const tweakFactor = 0.1;
        const fromFn = (_, datum) => {
            var _a, _b;
            const x = (_b = (_a = datum.midPoint) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : seriesWidth;
            // Calculate a delay that depends on the X position of the datum, so that nodes appear
            // gradually from left to right. Use easeInOut to match any parallel swipe animations.
            const delayRatio = easeInOut(x / seriesWidth) - tweakFactor;
            const delay = Math.max(Math.min(delayRatio, 1), 0);
            return { scalingX: 0, scalingY: 0, animationDelay: delay, animationDuration: QUICK_TRANSITION };
        };
        const toFn = () => {
            return { scalingX: 1, scalingY: 1 };
        };
        fromToMotion(id, 'markers', animationManager, markerSelections, { fromFn, toFn });
    }
    function resetMarkerFn(_node) {
        return { opacity: 1, scalingX: 1, scalingY: 1 };
    }
    function resetMarkerPositionFn(_node, datum) {
        var _a, _b, _c, _d;
        return {
            translationX: (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : NaN,
            translationY: (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : NaN,
        };
    }
    function prepareMarkerAnimation(pairMap, parentStatus) {
        const readFirstPair = (xValue, type) => {
            const val = pairMap[type][xValue];
            return Array.isArray(val) ? val[0] : val;
        };
        const markerStatus = (datum) => {
            const { xValue } = datum;
            if (pairMap.moved[xValue]) {
                return { point: readFirstPair(xValue, 'moved'), status: 'updated' };
            }
            else if (pairMap.removed[xValue]) {
                return { point: readFirstPair(xValue, 'removed'), status: 'removed' };
            }
            else if (pairMap.added[xValue]) {
                return { point: readFirstPair(xValue, 'added'), status: 'added' };
            }
            return { status: 'unknown' };
        };
        const fromFn = (marker, datum) => {
            var _a, _b, _c, _d, _e, _f;
            const { status, point } = markerStatus(datum);
            if (status === 'unknown')
                return { opacity: 0 };
            const defaults = Object.assign({ translationX: (_b = (_a = point === null || point === void 0 ? void 0 : point.from) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : marker.translationX, translationY: (_d = (_c = point === null || point === void 0 ? void 0 : point.from) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : marker.translationY, opacity: marker.opacity }, FROM_TO_MIXINS[status]);
            if (parentStatus === 'added') {
                return Object.assign(Object.assign(Object.assign({}, defaults), { opacity: 0, translationX: (_e = point === null || point === void 0 ? void 0 : point.to) === null || _e === void 0 ? void 0 : _e.x, translationY: (_f = point === null || point === void 0 ? void 0 : point.to) === null || _f === void 0 ? void 0 : _f.y }), FROM_TO_MIXINS['added']);
            }
            if (status === 'added') {
                defaults.opacity = 0;
            }
            return defaults;
        };
        const toFn = (_marker, datum) => {
            var _a, _b;
            const { status, point } = markerStatus(datum);
            if (status === 'unknown')
                return { opacity: 0 };
            const defaults = Object.assign({ translationX: datum.point.x, translationY: datum.point.y, opacity: 1 }, FROM_TO_MIXINS[status]);
            if (status === 'removed' || parentStatus === 'removed') {
                return Object.assign(Object.assign(Object.assign({}, defaults), { translationX: (_a = point === null || point === void 0 ? void 0 : point.to) === null || _a === void 0 ? void 0 : _a.x, translationY: (_b = point === null || point === void 0 ? void 0 : point.to) === null || _b === void 0 ? void 0 : _b.y, opacity: 0 }), FROM_TO_MIXINS['removed']);
            }
            return defaults;
        };
        return { fromFn, toFn };
    }

    function minMax(nodeData) {
        return nodeData.reduce(({ min, max }, node) => {
            if (min == null || min.point.x > node.point.x) {
                min = node;
            }
            if (max == null || max.point.x < node.point.x) {
                max = node;
            }
            return { min, max };
        }, {});
    }
    function intersectionOnLine(a, b, targetX) {
        const m = (b.y - a.y) / (b.x - a.x);
        // Find a point a distance along the line from `a` and `b`
        const y = (targetX - a.x) * m + a.y;
        return { x: targetX, y };
    }
    function backfillPathPoint(results, process, skip, processFn) {
        let prevMarkerIdx = -1, nextMarkerIdx = 0;
        const toProcess = [];
        while (nextMarkerIdx < results.length) {
            if (results[nextMarkerIdx].change === process) {
                toProcess.push(results[nextMarkerIdx]);
                nextMarkerIdx++;
                continue;
            }
            if (results[nextMarkerIdx].change === skip) {
                nextMarkerIdx++;
                continue;
            }
            if (toProcess.length > 0) {
                processFn(toProcess, prevMarkerIdx, nextMarkerIdx);
                toProcess.length = 0;
            }
            prevMarkerIdx = nextMarkerIdx;
            nextMarkerIdx++;
        }
        if (toProcess.length > 0) {
            processFn(toProcess, prevMarkerIdx, nextMarkerIdx);
        }
    }
    function backfillPathPointData(result, splitMode) {
        backfillPathPoint(result, 'out', 'in', (toProcess, sIdx, eIdx) => {
            var _a, _b;
            if (sIdx === -1 && result[eIdx]) {
                toProcess.forEach((d) => (d.to = result[eIdx].from));
            }
            else if (eIdx === result.length && result[sIdx]) {
                toProcess.forEach((d) => (d.to = result[sIdx].from));
            }
            else if (splitMode === 'intersect' && ((_a = result[sIdx]) === null || _a === void 0 ? void 0 : _a.from) && ((_b = result[eIdx]) === null || _b === void 0 ? void 0 : _b.from)) {
                toProcess.forEach((d) => (d.to = intersectionOnLine(result[sIdx].from, result[eIdx].from, d.from.x)));
            }
            else {
                toProcess.forEach((d) => (d.to = d.from));
            }
        });
        backfillPathPoint(result, 'in', 'out', (toProcess, sIdx, eIdx) => {
            var _a, _b;
            if (sIdx === -1 && result[eIdx]) {
                toProcess.forEach((d) => (d.from = result[eIdx].to));
            }
            else if (eIdx === result.length && result[sIdx]) {
                toProcess.forEach((d) => (d.from = result[sIdx].to));
            }
            else if (splitMode === 'intersect' && ((_a = result[sIdx]) === null || _a === void 0 ? void 0 : _a.to) && ((_b = result[eIdx]) === null || _b === void 0 ? void 0 : _b.to)) {
                toProcess.forEach((d) => (d.from = intersectionOnLine(result[sIdx].to, result[eIdx].to, d.to.x)));
            }
            else {
                toProcess.forEach((d) => (d.from = d.to));
            }
        });
    }
    function calculatePoint(from, to, ratio) {
        const x1 = isNaN(from.x) ? to.x : from.x;
        const y1 = isNaN(from.y) ? to.y : from.y;
        const xd = to.x - from.x;
        const yd = to.y - from.y;
        const xr = isNaN(xd) ? 0 : xd * ratio;
        const yr = isNaN(yd) ? 0 : yd * ratio;
        return {
            x: x1 + xr,
            y: y1 + yr,
        };
    }
    function renderPartialPath(pairData, ratios, path) {
        const { path: linePath } = path;
        let previousTo;
        for (const data of pairData) {
            const ratio = ratios[data.change];
            if (ratio == null)
                continue;
            const { from, to } = data;
            if (from == null || to == null)
                continue;
            const { x, y } = calculatePoint(from, to, ratio);
            if (data.moveTo === false) {
                linePath.lineTo(x, y);
            }
            else if (data.moveTo === true || !previousTo) {
                linePath.moveTo(x, y);
            }
            else if (previousTo) {
                const moveToRatio = data.moveTo === 'in' ? ratio : 1 - ratio;
                const { x: midPointX, y: midPointY } = calculatePoint(previousTo, { x, y }, moveToRatio);
                linePath.lineTo(midPointX, midPointY);
                linePath.moveTo(x, y);
            }
            previousTo = { x, y };
        }
    }
    function pathSwipeInAnimation({ id }, animationManager, paths) {
        staticFromToMotion(id, 'path_properties', animationManager, paths, { clipScalingX: 0 }, { clipScalingX: 1 }, {
            start: { clipMode: 'normal' },
            finish: { clipMode: undefined },
        });
    }
    function pathFadeInAnimation({ id }, subId, animationManager, selection) {
        staticFromToMotion(id, subId, animationManager, selection, { opacity: 0 }, { opacity: 1 }, LABEL_PHASE);
    }
    function pathFadeOutAnimation({ id }, subId, animationManager, selection) {
        staticFromToMotion(id, subId, animationManager, selection, { opacity: 1 }, { opacity: 0 }, LABEL_PHASE);
    }
    function buildResetPathFn(opts) {
        return (_node) => {
            return { opacity: opts.getOpacity(), clipScalingX: 1, clipMode: undefined };
        };
    }

    function scale(val, scaling) {
        if (!scaling)
            return NaN;
        if (val instanceof Date) {
            val = val.getTime();
        }
        if (scaling.type === 'continuous' && typeof val === 'number') {
            const domainRatio = (val - scaling.domain[0]) / (scaling.domain[1] - scaling.domain[0]);
            return domainRatio * (scaling.range[1] - scaling.range[0]) + scaling.range[0];
        }
        if (scaling.type === 'log' && typeof val === 'number') {
            return scaling.convert(val);
        }
        // Category axis case.
        const matchingIndex = scaling.domain.findIndex((d) => d === val);
        if (matchingIndex >= 0) {
            return scaling.range[matchingIndex];
        }
        // We failed to convert using the scale.
        return NaN;
    }
    function closeMatch(a, b) {
        const an = Number(a);
        const bn = Number(b);
        if (!isNaN(an) && !isNaN(bn)) {
            return Math.abs(bn - an) < 0.25;
        }
        return a === b;
    }
    function calculateMoveTo(from = false, to = false) {
        if (from === to) {
            return !!from;
        }
        return from ? 'in' : 'out';
    }
    function pairContinuousData(newData, oldData, opts = {}) {
        var _a, _b, _c, _d;
        const { backfillSplitMode = 'intersect' } = opts;
        const toNewScale = (oldDatum) => {
            var _a, _b;
            return {
                x: scale((_a = oldDatum.xValue) !== null && _a !== void 0 ? _a : NaN, newData.scales.x),
                y: scale((_b = oldDatum.yValue) !== null && _b !== void 0 ? _b : NaN, newData.scales.y),
            };
        };
        const toOldScale = (newDatum) => {
            var _a, _b;
            return {
                x: scale((_a = newDatum.xValue) !== null && _a !== void 0 ? _a : NaN, oldData.scales.x),
                y: scale((_b = newDatum.yValue) !== null && _b !== void 0 ? _b : NaN, oldData.scales.y),
            };
        };
        const result = [];
        const resultMap = {
            added: {},
            moved: {},
            removed: {},
        };
        const pairUp = (from, to, xValue, change = 'move') => {
            if (from && (isNaN(from.point.x) || isNaN(from.point.y))) {
                // Default to 'to' position if 'from' is invalid.
                from = to;
            }
            const resultPoint = {
                from: from === null || from === void 0 ? void 0 : from.point,
                to: to === null || to === void 0 ? void 0 : to.point,
                moveTo: calculateMoveTo(from === null || from === void 0 ? void 0 : from.point.moveTo, to === null || to === void 0 ? void 0 : to.point.moveTo),
                change,
            };
            if (change === 'move') {
                resultMap.moved[xValue] = resultPoint;
                oldIdx++;
                newIdx++;
            }
            else if (change === 'in') {
                resultMap.added[xValue] = resultPoint;
                newIdx++;
            }
            else if (change === 'out') {
                resultMap.removed[xValue] = resultPoint;
                oldIdx++;
            }
            result.push(resultPoint);
        };
        const { min: minFromNode, max: maxFromNode } = minMax(oldData.nodeData);
        const { min: minToNode, max: maxToNode } = minMax(newData.nodeData);
        let oldIdx = 0;
        let newIdx = 0;
        while (oldIdx < oldData.nodeData.length || newIdx < newData.nodeData.length) {
            const from = oldData.nodeData[oldIdx];
            const to = newData.nodeData[newIdx];
            const fromShifted = from ? toNewScale(from) : undefined;
            const toUnshifted = to ? toOldScale(to) : undefined;
            const NA = undefined;
            if (fromShifted && closeMatch(fromShifted.x, to === null || to === void 0 ? void 0 : to.point.x)) {
                pairUp(from, to, to.xValue, 'move');
            }
            else if (fromShifted && fromShifted.x < ((_a = minToNode === null || minToNode === void 0 ? void 0 : minToNode.point.x) !== null && _a !== void 0 ? _a : -Infinity)) {
                pairUp(from, NA, from.xValue, 'out');
            }
            else if (fromShifted && fromShifted.x > ((_b = maxToNode === null || maxToNode === void 0 ? void 0 : maxToNode.point.x) !== null && _b !== void 0 ? _b : Infinity)) {
                pairUp(from, NA, from.xValue, 'out');
            }
            else if (toUnshifted && toUnshifted.x < ((_c = minFromNode === null || minFromNode === void 0 ? void 0 : minFromNode.point.x) !== null && _c !== void 0 ? _c : -Infinity)) {
                pairUp(NA, to, to.xValue, 'in');
            }
            else if (toUnshifted && toUnshifted.x > ((_d = maxFromNode === null || maxFromNode === void 0 ? void 0 : maxFromNode.point.x) !== null && _d !== void 0 ? _d : Infinity)) {
                pairUp(NA, to, to.xValue, 'in');
            }
            else if (fromShifted && fromShifted.x < (to === null || to === void 0 ? void 0 : to.point.x)) {
                pairUp(from, NA, from.xValue, 'out');
            }
            else if (toUnshifted && toUnshifted.x < (from === null || from === void 0 ? void 0 : from.point.x)) {
                pairUp(NA, to, to.xValue, 'in');
            }
            else if (from) {
                pairUp(from, NA, from.xValue, 'out');
            }
            else if (to) {
                pairUp(NA, to, to.xValue, 'in');
            }
            else {
                throw new Error('Unable to process points');
            }
        }
        backfillPathPointData(result, backfillSplitMode);
        return { result, resultMap };
    }
    function pairCategoryData(newData, oldData, diff, opts = {}) {
        var _a, _b, _c;
        const { backfillSplitMode = 'intersect', multiDatum = false } = opts;
        const result = [];
        const resultMapSingle = {
            added: {},
            moved: {},
            removed: {},
        };
        const resultMapMulti = {
            added: {},
            moved: {},
            removed: {},
        };
        let previousResultPoint = undefined;
        let previousXValue = undefined;
        const addToResultMap = (xValue, result) => {
            var _a;
            var _b;
            const type = result.change === 'move' ? 'moved' : result.change === 'in' ? 'added' : 'removed';
            if (multiDatum) {
                (_a = (_b = resultMapMulti[type])[xValue]) !== null && _a !== void 0 ? _a : (_b[xValue] = []);
                resultMapMulti[type][xValue].push(result);
            }
            else {
                resultMapSingle[type][xValue] = result;
            }
            previousResultPoint = result;
            previousXValue = xValue;
        };
        let oldIndex = 0;
        let newIndex = 0;
        let isXUnordered = false;
        while (oldIndex < oldData.nodeData.length || newIndex < newData.nodeData.length) {
            const before = oldData.nodeData[oldIndex];
            const after = newData.nodeData[newIndex];
            let resultPoint;
            if ((before === null || before === void 0 ? void 0 : before.xValue) === (after === null || after === void 0 ? void 0 : after.xValue)) {
                resultPoint = {
                    change: 'move',
                    moveTo: calculateMoveTo((_a = before.point.moveTo) !== null && _a !== void 0 ? _a : false, after.point.moveTo),
                    from: before.point,
                    to: after.point,
                };
                addToResultMap(before.xValue, resultPoint);
                oldIndex++;
                newIndex++;
            }
            else if (diff.removed.indexOf(before === null || before === void 0 ? void 0 : before.xValue) >= 0) {
                resultPoint = {
                    change: 'out',
                    moveTo: (_b = before.point.moveTo) !== null && _b !== void 0 ? _b : false,
                    from: before.point,
                };
                addToResultMap(before.xValue, resultPoint);
                oldIndex++;
            }
            else if (diff.added.indexOf(after === null || after === void 0 ? void 0 : after.xValue) >= 0) {
                resultPoint = {
                    change: 'in',
                    moveTo: (_c = after.point.moveTo) !== null && _c !== void 0 ? _c : false,
                    to: after.point,
                };
                addToResultMap(after.xValue, resultPoint);
                newIndex++;
            }
            else if (multiDatum && previousResultPoint && previousXValue === (before === null || before === void 0 ? void 0 : before.xValue)) {
                resultPoint = Object.assign({}, previousResultPoint);
                addToResultMap(before.xValue, resultPoint);
                oldIndex++;
            }
            else if (multiDatum && previousResultPoint && previousXValue === (after === null || after === void 0 ? void 0 : after.xValue)) {
                resultPoint = Object.assign({}, previousResultPoint);
                addToResultMap(after.xValue, resultPoint);
                newIndex++;
            }
            else {
                isXUnordered = true;
                break;
            }
            result.push(resultPoint);
        }
        let previousX = -Infinity;
        isXUnordered || (isXUnordered = result.some((pathPoint) => {
            const { change: marker, to: { x = -Infinity } = {} } = pathPoint;
            if (marker === 'out')
                return;
            const result = x < previousX;
            previousX = x;
            return result;
        }));
        if (isXUnordered) {
            return { result: undefined, resultMap: undefined };
        }
        backfillPathPointData(result, backfillSplitMode);
        if (multiDatum) {
            return { result, resultMap: resultMapMulti };
        }
        return { result, resultMap: resultMapSingle };
    }
    function determinePathStatus(newData, oldData) {
        let status = 'updated';
        const visible = (data) => {
            return data.visible;
        };
        if (!visible(oldData) && visible(newData)) {
            status = 'added';
        }
        else if (visible(oldData) && !visible(newData)) {
            status = 'removed';
        }
        return status;
    }
    function prepareLinePathPropertyAnimation(status, visibleToggleMode) {
        const phase = visibleToggleMode === 'none' ? 'updated' : status;
        const result = {
            fromFn: (_path) => {
                let mixin;
                if (status === 'removed') {
                    mixin = { finish: { visible: false } };
                }
                else if (status === 'added') {
                    mixin = { start: { visible: true } };
                }
                else {
                    mixin = {};
                }
                return Object.assign(Object.assign({}, FROM_TO_MIXINS[phase]), mixin);
            },
            toFn: (_path) => {
                return Object.assign({}, FROM_TO_MIXINS[phase]);
            },
        };
        if (visibleToggleMode === 'fade') {
            return {
                fromFn: (path) => {
                    const opacity = status === 'added' ? 0 : path.opacity;
                    return Object.assign({ opacity }, result.fromFn(path));
                },
                toFn: (path) => {
                    const opacity = status === 'removed' ? 0 : 1;
                    return Object.assign({ opacity }, result.toFn(path));
                },
            };
        }
        return result;
    }
    function prepareLinePathAnimationFns(newData, oldData, pairData, visibleToggleMode, render) {
        const status = determinePathStatus(newData, oldData);
        const removePhaseFn = (ratio, path) => {
            render(pairData, { move: 0, out: ratio }, path);
        };
        const updatePhaseFn = (ratio, path) => {
            render(pairData, { move: ratio }, path);
        };
        const addPhaseFn = (ratio, path) => {
            render(pairData, { move: 1, in: ratio }, path);
        };
        const pathProperties = prepareLinePathPropertyAnimation(status, visibleToggleMode);
        return { status, path: { addPhaseFn, updatePhaseFn, removePhaseFn }, pathProperties };
    }
    function prepareLinePathAnimation(newData, oldData, diff) {
        var _a;
        const isCategoryBased = ((_a = newData.scales.x) === null || _a === void 0 ? void 0 : _a.type) === 'category';
        const { result: pairData, resultMap: pairMap } = isCategoryBased && diff ? pairCategoryData(newData, oldData, diff) : pairContinuousData(newData, oldData);
        let status = 'updated';
        if (oldData.visible && !newData.visible) {
            status = 'removed';
        }
        else if (!oldData.visible && newData.visible) {
            status = 'added';
        }
        if (pairData === undefined || pairMap === undefined) {
            return;
        }
        const pathFns = prepareLinePathAnimationFns(newData, oldData, pairData, 'fade', renderPartialPath);
        const marker = prepareMarkerAnimation(pairMap, status);
        return Object.assign(Object.assign({}, pathFns), { marker });
    }

    var AreaSeriesTag;
    (function (AreaSeriesTag) {
        AreaSeriesTag[AreaSeriesTag["Fill"] = 0] = "Fill";
        AreaSeriesTag[AreaSeriesTag["Stroke"] = 1] = "Stroke";
        AreaSeriesTag[AreaSeriesTag["Marker"] = 2] = "Marker";
        AreaSeriesTag[AreaSeriesTag["Label"] = 3] = "Label";
    })(AreaSeriesTag || (AreaSeriesTag = {}));
    function splitFillPoints(context) {
        const { points } = context.fillData;
        return { top: points.slice(0, points.length / 2), bottom: points.slice(points.length / 2).reverse() };
    }
    function prepPoints(key, ctx, points) {
        return {
            scales: ctx.scales,
            nodeData: points[key],
            visible: ctx.visible,
        };
    }
    function pairFillCategoryData(newData, oldData, diff) {
        const oldPoints = splitFillPoints(oldData);
        const newPoints = splitFillPoints(newData);
        const pairOpts = { multiDatum: true };
        return {
            top: pairCategoryData(prepPoints('top', newData, newPoints), prepPoints('top', oldData, oldPoints), diff, pairOpts),
            bottom: pairCategoryData(prepPoints('bottom', newData, newPoints), prepPoints('bottom', oldData, oldPoints), diff, pairOpts),
        };
    }
    function pairFillContinuousData(newData, oldData) {
        const oldPoints = splitFillPoints(oldData);
        const newPoints = splitFillPoints(newData);
        return {
            top: pairContinuousData(prepPoints('top', newData, newPoints), prepPoints('top', oldData, oldPoints)),
            bottom: pairContinuousData(prepPoints('bottom', newData, newPoints), prepPoints('bottom', oldData, oldPoints)),
        };
    }
    function prepareAreaPathAnimation(newData, oldData, diff) {
        var _a;
        const isCategoryBased = ((_a = newData.scales.x) === null || _a === void 0 ? void 0 : _a.type) === 'category';
        let status = 'updated';
        if (oldData.visible && !newData.visible) {
            status = 'removed';
        }
        else if (!oldData.visible && newData.visible) {
            status = 'added';
        }
        const prepareMarkerPairs = () => {
            if (isCategoryBased && diff) {
                return pairCategoryData(newData, oldData, diff, { backfillSplitMode: 'static', multiDatum: true });
            }
            return pairContinuousData(newData, oldData, { backfillSplitMode: 'static' });
        };
        const prepareFillPairs = () => {
            if (isCategoryBased && diff) {
                return pairFillCategoryData(newData, oldData, diff);
            }
            return pairFillContinuousData(newData, oldData);
        };
        const { resultMap: markerPairMap } = prepareMarkerPairs();
        const { top, bottom } = prepareFillPairs();
        if (markerPairMap === undefined || top.result === undefined || bottom.result === undefined) {
            return;
        }
        const pairData = [...top.result, ...bottom.result.reverse()];
        const fill = prepareLinePathAnimationFns(newData, oldData, pairData, 'none', renderPartialPath);
        const marker = prepareMarkerAnimation(markerPairMap, status);
        return { fill, marker };
    }

    class AreaSeries extends CartesianSeries {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                pathsPerSeries: 2,
                pathsZIndexSubOrderOffset: [0, 1000],
                hasMarkers: true,
                markerSelectionGarbageCollection: false,
                pickModes: [SeriesNodePickMode.NEAREST_BY_MAIN_AXIS_FIRST, SeriesNodePickMode.EXACT_SHAPE_MATCH],
                animationResetFns: {
                    path: buildResetPathFn({ getOpacity: () => this.getOpacity() }),
                    label: resetLabelFn,
                    marker: (node, datum) => (Object.assign(Object.assign({}, resetMarkerFn()), resetMarkerPositionFn(node, datum))),
                },
            });
            this.tooltip = new SeriesTooltip();
            this.marker = new SeriesMarker();
            this.label = new Label();
            this.fill = '#c16068';
            this.stroke = '#874349';
            this.fillOpacity = 1;
            this.strokeOpacity = 1;
            this.lineDash = [0];
            this.lineDashOffset = 0;
            this.xKey = undefined;
            this.xName = undefined;
            this.strokeWidth = 2;
            this.shadow = undefined;
        }
        processData(dataController) {
            return __awaiter(this, void 0, void 0, function* () {
                const { xKey, yKey, normalizedTo, data, visible, seriesGrouping: { groupIndex = this.id } = {} } = this;
                if (xKey == null || yKey == null || data == null)
                    return;
                const animationEnabled = !this.ctx.animationManager.isSkipped();
                const { isContinuousX, isContinuousY } = this.isContinuous();
                const ids = [
                    `area-stack-${groupIndex}-yValues`,
                    `area-stack-${groupIndex}-yValues-trailing`,
                    `area-stack-${groupIndex}-yValues-prev`,
                    `area-stack-${groupIndex}-yValues-trailing-prev`,
                    `area-stack-${groupIndex}-yValues-marker`,
                ];
                const extraProps = [];
                const normaliseTo = normalizedTo && isFinite(normalizedTo) ? normalizedTo : undefined;
                if (normaliseTo) {
                    extraProps.push(normaliseGroupTo(this, [ids[0], ids[1], ids[4]], normaliseTo, 'range'));
                    extraProps.push(normaliseGroupTo(this, [ids[2], ids[3]], normaliseTo, 'range'));
                }
                // If two or more datums share an x-value, i.e. lined up vertically, they will have the same datum id.
                // They must be identified this way when animated to ensure they can be tracked when their y-value
                // is updated. If this is a static chart, we can instead not bother with identifying datums and
                // automatically garbage collect the marker selection.
                if (!isContinuousX && animationEnabled && this.processedData) {
                    extraProps.push(diff(this.processedData));
                }
                if (animationEnabled) {
                    extraProps.push(animationValidation(this));
                }
                const common = { invalidValue: null };
                if (!visible) {
                    common.forceValue = 0;
                }
                yield this.requestDataModel(dataController, data, {
                    props: [
                        keyProperty(this, xKey, isContinuousX, { id: 'xValue' }),
                        valueProperty(this, yKey, isContinuousY, Object.assign({ id: `yValueRaw` }, common)),
                        ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window', 'current', Object.assign(Object.assign({ id: `yValueEnd` }, common), { groupId: ids[0] })),
                        ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window-trailing', 'current', Object.assign(Object.assign({ id: `yValueStart` }, common), { groupId: ids[1] })),
                        ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window', 'last', Object.assign(Object.assign({ id: `yValuePreviousEnd` }, common), { groupId: ids[2] })),
                        ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'window-trailing', 'last', Object.assign(Object.assign({ id: `yValuePreviousStart` }, common), { groupId: ids[3] })),
                        ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'normal', 'current', Object.assign(Object.assign({ id: `yValueCumulative` }, common), { groupId: ids[4] })),
                        ...extraProps,
                    ],
                    groupByKeys: true,
                });
                this.animationState.transition('updateData');
            });
        }
        getSeriesDomain(direction) {
            const { processedData, dataModel, axes } = this;
            if (!processedData || !dataModel)
                return [];
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            const keyDef = dataModel.resolveProcessedDataDefById(this, `xValue`);
            const keys = dataModel.getDomain(this, `xValue`, 'key', processedData);
            const yExtent = dataModel.getDomain(this, `yValueEnd`, 'value', processedData);
            if (direction === ChartAxisDirection.X) {
                if ((keyDef === null || keyDef === void 0 ? void 0 : keyDef.def.type) === 'key' && keyDef.def.valueType === 'category') {
                    return keys;
                }
                return fixNumericExtent(extent(keys), xAxis);
            }
            else if (yAxis instanceof LogAxis || yAxis instanceof TimeAxis) {
                return fixNumericExtent(yExtent, yAxis);
            }
            else {
                const fixedYExtent = [yExtent[0] > 0 ? 0 : yExtent[0], yExtent[1] < 0 ? 0 : yExtent[1]];
                return fixNumericExtent(fixedYExtent, yAxis);
            }
        }
        createNodeData() {
            const _super = Object.create(null, {
                calculateScaling: { get: () => super.calculateScaling }
            });
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { axes, data, processedData: { data: groupedData } = {}, dataModel } = this;
                const xAxis = axes[ChartAxisDirection.X];
                const yAxis = axes[ChartAxisDirection.Y];
                if (!xAxis || !yAxis || !data || !dataModel) {
                    return [];
                }
                const { yKey = '', xKey = '', marker, label, fill: seriesFill, stroke: seriesStroke } = this;
                const { scale: xScale } = xAxis;
                const { scale: yScale } = yAxis;
                const continuousY = ContinuousScale.is(yScale);
                const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;
                const defs = dataModel.resolveProcessedDataDefsByIds(this, [
                    `yValueStart`,
                    `yValueEnd`,
                    `yValueRaw`,
                    `yValuePreviousStart`,
                    `yValuePreviousEnd`,
                    `yValueCumulative`,
                ]);
                const createMovePoint = (plainPoint) => {
                    const { point } = plainPoint, stroke = __rest(plainPoint, ["point"]);
                    return Object.assign(Object.assign({}, stroke), { point: Object.assign(Object.assign({}, point), { moveTo: true }) });
                };
                const createPathCoordinates = (xValue, lastYEnd, yEnd) => {
                    const x = xScale.convert(xValue) + xOffset;
                    const prevYCoordinate = yScale.convert(lastYEnd);
                    const currYCoordinate = yScale.convert(yEnd);
                    return [
                        { point: { x, y: currYCoordinate }, yValue: yEnd, xValue },
                        { point: { x, y: prevYCoordinate }, yValue: lastYEnd, xValue },
                    ];
                };
                const createMarkerCoordinate = (xDatum, yEnd, rawYDatum) => {
                    let currY;
                    // if not normalized, the invalid data points will be processed as `undefined` in processData()
                    // if normalized, the invalid data points will be processed as 0 rather than `undefined`
                    // check if unprocessed datum is valid as we only want to show markers for valid points
                    const normalized = this.normalizedTo && isFinite(this.normalizedTo);
                    const normalizedAndValid = normalized && continuousY && isContinuous(rawYDatum);
                    const valid = (!normalized && !isNaN(rawYDatum)) || normalizedAndValid;
                    if (valid) {
                        currY = yEnd;
                    }
                    const x = xScale.convert(xDatum) + xOffset;
                    const y = yScale.convert(currY);
                    return { x, y, size: marker.size };
                };
                const itemId = yKey;
                const labelData = [];
                const markerData = [];
                const context = {
                    itemId,
                    fillData: { itemId, points: [] },
                    strokeData: { itemId, points: [] },
                    labelData,
                    nodeData: markerData,
                    scales: _super.calculateScaling.call(this),
                    visible: this.visible,
                };
                const fillPoints = context.fillData.points;
                const fillPhantomPoints = [];
                const strokePoints = context.strokeData.points;
                let datumIdx = -1;
                let lastXDatum;
                let lastYDatum = -Infinity;
                groupedData === null || groupedData === void 0 ? void 0 : groupedData.forEach((datumGroup) => {
                    const { keys, keys: [xDatum], datum: datumArray, values: valuesArray, } = datumGroup;
                    valuesArray.forEach((values, valueIdx) => {
                        var _a, _b, _c;
                        datumIdx++;
                        const seriesDatum = datumArray[valueIdx];
                        const dataValues = dataModel.resolveProcessedDataDefsValues(defs, { keys, values });
                        const { yValueRaw: yDatum, yValueCumulative } = dataValues;
                        let { yValueStart, yValueEnd, yValuePreviousStart, yValuePreviousEnd } = dataValues;
                        const validPoint = yDatum != null;
                        // marker data
                        const point = createMarkerCoordinate(xDatum, +yValueCumulative, yDatum);
                        if (validPoint && marker) {
                            markerData.push({
                                index: datumIdx,
                                series: this,
                                itemId,
                                datum: seriesDatum,
                                midPoint: { x: point.x, y: point.y },
                                cumulativeValue: yValueEnd,
                                yValue: yDatum,
                                xValue: xDatum,
                                yKey,
                                xKey,
                                point,
                                fill: (_a = marker.fill) !== null && _a !== void 0 ? _a : seriesFill,
                                stroke: (_b = marker.stroke) !== null && _b !== void 0 ? _b : seriesStroke,
                                strokeWidth: (_c = marker.strokeWidth) !== null && _c !== void 0 ? _c : this.getStrokeWidth(this.strokeWidth),
                            });
                        }
                        // label data
                        if (validPoint && label) {
                            const labelText = this.getLabelText(label, {
                                value: yDatum,
                                datum: seriesDatum,
                                xKey,
                                yKey,
                                xName: this.xName,
                                yName: this.yName,
                            }, (value) => (isNumber(value) ? value.toFixed(2) : String(value)));
                            labelData.push({
                                index: datumIdx,
                                series: this,
                                itemId: yKey,
                                datum: seriesDatum,
                                x: point.x,
                                y: point.y,
                                label: labelText
                                    ? {
                                        text: labelText,
                                        fontStyle: label.fontStyle,
                                        fontWeight: label.fontWeight,
                                        fontSize: label.fontSize,
                                        fontFamily: label.fontFamily,
                                        textAlign: 'center',
                                        textBaseline: 'bottom',
                                        fill: label.color,
                                    }
                                    : undefined,
                            });
                        }
                        // fill data
                        if (lastYDatum == null || yDatum == null) {
                            // Reset all coordinates to 'zero' value.
                            yValueStart = yValueStart !== null && yValueStart !== void 0 ? yValueStart : 0;
                            yValueEnd = yValueStart !== null && yValueStart !== void 0 ? yValueStart : 0;
                            yValuePreviousStart = yValuePreviousStart !== null && yValuePreviousStart !== void 0 ? yValuePreviousStart : 0;
                            yValuePreviousEnd = yValuePreviousStart !== null && yValuePreviousStart !== void 0 ? yValuePreviousStart : 0;
                        }
                        const [prevTop, prevBottom] = createPathCoordinates(lastXDatum, yValuePreviousStart, yValuePreviousEnd);
                        const [top, bottom] = createPathCoordinates(xDatum, yValueStart, yValueEnd);
                        const xValid = lastXDatum != null && xDatum != null;
                        if (xValid) {
                            fillPoints.push(prevTop);
                            fillPhantomPoints.push(prevBottom);
                            fillPoints.push(top);
                            fillPhantomPoints.push(bottom);
                        }
                        // stroke data
                        if (validPoint && lastYDatum != null && datumIdx > 0) {
                            strokePoints.push(createMovePoint(prevTop));
                            strokePoints.push(top);
                        }
                        lastXDatum = xDatum;
                        lastYDatum = yDatum;
                    });
                });
                if (strokePoints.length > 0) {
                    strokePoints[0] = createMovePoint(strokePoints[0]);
                }
                fillPhantomPoints.reverse();
                fillPoints.push(...fillPhantomPoints);
                return [context];
            });
        }
        isPathOrSelectionDirty() {
            return this.marker.isDirty();
        }
        markerFactory() {
            const { shape } = this.marker;
            const MarkerShape = getMarker(shape);
            return new MarkerShape();
        }
        updatePathNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { opacity, visible, animationEnabled } = opts;
                const [fill, stroke] = opts.paths;
                const { seriesRectHeight: height, seriesRectWidth: width } = this.nodeDataDependencies;
                const strokeWidth = this.getStrokeWidth(this.strokeWidth);
                stroke.setProperties({
                    tag: AreaSeriesTag.Stroke,
                    fill: undefined,
                    lineJoin: (stroke.lineCap = 'round'),
                    pointerEvents: PointerEvents.None,
                    stroke: this.stroke,
                    strokeWidth,
                    strokeOpacity: this.strokeOpacity,
                    lineDash: this.lineDash,
                    lineDashOffset: this.lineDashOffset,
                    opacity,
                    visible,
                });
                fill.setProperties({
                    tag: AreaSeriesTag.Fill,
                    stroke: undefined,
                    lineJoin: 'round',
                    pointerEvents: PointerEvents.None,
                    fill: this.fill,
                    fillOpacity: this.fillOpacity,
                    lineDash: this.lineDash,
                    lineDashOffset: this.lineDashOffset,
                    strokeOpacity: this.strokeOpacity,
                    fillShadow: this.shadow,
                    opacity,
                    visible: visible || animationEnabled,
                    strokeWidth,
                });
                const updateClipPath = (path) => {
                    var _a, _b;
                    if (path.clipPath == null) {
                        path.clipPath = new Path2D();
                        path.clipScalingX = 1;
                        path.clipScalingY = 1;
                    }
                    (_a = path.clipPath) === null || _a === void 0 ? void 0 : _a.clear({ trackChanges: true });
                    (_b = path.clipPath) === null || _b === void 0 ? void 0 : _b.rect(-25, -25, (width !== null && width !== void 0 ? width : 0) + 50, (height !== null && height !== void 0 ? height : 0) + 50);
                };
                updateClipPath(stroke);
                updateClipPath(fill);
            });
        }
        updatePaths(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                this.updateAreaPaths([opts.paths], [opts.contextData]);
            });
        }
        updateAreaPaths(paths, contextData) {
            this.updateFillPath(paths, contextData);
            this.updateStrokePath(paths, contextData);
        }
        updateFillPath(paths, contextData) {
            contextData.forEach(({ fillData }, contextDataIndex) => {
                const [fill] = paths[contextDataIndex];
                const { path: fillPath } = fill;
                fillPath.clear({ trackChanges: true });
                for (const { point } of fillData.points) {
                    if (point.moveTo) {
                        fillPath.moveTo(point.x, point.y);
                    }
                    else {
                        fillPath.lineTo(point.x, point.y);
                    }
                }
                fillPath.closePath();
                fill.checkPathDirty();
            });
        }
        updateStrokePath(paths, contextData) {
            contextData.forEach(({ strokeData }, contextDataIndex) => {
                const [, stroke] = paths[contextDataIndex];
                const { path: strokePath } = stroke;
                strokePath.clear({ trackChanges: true });
                for (const { point } of strokeData.points) {
                    if (point.moveTo) {
                        strokePath.moveTo(point.x, point.y);
                    }
                    else {
                        strokePath.lineTo(point.x, point.y);
                    }
                }
                stroke.checkPathDirty();
            });
        }
        updateMarkerSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { nodeData, markerSelection } = opts;
                const { marker: { enabled }, } = this;
                const data = enabled && nodeData ? nodeData : [];
                if (this.marker.isDirty()) {
                    markerSelection.clear();
                    markerSelection.cleanup();
                }
                return markerSelection.update(data);
            });
        }
        updateMarkerNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { markerSelection, isHighlight: highlighted } = opts;
                const { xKey = '', yKey = '', marker, fill, stroke, strokeWidth, fillOpacity, strokeOpacity } = this;
                const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle(), {
                    fill,
                    stroke,
                    strokeWidth,
                    fillOpacity,
                    strokeOpacity,
                });
                markerSelection.each((node, datum) => {
                    this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey }, baseStyle);
                });
                if (!highlighted) {
                    this.marker.markClean();
                }
            });
        }
        updateLabelSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { labelData, labelSelection } = opts;
                return labelSelection.update(labelData, (text) => {
                    text.tag = AreaSeriesTag.Label;
                });
            });
        }
        updateLabelNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { labelSelection } = opts;
                const { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color } = this.label;
                labelSelection.each((text, datum) => {
                    const { x, y, label } = datum;
                    if (label && labelEnabled && this.visible) {
                        text.fontStyle = fontStyle;
                        text.fontWeight = fontWeight;
                        text.fontSize = fontSize;
                        text.fontFamily = fontFamily;
                        text.textAlign = label.textAlign;
                        text.textBaseline = label.textBaseline;
                        text.text = label.text;
                        text.x = x;
                        text.y = y - 10;
                        text.fill = color;
                        text.visible = true;
                    }
                    else {
                        text.visible = false;
                    }
                });
            });
        }
        getTooltipHtml(nodeDatum) {
            const { xKey, id: seriesId, axes, xName, yName, tooltip, marker, dataModel } = this;
            const { yKey, xValue, yValue, datum } = nodeDatum;
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            if (!(xKey && yKey) || !(xAxis && yAxis && isNumber(yValue)) || !dataModel) {
                return '';
            }
            const xString = xAxis.formatDatum(xValue);
            const yString = yAxis.formatDatum(yValue);
            const title = sanitizeHtml(yName);
            const content = sanitizeHtml(xString + ': ' + yString);
            const baseStyle = mergeDefaults({ fill: this.fill }, marker.getStyle(), {
                stroke: this.stroke,
                strokeWidth: this.strokeWidth,
            });
            const { fill: color } = this.getMarkerStyle(marker, { datum: nodeDatum, xKey, yKey, highlighted: false }, baseStyle);
            return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, {
                datum,
                xKey,
                xName,
                yKey,
                yName,
                color,
                title,
                seriesId,
            });
        }
        getLegendData(legendType) {
            var _a, _b, _c, _d, _e;
            const { data, id, xKey, yKey, yName, marker, fill, stroke, fillOpacity, strokeOpacity, visible } = this;
            if (!(data === null || data === void 0 ? void 0 : data.length) || !xKey || !yKey || legendType !== 'category') {
                return [];
            }
            return [
                {
                    legendType,
                    id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: yName !== null && yName !== void 0 ? yName : yKey,
                    },
                    marker: {
                        shape: marker.shape,
                        fill: (_a = marker.fill) !== null && _a !== void 0 ? _a : fill,
                        stroke: (_b = marker.stroke) !== null && _b !== void 0 ? _b : stroke,
                        fillOpacity: (_c = marker.fillOpacity) !== null && _c !== void 0 ? _c : fillOpacity,
                        strokeOpacity: (_d = marker.strokeOpacity) !== null && _d !== void 0 ? _d : strokeOpacity,
                        strokeWidth: (_e = marker.strokeWidth) !== null && _e !== void 0 ? _e : 0,
                    },
                },
            ];
        }
        animateEmptyUpdateReady(animationData) {
            const { markerSelections, labelSelections, contextData, paths } = animationData;
            const { animationManager } = this.ctx;
            const { seriesRectWidth: width = 0 } = this.nodeDataDependencies;
            this.updateAreaPaths(paths, contextData);
            pathSwipeInAnimation(this, animationManager, paths.flat());
            resetMotion(markerSelections, resetMarkerPositionFn);
            markerSwipeScaleInAnimation(this, animationManager, markerSelections, width);
            seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);
        }
        animateReadyResize(animationData) {
            const { contextData, paths } = animationData;
            this.updateAreaPaths(paths, contextData);
            super.animateReadyResize(animationData);
        }
        animateWaitingUpdateReady(animationData) {
            var _a, _b;
            const { animationManager } = this.ctx;
            const { markerSelections, labelSelections, contextData, paths, previousContextData } = animationData;
            super.resetAllAnimation(animationData);
            if (contextData.length === 0 || !previousContextData || previousContextData.length === 0) {
                animationManager.skipCurrentBatch();
                this.updateAreaPaths(paths, contextData);
                return;
            }
            const [[fill, stroke]] = paths;
            const [newData] = contextData;
            const [oldData] = previousContextData;
            const fns = prepareAreaPathAnimation(newData, oldData, (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff);
            if (fns === undefined) {
                animationManager.skipCurrentBatch();
                this.updateAreaPaths(paths, contextData);
                return;
            }
            fromToMotion(this.id, 'marker_update', animationManager, markerSelections, fns.marker);
            fromToMotion(this.id, 'fill_path_properties', animationManager, [fill], fns.fill.pathProperties);
            pathMotion(this.id, 'fill_path_update', animationManager, [fill], fns.fill.path);
            this.updateStrokePath(paths, contextData);
            pathFadeInAnimation(this, 'stroke', animationManager, [stroke]);
            seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);
        }
        isLabelEnabled() {
            return this.label.enabled;
        }
        nodeFactory() {
            return new Group();
        }
    }
    AreaSeries.className = 'AreaSeries';
    AreaSeries.type = 'area';
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", String)
    ], AreaSeries.prototype, "fill", void 0);
    __decorate([
        Validate(COLOR_STRING),
        __metadata("design:type", String)
    ], AreaSeries.prototype, "stroke", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], AreaSeries.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], AreaSeries.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_LINE_DASH),
        __metadata("design:type", Array)
    ], AreaSeries.prototype, "lineDash", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], AreaSeries.prototype, "lineDashOffset", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], AreaSeries.prototype, "xKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], AreaSeries.prototype, "xName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], AreaSeries.prototype, "yKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], AreaSeries.prototype, "yName", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], AreaSeries.prototype, "normalizedTo", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Object)
    ], AreaSeries.prototype, "strokeWidth", void 0);

    const AreaSeriesModule = {
        type: 'series',
        optionsKey: 'series[]',
        packageType: 'community',
        chartTypes: ['cartesian'],
        identifier: 'area',
        instanceConstructor: AreaSeries,
        stackable: true,
        seriesDefaults: DEFAULT_CARTESIAN_CHART_OVERRIDES,
        themeTemplate: {
            __extends__: EXTENDS_SERIES_DEFAULTS,
            nodeClickRange: 'nearest',
            tooltip: {
                position: {
                    type: 'node',
                },
            },
            fillOpacity: 0.8,
            strokeOpacity: 1,
            strokeWidth: 0,
            lineDash: [0],
            lineDashOffset: 0,
            shadow: {
                enabled: false,
                color: DEFAULT_SHADOW_COLOUR,
                xOffset: 3,
                yOffset: 3,
                blur: 5,
            },
            marker: {
                __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,
                enabled: false,
                fillOpacity: 1,
                strokeOpacity: 1,
                strokeWidth: 0,
            },
            label: {
                enabled: false,
                fontStyle: undefined,
                fontWeight: undefined,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_LABEL_COLOUR,
                formatter: undefined,
            },
        },
        paletteFactory: (params) => {
            const { marker } = markerPaletteFactory(params);
            return {
                fill: marker.fill,
                stroke: marker.stroke,
                marker,
            };
        },
    };

    class AbstractBarSeries extends CartesianSeries {
        constructor() {
            super(...arguments);
            this.direction = 'vertical';
        }
        getBandScalePadding() {
            return { inner: 0.2, outer: 0.1 };
        }
        shouldFlipXY() {
            return this.direction === 'horizontal';
        }
        getBarDirection() {
            return this.shouldFlipXY() ? ChartAxisDirection.X : ChartAxisDirection.Y;
        }
        getCategoryDirection() {
            return this.shouldFlipXY() ? ChartAxisDirection.Y : ChartAxisDirection.X;
        }
        getValueAxis() {
            const direction = this.getBarDirection();
            return this.axes[direction];
        }
        getCategoryAxis() {
            const direction = this.getCategoryDirection();
            return this.axes[direction];
        }
    }
    __decorate([
        Validate(DIRECTION),
        __metadata("design:type", String)
    ], AbstractBarSeries.prototype, "direction", void 0);

    function updateRect({ rect, config }) {
        const { crisp = true, fill, stroke, strokeWidth, fillOpacity, strokeOpacity, lineDash, lineDashOffset, fillShadow, visible = true, } = config;
        rect.crisp = crisp;
        rect.fill = fill;
        rect.stroke = stroke;
        rect.strokeWidth = strokeWidth;
        rect.fillOpacity = fillOpacity;
        rect.strokeOpacity = strokeOpacity;
        rect.lineDash = lineDash;
        rect.lineDashOffset = lineDashOffset;
        rect.fillShadow = fillShadow;
        rect.visible = visible;
    }
    function getRectConfig(_a) {
        var _b, _c, _d, _e, _f;
        var { datum, isHighlighted, style, highlightStyle, formatter, seriesId, ctx: { callbackCache } } = _a, opts = __rest(_a, ["datum", "isHighlighted", "style", "highlightStyle", "formatter", "seriesId", "ctx"]);
        const { fill, fillOpacity, stroke, strokeWidth } = mergeDefaults(isHighlighted && highlightStyle, style);
        const { strokeOpacity, fillShadow, lineDash, lineDashOffset } = style;
        let format;
        if (formatter) {
            format = callbackCache.call(formatter, Object.assign({ datum: datum.datum, xKey: datum.xKey, fill,
                stroke,
                strokeWidth, highlighted: isHighlighted, seriesId }, opts));
        }
        return {
            fill: (_b = format === null || format === void 0 ? void 0 : format.fill) !== null && _b !== void 0 ? _b : fill,
            stroke: (_c = format === null || format === void 0 ? void 0 : format.stroke) !== null && _c !== void 0 ? _c : stroke,
            strokeWidth: (_d = format === null || format === void 0 ? void 0 : format.strokeWidth) !== null && _d !== void 0 ? _d : strokeWidth,
            fillOpacity: (_e = format === null || format === void 0 ? void 0 : format.fillOpacity) !== null && _e !== void 0 ? _e : fillOpacity,
            strokeOpacity: (_f = format === null || format === void 0 ? void 0 : format.strokeOpacity) !== null && _f !== void 0 ? _f : strokeOpacity,
            lineDash,
            lineDashOffset,
            fillShadow,
        };
    }
    function checkCrisp(visibleRange = []) {
        const [visibleMin, visibleMax] = visibleRange;
        const isZoomed = visibleMin !== 0 || visibleMax !== 1;
        return !isZoomed;
    }
    function collapsedStartingBarPosition(isVertical, axes) {
        const { startingX, startingY } = getStartingValues(isVertical, axes);
        const isDatumNegative = (datum) => {
            var _a;
            return isNegative((_a = datum['yValue']) !== null && _a !== void 0 ? _a : 0);
        };
        const calculate = (datum, prevDatum) => {
            let x = isVertical ? datum.x : startingX;
            let y = isVertical ? startingY : datum.y;
            let width = isVertical ? datum.width : 0;
            let height = isVertical ? 0 : datum.height;
            if (prevDatum && (isNaN(x) || isNaN(y))) {
                // Fallback
                ({ x, y } = prevDatum);
                width = isVertical ? prevDatum.width : 0;
                height = isVertical ? 0 : prevDatum.height;
                if (isVertical && !isDatumNegative(prevDatum)) {
                    y += prevDatum.height;
                }
                else if (!isVertical && isDatumNegative(prevDatum)) {
                    x += prevDatum.width;
                }
            }
            return { x, y, width, height };
        };
        return { isVertical, calculate };
    }
    function midpointStartingBarPosition(isVertical) {
        return {
            isVertical,
            calculate: (datum) => {
                return {
                    x: isVertical ? datum.x : datum.x + datum.width / 2,
                    y: isVertical ? datum.y + datum.height / 2 : datum.y,
                    width: isVertical ? datum.width : 0,
                    height: isVertical ? 0 : datum.height,
                };
            },
        };
    }
    function prepareBarAnimationFunctions(initPos) {
        const isRemoved = (datum) => datum == null || isNaN(datum.x) || isNaN(datum.y);
        const fromFn = (rect, datum, status) => {
            if (status === 'updated' && isRemoved(datum)) {
                status = 'removed';
            }
            else if (status === 'updated' && isRemoved(rect.previousDatum)) {
                status = 'added';
            }
            // Continue from current rendering location.
            let source = { x: rect.x, y: rect.y, width: rect.width, height: rect.height };
            if (status === 'unknown' || status === 'added') {
                source = initPos.calculate(datum, rect.previousDatum);
            }
            return Object.assign(Object.assign({}, source), FROM_TO_MIXINS[status]);
        };
        const toFn = (rect, datum, status) => {
            if (status === 'removed' || isRemoved(datum)) {
                return initPos.calculate(datum, rect.previousDatum);
            }
            return { x: datum.x, y: datum.y, width: datum.width, height: datum.height };
        };
        return { toFn, fromFn };
    }
    function getStartingValues(isVertical, axes) {
        const axis = axes[isVertical ? ChartAxisDirection.Y : ChartAxisDirection.X];
        let startingX = Infinity;
        let startingY = 0;
        if (!axis) {
            return { startingX, startingY };
        }
        if (isVertical) {
            startingY = axis.scale.convert(ContinuousScale.is(axis.scale) ? 0 : Math.max(...axis.range));
        }
        else {
            startingX = axis.scale.convert(ContinuousScale.is(axis.scale) ? 0 : Math.min(...axis.range));
        }
        return { startingX, startingY };
    }
    function resetBarSelectionsFn(_node, { x, y, width, height }) {
        return { x, y, width, height };
    }

    function updateLabelNode(textNode, label, labelDatum) {
        if (label.enabled && labelDatum) {
            const { x, y, text, textAlign, textBaseline } = labelDatum;
            const { color: fill, fontStyle, fontWeight, fontSize, fontFamily } = label;
            textNode.setProperties({
                visible: true,
                x,
                y,
                text,
                fill,
                fontStyle,
                fontWeight,
                fontSize,
                fontFamily,
                textAlign,
                textBaseline,
            });
        }
        else {
            textNode.visible = false;
        }
    }
    function adjustLabelPlacement({ isPositive, isVertical, placement, padding = 0, rect, }) {
        let x = rect.x + rect.width / 2;
        let y = rect.y + rect.height / 2;
        let textAlign = 'center';
        let textBaseline = 'middle';
        switch (placement) {
            case 'start': {
                if (isVertical) {
                    y = isPositive ? rect.y + rect.height + padding : rect.y - padding;
                    textBaseline = isPositive ? 'top' : 'bottom';
                }
                else {
                    x = isPositive ? rect.x - padding : rect.x + rect.width + padding;
                    textAlign = isPositive ? 'start' : 'end';
                }
                break;
            }
            case 'outside':
            case 'end': {
                if (isVertical) {
                    y = isPositive ? rect.y - padding : rect.y + rect.height + padding;
                    textBaseline = isPositive ? 'bottom' : 'top';
                }
                else {
                    x = isPositive ? rect.x + rect.width + padding : rect.x - padding;
                    textAlign = isPositive ? 'start' : 'end';
                }
                break;
            }
        }
        return { x, y, textAlign, textBaseline };
    }

    var BarSeriesNodeTag;
    (function (BarSeriesNodeTag) {
        BarSeriesNodeTag[BarSeriesNodeTag["Bar"] = 0] = "Bar";
        BarSeriesNodeTag[BarSeriesNodeTag["Label"] = 1] = "Label";
    })(BarSeriesNodeTag || (BarSeriesNodeTag = {}));
    class BarSeriesLabel extends Label {
        constructor() {
            super(...arguments);
            this.placement = 'inside';
        }
    }
    __decorate([
        Validate(STRING_UNION('inside', 'outside')),
        __metadata("design:type", String)
    ], BarSeriesLabel.prototype, "placement", void 0);
    class BarSeries extends AbstractBarSeries {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],
                pathsPerSeries: 0,
                hasHighlightedLabels: true,
                datumSelectionGarbageCollection: false,
                animationResetFns: {
                    datum: resetBarSelectionsFn,
                    label: resetLabelFn,
                },
            });
            this.label = new BarSeriesLabel();
            this.tooltip = new SeriesTooltip();
            this.fill = '#c16068';
            this.stroke = '#874349';
            this.fillOpacity = 1;
            this.strokeOpacity = 1;
            this.lineDash = [0];
            this.lineDashOffset = 0;
            this.formatter = undefined;
            this.xKey = undefined;
            this.xName = undefined;
            this.yKey = undefined;
            this.yName = undefined;
            this.stackGroup = undefined;
            this.strokeWidth = 1;
            this.shadow = undefined;
            /**
             * Used to get the position of bars within each group.
             */
            this.groupScale = new BandScale();
            this.smallestDataInterval = undefined;
        }
        resolveKeyDirection(direction) {
            if (this.getBarDirection() === ChartAxisDirection.X) {
                if (direction === ChartAxisDirection.X) {
                    return ChartAxisDirection.Y;
                }
                return ChartAxisDirection.X;
            }
            return direction;
        }
        processData(dataController) {
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function* () {
                const { xKey, yKey, normalizedTo, seriesGrouping: { groupIndex = this.id } = {}, data = [] } = this;
                if (xKey == null || yKey == null || data == null)
                    return;
                const animationEnabled = !this.ctx.animationManager.isSkipped();
                const normalizedToAbs = Math.abs(normalizedTo !== null && normalizedTo !== void 0 ? normalizedTo : NaN);
                const isContinuousX = ContinuousScale.is((_a = this.getCategoryAxis()) === null || _a === void 0 ? void 0 : _a.scale);
                const isContinuousY = ContinuousScale.is((_b = this.getValueAxis()) === null || _b === void 0 ? void 0 : _b.scale);
                const stackGroupName = `bar-stack-${groupIndex}-yValues`;
                const stackGroupTrailingName = `${stackGroupName}-trailing`;
                const normaliseTo = normalizedToAbs && isFinite(normalizedToAbs) ? normalizedToAbs : undefined;
                const extraProps = [];
                if (normaliseTo) {
                    extraProps.push(normaliseGroupTo(this, [stackGroupName, stackGroupTrailingName], normaliseTo, 'range'));
                }
                if (animationEnabled && this.processedData) {
                    extraProps.push(diff(this.processedData));
                }
                if (animationEnabled) {
                    extraProps.push(animationValidation(this));
                }
                const visibleProps = !this.visible ? { forceValue: 0 } : {};
                const { processedData } = yield this.requestDataModel(dataController, data, {
                    props: [
                        keyProperty(this, xKey, isContinuousX, { id: 'xValue' }),
                        valueProperty(this, yKey, isContinuousY, Object.assign({ id: `yValue-raw`, invalidValue: null }, visibleProps)),
                        ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'normal', 'current', Object.assign({ id: `yValue-end`, invalidValue: null, missingValue: 0, groupId: stackGroupName, separateNegative: true }, visibleProps)),
                        ...groupAccumulativeValueProperty(this, yKey, isContinuousY, 'trailing', 'current', Object.assign({ id: `yValue-start`, invalidValue: null, missingValue: 0, groupId: stackGroupTrailingName, separateNegative: true }, visibleProps)),
                        ...(isContinuousX ? [SMALLEST_KEY_INTERVAL] : []),
                        ...extraProps,
                    ],
                    groupByKeys: true,
                });
                this.smallestDataInterval = {
                    x: (_d = (_c = processedData.reduced) === null || _c === void 0 ? void 0 : _c.smallestKeyInterval) !== null && _d !== void 0 ? _d : Infinity,
                    y: Infinity,
                };
                this.animationState.transition('updateData');
            });
        }
        getSeriesDomain(direction) {
            var _a;
            const { processedData, dataModel } = this;
            if (!processedData || !dataModel)
                return [];
            const { reduced: { [SMALLEST_KEY_INTERVAL.property]: smallestX } = {} } = processedData;
            const categoryAxis = this.getCategoryAxis();
            const valueAxis = this.getValueAxis();
            const keyDef = dataModel.resolveProcessedDataDefById(this, `xValue`);
            const keys = dataModel.getDomain(this, `xValue`, 'key', processedData);
            const yExtent = dataModel.getDomain(this, `yValue-end`, 'value', processedData);
            if (direction === this.getCategoryDirection()) {
                if ((keyDef === null || keyDef === void 0 ? void 0 : keyDef.def.type) === 'key' && (keyDef === null || keyDef === void 0 ? void 0 : keyDef.def.valueType) === 'category') {
                    return keys;
                }
                const scalePadding = smallestX != null && isFinite(smallestX) ? smallestX : 0;
                const keysExtent = (_a = extent(keys)) !== null && _a !== void 0 ? _a : [NaN, NaN];
                if (direction === ChartAxisDirection.Y) {
                    return fixNumericExtent([keysExtent[0] + -scalePadding, keysExtent[1]], categoryAxis);
                }
                return fixNumericExtent([keysExtent[0], keysExtent[1] + scalePadding], categoryAxis);
            }
            else if (this.getValueAxis() instanceof LogAxis) {
                return fixNumericExtent(yExtent, valueAxis);
            }
            else {
                const fixedYExtent = [yExtent[0] > 0 ? 0 : yExtent[0], yExtent[1] < 0 ? 0 : yExtent[1]];
                return fixNumericExtent(fixedYExtent, valueAxis);
            }
        }
        createNodeData() {
            const _super = Object.create(null, {
                calculateScaling: { get: () => super.calculateScaling }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const { dataModel } = this;
                const xAxis = this.getCategoryAxis();
                const yAxis = this.getValueAxis();
                if (!(dataModel && xAxis && yAxis)) {
                    return [];
                }
                const xScale = xAxis.scale;
                const yScale = yAxis.scale;
                const { groupScale, yKey = '', xKey = '', fill, stroke, strokeWidth, label, processedData, ctx: { seriesStateManager }, smallestDataInterval, } = this;
                const xBandWidth = ContinuousScale.is(xScale)
                    ? xScale.calcBandwidth(smallestDataInterval === null || smallestDataInterval === void 0 ? void 0 : smallestDataInterval.x)
                    : xScale.bandwidth;
                const domain = [];
                const { index: groupIndex, visibleGroupCount } = seriesStateManager.getVisiblePeerGroupIndex(this);
                for (let groupIdx = 0; groupIdx < visibleGroupCount; groupIdx++) {
                    domain.push(String(groupIdx));
                }
                groupScale.domain = domain;
                groupScale.range = [0, xBandWidth !== null && xBandWidth !== void 0 ? xBandWidth : 0];
                if (xAxis instanceof CategoryAxis) {
                    groupScale.paddingInner = xAxis.groupPaddingInner;
                }
                else if (xAxis instanceof GroupedCategoryAxis) {
                    groupScale.padding = 0.1;
                }
                else {
                    // Number or Time axis
                    groupScale.padding = 0;
                }
                // To get exactly `0` padding we need to turn off rounding
                groupScale.round = groupScale.padding !== 0;
                const barWidth = groupScale.bandwidth >= 1
                    ? // Pixel-rounded value for low-volume bar charts.
                        groupScale.bandwidth
                    : // Handle high-volume bar charts gracefully.
                        groupScale.rawBandwidth;
                const xIndex = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;
                const yRawIndex = dataModel.resolveProcessedDataIndexById(this, `yValue-raw`).index;
                const yStartIndex = dataModel.resolveProcessedDataIndexById(this, `yValue-start`).index;
                const yEndIndex = dataModel.resolveProcessedDataIndexById(this, `yValue-end`).index;
                const animationEnabled = !this.ctx.animationManager.isSkipped();
                const context = {
                    itemId: yKey,
                    nodeData: [],
                    labelData: [],
                    scales: _super.calculateScaling.call(this),
                    visible: this.visible || animationEnabled,
                };
                processedData === null || processedData === void 0 ? void 0 : processedData.data.forEach(({ keys, datum: seriesDatum, values }) => {
                    const xValue = keys[xIndex];
                    const x = xScale.convert(xValue);
                    const currY = +values[0][yEndIndex];
                    const prevY = +values[0][yStartIndex];
                    const yRawValue = values[0][yRawIndex];
                    const barX = x + groupScale.convert(String(groupIndex));
                    if (isNaN(currY)) {
                        return;
                    }
                    const y = yScale.convert(currY);
                    const bottomY = yScale.convert(prevY);
                    const barAlongX = this.getBarDirection() === ChartAxisDirection.X;
                    const rect = {
                        x: barAlongX ? Math.min(y, bottomY) : barX,
                        y: barAlongX ? barX : Math.min(y, bottomY),
                        width: barAlongX ? Math.abs(bottomY - y) : barWidth,
                        height: barAlongX ? barWidth : Math.abs(bottomY - y),
                    };
                    const { fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, placement, } = label;
                    const labelText = this.getLabelText(this.label, {
                        datum: seriesDatum[0],
                        value: yRawValue,
                        xKey,
                        yKey,
                        xName: this.xName,
                        yName: this.yName,
                        legendItemName: this.legendItemName,
                    }, (value) => (isNumber(value) ? value.toFixed(2) : ''));
                    const labelDatum = labelText
                        ? Object.assign({ text: labelText, fill: labelColor, fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily }, adjustLabelPlacement({
                            isPositive: yRawValue >= 0,
                            isVertical: !barAlongX,
                            placement,
                            rect,
                        })) : undefined;
                    const lengthRatioMultiplier = this.shouldFlipXY() ? rect.height : rect.width;
                    const nodeData = {
                        series: this,
                        itemId: yKey,
                        datum: seriesDatum[0],
                        cumulativeValue: currY,
                        xValue,
                        yValue: yRawValue,
                        yKey,
                        xKey,
                        capDefaults: {
                            lengthRatioMultiplier: lengthRatioMultiplier,
                            lengthMax: lengthRatioMultiplier,
                        },
                        x: rect.x,
                        y: rect.y,
                        width: rect.width,
                        height: rect.height,
                        midPoint: { x: rect.x + rect.width / 2, y: rect.y + rect.height / 2 },
                        fill,
                        stroke,
                        strokeWidth,
                        label: labelDatum,
                    };
                    context.nodeData.push(nodeData);
                    context.labelData.push(nodeData);
                });
                return [context];
            });
        }
        nodeFactory() {
            return new Rect();
        }
        updateDatumSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                return opts.datumSelection.update(opts.nodeData, (rect) => {
                    rect.tag = BarSeriesNodeTag.Bar;
                }, (datum) => datum.xValue);
            });
        }
        updateDatumNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { datumSelection, isHighlight } = opts;
                const { yKey = '', fill, stroke, fillOpacity, strokeOpacity, lineDash, lineDashOffset, shadow, formatter, id: seriesId, highlightStyle: { item: itemHighlightStyle }, ctx, stackGroup, } = this;
                const xAxis = this.axes[ChartAxisDirection.X];
                const crisp = checkCrisp(xAxis === null || xAxis === void 0 ? void 0 : xAxis.visibleRange);
                const categoryAlongX = this.getCategoryDirection() === ChartAxisDirection.X;
                datumSelection.each((rect, datum) => {
                    const style = {
                        fill,
                        stroke,
                        fillOpacity,
                        strokeOpacity,
                        lineDash,
                        lineDashOffset,
                        fillShadow: shadow,
                        strokeWidth: this.getStrokeWidth(this.strokeWidth),
                    };
                    const visible = categoryAlongX ? datum.width > 0 : datum.height > 0;
                    const config = getRectConfig({
                        datum,
                        isHighlighted: isHighlight,
                        style,
                        highlightStyle: itemHighlightStyle,
                        formatter,
                        seriesId,
                        stackGroup,
                        ctx,
                        yKey,
                    });
                    config.crisp = crisp;
                    config.visible = visible;
                    updateRect({ rect, config });
                });
            });
        }
        updateLabelSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const data = this.label.enabled ? opts.labelData : [];
                return opts.labelSelection.update(data, (text) => {
                    text.tag = BarSeriesNodeTag.Label;
                    text.pointerEvents = PointerEvents.None;
                });
            });
        }
        updateLabelNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                opts.labelSelection.each((textNode, datum) => {
                    updateLabelNode(textNode, this.label, datum.label);
                });
            });
        }
        getTooltipHtml(nodeDatum) {
            var _a;
            const { xKey, yKey, processedData, ctx: { callbackCache }, } = this;
            const xAxis = this.getCategoryAxis();
            const yAxis = this.getValueAxis();
            const { xValue, yValue, datum } = nodeDatum;
            if (!processedData || !xKey || !yKey || !xAxis || !yAxis) {
                return '';
            }
            const { xName, yName, fill, stroke, tooltip, formatter, id: seriesId, stackGroup } = this;
            const strokeWidth = this.getStrokeWidth(this.strokeWidth);
            const xString = xAxis.formatDatum(xValue);
            const yString = yAxis.formatDatum(yValue);
            const title = sanitizeHtml(yName);
            const content = sanitizeHtml(xString + ': ' + yString);
            let format;
            if (formatter) {
                format = callbackCache.call(formatter, {
                    datum,
                    fill,
                    stroke,
                    strokeWidth,
                    highlighted: false,
                    xKey,
                    yKey,
                    seriesId,
                    stackGroup,
                });
            }
            const color = (_a = format === null || format === void 0 ? void 0 : format.fill) !== null && _a !== void 0 ? _a : fill;
            return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, Object.assign({ datum,
                xKey,
                xName,
                yKey,
                yName,
                color,
                title,
                seriesId,
                stackGroup }, this.getModuleTooltipParams(datum)));
        }
        getLegendData(legendType) {
            var _a;
            const { id, data, xKey, yKey, yName, legendItemName, fill, stroke, strokeWidth, fillOpacity, strokeOpacity, visible, showInLegend, } = this;
            if (legendType !== 'category' || !showInLegend || !(data === null || data === void 0 ? void 0 : data.length) || !xKey || !yKey) {
                return [];
            }
            return [
                {
                    legendType: 'category',
                    id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: visible,
                    label: { text: (_a = legendItemName !== null && legendItemName !== void 0 ? legendItemName : yName) !== null && _a !== void 0 ? _a : yKey },
                    marker: { fill, stroke, fillOpacity, strokeOpacity, strokeWidth },
                    legendItemName,
                },
            ];
        }
        animateEmptyUpdateReady({ datumSelections, labelSelections, annotationSelections }) {
            const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(this.direction === 'vertical', this.axes));
            fromToMotion(this.id, 'nodes', this.ctx.animationManager, datumSelections, fns);
            seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);
            seriesLabelFadeInAnimation(this, 'annotations', this.ctx.animationManager, annotationSelections);
        }
        animateWaitingUpdateReady(data) {
            var _a, _b;
            const { datumSelections, labelSelections, annotationSelections } = data;
            this.ctx.animationManager.stopByAnimationGroupId(this.id);
            const diff = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff;
            const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(this.direction === 'vertical', this.axes));
            fromToMotion(this.id, 'nodes', this.ctx.animationManager, datumSelections, fns, (_, datum) => String(datum.xValue), diff);
            seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);
            seriesLabelFadeInAnimation(this, 'annotations', this.ctx.animationManager, annotationSelections);
        }
        isLabelEnabled() {
            return this.label.enabled;
        }
    }
    BarSeries.className = 'BarSeries';
    BarSeries.type = 'bar';
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], BarSeries.prototype, "fill", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], BarSeries.prototype, "stroke", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], BarSeries.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], BarSeries.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_LINE_DASH),
        __metadata("design:type", Array)
    ], BarSeries.prototype, "lineDash", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], BarSeries.prototype, "lineDashOffset", void 0);
    __decorate([
        Validate(OPT_FUNCTION),
        __metadata("design:type", Function)
    ], BarSeries.prototype, "formatter", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BarSeries.prototype, "xKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BarSeries.prototype, "xName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BarSeries.prototype, "yKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BarSeries.prototype, "yName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BarSeries.prototype, "stackGroup", void 0);
    __decorate([
        Validate(OPT_NUMBER()),
        __metadata("design:type", Number)
    ], BarSeries.prototype, "normalizedTo", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], BarSeries.prototype, "strokeWidth", void 0);

    const BarSeriesModule = {
        type: 'series',
        optionsKey: 'series[]',
        packageType: 'community',
        chartTypes: ['cartesian'],
        identifier: 'bar',
        instanceConstructor: BarSeries,
        stackable: true,
        groupable: true,
        seriesDefaults: {
            axes: [
                {
                    type: CARTESIAN_AXIS_TYPES.NUMBER,
                    position: CARTESIAN_AXIS_POSITIONS.LEFT,
                },
                {
                    type: CARTESIAN_AXIS_TYPES.CATEGORY,
                    position: CARTESIAN_AXIS_POSITIONS.BOTTOM,
                },
            ],
        },
        swapDefaultAxesCondition: (series) => (series === null || series === void 0 ? void 0 : series.direction) === 'horizontal',
        themeTemplate: {
            __extends__: EXTENDS_SERIES_DEFAULTS,
            fillOpacity: 1,
            strokeWidth: 0,
            lineDash: [0],
            lineDashOffset: 0,
            label: {
                enabled: false,
                fontStyle: undefined,
                fontWeight: NORMAL,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,
                formatter: undefined,
                placement: 'inside',
            },
            shadow: {
                enabled: false,
                color: DEFAULT_SHADOW_COLOUR,
                xOffset: 3,
                yOffset: 3,
                blur: 5,
            },
        },
        enterpriseThemeTemplate: {
            errorBar: {
                cap: {
                    lengthRatio: 0.3,
                },
            },
        },
        paletteFactory: singleSeriesPaletteFactory,
    };

    class BubbleSeriesNodeClickEvent extends CartesianSeriesNodeClickEvent {
        constructor(type, nativeEvent, datum, series) {
            super(type, nativeEvent, datum, series);
            this.sizeKey = series.sizeKey;
        }
    }
    class BubbleSeriesMarker extends SeriesMarker {
        constructor() {
            super(...arguments);
            /**
             * The series `sizeKey` values along with the `size` and `maxSize` configs will be used to
             * determine the size of the marker. All values will be mapped to a marker size within the
             * `[size, maxSize]` range, where the largest values will correspond to the `maxSize` and the
             * lowest to the `size`.
             */
            this.maxSize = 30;
            this.domain = undefined;
        }
    }
    __decorate([
        Validate(NUMBER$1(0)),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Object)
    ], BubbleSeriesMarker.prototype, "maxSize", void 0);
    __decorate([
        Validate(OPT_NUMBER_ARRAY),
        SceneChangeDetection({ redraw: RedrawType.MAJOR }),
        __metadata("design:type", Array)
    ], BubbleSeriesMarker.prototype, "domain", void 0);
    class BubbleSeries extends CartesianSeries {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                pickModes: [
                    SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,
                    SeriesNodePickMode.NEAREST_NODE,
                    SeriesNodePickMode.EXACT_SHAPE_MATCH,
                ],
                pathsPerSeries: 0,
                hasMarkers: true,
                markerSelectionGarbageCollection: false,
                animationResetFns: {
                    label: resetLabelFn,
                    marker: resetMarkerFn,
                },
            });
            this.NodeClickEvent = BubbleSeriesNodeClickEvent;
            this.sizeScale = new LinearScale();
            this.marker = new BubbleSeriesMarker();
            this.label = new Label();
            this.title = undefined;
            this.labelKey = undefined;
            this.xName = undefined;
            this.yName = undefined;
            this.sizeName = 'Size';
            this.labelName = 'Label';
            this.xKey = undefined;
            this.yKey = undefined;
            this.sizeKey = undefined;
            this.colorKey = undefined;
            this.colorName = 'Color';
            this.colorRange = ['#ffff00', '#00ff00', '#0000ff'];
            this.colorScale = new ColorScale();
            this.tooltip = new SeriesTooltip();
        }
        processData(dataController) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const { xKey, yKey, sizeKey, labelKey, colorScale, colorDomain, colorRange, colorKey, marker, data } = this;
                if (xKey == null || yKey == null || sizeKey == null || data == null)
                    return;
                const { isContinuousX, isContinuousY } = this.isContinuous();
                const { dataModel, processedData } = yield this.requestDataModel(dataController, data, {
                    props: [
                        keyProperty(this, xKey, isContinuousX, { id: 'xKey-raw' }),
                        keyProperty(this, yKey, isContinuousY, { id: 'yKey-raw' }),
                        ...(labelKey ? [keyProperty(this, labelKey, false, { id: `labelKey-raw` })] : []),
                        valueProperty(this, xKey, isContinuousX, { id: `xValue` }),
                        valueProperty(this, yKey, isContinuousY, { id: `yValue` }),
                        valueProperty(this, sizeKey, true, { id: `sizeValue` }),
                        ...(colorKey ? [valueProperty(this, colorKey, true, { id: `colorValue` })] : []),
                        ...(labelKey ? [valueProperty(this, labelKey, false, { id: `labelValue` })] : []),
                    ],
                    dataVisible: this.visible,
                });
                const sizeKeyIdx = dataModel.resolveProcessedDataIndexById(this, `sizeValue`).index;
                const processedSize = (_a = processedData.domain.values[sizeKeyIdx]) !== null && _a !== void 0 ? _a : [];
                this.sizeScale.domain = marker.domain ? marker.domain : processedSize;
                if (colorKey) {
                    const colorKeyIdx = dataModel.resolveProcessedDataIndexById(this, `colorValue`).index;
                    colorScale.domain = (_b = colorDomain !== null && colorDomain !== void 0 ? colorDomain : processedData.domain.values[colorKeyIdx]) !== null && _b !== void 0 ? _b : [];
                    colorScale.range = colorRange;
                    colorScale.update();
                }
                this.animationState.transition('updateData');
            });
        }
        getSeriesDomain(direction) {
            const { dataModel, processedData } = this;
            if (!processedData || !dataModel)
                return [];
            const id = direction === ChartAxisDirection.X ? `xValue` : `yValue`;
            const dataDef = dataModel.resolveProcessedDataDefById(this, id);
            const domain = dataModel.getDomain(this, id, 'value', processedData);
            if ((dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.type) === 'value' && (dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.valueType) === 'category') {
                return domain;
            }
            const axis = this.axes[direction];
            return fixNumericExtent(extent(domain), axis);
        }
        createNodeData() {
            const _super = Object.create(null, {
                calculateScaling: { get: () => super.calculateScaling }
            });
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function* () {
                const { visible, axes, yKey = '', xKey = '', label, labelKey, dataModel, processedData, colorScale, sizeKey = '', colorKey, } = this;
                const xAxis = axes[ChartAxisDirection.X];
                const yAxis = axes[ChartAxisDirection.Y];
                if (!(dataModel && processedData && visible && xAxis && yAxis))
                    return [];
                const xDataIdx = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;
                const yDataIdx = dataModel.resolveProcessedDataIndexById(this, `yValue`).index;
                const sizeDataIdx = sizeKey ? dataModel.resolveProcessedDataIndexById(this, `sizeValue`).index : -1;
                const colorDataIdx = colorKey ? dataModel.resolveProcessedDataIndexById(this, `colorValue`).index : -1;
                const labelDataIdx = labelKey ? dataModel.resolveProcessedDataIndexById(this, `labelValue`).index : -1;
                const xScale = xAxis.scale;
                const yScale = yAxis.scale;
                const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;
                const yOffset = ((_b = yScale.bandwidth) !== null && _b !== void 0 ? _b : 0) / 2;
                const { sizeScale, marker } = this;
                const nodeData = [];
                sizeScale.range = [marker.size, marker.maxSize];
                const font = label.getFont();
                for (const { values, datum } of (_c = processedData.data) !== null && _c !== void 0 ? _c : []) {
                    const xDatum = values[xDataIdx];
                    const yDatum = values[yDataIdx];
                    const x = xScale.convert(xDatum) + xOffset;
                    const y = yScale.convert(yDatum) + yOffset;
                    const labelText = this.getLabelText(label, {
                        value: labelKey ? values[labelDataIdx] : yDatum,
                        datum,
                        xKey,
                        yKey,
                        sizeKey,
                        labelKey,
                        xName: this.xName,
                        yName: this.yName,
                        sizeName: this.sizeName,
                        labelName: this.labelName,
                    });
                    const size = HdpiCanvas.getTextSize(String(labelText), font);
                    const markerSize = sizeKey ? sizeScale.convert(values[sizeDataIdx]) : marker.size;
                    const fill = colorKey ? colorScale.convert(values[colorDataIdx]) : undefined;
                    nodeData.push({
                        series: this,
                        itemId: yKey,
                        yKey,
                        xKey,
                        datum,
                        xValue: xDatum,
                        yValue: yDatum,
                        sizeValue: values[sizeDataIdx],
                        point: { x, y, size: markerSize },
                        midPoint: { x, y },
                        fill,
                        label: Object.assign({ text: labelText }, size),
                    });
                }
                return [
                    {
                        itemId: (_d = this.yKey) !== null && _d !== void 0 ? _d : this.id,
                        nodeData,
                        labelData: nodeData,
                        scales: _super.calculateScaling.call(this),
                        visible: this.visible,
                    },
                ];
            });
        }
        isPathOrSelectionDirty() {
            return this.marker.isDirty();
        }
        getLabelData() {
            var _a;
            return (_a = this.contextNodeData) === null || _a === void 0 ? void 0 : _a.reduce((r, n) => r.concat(n.labelData), []);
        }
        markerFactory() {
            const { shape } = this.marker;
            const MarkerShape = getMarker(shape);
            return new MarkerShape();
        }
        updateMarkerSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { nodeData, markerSelection } = opts;
                if (this.marker.isDirty()) {
                    markerSelection.clear();
                    markerSelection.cleanup();
                }
                const data = this.marker.enabled ? nodeData : [];
                return markerSelection.update(data, undefined, (datum) => this.getDatumId(datum));
            });
        }
        updateMarkerNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { markerSelection, isHighlight: highlighted } = opts;
                const { xKey = '', yKey = '', sizeKey = '', labelKey, marker } = this;
                const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle());
                this.sizeScale.range = [marker.size, marker.maxSize];
                markerSelection.each((node, datum) => {
                    this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey, sizeKey, labelKey }, baseStyle);
                });
                if (!highlighted) {
                    this.marker.markClean();
                }
            });
        }
        updateLabelSelection(opts) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const { labelSelection } = opts;
                const { label: { enabled }, } = this;
                const placedLabels = enabled ? (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.placeLabels().get(this)) !== null && _b !== void 0 ? _b : [] : [];
                const placedNodeDatum = placedLabels.map((v) => (Object.assign(Object.assign({}, v.datum), { point: {
                        x: v.x,
                        y: v.y,
                        size: v.datum.point.size,
                    } })));
                return labelSelection.update(placedNodeDatum);
            });
        }
        updateLabelNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { labelSelection } = opts;
                const { label } = this;
                labelSelection.each((text, datum) => {
                    var _a, _b, _c, _d;
                    text.text = datum.label.text;
                    text.fill = label.color;
                    text.x = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : 0;
                    text.y = (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : 0;
                    text.fontStyle = label.fontStyle;
                    text.fontWeight = label.fontWeight;
                    text.fontSize = label.fontSize;
                    text.fontFamily = label.fontFamily;
                    text.textAlign = 'left';
                    text.textBaseline = 'top';
                });
            });
        }
        getTooltipHtml(nodeDatum) {
            var _a;
            const { xKey, yKey, sizeKey, axes } = this;
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            if (!xKey || !yKey || !xAxis || !yAxis || !sizeKey) {
                return '';
            }
            const { marker, tooltip, xName, yName, sizeName, labelKey, labelName, id: seriesId } = this;
            const baseStyle = mergeDefaults({ fill: nodeDatum.fill, strokeWidth: this.getStrokeWidth(marker.strokeWidth) }, marker.getStyle());
            const { fill: color = 'gray' } = this.getMarkerStyle(marker, { datum: nodeDatum, highlighted: false, xKey, yKey, sizeKey, labelKey }, baseStyle);
            const title = (_a = this.title) !== null && _a !== void 0 ? _a : yName;
            const { datum, xValue, yValue, sizeValue, label: { text: labelText }, } = nodeDatum;
            const xString = sanitizeHtml(xAxis.formatDatum(xValue));
            const yString = sanitizeHtml(yAxis.formatDatum(yValue));
            let content = `<b>${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}</b>: ${xString}<br>` +
                `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)}</b>: ${yString}`;
            if (sizeKey) {
                content += `<br><b>${sanitizeHtml(sizeName !== null && sizeName !== void 0 ? sizeName : sizeKey)}</b>: ${sanitizeHtml(String(sizeValue))}`;
            }
            if (labelKey) {
                content = `<b>${sanitizeHtml(labelName !== null && labelName !== void 0 ? labelName : labelKey)}</b>: ${sanitizeHtml(labelText)}<br>` + content;
            }
            return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, {
                datum,
                xKey,
                xName,
                yKey,
                yName,
                sizeKey,
                sizeName,
                labelKey,
                labelName,
                title,
                color,
                seriesId,
            });
        }
        getLegendData() {
            var _a;
            const { id, data, xKey, yKey, sizeKey, yName, title, visible, marker } = this;
            const { shape, fill, stroke, fillOpacity, strokeOpacity, strokeWidth } = marker;
            if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey && sizeKey)) {
                return [];
            }
            return [
                {
                    legendType: 'category',
                    id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,
                    },
                    marker: {
                        shape,
                        fill: fill !== null && fill !== void 0 ? fill : 'rgba(0, 0, 0, 0)',
                        stroke: stroke !== null && stroke !== void 0 ? stroke : 'rgba(0, 0, 0, 0)',
                        fillOpacity: fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1,
                        strokeOpacity: strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1,
                        strokeWidth: strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 0,
                    },
                },
            ];
        }
        animateEmptyUpdateReady({ markerSelections, labelSelections }) {
            markerScaleInAnimation(this, this.ctx.animationManager, markerSelections);
            seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);
        }
        getDatumId(datum) {
            return createDatumId([`${datum.xValue}`, `${datum.yValue}`, datum.label.text]);
        }
        isLabelEnabled() {
            return this.label.enabled;
        }
        nodeFactory() {
            return new Group();
        }
    }
    BubbleSeries.className = 'BubbleSeries';
    BubbleSeries.type = 'bubble';
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "title", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "labelKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "xName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "yName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "sizeName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "labelName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "xKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "yKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "sizeKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "colorKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], BubbleSeries.prototype, "colorName", void 0);
    __decorate([
        Validate(OPT_NUMBER_ARRAY),
        __metadata("design:type", Array)
    ], BubbleSeries.prototype, "colorDomain", void 0);
    __decorate([
        Validate(COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], BubbleSeries.prototype, "colorRange", void 0);

    const BubbleSeriesModule = {
        type: 'series',
        optionsKey: 'series[]',
        packageType: 'community',
        chartTypes: ['cartesian'],
        identifier: 'bubble',
        instanceConstructor: BubbleSeries,
        seriesDefaults: {
            axes: [
                { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.BOTTOM },
                { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.LEFT },
            ],
        },
        themeTemplate: {
            __extends__: EXTENDS_SERIES_DEFAULTS,
            tooltip: {
                position: {
                    type: 'node',
                },
            },
            marker: {
                __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,
                maxSize: 30,
                fillOpacity: 0.8,
            },
            label: {
                enabled: false,
                fontStyle: undefined,
                fontWeight: undefined,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_LABEL_COLOUR,
            },
        },
        paletteFactory: markerPaletteFactory,
    };

    const HISTOGRAM_AGGREGATIONS = ['count', 'sum', 'mean'];
    const HISTOGRAM_AGGREGATION = predicateWithMessage((v) => HISTOGRAM_AGGREGATIONS.includes(v), `expecting a histogram aggregation keyword such as 'count', 'sum' or 'mean`);
    var HistogramSeriesNodeTag;
    (function (HistogramSeriesNodeTag) {
        HistogramSeriesNodeTag[HistogramSeriesNodeTag["Bin"] = 0] = "Bin";
        HistogramSeriesNodeTag[HistogramSeriesNodeTag["Label"] = 1] = "Label";
    })(HistogramSeriesNodeTag || (HistogramSeriesNodeTag = {}));
    const defaultBinCount = 10;
    class HistogramSeries extends CartesianSeries {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],
                datumSelectionGarbageCollection: false,
                animationResetFns: {
                    datum: resetBarSelectionsFn,
                    label: resetLabelFn,
                },
            });
            this.label = new Label();
            this.tooltip = new SeriesTooltip();
            this.fill = undefined;
            this.stroke = undefined;
            this.fillOpacity = 1;
            this.strokeOpacity = 1;
            this.lineDash = [0];
            this.lineDashOffset = 0;
            this.xKey = undefined;
            this.areaPlot = false;
            this.aggregation = 'sum';
            this.binCount = undefined;
            this.xName = undefined;
            this.yKey = undefined;
            this.yName = undefined;
            this.strokeWidth = 1;
            this.shadow = undefined;
            this.calculatedBins = [];
        }
        // During processData phase, used to unify different ways of the user specifying
        // the bins. Returns bins in format[[min1, max1], [min2, max2], ... ].
        deriveBins(xDomain) {
            if (this.binCount === undefined) {
                const binStarts = ticks(xDomain[0], xDomain[1], defaultBinCount);
                const binSize = tickStep(xDomain[0], xDomain[1], defaultBinCount);
                const firstBinEnd = binStarts[0];
                const expandStartToBin = (n) => [n, n + binSize];
                return [[firstBinEnd - binSize, firstBinEnd], ...binStarts.map(expandStartToBin)];
            }
            else {
                return this.calculateNiceBins(xDomain, this.binCount);
            }
        }
        calculateNiceBins(domain, binCount) {
            const startGuess = Math.floor(domain[0]);
            const stop = domain[1];
            const segments = binCount || 1;
            const { start, binSize } = this.calculateNiceStart(startGuess, stop, segments);
            return this.getBins(start, stop, binSize, segments);
        }
        getBins(start, stop, step, count) {
            const bins = [];
            for (let i = 0; i < count; i++) {
                const a = Math.round((start + i * step) * 10) / 10;
                let b = Math.round((start + (i + 1) * step) * 10) / 10;
                if (i === count - 1) {
                    b = Math.max(b, stop);
                }
                bins[i] = [a, b];
            }
            return bins;
        }
        calculateNiceStart(a, b, segments) {
            const binSize = Math.abs(b - a) / segments;
            const order = Math.floor(Math.log10(binSize));
            const magnitude = Math.pow(10, order);
            const start = Math.floor(a / magnitude) * magnitude;
            return {
                start,
                binSize,
            };
        }
        processData(dataController) {
            return __awaiter(this, void 0, void 0, function* () {
                const { xKey, yKey, data, areaPlot, aggregation } = this;
                const props = [keyProperty(this, xKey, true), SORT_DOMAIN_GROUPS];
                if (yKey) {
                    let aggProp = groupCount(this, 'groupCount');
                    if (aggregation === 'count') ;
                    else if (aggregation === 'sum') {
                        aggProp = groupSum(this, 'groupAgg');
                    }
                    else if (aggregation === 'mean') {
                        aggProp = groupAverage(this, 'groupAgg');
                    }
                    if (areaPlot) {
                        aggProp = area(this, 'groupAgg', aggProp);
                    }
                    props.push(valueProperty(this, yKey, true, { invalidValue: undefined }), aggProp);
                }
                else {
                    let aggProp = groupCount(this, 'groupAgg');
                    if (areaPlot) {
                        aggProp = area(this, 'groupAgg', aggProp);
                    }
                    props.push(aggProp);
                }
                const groupByFn = (dataSet) => {
                    var _a;
                    const xExtent = fixNumericExtent(dataSet.domain.keys[0]);
                    if (xExtent.length === 0) {
                        // No buckets can be calculated.
                        dataSet.domain.groups = [];
                        return () => [];
                    }
                    const bins = (_a = this.bins) !== null && _a !== void 0 ? _a : this.deriveBins(xExtent);
                    const binCount = bins.length;
                    this.calculatedBins = [...bins];
                    return (item) => {
                        const xValue = item.keys[0];
                        for (let i = 0; i < binCount; i++) {
                            const nextBin = bins[i];
                            if (xValue >= nextBin[0] && xValue < nextBin[1]) {
                                return nextBin;
                            }
                            if (i === binCount - 1 && xValue <= nextBin[1]) {
                                // Handle edge case of a value being at the maximum extent, and the
                                // final bin aligning with it.
                                return nextBin;
                            }
                        }
                        return [];
                    };
                };
                if (!this.ctx.animationManager.isSkipped() && this.processedData) {
                    props.push(diff(this.processedData, false));
                }
                yield this.requestDataModel(dataController, data !== null && data !== void 0 ? data : [], {
                    props,
                    dataVisible: this.visible,
                    groupByFn,
                });
                this.animationState.transition('updateData');
            });
        }
        getSeriesDomain(direction) {
            var _a, _b, _c, _d;
            const { processedData, dataModel } = this;
            if (!processedData || !dataModel || !this.calculatedBins.length)
                return [];
            const yDomain = dataModel.getDomain(this, `groupAgg`, 'aggregate', processedData);
            const xDomainMin = (_a = this.calculatedBins) === null || _a === void 0 ? void 0 : _a[0][0];
            const xDomainMax = (_b = this.calculatedBins) === null || _b === void 0 ? void 0 : _b[((_d = (_c = this.calculatedBins) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0) - 1][1];
            if (direction === ChartAxisDirection.X) {
                return fixNumericExtent([xDomainMin, xDomainMax]);
            }
            return fixNumericExtent(yDomain);
        }
        createNodeData() {
            const _super = Object.create(null, {
                calculateScaling: { get: () => super.calculateScaling }
            });
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { axes, processedData, ctx: { callbackCache }, } = this;
                const xAxis = axes[ChartAxisDirection.X];
                const yAxis = axes[ChartAxisDirection.Y];
                if (!this.visible || !xAxis || !yAxis || !processedData || processedData.type !== 'grouped') {
                    return [];
                }
                const { scale: xScale } = xAxis;
                const { scale: yScale } = yAxis;
                const { fill, stroke, strokeWidth, id: seriesId, yKey = '', xKey = '' } = this;
                const nodeData = [];
                const { label: { formatter: labelFormatter = (params) => String(params.value), fontStyle: labelFontStyle, fontWeight: labelFontWeight, fontSize: labelFontSize, fontFamily: labelFontFamily, color: labelColor, }, } = this;
                processedData.data.forEach((group) => {
                    var _a;
                    const { aggValues: [[negativeAgg, positiveAgg]] = [[0, 0]], datum, datum: { length: frequency }, keys: domain, keys: [xDomainMin, xDomainMax], } = group;
                    const xMinPx = xScale.convert(xDomainMin);
                    const xMaxPx = xScale.convert(xDomainMax);
                    const total = negativeAgg + positiveAgg;
                    const yZeroPx = yScale.convert(0);
                    const yMaxPx = yScale.convert(total);
                    const w = xMaxPx - xMinPx;
                    const h = Math.abs(yMaxPx - yZeroPx);
                    const selectionDatumLabel = total !== 0
                        ? {
                            text: (_a = callbackCache.call(labelFormatter, {
                                value: total,
                                datum,
                                seriesId,
                                xKey,
                                yKey,
                                xName: this.xName,
                                yName: this.yName,
                            })) !== null && _a !== void 0 ? _a : String(total),
                            fontStyle: labelFontStyle,
                            fontWeight: labelFontWeight,
                            fontSize: labelFontSize,
                            fontFamily: labelFontFamily,
                            fill: labelColor,
                            x: xMinPx + w / 2,
                            y: yMaxPx + h / 2,
                        }
                        : undefined;
                    const nodeMidPoint = {
                        x: xMinPx + w / 2,
                        y: yMaxPx + h / 2,
                    };
                    nodeData.push({
                        series: this,
                        datum,
                        // since each selection is an aggregation of multiple data.
                        aggregatedValue: total,
                        frequency,
                        domain: domain,
                        yKey,
                        xKey,
                        x: xMinPx,
                        y: yMaxPx,
                        xValue: xMinPx,
                        yValue: yMaxPx,
                        width: w,
                        height: h,
                        midPoint: nodeMidPoint,
                        fill: fill,
                        stroke: stroke,
                        strokeWidth: strokeWidth,
                        label: selectionDatumLabel,
                    });
                });
                return [
                    {
                        itemId: (_a = this.yKey) !== null && _a !== void 0 ? _a : this.id,
                        nodeData,
                        labelData: nodeData,
                        scales: _super.calculateScaling.call(this),
                        animationValid: true,
                        visible: this.visible,
                    },
                ];
            });
        }
        nodeFactory() {
            return new Rect();
        }
        updateDatumSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { nodeData, datumSelection } = opts;
                return datumSelection.update(nodeData, (rect) => {
                    rect.tag = HistogramSeriesNodeTag.Bin;
                    rect.crisp = true;
                }, (datum) => datum.domain.join('_'));
            });
        }
        updateDatumNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { datumSelection, isHighlight: isDatumHighlighted } = opts;
                const { fillOpacity: seriesFillOpacity, strokeOpacity, shadow, highlightStyle: { item: { fill: highlightedFill, fillOpacity: highlightFillOpacity = seriesFillOpacity, stroke: highlightedStroke, strokeWidth: highlightedDatumStrokeWidth, }, }, } = this;
                datumSelection.each((rect, datum, index) => {
                    var _a, _b;
                    const strokeWidth = isDatumHighlighted && highlightedDatumStrokeWidth !== undefined
                        ? highlightedDatumStrokeWidth
                        : datum.strokeWidth;
                    const fillOpacity = isDatumHighlighted ? highlightFillOpacity : seriesFillOpacity;
                    rect.fill = (_a = (isDatumHighlighted ? highlightedFill : undefined)) !== null && _a !== void 0 ? _a : datum.fill;
                    rect.stroke = (_b = (isDatumHighlighted ? highlightedStroke : undefined)) !== null && _b !== void 0 ? _b : datum.stroke;
                    rect.fillOpacity = fillOpacity;
                    rect.strokeOpacity = strokeOpacity;
                    rect.strokeWidth = strokeWidth;
                    rect.lineDash = this.lineDash;
                    rect.lineDashOffset = this.lineDashOffset;
                    rect.fillShadow = shadow;
                    rect.zIndex = isDatumHighlighted ? Series.highlightedZIndex : index;
                    rect.visible = datum.height > 0; // prevent stroke from rendering for zero height columns
                });
            });
        }
        updateLabelSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { labelData, labelSelection } = opts;
                return labelSelection.update(labelData, (text) => {
                    text.tag = HistogramSeriesNodeTag.Label;
                    text.pointerEvents = PointerEvents.None;
                    text.textAlign = 'center';
                    text.textBaseline = 'middle';
                });
            });
        }
        updateLabelNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { labelSelection } = opts;
                const labelEnabled = this.label.enabled;
                labelSelection.each((text, datum) => {
                    const label = datum.label;
                    if (label && labelEnabled) {
                        text.text = label.text;
                        text.x = label.x;
                        text.y = label.y;
                        text.fontStyle = label.fontStyle;
                        text.fontWeight = label.fontWeight;
                        text.fontSize = label.fontSize;
                        text.fontFamily = label.fontFamily;
                        text.fill = label.fill;
                        text.visible = true;
                    }
                    else {
                        text.visible = false;
                    }
                });
            });
        }
        getTooltipHtml(nodeDatum) {
            const { xKey, yKey = '', axes } = this;
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            if (!xKey || !xAxis || !yAxis) {
                return '';
            }
            const { xName, yName, fill: color, tooltip, aggregation, id: seriesId } = this;
            const { aggregatedValue, frequency, domain: [rangeMin, rangeMax], } = nodeDatum;
            const title = `${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}: ${xAxis.formatDatum(rangeMin)} - ${xAxis.formatDatum(rangeMax)}`;
            let content = yKey
                ? `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)} (${aggregation})</b>: ${yAxis.formatDatum(aggregatedValue)}<br>`
                : '';
            content += `<b>Frequency</b>: ${frequency}`;
            const defaults = {
                title,
                backgroundColor: color,
                content,
            };
            return tooltip.toTooltipHtml(defaults, {
                datum: {
                    data: nodeDatum.datum,
                    aggregatedValue: nodeDatum.aggregatedValue,
                    domain: nodeDatum.domain,
                    frequency: nodeDatum.frequency,
                },
                xKey,
                xName,
                yKey,
                yName,
                color,
                title,
                seriesId,
            });
        }
        getLegendData(legendType) {
            var _a;
            const { id, data, xKey, yName, visible, fill, stroke, fillOpacity, strokeOpacity, strokeWidth } = this;
            if (!data || data.length === 0 || legendType !== 'category') {
                return [];
            }
            return [
                {
                    legendType: 'category',
                    id,
                    itemId: xKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: (_a = yName !== null && yName !== void 0 ? yName : xKey) !== null && _a !== void 0 ? _a : 'Frequency',
                    },
                    marker: {
                        fill: fill !== null && fill !== void 0 ? fill : 'rgba(0, 0, 0, 0)',
                        stroke: stroke !== null && stroke !== void 0 ? stroke : 'rgba(0, 0, 0, 0)',
                        fillOpacity: fillOpacity,
                        strokeOpacity: strokeOpacity,
                        strokeWidth,
                    },
                },
            ];
        }
        animateEmptyUpdateReady({ datumSelections, labelSelections }) {
            const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(true, this.axes));
            fromToMotion(this.id, 'datums', this.ctx.animationManager, datumSelections, fns);
            seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);
        }
        animateWaitingUpdateReady(data) {
            var _a, _b;
            const diff = (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff;
            const fns = prepareBarAnimationFunctions(collapsedStartingBarPosition(true, this.axes));
            fromToMotion(this.id, 'datums', this.ctx.animationManager, data.datumSelections, fns, (_, datum) => this.getDatumId(datum), diff);
            seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, data.labelSelections);
        }
        getDatumId(datum) {
            return createDatumId(datum.domain.map((d) => `${d}`));
        }
        isLabelEnabled() {
            return this.label.enabled;
        }
    }
    HistogramSeries.className = 'HistogramSeries';
    HistogramSeries.type = 'histogram';
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], HistogramSeries.prototype, "fill", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], HistogramSeries.prototype, "stroke", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], HistogramSeries.prototype, "fillOpacity", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Object)
    ], HistogramSeries.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_LINE_DASH),
        __metadata("design:type", Array)
    ], HistogramSeries.prototype, "lineDash", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], HistogramSeries.prototype, "lineDashOffset", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HistogramSeries.prototype, "xKey", void 0);
    __decorate([
        Validate(BOOLEAN),
        __metadata("design:type", Boolean)
    ], HistogramSeries.prototype, "areaPlot", void 0);
    __decorate([
        Validate(OPT_ARRAY()),
        __metadata("design:type", Array)
    ], HistogramSeries.prototype, "bins", void 0);
    __decorate([
        Validate(HISTOGRAM_AGGREGATION),
        __metadata("design:type", String)
    ], HistogramSeries.prototype, "aggregation", void 0);
    __decorate([
        Validate(OPT_NUMBER(0)),
        __metadata("design:type", Number)
    ], HistogramSeries.prototype, "binCount", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HistogramSeries.prototype, "xName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HistogramSeries.prototype, "yKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HistogramSeries.prototype, "yName", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], HistogramSeries.prototype, "strokeWidth", void 0);

    const HistogramSeriesModule = {
        type: 'series',
        optionsKey: 'series[]',
        packageType: 'community',
        chartTypes: ['cartesian'],
        identifier: 'histogram',
        instanceConstructor: HistogramSeries,
        seriesDefaults: {
            axes: [
                { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.BOTTOM },
                { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.LEFT },
            ],
        },
        themeTemplate: {
            __extends__: EXTENDS_SERIES_DEFAULTS,
            strokeWidth: 1,
            fillOpacity: 1,
            strokeOpacity: 1,
            lineDash: [0],
            lineDashOffset: 0,
            label: {
                enabled: false,
                fontStyle: undefined,
                fontWeight: undefined,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,
                formatter: undefined,
            },
            shadow: {
                enabled: false,
                color: DEFAULT_SHADOW_COLOUR,
                xOffset: 3,
                yOffset: 3,
                blur: 5,
            },
        },
        paletteFactory: ({ takeColors }) => {
            const { fills: [fill], strokes: [stroke], } = takeColors(1);
            return { fill, stroke };
        },
    };

    class LineSeries extends CartesianSeries {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                hasMarkers: true,
                pickModes: [
                    SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,
                    SeriesNodePickMode.NEAREST_NODE,
                    SeriesNodePickMode.EXACT_SHAPE_MATCH,
                ],
                markerSelectionGarbageCollection: false,
                animationResetFns: {
                    path: buildResetPathFn({ getOpacity: () => this.getOpacity() }),
                    label: resetLabelFn,
                    marker: (node, datum) => (Object.assign(Object.assign({}, resetMarkerFn()), resetMarkerPositionFn(node, datum))),
                },
            });
            this.label = new Label();
            this.marker = new SeriesMarker();
            this.tooltip = new SeriesTooltip();
            this.title = undefined;
            this.stroke = '#874349';
            this.lineDash = [0];
            this.lineDashOffset = 0;
            this.strokeWidth = 2;
            this.strokeOpacity = 1;
            this.xKey = undefined;
            this.xName = undefined;
            this.yKey = undefined;
            this.yName = undefined;
        }
        processData(dataController) {
            return __awaiter(this, void 0, void 0, function* () {
                const { xKey, yKey, data } = this;
                if (xKey == null || yKey == null || data == null)
                    return;
                const animationEnabled = !this.ctx.animationManager.isSkipped();
                const { isContinuousX, isContinuousY } = this.isContinuous();
                const props = [];
                // If two or more datums share an x-value, i.e. lined up vertically, they will have the same datum id.
                // They must be identified this way when animated to ensure they can be tracked when their y-value
                // is updated. If this is a static chart, we can instead not bother with identifying datums and
                // automatically garbage collect the marker selection.
                if (!isContinuousX) {
                    props.push(keyProperty(this, xKey, isContinuousX, { id: 'xKey' }));
                    if (animationEnabled && this.processedData) {
                        props.push(diff(this.processedData));
                    }
                }
                if (animationEnabled) {
                    props.push(animationValidation(this, isContinuousX ? ['xValue'] : []));
                }
                props.push(valueProperty(this, xKey, isContinuousX, { id: 'xValue' }), valueProperty(this, yKey, isContinuousY, { id: 'yValue', invalidValue: undefined }));
                yield this.requestDataModel(dataController, data, { props });
                this.animationState.transition('updateData');
            });
        }
        getSeriesDomain(direction) {
            const { axes, dataModel, processedData } = this;
            if (!processedData || !dataModel)
                return [];
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            const xDef = dataModel.resolveProcessedDataDefById(this, `xValue`);
            if (direction === ChartAxisDirection.X) {
                const domain = dataModel.getDomain(this, `xValue`, 'value', processedData);
                if ((xDef === null || xDef === void 0 ? void 0 : xDef.def.type) === 'value' && xDef.def.valueType === 'category') {
                    return domain;
                }
                return fixNumericExtent(extent(domain), xAxis);
            }
            else {
                const domain = dataModel.getDomain(this, `yValue`, 'value', processedData);
                return fixNumericExtent(domain, yAxis);
            }
        }
        createNodeData() {
            const _super = Object.create(null, {
                calculateScaling: { get: () => super.calculateScaling }
            });
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function* () {
                const { processedData, dataModel, axes } = this;
                const xAxis = axes[ChartAxisDirection.X];
                const yAxis = axes[ChartAxisDirection.Y];
                if (!processedData || !dataModel || !xAxis || !yAxis) {
                    return [];
                }
                const { label, yKey = '', xKey = '' } = this;
                const xScale = xAxis.scale;
                const yScale = yAxis.scale;
                const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;
                const yOffset = ((_b = yScale.bandwidth) !== null && _b !== void 0 ? _b : 0) / 2;
                const nodeData = [];
                const size = this.marker.enabled ? this.marker.size : 0;
                const xIdx = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;
                const yIdx = dataModel.resolveProcessedDataIndexById(this, `yValue`).index;
                let moveTo = true;
                let nextPoint;
                for (let i = 0; i < processedData.data.length; i++) {
                    const { datum, values } = nextPoint !== null && nextPoint !== void 0 ? nextPoint : processedData.data[i];
                    const xDatum = values[xIdx];
                    const yDatum = values[yIdx];
                    if (yDatum === undefined) {
                        moveTo = true;
                    }
                    else {
                        const x = xScale.convert(xDatum) + xOffset;
                        if (isNaN(x)) {
                            moveTo = true;
                            nextPoint = undefined;
                            continue;
                        }
                        nextPoint =
                            ((_c = processedData.data[i + 1]) === null || _c === void 0 ? void 0 : _c.values[yIdx]) === undefined ? undefined : processedData.data[i + 1];
                        const y = yScale.convert(yDatum) + yOffset;
                        const labelText = this.getLabelText(label, {
                            value: yDatum,
                            datum,
                            xKey,
                            yKey,
                            xName: this.xName,
                            yName: this.yName,
                        }, (value) => (isNumber(value) ? value.toFixed(2) : String(value)));
                        nodeData.push({
                            series: this,
                            datum,
                            yKey,
                            xKey,
                            point: { x, y, moveTo, size },
                            midPoint: { x, y },
                            yValue: yDatum,
                            xValue: xDatum,
                            capDefaults: { lengthRatioMultiplier: this.marker.getDiameter(), lengthMax: Infinity },
                            label: labelText
                                ? {
                                    text: labelText,
                                    fontStyle: label.fontStyle,
                                    fontWeight: label.fontWeight,
                                    fontSize: label.fontSize,
                                    fontFamily: label.fontFamily,
                                    textAlign: 'center',
                                    textBaseline: 'bottom',
                                    fill: label.color,
                                }
                                : undefined,
                        });
                        moveTo = false;
                    }
                }
                return [
                    {
                        itemId: yKey,
                        nodeData,
                        labelData: nodeData,
                        scales: _super.calculateScaling.call(this),
                        visible: this.visible,
                    },
                ];
            });
        }
        isPathOrSelectionDirty() {
            return this.marker.isDirty();
        }
        markerFactory() {
            const { shape } = this.marker;
            const MarkerShape = getMarker(shape);
            return new MarkerShape();
        }
        updatePathNodes(opts) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const { paths: [lineNode], opacity, visible, animationEnabled, } = opts;
                const { seriesRectHeight: height, seriesRectWidth: width } = this.nodeDataDependencies;
                lineNode.setProperties({
                    fill: undefined,
                    lineJoin: 'round',
                    pointerEvents: PointerEvents.None,
                    opacity,
                    stroke: this.stroke,
                    strokeWidth: this.getStrokeWidth(this.strokeWidth),
                    strokeOpacity: this.strokeOpacity,
                    lineDash: this.lineDash,
                    lineDashOffset: this.lineDashOffset,
                });
                if (!animationEnabled) {
                    lineNode.visible = visible;
                }
                if (lineNode.clipPath == null) {
                    lineNode.clipPath = new Path2D();
                    lineNode.clipScalingX = 1;
                    lineNode.clipScalingY = 1;
                }
                (_a = lineNode.clipPath) === null || _a === void 0 ? void 0 : _a.clear({ trackChanges: true });
                (_b = lineNode.clipPath) === null || _b === void 0 ? void 0 : _b.rect(-25, -25, (width !== null && width !== void 0 ? width : 0) + 50, (height !== null && height !== void 0 ? height : 0) + 50);
            });
        }
        updateMarkerSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                let { nodeData } = opts;
                const { markerSelection } = opts;
                const { shape, enabled } = this.marker;
                nodeData = shape && enabled ? nodeData : [];
                if (this.marker.isDirty()) {
                    markerSelection.clear();
                    markerSelection.cleanup();
                }
                return markerSelection.update(nodeData, undefined, (datum) => this.getDatumId(datum));
            });
        }
        updateMarkerNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { markerSelection, isHighlight: highlighted } = opts;
                const { xKey = '', yKey = '', marker, stroke, strokeWidth, strokeOpacity } = this;
                const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle(), {
                    stroke,
                    strokeWidth,
                    strokeOpacity,
                });
                const applyTranslation = this.ctx.animationManager.isSkipped();
                markerSelection.each((node, datum) => {
                    this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey }, baseStyle, { applyTranslation });
                });
                if (!highlighted) {
                    this.marker.markClean();
                }
            });
        }
        updateLabelSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                let { labelData } = opts;
                const { labelSelection } = opts;
                const { shape, enabled } = this.marker;
                labelData = shape && enabled ? labelData : [];
                return labelSelection.update(labelData);
            });
        }
        updateLabelNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { labelSelection } = opts;
                const { enabled: labelEnabled, fontStyle, fontWeight, fontSize, fontFamily, color } = this.label;
                labelSelection.each((text, datum) => {
                    const { point, label } = datum;
                    if (datum && label && labelEnabled) {
                        text.fontStyle = fontStyle;
                        text.fontWeight = fontWeight;
                        text.fontSize = fontSize;
                        text.fontFamily = fontFamily;
                        text.textAlign = label.textAlign;
                        text.textBaseline = label.textBaseline;
                        text.text = label.text;
                        text.x = point.x;
                        text.y = point.y - 10;
                        text.fill = color;
                        text.visible = true;
                    }
                    else {
                        text.visible = false;
                    }
                });
            });
        }
        getTooltipHtml(nodeDatum) {
            var _a;
            const { xKey, yKey, axes } = this;
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            if (!xKey || !yKey || !xAxis || !yAxis) {
                return '';
            }
            const { xName, yName, tooltip, marker, id: seriesId } = this;
            const { datum, xValue, yValue } = nodeDatum;
            const xString = xAxis.formatDatum(xValue);
            const yString = yAxis.formatDatum(yValue);
            const title = sanitizeHtml((_a = this.title) !== null && _a !== void 0 ? _a : yName);
            const content = sanitizeHtml(xString + ': ' + yString);
            const baseStyle = mergeDefaults({ fill: marker.stroke }, marker.getStyle(), { strokeWidth: this.strokeWidth });
            const { fill: color } = this.getMarkerStyle(marker, { datum: nodeDatum, xKey, yKey, highlighted: false }, baseStyle);
            return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, Object.assign({ datum,
                xKey,
                xName,
                yKey,
                yName,
                title,
                color,
                seriesId }, this.getModuleTooltipParams(datum)));
        }
        getLegendData(legendType) {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            const { id, data, xKey, yKey, yName, visible, title, marker, stroke, strokeOpacity } = this;
            if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey && legendType === 'category')) {
                return [];
            }
            return [
                {
                    legendType: 'category',
                    id: id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,
                    },
                    marker: {
                        shape: marker.shape,
                        fill: (_b = marker.fill) !== null && _b !== void 0 ? _b : 'rgba(0, 0, 0, 0)',
                        stroke: (_d = (_c = marker.stroke) !== null && _c !== void 0 ? _c : stroke) !== null && _d !== void 0 ? _d : 'rgba(0, 0, 0, 0)',
                        fillOpacity: (_e = marker.fillOpacity) !== null && _e !== void 0 ? _e : 1,
                        strokeOpacity: (_g = (_f = marker.strokeOpacity) !== null && _f !== void 0 ? _f : strokeOpacity) !== null && _g !== void 0 ? _g : 1,
                        strokeWidth: (_h = marker.strokeWidth) !== null && _h !== void 0 ? _h : 0,
                    },
                },
            ];
        }
        updatePaths(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                this.updateLinePaths([opts.paths], [opts.contextData]);
            });
        }
        updateLinePaths(paths, contextData) {
            contextData.forEach(({ nodeData }, contextDataIndex) => {
                const [lineNode] = paths[contextDataIndex];
                const { path: linePath } = lineNode;
                linePath.clear({ trackChanges: true });
                for (const data of nodeData) {
                    if (data.point.moveTo) {
                        linePath.moveTo(data.point.x, data.point.y);
                    }
                    else {
                        linePath.lineTo(data.point.x, data.point.y);
                    }
                }
                lineNode.checkPathDirty();
            });
        }
        animateEmptyUpdateReady(animationData) {
            const { markerSelections, labelSelections, annotationSelections, contextData, paths } = animationData;
            const { animationManager } = this.ctx;
            const { seriesRectWidth: width = 0 } = this.nodeDataDependencies;
            this.updateLinePaths(paths, contextData);
            pathSwipeInAnimation(this, animationManager, paths.flat());
            resetMotion(markerSelections, resetMarkerPositionFn);
            markerSwipeScaleInAnimation(this, animationManager, markerSelections, width);
            seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);
            seriesLabelFadeInAnimation(this, 'annotations', animationManager, annotationSelections);
        }
        animateReadyResize(animationData) {
            const { contextData, paths } = animationData;
            this.updateLinePaths(paths, contextData);
            super.animateReadyResize(animationData);
        }
        animateWaitingUpdateReady(animationData) {
            var _a, _b;
            const { animationManager } = this.ctx;
            const { markerSelections, labelSelections, annotationSelections, contextData, paths, previousContextData } = animationData;
            super.resetAllAnimation(animationData);
            if (contextData.length === 0 || !previousContextData || previousContextData.length === 0) {
                animationManager.skipCurrentBatch();
                this.updateLinePaths(paths, contextData);
                return;
            }
            const [path] = paths;
            const [newData] = contextData;
            const [oldData] = previousContextData;
            const fns = prepareLinePathAnimation(newData, oldData, (_b = (_a = this.processedData) === null || _a === void 0 ? void 0 : _a.reduced) === null || _b === void 0 ? void 0 : _b.diff);
            if (fns === undefined) {
                animationManager.skipCurrentBatch();
                this.updateLinePaths(paths, contextData);
                return;
            }
            fromToMotion(this.id, 'marker', animationManager, markerSelections, fns.marker);
            fromToMotion(this.id, 'path_properties', animationManager, path, fns.pathProperties);
            pathMotion(this.id, 'path_update', animationManager, path, fns.path);
            seriesLabelFadeInAnimation(this, 'labels', animationManager, labelSelections);
            seriesLabelFadeInAnimation(this, 'annotations', animationManager, annotationSelections);
        }
        getDatumId(datum) {
            return createDatumId([`${datum.xValue}`]);
        }
        isLabelEnabled() {
            return this.label.enabled;
        }
        getBandScalePadding() {
            return { inner: 1, outer: 0.1 };
        }
        nodeFactory() {
            return new Group();
        }
    }
    LineSeries.className = 'LineSeries';
    LineSeries.type = 'line';
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], LineSeries.prototype, "title", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING),
        __metadata("design:type", String)
    ], LineSeries.prototype, "stroke", void 0);
    __decorate([
        Validate(OPT_LINE_DASH),
        __metadata("design:type", Array)
    ], LineSeries.prototype, "lineDash", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], LineSeries.prototype, "lineDashOffset", void 0);
    __decorate([
        Validate(NUMBER$1(0)),
        __metadata("design:type", Number)
    ], LineSeries.prototype, "strokeWidth", void 0);
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Number)
    ], LineSeries.prototype, "strokeOpacity", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], LineSeries.prototype, "xKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], LineSeries.prototype, "xName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], LineSeries.prototype, "yKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], LineSeries.prototype, "yName", void 0);

    const LineSeriesModule = {
        type: 'series',
        optionsKey: 'series[]',
        packageType: 'community',
        chartTypes: ['cartesian'],
        identifier: 'line',
        instanceConstructor: LineSeries,
        seriesDefaults: DEFAULT_CARTESIAN_CHART_OVERRIDES,
        themeTemplate: {
            __extends__: EXTENDS_SERIES_DEFAULTS,
            tooltip: {
                position: {
                    type: 'node',
                },
            },
            strokeWidth: 2,
            strokeOpacity: 1,
            lineDash: [0],
            lineDashOffset: 0,
            marker: {
                __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,
                fillOpacity: 1,
                strokeOpacity: 1,
                strokeWidth: 0,
            },
            label: {
                enabled: false,
                fontStyle: undefined,
                fontWeight: undefined,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_LABEL_COLOUR,
                formatter: undefined,
            },
        },
        enterpriseThemeTemplate: {
            errorBar: {
                cap: {
                    lengthRatio: 1,
                },
            },
        },
        paletteFactory: (params) => {
            const { marker } = markerPaletteFactory(params);
            return {
                stroke: marker.fill,
                marker,
            };
        },
    };

    class ScatterSeries extends CartesianSeries {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                pickModes: [
                    SeriesNodePickMode.NEAREST_BY_MAIN_CATEGORY_AXIS_FIRST,
                    SeriesNodePickMode.NEAREST_NODE,
                    SeriesNodePickMode.EXACT_SHAPE_MATCH,
                ],
                pathsPerSeries: 0,
                hasMarkers: true,
                markerSelectionGarbageCollection: false,
                animationResetFns: {
                    marker: resetMarkerFn,
                    label: resetLabelFn,
                },
            });
            this.marker = new SeriesMarker();
            this.label = new Label();
            this.title = undefined;
            this.labelKey = undefined;
            this.xName = undefined;
            this.yName = undefined;
            this.labelName = 'Label';
            this.xKey = undefined;
            this.yKey = undefined;
            this.colorKey = undefined;
            this.colorName = 'Color';
            this.colorRange = ['#ffff00', '#00ff00', '#0000ff'];
            this.colorScale = new ColorScale();
            this.tooltip = new SeriesTooltip();
        }
        processData(dataController) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { xKey, yKey, labelKey, data } = this;
                if (xKey == null || yKey == null || data == null)
                    return;
                const { isContinuousX, isContinuousY } = this.isContinuous();
                const { colorScale, colorDomain, colorRange, colorKey } = this;
                const { dataModel, processedData } = yield this.requestDataModel(dataController, data, {
                    props: [
                        keyProperty(this, xKey, isContinuousX, { id: 'xKey-raw' }),
                        keyProperty(this, yKey, isContinuousY, { id: 'yKey-raw' }),
                        ...(labelKey ? [keyProperty(this, labelKey, false, { id: `labelKey-raw` })] : []),
                        valueProperty(this, xKey, isContinuousX, { id: `xValue` }),
                        valueProperty(this, yKey, isContinuousY, { id: `yValue` }),
                        ...(colorKey ? [valueProperty(this, colorKey, true, { id: `colorValue` })] : []),
                        ...(labelKey ? [valueProperty(this, labelKey, false, { id: `labelValue` })] : []),
                    ],
                    dataVisible: this.visible,
                });
                if (colorKey) {
                    const colorKeyIdx = dataModel.resolveProcessedDataIndexById(this, `colorValue`).index;
                    colorScale.domain = (_a = colorDomain !== null && colorDomain !== void 0 ? colorDomain : processedData.domain.values[colorKeyIdx]) !== null && _a !== void 0 ? _a : [];
                    colorScale.range = colorRange;
                    colorScale.update();
                }
                this.animationState.transition('updateData');
            });
        }
        getSeriesDomain(direction) {
            const { dataModel, processedData } = this;
            if (!processedData || !dataModel)
                return [];
            const id = direction === ChartAxisDirection.X ? `xValue` : `yValue`;
            const dataDef = dataModel.resolveProcessedDataDefById(this, id);
            const domain = dataModel.getDomain(this, id, 'value', processedData);
            if ((dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.type) === 'value' && (dataDef === null || dataDef === void 0 ? void 0 : dataDef.def.valueType) === 'category') {
                return domain;
            }
            const axis = this.axes[direction];
            return fixNumericExtent(extent(domain), axis);
        }
        createNodeData() {
            const _super = Object.create(null, {
                calculateScaling: { get: () => super.calculateScaling }
            });
            var _a, _b, _c, _d;
            return __awaiter(this, void 0, void 0, function* () {
                const { visible, axes, yKey = '', xKey = '', label, labelKey, dataModel, processedData } = this;
                const xAxis = axes[ChartAxisDirection.X];
                const yAxis = axes[ChartAxisDirection.Y];
                if (!(dataModel && processedData && visible && xAxis && yAxis))
                    return [];
                const xDataIdx = dataModel.resolveProcessedDataIndexById(this, `xValue`).index;
                const yDataIdx = dataModel.resolveProcessedDataIndexById(this, `yValue`).index;
                const colorDataIdx = this.colorKey ? dataModel.resolveProcessedDataIndexById(this, `colorValue`).index : -1;
                const labelDataIdx = this.labelKey ? dataModel.resolveProcessedDataIndexById(this, `labelValue`).index : -1;
                const { colorScale, colorKey } = this;
                const xScale = xAxis.scale;
                const yScale = yAxis.scale;
                const xOffset = ((_a = xScale.bandwidth) !== null && _a !== void 0 ? _a : 0) / 2;
                const yOffset = ((_b = yScale.bandwidth) !== null && _b !== void 0 ? _b : 0) / 2;
                const { marker } = this;
                const nodeData = [];
                const font = label.getFont();
                for (const { values, datum } of (_c = processedData.data) !== null && _c !== void 0 ? _c : []) {
                    const xDatum = values[xDataIdx];
                    const yDatum = values[yDataIdx];
                    const x = xScale.convert(xDatum) + xOffset;
                    const y = yScale.convert(yDatum) + yOffset;
                    const labelText = this.getLabelText(this.label, {
                        value: labelKey ? values[labelDataIdx] : yDatum,
                        datum,
                        xKey,
                        yKey,
                        labelKey,
                        xName: this.xName,
                        yName: this.yName,
                        labelName: this.labelName,
                    });
                    const size = HdpiCanvas.getTextSize(labelText, font);
                    const fill = colorKey ? colorScale.convert(values[colorDataIdx]) : undefined;
                    nodeData.push({
                        series: this,
                        itemId: yKey,
                        yKey,
                        xKey,
                        datum,
                        xValue: xDatum,
                        yValue: yDatum,
                        capDefaults: { lengthRatioMultiplier: this.marker.getDiameter(), lengthMax: Infinity },
                        point: { x, y, size: marker.size },
                        midPoint: { x, y },
                        fill,
                        label: Object.assign({ text: labelText }, size),
                    });
                }
                return [
                    {
                        itemId: (_d = this.yKey) !== null && _d !== void 0 ? _d : this.id,
                        nodeData,
                        labelData: nodeData,
                        scales: _super.calculateScaling.call(this),
                        visible: this.visible,
                    },
                ];
            });
        }
        isPathOrSelectionDirty() {
            return this.marker.isDirty();
        }
        getLabelData() {
            var _a;
            return (_a = this.contextNodeData) === null || _a === void 0 ? void 0 : _a.reduce((r, n) => r.concat(n.labelData), []);
        }
        markerFactory() {
            const { shape } = this.marker;
            const MarkerShape = getMarker(shape);
            return new MarkerShape();
        }
        updateMarkerSelection(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { nodeData, markerSelection } = opts;
                const { marker: { enabled }, } = this;
                if (this.marker.isDirty()) {
                    markerSelection.clear();
                    markerSelection.cleanup();
                }
                const data = enabled ? nodeData : [];
                return markerSelection.update(data);
            });
        }
        updateMarkerNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { xKey = '', yKey = '', labelKey, marker } = this;
                const { markerSelection, isHighlight: highlighted } = opts;
                const baseStyle = mergeDefaults(highlighted && this.highlightStyle.item, marker.getStyle());
                markerSelection.each((node, datum) => {
                    this.updateMarkerStyle(node, marker, { datum, highlighted, xKey, yKey, labelKey }, baseStyle);
                });
                if (!highlighted) {
                    this.marker.markClean();
                }
            });
        }
        updateLabelSelection(opts) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const { labelSelection } = opts;
                const { label: { enabled }, } = this;
                const placedLabels = enabled ? (_b = (_a = this.chart) === null || _a === void 0 ? void 0 : _a.placeLabels().get(this)) !== null && _b !== void 0 ? _b : [] : [];
                const placedNodeDatum = placedLabels.map((v) => (Object.assign(Object.assign({}, v.datum), { point: {
                        x: v.x,
                        y: v.y,
                        size: v.datum.point.size,
                    } })));
                return labelSelection.update(placedNodeDatum);
            });
        }
        updateLabelNodes(opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const { labelSelection } = opts;
                const { label } = this;
                labelSelection.each((text, datum) => {
                    var _a, _b, _c, _d;
                    text.text = datum.label.text;
                    text.fill = label.color;
                    text.x = (_b = (_a = datum.point) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : 0;
                    text.y = (_d = (_c = datum.point) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : 0;
                    text.fontStyle = label.fontStyle;
                    text.fontWeight = label.fontWeight;
                    text.fontSize = label.fontSize;
                    text.fontFamily = label.fontFamily;
                    text.textAlign = 'left';
                    text.textBaseline = 'top';
                });
            });
        }
        getTooltipHtml(nodeDatum) {
            const { xKey, yKey, axes } = this;
            const xAxis = axes[ChartAxisDirection.X];
            const yAxis = axes[ChartAxisDirection.Y];
            if (!xKey || !yKey || !xAxis || !yAxis) {
                return '';
            }
            const { marker, tooltip, xName, yName, labelKey, labelName, id: seriesId, title = yName } = this;
            const baseStyle = mergeDefaults({ fill: nodeDatum.fill, strokeWidth: this.getStrokeWidth(marker.strokeWidth) }, marker.getStyle());
            const { fill: color = 'gray' } = this.getMarkerStyle(marker, { datum: nodeDatum, highlighted: false, xKey, yKey, labelKey }, baseStyle);
            const { datum, xValue, yValue, label } = nodeDatum;
            const xString = sanitizeHtml(xAxis.formatDatum(xValue));
            const yString = sanitizeHtml(yAxis.formatDatum(yValue));
            let content = `<b>${sanitizeHtml(xName !== null && xName !== void 0 ? xName : xKey)}</b>: ${xString}<br>` +
                `<b>${sanitizeHtml(yName !== null && yName !== void 0 ? yName : yKey)}</b>: ${yString}`;
            if (labelKey) {
                content = `<b>${sanitizeHtml(labelName !== null && labelName !== void 0 ? labelName : labelKey)}</b>: ${sanitizeHtml(label.text)}<br>` + content;
            }
            return tooltip.toTooltipHtml({ title, content, backgroundColor: color }, Object.assign({ datum,
                xKey,
                xName,
                yKey,
                yName,
                labelKey,
                labelName,
                title,
                color,
                seriesId }, this.getModuleTooltipParams(datum)));
        }
        getLegendData(legendType) {
            var _a, _b, _c, _d, _e;
            const { id, data, xKey, yKey, yName, title, visible, marker } = this;
            const { fill, stroke, fillOpacity, strokeOpacity, strokeWidth } = marker;
            if (!((data === null || data === void 0 ? void 0 : data.length) && xKey && yKey && legendType === 'category')) {
                return [];
            }
            return [
                {
                    legendType: 'category',
                    id,
                    itemId: yKey,
                    seriesId: id,
                    enabled: visible,
                    label: {
                        text: (_a = title !== null && title !== void 0 ? title : yName) !== null && _a !== void 0 ? _a : yKey,
                    },
                    marker: {
                        shape: marker.shape,
                        fill: (_c = (_b = marker.fill) !== null && _b !== void 0 ? _b : fill) !== null && _c !== void 0 ? _c : 'rgba(0, 0, 0, 0)',
                        stroke: (_e = (_d = marker.stroke) !== null && _d !== void 0 ? _d : stroke) !== null && _e !== void 0 ? _e : 'rgba(0, 0, 0, 0)',
                        fillOpacity: fillOpacity !== null && fillOpacity !== void 0 ? fillOpacity : 1,
                        strokeOpacity: strokeOpacity !== null && strokeOpacity !== void 0 ? strokeOpacity : 1,
                        strokeWidth: strokeWidth !== null && strokeWidth !== void 0 ? strokeWidth : 0,
                    },
                },
            ];
        }
        animateEmptyUpdateReady(data) {
            const { markerSelections, labelSelections, annotationSelections } = data;
            markerScaleInAnimation(this, this.ctx.animationManager, markerSelections);
            seriesLabelFadeInAnimation(this, 'labels', this.ctx.animationManager, labelSelections);
            seriesLabelFadeInAnimation(this, 'annotations', this.ctx.animationManager, annotationSelections);
        }
        isLabelEnabled() {
            return this.label.enabled;
        }
        nodeFactory() {
            return new Group();
        }
    }
    ScatterSeries.className = 'ScatterSeries';
    ScatterSeries.type = 'scatter';
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "title", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "labelKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "xName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "yName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "labelName", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "xKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "yKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "colorKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], ScatterSeries.prototype, "colorName", void 0);
    __decorate([
        Validate(OPT_NUMBER_ARRAY),
        __metadata("design:type", Array)
    ], ScatterSeries.prototype, "colorDomain", void 0);
    __decorate([
        Validate(COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], ScatterSeries.prototype, "colorRange", void 0);

    const ScatterSeriesModule = {
        type: 'series',
        optionsKey: 'series[]',
        packageType: 'community',
        chartTypes: ['cartesian'],
        identifier: 'scatter',
        instanceConstructor: ScatterSeries,
        seriesDefaults: {
            axes: [
                { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.BOTTOM },
                { type: CARTESIAN_AXIS_TYPES.NUMBER, position: CARTESIAN_AXIS_POSITIONS.LEFT },
            ],
        },
        themeTemplate: {
            __extends__: EXTENDS_SERIES_DEFAULTS,
            tooltip: {
                position: {
                    type: 'node',
                },
            },
            marker: {
                __extends__: EXTENDS_CARTESIAN_MARKER_DEFAULTS,
                fillOpacity: 0.8,
            },
            label: {
                enabled: false,
                fontStyle: undefined,
                fontWeight: undefined,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_LABEL_COLOUR,
            },
        },
        enterpriseThemeTemplate: {
            errorBar: {
                cap: {
                    lengthRatio: 1,
                },
            },
        },
        paletteFactory: markerPaletteFactory,
    };

    const PieSeriesModule = {
        type: 'series',
        optionsKey: 'series[]',
        packageType: 'community',
        chartTypes: ['polar'],
        identifier: 'pie',
        instanceConstructor: PieSeries,
        seriesDefaults: {},
        themeTemplate: {
            __extends__: EXTENDS_SERIES_DEFAULTS,
            title: {
                enabled: true,
                fontStyle: undefined,
                fontWeight: NORMAL,
                fontSize: 14,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_MUTED_LABEL_COLOUR,
                spacing: 5,
            },
            calloutLabel: {
                enabled: true,
                fontStyle: undefined,
                fontWeight: undefined,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_LABEL_COLOUR,
                offset: 3,
                minAngle: 0,
            },
            sectorLabel: {
                enabled: true,
                fontStyle: undefined,
                fontWeight: NORMAL,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,
                positionOffset: 0,
                positionRatio: 0.5,
            },
            calloutLine: {
                length: 10,
                strokeWidth: 2,
            },
            fillOpacity: 1,
            strokeOpacity: 1,
            strokeWidth: 1,
            lineDash: [0],
            lineDashOffset: 0,
            rotation: 0,
            outerRadiusOffset: 0,
            innerRadiusOffset: 0,
            shadow: {
                enabled: false,
                color: DEFAULT_SHADOW_COLOUR,
                xOffset: 3,
                yOffset: 3,
                blur: 5,
            },
            innerLabels: {
                fontStyle: undefined,
                fontWeight: undefined,
                fontSize: 12,
                fontFamily: DEFAULT_FONT_FAMILY,
                color: DEFAULT_LABEL_COLOUR,
                margin: 2,
            },
        },
        paletteFactory: ({ takeColors, colorsCount, userPalette }) => {
            const { fills, strokes } = takeColors(colorsCount);
            return {
                fills,
                strokes: userPalette ? strokes : [DEFAULT_POLAR_SERIES_STROKE],
                calloutLine: {
                    colors: strokes,
                },
            };
        },
    };

    function registerInbuiltModules() {
        registerModule(BackgroundModule);
        registerModule(NavigatorModule);
        registerModule(AreaSeriesModule);
        registerModule(BarSeriesModule);
        registerModule(BubbleSeriesModule);
        registerModule(LineSeriesModule);
        registerModule(ScatterSeriesModule);
        registerModule(PieSeriesModule);
        registerModule(HistogramSeriesModule);
    }

    function invertShapeDirection(...supportedShapes) {
        for (const shape of supportedShapes) {
            if (shape instanceof Rect) {
                const { x, y, width, height } = shape;
                shape.setProperties({ x: y, y: x, width: height, height: width });
            }
            else if (shape instanceof Line) {
                const { x1, y1, x2, y2 } = shape;
                shape.setProperties({ x1: y1, y1: x1, x2: y2, y2: x2 });
            }
        }
    }

    class HierarchyNode {
        constructor(series, index, datum, size, colorValue, fill, stroke, sumSize, depth, parent, children) {
            this.series = series;
            this.index = index;
            this.datum = datum;
            this.size = size;
            this.colorValue = colorValue;
            this.fill = fill;
            this.stroke = stroke;
            this.sumSize = sumSize;
            this.depth = depth;
            this.parent = parent;
            this.children = children;
            this.midPoint = { x: 0, y: 0 };
        }
        contains(other) {
            let current = other;
            // Index check is a performance optimization - it does not affect correctness
            while (current != null && current.index >= this.index) {
                if (current === this) {
                    return true;
                }
                current = current.parent;
            }
            return false;
        }
        walk(callback, order = HierarchyNode.Walk.PreOrder) {
            if (order === HierarchyNode.Walk.PreOrder) {
                callback(this);
            }
            this.children.forEach((child) => {
                child.walk(callback, order);
            });
            if (order === HierarchyNode.Walk.PostOrder) {
                callback(this);
            }
        }
        *[Symbol.iterator]() {
            yield this;
            for (const child of this.children) {
                yield* child;
            }
        }
    }
    HierarchyNode.Walk = {
        PreOrder: 0,
        PostOrder: 1,
    };
    class HierarchySeries extends Series {
        constructor(moduleCtx) {
            super({
                moduleCtx,
                pickModes: [SeriesNodePickMode.EXACT_SHAPE_MATCH],
                contentGroupVirtual: false,
            });
            this.childrenKey = 'children';
            this.sizeKey = undefined;
            this.colorKey = undefined;
            this.colorName = undefined;
            this.fills = Object.values(DEFAULT_FILLS);
            this.strokes = Object.values(DEFAULT_STROKES);
            this.colorRange = undefined;
            this.rootNode = new HierarchyNode(this, 0, undefined, 0, undefined, undefined, undefined, 0, undefined, undefined, []);
            this.colorDomain = [0, 0];
            this.maxDepth = 0;
            this.animationState = new StateMachine('empty', {
                empty: {
                    update: {
                        target: 'ready',
                        action: (data) => this.animateEmptyUpdateReady(data),
                    },
                },
                ready: {
                    updateData: 'waiting',
                    clear: 'clearing',
                    highlight: (data) => this.animateReadyHighlight(data),
                    resize: (data) => this.animateReadyResize(data),
                },
                waiting: {
                    update: {
                        target: 'ready',
                        action: (data) => this.animateWaitingUpdateReady(data),
                    },
                },
                clearing: {
                    update: {
                        target: 'empty',
                        action: (data) => this.animateClearingUpdateEmpty(data),
                    },
                },
            }, () => this.checkProcessedDataAnimatable());
        }
        hasData() {
            return Array.isArray(this.data) && this.data.length > 0;
        }
        processData() {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                const { childrenKey, sizeKey, colorKey, fills, strokes, colorRange } = this;
                let index = 0;
                const getIndex = () => {
                    index += 1;
                    return index;
                };
                let maxDepth = 0;
                let minColor = Infinity;
                let maxColor = -Infinity;
                const colors = new Array(((_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) + 1).fill(undefined);
                const createNode = (datum, parent) => {
                    const index = getIndex();
                    const depth = parent.depth != null ? parent.depth + 1 : 0;
                    const children = childrenKey != null ? datum[childrenKey] : undefined;
                    const isLeaf = children == null || children.length === 0;
                    let size = sizeKey != null ? datum[sizeKey] : undefined;
                    if (Number.isFinite(size)) {
                        size = Math.max(size, 0);
                    }
                    else {
                        size = isLeaf ? 1 : 0;
                    }
                    const sumSize = size;
                    maxDepth = Math.max(maxDepth, depth);
                    const color = colorKey != null ? datum[colorKey] : undefined;
                    if (typeof color === 'number') {
                        colors[index] = color;
                        minColor = Math.min(minColor, color);
                        maxColor = Math.max(maxColor, color);
                    }
                    return appendChildren(new HierarchyNode(this, index, datum, size, color, undefined, undefined, sumSize, depth, parent, []), children);
                };
                const appendChildren = (node, data) => {
                    data === null || data === void 0 ? void 0 : data.forEach((datum) => {
                        const child = createNode(datum, node);
                        node.children.push(child);
                        node.sumSize += child.sumSize;
                    });
                    return node;
                };
                const rootNode = appendChildren(new HierarchyNode(this, 0, undefined, 0, undefined, undefined, undefined, 0, undefined, undefined, []), this.data);
                const colorDomain = [minColor, maxColor];
                let colorScale;
                if (colorRange != null && Number.isFinite(minColor) && Number.isFinite(maxColor)) {
                    colorScale = new ColorScale();
                    colorScale.domain = colorDomain;
                    colorScale.range = colorRange;
                    colorScale.update();
                }
                rootNode.children.forEach((child, index) => {
                    child.walk((node) => {
                        let fill;
                        const color = colors[node.index];
                        if (color != null) {
                            fill = colorScale === null || colorScale === void 0 ? void 0 : colorScale.convert(color);
                        }
                        fill !== null && fill !== void 0 ? fill : (fill = fills === null || fills === void 0 ? void 0 : fills[index % fills.length]);
                        node.fill = fill;
                        // FIXME: If there's a color scale, the strokes won't make sense. For now, just hard-code this default
                        node.stroke = colorScale == null ? strokes === null || strokes === void 0 ? void 0 : strokes[index % strokes.length] : 'rgba(0, 0, 0, 0.2)';
                    });
                });
                this.rootNode = rootNode;
                this.maxDepth = maxDepth;
                this.colorDomain = colorDomain;
            });
        }
        update({ seriesRect }) {
            return __awaiter(this, void 0, void 0, function* () {
                yield this.updateSelections();
                yield this.updateNodes();
                const animationData = this.getAnimationData();
                const resize = this.checkResize(seriesRect);
                if (resize) {
                    this.animationState.transition('resize', animationData);
                }
                this.animationState.transition('update', animationData);
            });
        }
        resetAllAnimation(data) {
            var _a;
            const datum = (_a = this.animationResetFns) === null || _a === void 0 ? void 0 : _a.datum;
            // Stop any running animations by prefix convention.
            this.ctx.animationManager.stopByAnimationGroupId(this.id);
            if (datum != null) {
                resetMotion(data.datumSelections, datum);
            }
        }
        animateEmptyUpdateReady(data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation(data);
        }
        animateWaitingUpdateReady(data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation(data);
        }
        animateReadyHighlight(data) {
            var _a;
            const datum = (_a = this.animationResetFns) === null || _a === void 0 ? void 0 : _a.datum;
            if (datum != null) {
                resetMotion([data], datum);
            }
        }
        animateReadyResize(data) {
            this.resetAllAnimation(data);
        }
        animateClearingUpdateEmpty(data) {
            this.ctx.animationManager.skipCurrentBatch();
            this.resetAllAnimation(data);
        }
        animationTransitionClear() {
            this.animationState.transition('clear', this.getAnimationData());
        }
        getAnimationData() {
            const animationData = {
                datumSelections: [this.groupSelection],
            };
            return animationData;
        }
        isProcessedDataAnimatable() {
            return true;
        }
        checkProcessedDataAnimatable() {
            if (!this.isProcessedDataAnimatable()) {
                this.ctx.animationManager.skipCurrentBatch();
            }
        }
        getLabelData() {
            return [];
        }
        getSeriesDomain() {
            return [NaN, NaN];
        }
        getLegendData(legendType) {
            return legendType === 'gradient' && this.colorKey != null && this.colorRange != null
                ? [
                    {
                        legendType: 'gradient',
                        enabled: this.visible,
                        seriesId: this.id,
                        colorName: this.colorName,
                        colorDomain: this.colorDomain,
                        colorRange: this.colorRange,
                    },
                ]
                : [];
        }
        getDatumIdFromData(node) {
            return `${node.index}`;
        }
        getDatumId(node) {
            return this.getDatumIdFromData(node);
        }
    }
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HierarchySeries.prototype, "childrenKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HierarchySeries.prototype, "sizeKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HierarchySeries.prototype, "colorKey", void 0);
    __decorate([
        Validate(OPT_STRING),
        __metadata("design:type", String)
    ], HierarchySeries.prototype, "colorName", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], HierarchySeries.prototype, "fills", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], HierarchySeries.prototype, "strokes", void 0);
    __decorate([
        Validate(OPT_COLOR_STRING_ARRAY),
        __metadata("design:type", Array)
    ], HierarchySeries.prototype, "colorRange", void 0);

    class PolarAxis extends Axis {
        constructor() {
            super(...arguments);
            this.shape = 'polygon';
            this.innerRadiusRatio = 0;
            this.defaultTickMinSpacing = 20;
        }
        computeLabelsBBox(_options, _seriesRect) {
            return null;
        }
    }
    __decorate([
        Validate(NUMBER$1(0, 1)),
        __metadata("design:type", Number)
    ], PolarAxis.prototype, "innerRadiusRatio", void 0);

    /**
     * Internal Use Only: Used to ensure this file is treated as a module until we can use moduleDetection flag in Ts v4.7
     */
    const __FORCE_MODULE_DETECTION = 0;

    var moduleSupport = /*#__PURE__*/Object.freeze({
        __proto__: null,
        extractDecoratedProperties: extractDecoratedProperties,
        isDecoratedObject: isDecoratedObject,
        listDecoratedProperties: listDecoratedProperties,
        assignJsonApplyConstructedArray: assignJsonApplyConstructedArray,
        Motion: easing,
        resetIds: resetIds,
        get ChartUpdateType () { return ChartUpdateType; },
        extent: extent,
        normalisedExtent: normalisedExtent,
        normalisedExtentWithMetadata: normalisedExtentWithMetadata,
        arraysEqual: arraysEqual,
        toArray: toArray,
        Validate: Validate,
        predicateWithMessage: predicateWithMessage,
        OPTIONAL: OPTIONAL,
        ARRAY: ARRAY,
        OPT_ARRAY: OPT_ARRAY,
        NON_EMPTY_ARRAY: NON_EMPTY_ARRAY,
        OPT_NON_EMPTY_ARRAY: OPT_NON_EMPTY_ARRAY,
        AND: AND,
        OR: OR,
        LESS_THAN: LESS_THAN,
        GREATER_THAN: GREATER_THAN,
        FUNCTION: FUNCTION,
        OPT_FUNCTION: OPT_FUNCTION,
        BOOLEAN: BOOLEAN,
        OPT_BOOLEAN: OPT_BOOLEAN,
        STRING: STRING,
        OPT_STRING: OPT_STRING,
        DATE: DATE,
        OPT_DATE: OPT_DATE,
        DATE_ARRAY: DATE_ARRAY,
        DATETIME_MS: DATETIME_MS,
        OPT_DATETIME_MS: OPT_DATETIME_MS,
        OPT_DATE_OR_DATETIME_MS: OPT_DATE_OR_DATETIME_MS,
        COLOR_STRING: COLOR_STRING,
        OPT_COLOR_STRING: OPT_COLOR_STRING,
        COLOR_STRING_ARRAY: COLOR_STRING_ARRAY,
        OPT_COLOR_STRING_ARRAY: OPT_COLOR_STRING_ARRAY,
        NUMBER: NUMBER$1,
        OPT_NUMBER: OPT_NUMBER,
        NUMBER_OR_NAN: NUMBER_OR_NAN,
        NUMBER_ARRAY: NUMBER_ARRAY,
        OPT_NUMBER_ARRAY: OPT_NUMBER_ARRAY,
        STRING_ARRAY: STRING_ARRAY,
        OPT_STRING_ARRAY: OPT_STRING_ARRAY,
        STRING_UNION: STRING_UNION,
        BOOLEAN_ARRAY: BOOLEAN_ARRAY,
        OPT_BOOLEAN_ARRAY: OPT_BOOLEAN_ARRAY,
        FONT_STYLE: FONT_STYLE,
        OPT_FONT_STYLE: OPT_FONT_STYLE,
        FONT_WEIGHT: FONT_WEIGHT,
        OPT_FONT_WEIGHT: OPT_FONT_WEIGHT,
        LINE_DASH: LINE_DASH,
        OPT_LINE_DASH: OPT_LINE_DASH,
        LINE_CAP: LINE_CAP,
        OPT_LINE_CAP: OPT_LINE_CAP,
        LINE_JOIN: LINE_JOIN,
        OPT_LINE_JOIN: OPT_LINE_JOIN,
        POSITION: POSITION,
        INTERACTION_RANGE: INTERACTION_RANGE,
        TEXT_WRAP: TEXT_WRAP,
        OVERFLOW_STRATEGY: OVERFLOW_STRATEGY,
        TEXT_ALIGN: TEXT_ALIGN,
        VERTICAL_ALIGN: VERTICAL_ALIGN,
        DIRECTION: DIRECTION,
        OPT_DIRECTION: OPT_DIRECTION,
        Default: Default,
        injectStyle: injectStyle,
        clamp: clamp,
        isEqual: isEqual,
        isNegative: isNegative,
        round: round$1,
        toFixed: toFixed,
        mod: mod,
        deepMerge: deepMerge,
        mergeDefaults: mergeDefaults,
        partialAssign: partialAssign,
        ProxyOnWrite: ProxyOnWrite,
        ProxyPropertyOnWrite: ProxyPropertyOnWrite,
        ActionOnSet: ActionOnSet,
        invertShapeDirection: invertShapeDirection,
        singleSeriesPaletteFactory: singleSeriesPaletteFactory,
        markerPaletteFactory: markerPaletteFactory,
        BaseModuleInstance: BaseModuleInstance,
        REGISTERED_MODULES: REGISTERED_MODULES,
        registerModule: registerModule,
        hasRegisteredEnterpriseModules: hasRegisteredEnterpriseModules,
        MODULE_CONFLICTS: MODULE_CONFLICTS,
        registerModuleConflicts: registerModuleConflicts,
        enterpriseModule: enterpriseModule,
        Background: Background,
        BackgroundModule: BackgroundModule,
        get ChartAxisDirection () { return ChartAxisDirection; },
        prepareAxisAnimationContext: prepareAxisAnimationContext,
        prepareAxisAnimationFunctions: prepareAxisAnimationFunctions,
        resetAxisGroupFn: resetAxisGroupFn,
        resetAxisSelectionFn: resetAxisSelectionFn,
        resetAxisLabelSelectionFn: resetAxisLabelSelectionFn,
        resetAxisLineSelectionFn: resetAxisLineSelectionFn,
        fixNumericExtent: fixNumericExtent,
        DataModel: DataModel,
        DataController: DataController,
        SMALLEST_KEY_INTERVAL: SMALLEST_KEY_INTERVAL,
        AGG_VALUES_EXTENT: AGG_VALUES_EXTENT,
        SORT_DOMAIN_GROUPS: SORT_DOMAIN_GROUPS,
        normaliseGroupTo: normaliseGroupTo,
        normalisePropertyTo: normalisePropertyTo,
        animationValidation: animationValidation,
        accumulateGroup: accumulateGroup,
        diff: diff,
        createDatumId: createDatumId,
        sum: sum,
        groupSum: groupSum,
        range: range,
        count: count,
        groupCount: groupCount,
        average: average,
        groupAverage: groupAverage,
        area: area,
        accumulatedValue: accumulatedValue,
        trailingAccumulatedValue: trailingAccumulatedValue,
        UpdateService: UpdateService,
        LayoutService: LayoutService,
        AnimationManager: AnimationManager,
        ChartEventManager: ChartEventManager,
        CursorManager: CursorManager,
        HighlightManager: HighlightManager,
        InteractionManager: InteractionManager,
        TooltipManager: TooltipManager,
        ZoomManager: ZoomManager,
        get Layers () { return Layers; },
        get SeriesNodePickMode () { return SeriesNodePickMode; },
        keyProperty: keyProperty,
        valueProperty: valueProperty,
        rangedValueProperty: rangedValueProperty,
        trailingValueProperty: trailingValueProperty,
        trailingValue: trailingValue,
        accumulativeValueProperty: accumulativeValueProperty,
        trailingAccumulatedValueProperty: trailingAccumulatedValueProperty,
        groupAccumulativeValueProperty: groupAccumulativeValueProperty,
        SeriesNodeClickEvent: SeriesNodeClickEvent,
        SeriesItemHighlightStyle: SeriesItemHighlightStyle,
        HighlightStyle: HighlightStyle,
        Series: Series,
        seriesLabelFadeInAnimation: seriesLabelFadeInAnimation,
        seriesLabelFadeOutAnimation: seriesLabelFadeOutAnimation,
        resetLabelFn: resetLabelFn,
        SeriesMarker: SeriesMarker,
        SeriesTooltip: SeriesTooltip,
        AbstractBarSeries: AbstractBarSeries,
        CartesianSeriesNodeClickEvent: CartesianSeriesNodeClickEvent,
        CartesianSeries: CartesianSeries,
        pairContinuousData: pairContinuousData,
        pairCategoryData: pairCategoryData,
        determinePathStatus: determinePathStatus,
        prepareLinePathAnimationFns: prepareLinePathAnimationFns,
        prepareLinePathAnimation: prepareLinePathAnimation,
        updateRect: updateRect,
        getRectConfig: getRectConfig,
        checkCrisp: checkCrisp,
        collapsedStartingBarPosition: collapsedStartingBarPosition,
        midpointStartingBarPosition: midpointStartingBarPosition,
        prepareBarAnimationFunctions: prepareBarAnimationFunctions,
        resetBarSelectionsFn: resetBarSelectionsFn,
        get AreaSeriesTag () { return AreaSeriesTag; },
        prepareAreaPathAnimation: prepareAreaPathAnimation,
        markerFadeInAnimation: markerFadeInAnimation,
        markerScaleInAnimation: markerScaleInAnimation,
        markerSwipeScaleInAnimation: markerSwipeScaleInAnimation,
        resetMarkerFn: resetMarkerFn,
        resetMarkerPositionFn: resetMarkerPositionFn,
        prepareMarkerAnimation: prepareMarkerAnimation,
        updateLabelNode: updateLabelNode,
        adjustLabelPlacement: adjustLabelPlacement,
        minMax: minMax,
        backfillPathPointData: backfillPathPointData,
        renderPartialPath: renderPartialPath,
        pathSwipeInAnimation: pathSwipeInAnimation,
        pathFadeInAnimation: pathFadeInAnimation,
        pathFadeOutAnimation: pathFadeOutAnimation,
        buildResetPathFn: buildResetPathFn,
        PolarSeries: PolarSeries,
        HierarchyNode: HierarchyNode,
        HierarchySeries: HierarchySeries,
        get Tags () { return Tags; },
        Axis: Axis,
        AxisLabel: AxisLabel,
        AxisTick: AxisTick,
        PolarAxis: PolarAxis,
        CategoryAxis: CategoryAxis,
        __FORCE_MODULE_DETECTION: __FORCE_MODULE_DETECTION,
        QUICK_TRANSITION: QUICK_TRANSITION,
        INITIAL_LOAD: INITIAL_LOAD,
        REMOVE_PHASE: REMOVE_PHASE,
        UPDATE_PHASE: UPDATE_PHASE,
        ADD_PHASE: ADD_PHASE,
        LABEL_PHASE: LABEL_PHASE,
        get RepeatType () { return RepeatType; },
        isNodeArray: isNodeArray,
        Animation: Animation,
        StateMachine: StateMachine,
        resetMotion: resetMotion,
        NODE_UPDATE_PHASES: NODE_UPDATE_PHASES,
        FROM_TO_MIXINS: FROM_TO_MIXINS,
        fromToMotion: fromToMotion,
        staticFromToMotion: staticFromToMotion
    });

    const SERIES_FACTORIES = {};
    const SERIES_DEFAULTS = {};
    const SERIES_THEME_TEMPLATES = {};
    const ENTERPRISE_SERIES_THEME_TEMPLATES = {};
    const SERIES_PALETTE_FACTORIES = {};
    const SOLO_SERIES_TYPES = new Set();
    const STACKABLE_SERIES_TYPES = new Set();
    const GROUPABLE_SERIES_TYPES = new Set();
    const STACKED_BY_DEFAULT_SERIES_TYPES = new Set();
    const SWAP_DEFAULT_AXES_CONDITIONS = {};
    const CUSTOM_DEFAULTS_FUNCTIONS = {};
    function registerSeries(seriesType, chartType, cstr, defaults, theme, enterpriseTheme, paletteFactory, solo, stackable, groupable, stackedByDefault, swapDefaultAxesCondition, customDefaultsFunction) {
        SERIES_FACTORIES[seriesType] = cstr;
        SERIES_DEFAULTS[seriesType] = defaults;
        registerSeriesThemeTemplate(seriesType, theme, enterpriseTheme);
        if (paletteFactory) {
            addSeriesPaletteFactory(seriesType, paletteFactory);
        }
        if (solo) {
            addSoloSeriesType(seriesType);
        }
        if (stackable) {
            addStackableSeriesType(seriesType);
        }
        if (groupable) {
            addGroupableSeriesType(seriesType);
        }
        if (stackedByDefault) {
            addStackedByDefaultSeriesType(seriesType);
        }
        if (swapDefaultAxesCondition) {
            addSwapDefaultAxesCondition(seriesType, swapDefaultAxesCondition);
        }
        if (customDefaultsFunction) {
            addCustomDefaultsFunctions(seriesType, customDefaultsFunction);
        }
        registerChartSeriesType(seriesType, chartType);
    }
    function registerSeriesThemeTemplate(seriesType, themeTemplate, enterpriseThemeTemplate = {}) {
        const existingTemplate = SERIES_THEME_TEMPLATES[seriesType];
        SERIES_THEME_TEMPLATES[seriesType] = jsonMerge([existingTemplate, themeTemplate]);
        ENTERPRISE_SERIES_THEME_TEMPLATES[seriesType] = jsonMerge([
            existingTemplate,
            themeTemplate,
            enterpriseThemeTemplate,
        ]);
    }
    function getSeries(chartType, moduleCtx) {
        const seriesConstructor = SERIES_FACTORIES[chartType];
        if (seriesConstructor) {
            return new seriesConstructor(moduleCtx);
        }
        throw new Error(`AG Charts - unknown series type: ${chartType}`);
    }
    function getSeriesDefaults(chartType) {
        return SERIES_DEFAULTS[chartType];
    }
    function getSeriesThemeTemplate(chartType) {
        if (hasRegisteredEnterpriseModules()) {
            return ENTERPRISE_SERIES_THEME_TEMPLATES[chartType];
        }
        return SERIES_THEME_TEMPLATES[chartType];
    }
    function addSeriesPaletteFactory(seriesType, factory) {
        SERIES_PALETTE_FACTORIES[seriesType] = factory;
    }
    function getSeriesPaletteFactory(seriesType) {
        return SERIES_PALETTE_FACTORIES[seriesType];
    }
    function isSoloSeries(seriesType) {
        return SOLO_SERIES_TYPES.has(seriesType);
    }
    function isStackableSeries(seriesType) {
        return STACKABLE_SERIES_TYPES.has(seriesType);
    }
    function isGroupableSeries(seriesType) {
        return GROUPABLE_SERIES_TYPES.has(seriesType);
    }
    function isSeriesStackedByDefault(seriesType) {
        return STACKED_BY_DEFAULT_SERIES_TYPES.has(seriesType);
    }
    function addGroupableSeriesType(seriesType) {
        GROUPABLE_SERIES_TYPES.add(seriesType);
    }
    function addSoloSeriesType(seriesType) {
        SOLO_SERIES_TYPES.add(seriesType);
    }
    function addStackableSeriesType(seriesType) {
        STACKABLE_SERIES_TYPES.add(seriesType);
    }
    function addStackedByDefaultSeriesType(seriesType) {
        STACKED_BY_DEFAULT_SERIES_TYPES.add(seriesType);
    }
    function addSwapDefaultAxesCondition(seriesType, predicate) {
        SWAP_DEFAULT_AXES_CONDITIONS[seriesType] = predicate;
    }
    function addCustomDefaultsFunctions(seriesType, predicate) {
        CUSTOM_DEFAULTS_FUNCTIONS[seriesType] = predicate;
    }
    function isDefaultAxisSwapNeeded(opts) {
        var _a, _b;
        let result;
        for (const series of (_a = opts.series) !== null && _a !== void 0 ? _a : []) {
            const { type = 'line' } = series;
            const isDefaultAxisSwapped = (_b = SWAP_DEFAULT_AXES_CONDITIONS[type]) === null || _b === void 0 ? void 0 : _b.call(SWAP_DEFAULT_AXES_CONDITIONS, series);
            if (isDefaultAxisSwapped != null) {
                if (result != null && result != isDefaultAxisSwapped) {
                    throw new Error('AG Charts - The provided series have incompatible directions');
                }
                result = isDefaultAxisSwapped;
            }
        }
        return result;
    }
    function executeCustomDefaultsFunctions(opts, initialDefaults) {
        var _a;
        let result = initialDefaults;
        for (const series of (_a = opts.series) !== null && _a !== void 0 ? _a : []) {
            const { type } = series;
            const fn = type != null ? CUSTOM_DEFAULTS_FUNCTIONS[type] : undefined;
            if (fn !== undefined) {
                result = Object.assign(Object.assign({}, result), fn(series));
            }
        }
        return result;
    }

    function setupModules() {
        var _a;
        for (const m of REGISTERED_MODULES) {
            if (m.packageType === 'enterprise' && !verifyIfModuleExpected(m)) {
                Logger.errorOnce('Unexpected enterprise module registered: ' + m.identifier);
            }
            if (JSON_APPLY_PLUGINS.constructors != null && m.optionConstructors != null) {
                Object.assign(JSON_APPLY_PLUGINS.constructors, m.optionConstructors);
            }
            if (m.type === 'root' && m.themeTemplate) {
                for (const chartType of m.chartTypes) {
                    registerChartDefaults(chartType, m.themeTemplate);
                }
            }
            if (m.type === 'root' && ((_a = m.conflicts) === null || _a === void 0 ? void 0 : _a.length)) {
                registerModuleConflicts(m.optionsKey, m.conflicts);
            }
            if (m.type === 'series') {
                if (m.chartTypes.length > 1)
                    throw new Error('AG Charts - Module definition error: ' + m.identifier);
                registerSeries(m.identifier, m.chartTypes[0], m.instanceConstructor, m.seriesDefaults, m.themeTemplate, m.enterpriseThemeTemplate, m.paletteFactory, m.solo, m.stackable, m.groupable, m.stackedByDefault, m.swapDefaultAxesCondition, m.customDefaultsFunction);
            }
            if (m.type === 'series-option' && m.themeTemplate) {
                for (const seriesType of m.seriesTypes) {
                    registerSeriesThemeTemplate(seriesType, m.themeTemplate);
                }
            }
            if (m.type === 'axis-option' && m.themeTemplate) {
                for (const axisType of m.axisTypes) {
                    const axisTypeTheme = m.themeTemplate[axisType];
                    const theme = Object.assign(Object.assign({}, m.themeTemplate), (typeof axisTypeTheme === 'object' ? axisTypeTheme : {}));
                    for (const axisType of m.axisTypes) {
                        delete theme[axisType];
                    }
                    registerAxisThemeTemplate(axisType, theme);
                }
            }
            if (m.type === 'axis') {
                registerAxis(m.identifier, m.instanceConstructor);
                if (m.themeTemplate) {
                    registerAxisThemeTemplate(m.identifier, m.themeTemplate);
                }
            }
            if (m.type === 'legend') {
                registerLegend(m.identifier, m.optionsKey, m.instanceConstructor, m.themeTemplate);
            }
        }
        if (hasRegisteredEnterpriseModules()) {
            const expectedButUnused = getUnusedExpectedModules();
            if (expectedButUnused.length > 0) {
                Logger.errorOnce('Enterprise modules expected but not registered: ', expectedButUnused);
            }
        }
    }

    class HierarchyChart extends Chart {
        constructor(specialOverrides, resources) {
            super(specialOverrides, resources);
            this._data = {};
        }
        performLayout() {
            const _super = Object.create(null, {
                performLayout: { get: () => super.performLayout }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const shrinkRect = yield _super.performLayout.call(this);
                const { seriesArea: { padding }, seriesRoot, } = this;
                const fullSeriesRect = shrinkRect.clone();
                shrinkRect.shrink(padding.left, 'left');
                shrinkRect.shrink(padding.top, 'top');
                shrinkRect.shrink(padding.right, 'right');
                shrinkRect.shrink(padding.bottom, 'bottom');
                this.seriesRect = shrinkRect;
                this.animationRect = shrinkRect;
                this.hoverRect = shrinkRect;
                seriesRoot.translationX = Math.floor(shrinkRect.x);
                seriesRoot.translationY = Math.floor(shrinkRect.y);
                yield Promise.all(this.series.map((series) => __awaiter(this, void 0, void 0, function* () {
                    yield series.update({ seriesRect: shrinkRect }); // this has to happen after the `updateAxes` call
                })));
                seriesRoot.visible = this.series[0].visible;
                seriesRoot.setClipRectInGroupCoordinateSpace(new BBox(shrinkRect.x, shrinkRect.y, shrinkRect.width, shrinkRect.height));
                this.layoutService.dispatchLayoutComplete({
                    type: 'layout-complete',
                    chart: { width: this.scene.width, height: this.scene.height },
                    clipSeries: false,
                    series: { rect: fullSeriesRect, paddedRect: shrinkRect, visible: true },
                    axes: [],
                });
                return shrinkRect;
            });
        }
    }
    HierarchyChart.className = 'HierarchyChart';
    HierarchyChart.type = 'hierarchy';

    function removeUsedEnterpriseOptions(options) {
        var _a, _b, _c, _d;
        const usedOptions = [];
        const optionsChartType = getChartType(optionsType(options));
        for (const { type, chartTypes, optionsKey, optionsInnerKey, identifier } of EXPECTED_ENTERPRISE_MODULES) {
            if (optionsChartType !== 'unknown' && !chartTypes.includes(optionsChartType))
                continue;
            if (type === 'root' || type === 'legend') {
                const optionValue = options[optionsKey];
                if (optionValue == null)
                    continue;
                if (!optionsInnerKey) {
                    usedOptions.push(optionsKey);
                    delete options[optionsKey];
                }
                else if (optionValue[optionsInnerKey]) {
                    usedOptions.push(`${optionsKey}.${optionsInnerKey}`);
                    delete optionValue[optionsInnerKey];
                }
            }
            else if (type === 'axis') {
                if (!('axes' in options) || !((_a = options.axes) === null || _a === void 0 ? void 0 : _a.some((axis) => axis.type === identifier)))
                    continue;
                usedOptions.push(`axis[type=${identifier}]`);
                options.axes = options.axes.filter((axis) => axis.type !== identifier);
            }
            else if (type === 'axis-option') {
                if (!('axes' in options) || !((_b = options.axes) === null || _b === void 0 ? void 0 : _b.some((axis) => axis[optionsKey])))
                    continue;
                usedOptions.push(`axis.${optionsKey}`);
                options.axes.forEach((axis) => {
                    if (axis[optionsKey]) {
                        delete axis[optionsKey];
                    }
                });
            }
            else if (type === 'series') {
                if (!((_c = options.series) === null || _c === void 0 ? void 0 : _c.some((series) => series.type === identifier)))
                    continue;
                usedOptions.push(`series[type=${identifier}]`);
                options.series = options.series.filter((series) => series.type !== identifier);
            }
            else if (type === 'series-option') {
                if (!((_d = options.series) === null || _d === void 0 ? void 0 : _d.some((series) => series[optionsKey])))
                    continue;
                usedOptions.push(`series.${optionsKey}`);
                options.series.forEach((series) => {
                    if (series[optionsKey]) {
                        delete series[optionsKey];
                    }
                });
            }
        }
        if (usedOptions.length > 0) {
            Logger.warnOnce([
                `unable to use these enterprise features as 'ag-charts-enterprise' has not been loaded:`,
                ``,
                ...usedOptions,
                ``,
                'See: https://charts.ag-grid.com/javascript/installation/',
            ].join('\n'));
        }
    }

    /**
     * Groups the series options objects if they are of type `column` or `bar` and places them in an array at the index where the first instance of this series type was found.
     * Returns an array of arrays containing the ordered and grouped series options objects.
     */
    function groupSeriesByType(seriesOptions) {
        var _a, _b, _c, _d;
        const groupMap = {};
        const stackMap = {};
        const anyStacked = {};
        const defaultUnstackedGroup = 'default-ag-charts-group';
        const result = [];
        for (const s of seriesOptions) {
            const type = (_a = s.type) !== null && _a !== void 0 ? _a : 'line';
            const stackable = isStackableSeries(type);
            const groupable = isGroupableSeries(type);
            if (!stackable && !groupable) {
                // No need to use index for these cases.
                result.push({ type: 'ungrouped', opts: [s] });
                continue;
            }
            const { stacked: sStacked, stackGroup: sStackGroup, grouped: sGrouped = undefined, xKey } = s;
            const stacked = sStackGroup != null || sStacked === true;
            (_b = anyStacked[type]) !== null && _b !== void 0 ? _b : (anyStacked[type] = false);
            anyStacked[type] || (anyStacked[type] = stacked && stackable);
            const grouped = sGrouped === true;
            let groupingKey = [sStackGroup !== null && sStackGroup !== void 0 ? sStackGroup : (sStacked === true ? 'stacked' : undefined), grouped ? 'grouped' : undefined]
                .filter((v) => v != null)
                .join('-');
            if (!groupingKey) {
                groupingKey = defaultUnstackedGroup;
            }
            const indexKey = `${type}-${xKey}-${groupingKey}`;
            if (stacked && stackable) {
                const updated = ((_c = stackMap[indexKey]) !== null && _c !== void 0 ? _c : (stackMap[indexKey] = { type: 'stack', opts: [] }));
                if (updated.opts.length === 0)
                    result.push(updated);
                updated.opts.push(s);
            }
            else if (grouped && groupable) {
                const updated = ((_d = groupMap[indexKey]) !== null && _d !== void 0 ? _d : (groupMap[indexKey] = { type: 'group', opts: [] }));
                if (updated.opts.length === 0)
                    result.push(updated);
                updated.opts.push(s);
            }
            else {
                result.push({ type: 'ungrouped', opts: [s] });
            }
        }
        if (!Object.values(anyStacked).some((v) => v)) {
            return result;
        }
        return result;
    }
    /**
     * Transforms provided series options array into an array containing series options which are compatible with standalone charts series options.
     */
    function processSeriesOptions(_opts, seriesOptions) {
        var _a;
        const result = [];
        const preprocessed = seriesOptions.map((series) => {
            var _a;
            // Change the default for bar/columns when yKey is used to be grouped rather than stacked.
            const sType = (_a = series.type) !== null && _a !== void 0 ? _a : 'line';
            const groupable = isGroupableSeries(sType);
            const stackable = isStackableSeries(sType);
            const stackedByDefault = isSeriesStackedByDefault(sType);
            if (series.grouped && !groupable) {
                Logger.warnOnce(`unsupported grouping of series type: ${sType}`);
            }
            if (series.stacked && !stackable) {
                Logger.warnOnce(`unsupported stacking of series type: ${sType}`);
            }
            if (!groupable && !stackable) {
                return series;
            }
            let stacked = false;
            let grouped = false;
            if (series.stacked === undefined && series.grouped === undefined) {
                stacked = stackable && stackedByDefault;
                grouped = groupable && !stacked;
            }
            else if (series.stacked === undefined) {
                stacked = stackable && stackedByDefault && !(series.grouped && groupable);
                grouped = groupable && !stacked && !!series.grouped;
            }
            else if (series.grouped === undefined) {
                stacked = stackable && series.stacked;
                grouped = groupable && !stacked;
            }
            else {
                stacked = stackable && series.stacked;
                grouped = groupable && !stacked && series.grouped;
            }
            return Object.assign(Object.assign({}, series), { stacked, grouped });
        });
        const grouped = groupSeriesByType(preprocessed);
        const groupCount = grouped.reduce((result, next) => {
            var _a, _b;
            if (next.type === 'ungrouped')
                return result;
            const seriesType = (_a = next.opts[0].type) !== null && _a !== void 0 ? _a : 'line';
            (_b = result[seriesType]) !== null && _b !== void 0 ? _b : (result[seriesType] = 0);
            result[seriesType] += next.type === 'stack' ? 1 : next.opts.length;
            return result;
        }, {});
        const groupIdx = {};
        const addSeriesGroupingMeta = (group) => {
            var _a, _b;
            let stackIdx = 0;
            const seriesType = (_a = group.opts[0].type) !== null && _a !== void 0 ? _a : 'line';
            (_b = groupIdx[seriesType]) !== null && _b !== void 0 ? _b : (groupIdx[seriesType] = 0);
            if (group.type === 'stack') {
                for (const opts of group.opts) {
                    opts.seriesGrouping = {
                        groupIndex: groupIdx[seriesType],
                        groupCount: groupCount[seriesType],
                        stackIndex: stackIdx++,
                        stackCount: group.opts.length,
                    };
                }
                groupIdx[seriesType]++;
            }
            else if (group.type === 'group') {
                for (const opts of group.opts) {
                    opts.seriesGrouping = {
                        groupIndex: groupIdx[seriesType],
                        groupCount: groupCount[seriesType],
                        stackIndex: 0,
                        stackCount: 0,
                    };
                    groupIdx[seriesType]++;
                }
            }
            else {
                for (const opts of group.opts) {
                    opts.seriesGrouping = undefined;
                }
            }
            return group.opts;
        };
        Debug.create(true, 'opts')('processSeriesOptions() - series grouping: ', grouped);
        for (const group of grouped) {
            const seriesType = (_a = group.opts[0].type) !== null && _a !== void 0 ? _a : 'line';
            if (isGroupableSeries(seriesType) || isStackableSeries(seriesType)) {
                result.push(...addSeriesGroupingMeta(group));
            }
            else {
                result.push(...group.opts);
            }
        }
        return result;
    }

    const DEFAULT_BACKGROUND_FILL = 'white';
    const palette$9 = {
        fills: Array.from(Object.values(DEFAULT_FILLS)),
        strokes: Array.from(Object.values(DEFAULT_STROKES)),
    };
    const CHART_TYPE_CONFIG = {
        get cartesian() {
            return { seriesTypes: CHART_TYPES.cartesianTypes, commonOptions: ['zoom', 'navigator'] };
        },
        get polar() {
            return { seriesTypes: CHART_TYPES.polarTypes, commonOptions: [] };
        },
        get hierarchy() {
            return { seriesTypes: CHART_TYPES.hierarchyTypes, commonOptions: [] };
        },
    };
    const CHART_TYPE_SPECIFIC_COMMON_OPTIONS = Object.values(CHART_TYPE_CONFIG).reduce((r, { commonOptions }) => [...r, ...commonOptions], []);
    class ChartTheme {
        getPalette() {
            return palette$9;
        }
        static getAxisDefaults() {
            return {
                top: {},
                right: {},
                bottom: {},
                left: {},
                title: {
                    enabled: false,
                    text: 'Axis Title',
                    spacing: 25,
                    fontStyle: undefined,
                    fontWeight: NORMAL,
                    fontSize: FONT_SIZE.MEDIUM,
                    fontFamily: DEFAULT_FONT_FAMILY,
                    color: DEFAULT_LABEL_COLOUR,
                },
                label: {
                    fontStyle: undefined,
                    fontWeight: undefined,
                    fontSize: FONT_SIZE.SMALL,
                    fontFamily: DEFAULT_FONT_FAMILY,
                    padding: 5,
                    rotation: undefined,
                    color: DEFAULT_LABEL_COLOUR,
                    formatter: undefined,
                    avoidCollisions: true,
                },
                line: {
                    enabled: true,
                    width: 1,
                    color: DEFAULT_AXIS_LINE_COLOUR,
                },
                tick: {
                    enabled: false,
                    width: 1,
                    color: DEFAULT_AXIS_LINE_COLOUR,
                },
                gridLine: {
                    enabled: true,
                    style: [
                        {
                            stroke: DEFAULT_AXIS_GRID_COLOUR,
                            lineDash: [],
                        },
                    ],
                },
                crossLines: {
                    enabled: false,
                    fill: DEFAULT_CROSS_LINES_COLOUR,
                    stroke: DEFAULT_CROSS_LINES_COLOUR,
                    fillOpacity: 0.1,
                    strokeWidth: 1,
                    label: {
                        enabled: false,
                        fontStyle: undefined,
                        fontWeight: undefined,
                        fontSize: FONT_SIZE.SMALL,
                        fontFamily: DEFAULT_FONT_FAMILY,
                        padding: 5,
                        color: DEFAULT_LABEL_COLOUR,
                    },
                },
            };
        }
        static getSeriesDefaults() {
            return {
                tooltip: {
                    enabled: true,
                    renderer: undefined,
                },
                visible: true,
                showInLegend: true,
                highlightStyle: {
                    item: {
                        fill: 'rgba(255,255,255, 0.33)',
                        stroke: `rgba(0, 0, 0, 0.4)`,
                        strokeWidth: 2,
                    },
                    series: {
                        dimOpacity: 1,
                    },
                    text: {
                        color: 'black',
                    },
                },
                nodeClickRange: 'exact',
            };
        }
        static getCartesianSeriesMarkerDefaults() {
            return {
                enabled: true,
                shape: 'circle',
                size: 7,
                strokeWidth: 1,
                formatter: undefined,
            };
        }
        static getLegendItemMarkerDefaults() {
            return {
                shape: undefined,
                size: 15,
                padding: 8,
            };
        }
        static getCaptionWrappingDefaults() {
            return 'hyphenate';
        }
        static getChartDefaults() {
            return {
                background: {
                    visible: true,
                    fill: DEFAULT_BACKGROUND_COLOUR,
                },
                padding: {
                    top: 20,
                    right: 20,
                    bottom: 20,
                    left: 20,
                },
                title: {
                    enabled: false,
                    text: 'Title',
                    fontStyle: undefined,
                    fontWeight: NORMAL,
                    fontSize: FONT_SIZE.LARGE,
                    fontFamily: DEFAULT_FONT_FAMILY,
                    color: DEFAULT_LABEL_COLOUR,
                    wrapping: ChartTheme.getCaptionWrappingDefaults(),
                },
                subtitle: {
                    enabled: false,
                    text: 'Subtitle',
                    spacing: 20,
                    fontStyle: undefined,
                    fontWeight: undefined,
                    fontSize: FONT_SIZE.MEDIUM,
                    fontFamily: DEFAULT_FONT_FAMILY,
                    color: DEFAULT_MUTED_LABEL_COLOUR,
                    wrapping: ChartTheme.getCaptionWrappingDefaults(),
                },
                footnote: {
                    enabled: false,
                    text: 'Footnote',
                    spacing: 20,
                    fontStyle: undefined,
                    fontWeight: undefined,
                    fontSize: FONT_SIZE.MEDIUM,
                    fontFamily: DEFAULT_FONT_FAMILY,
                    color: 'rgb(140, 140, 140)',
                    wrapping: ChartTheme.getCaptionWrappingDefaults(),
                },
                legend: {
                    position: BOTTOM,
                    spacing: 30,
                    listeners: {},
                    item: {
                        paddingX: 16,
                        paddingY: 8,
                        marker: ChartTheme.getLegendItemMarkerDefaults(),
                        label: {
                            color: DEFAULT_LABEL_COLOUR,
                            fontStyle: undefined,
                            fontWeight: undefined,
                            fontSize: FONT_SIZE.SMALL,
                            fontFamily: DEFAULT_FONT_FAMILY,
                            formatter: undefined,
                        },
                    },
                    reverseOrder: false,
                    pagination: {
                        marker: {
                            size: 12,
                        },
                        activeStyle: {
                            fill: DEFAULT_LABEL_COLOUR,
                        },
                        inactiveStyle: {
                            fill: DEFAULT_MUTED_LABEL_COLOUR,
                        },
                        highlightStyle: {
                            fill: DEFAULT_LABEL_COLOUR,
                        },
                        label: {
                            color: DEFAULT_LABEL_COLOUR,
                        },
                    },
                },
                tooltip: {
                    enabled: true,
                    range: 'nearest',
                    delay: 0,
                },
                listeners: {},
            };
        }
        constructor(options) {
            options = deepMerge({}, options !== null && options !== void 0 ? options : {});
            const { overrides = null, palette = null } = options;
            const defaults = this.createChartConfigPerChartType(this.getDefaults());
            if (overrides) {
                const { common } = overrides;
                const applyOverrides = (seriesTypes, overrideOpts) => {
                    if (!overrideOpts)
                        return;
                    for (const s of seriesTypes) {
                        const seriesType = s;
                        defaults[seriesType] = deepMerge(defaults[seriesType], overrideOpts);
                    }
                };
                for (const [, { seriesTypes, commonOptions }] of Object.entries(CHART_TYPE_CONFIG)) {
                    const cleanedCommon = Object.assign({}, common);
                    for (const commonKey of CHART_TYPE_SPECIFIC_COMMON_OPTIONS) {
                        if (!commonOptions.includes(commonKey)) {
                            delete cleanedCommon[commonKey];
                        }
                    }
                    applyOverrides(seriesTypes, cleanedCommon);
                }
                CHART_TYPES.seriesTypes.forEach((s) => {
                    const seriesType = s;
                    if (overrides[seriesType]) {
                        defaults[seriesType] = deepMerge(defaults[seriesType], overrides[seriesType]);
                    }
                });
            }
            this.palette = palette !== null && palette !== void 0 ? palette : this.getPalette();
            this.config = Object.freeze(this.templateTheme(defaults));
        }
        createChartConfigPerChartType(config) {
            Object.entries(CHART_TYPE_CONFIG).forEach(([nextType, { seriesTypes }]) => {
                const typeDefaults = getChartDefaults(nextType);
                seriesTypes.forEach((next) => {
                    const alias = next;
                    if (!config[alias]) {
                        config[alias] = {};
                        deepMerge(config[alias], typeDefaults);
                    }
                });
            });
            return config;
        }
        getDefaults() {
            let defaults = {};
            const getChartTypeDefaults = (chartType) => {
                return Object.assign(Object.assign(Object.assign({}, getLegendThemeTemplates()), ChartTheme.getChartDefaults()), getChartDefaults(chartType));
            };
            const getOverridesByType = (chartType, seriesTypes) => {
                var _a, _b, _c;
                var _d;
                const chartDefaults = getChartTypeDefaults(chartType);
                const result = {};
                for (const seriesType of seriesTypes) {
                    (_a = result[seriesType]) !== null && _a !== void 0 ? _a : (result[seriesType] = deepMerge({}, chartDefaults));
                    const axes = ((_b = (_d = result[seriesType]).axes) !== null && _b !== void 0 ? _b : (_d.axes = {}));
                    const template = getSeriesThemeTemplate(seriesType);
                    if (template) {
                        result[seriesType].series = deepMerge(result[seriesType].series, template);
                    }
                    for (const axisType of AXIS_TYPES.axesTypes) {
                        const template = getAxisThemeTemplate(axisType);
                        if (chartType === 'cartesian') {
                            axes[axisType] = deepMerge(axes[axisType], (_c = ChartTheme.cartesianAxisDefault[axisType]) !== null && _c !== void 0 ? _c : {});
                        }
                        if (template) {
                            axes[axisType] = deepMerge(axes[axisType], template);
                        }
                    }
                }
                return result;
            };
            defaults = deepMerge(defaults, getOverridesByType('cartesian', CHART_TYPES.cartesianTypes));
            defaults = deepMerge(defaults, getOverridesByType('polar', CHART_TYPES.polarTypes));
            defaults = deepMerge(defaults, getOverridesByType('hierarchy', CHART_TYPES.hierarchyTypes));
            return defaults;
        }
        templateTheme(themeTemplate) {
            const themeInstance = jsonMerge([themeTemplate]);
            const { extensions, properties } = this.getTemplateParameters();
            jsonWalk(themeInstance, (_, node) => {
                if (node['__extends__']) {
                    const key = node['__extends__'];
                    const source = extensions.get(key);
                    if (source == null) {
                        throw new Error('AG Charts - no template variable provided for: ' + key);
                    }
                    Object.keys(source).forEach((key) => {
                        if (!(key in node)) {
                            node[key] = source[key];
                        }
                    });
                    delete node['__extends__'];
                }
                if (node['__overrides__']) {
                    const key = node['__overrides__'];
                    const source = extensions.get(key);
                    if (source == null) {
                        throw new Error('AG Charts - no template variable provided for: ' + key);
                    }
                    Object.assign(node, source);
                    delete node['__overrides__'];
                }
                if (Array.isArray(node)) {
                    for (let i = 0; i < node.length; i++) {
                        const symbol = node[i];
                        if (properties.has(symbol)) {
                            node[i] = properties.get(symbol);
                        }
                    }
                }
                else {
                    for (const [name, value] of Object.entries(node)) {
                        if (properties.has(value)) {
                            node[name] = properties.get(value);
                        }
                    }
                }
            });
            return themeInstance;
        }
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: DEFAULT_FILLS.BLUE,
                stroke: DEFAULT_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: DEFAULT_FILLS.ORANGE,
                stroke: DEFAULT_STROKES.ORANGE,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: DEFAULT_FILLS.GRAY,
                stroke: DEFAULT_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const extensions = new Map();
            extensions.set(EXTENDS_CHART_DEFAULTS, ChartTheme.getChartDefaults());
            extensions.set(EXTENDS_AXES_DEFAULTS, ChartTheme.getAxisDefaults());
            extensions.set(EXTENDS_LEGEND_DEFAULTS, ChartTheme.getChartDefaults().legend);
            extensions.set(EXTENDS_LEGEND_ITEM_DEFAULTS, ChartTheme.getChartDefaults().legend.item);
            extensions.set(EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS, ChartTheme.getLegendItemMarkerDefaults());
            extensions.set(EXTENDS_AXES_LABEL_DEFAULTS, ChartTheme.getAxisDefaults().label);
            extensions.set(EXTENDS_AXES_LINE_DEFAULTS, ChartTheme.getAxisDefaults().line);
            extensions.set(EXTENDS_AXES_TICK_DEFAULTS, ChartTheme.getAxisDefaults().tick);
            extensions.set(EXTENDS_AXES_GRID_LINE_DEFAULTS, ChartTheme.getAxisDefaults().gridLine);
            extensions.set(EXTENDS_SERIES_DEFAULTS, ChartTheme.getSeriesDefaults());
            extensions.set(OVERRIDE_SERIES_LABEL_DEFAULTS, {});
            extensions.set(EXTENDS_CARTESIAN_MARKER_DEFAULTS, ChartTheme.getCartesianSeriesMarkerDefaults());
            const properties = new Map();
            properties.set(DEFAULT_FONT_FAMILY, 'Verdana, sans-serif');
            properties.set(DEFAULT_LABEL_COLOUR, 'rgb(70, 70, 70)');
            properties.set(DEFAULT_INVERTED_LABEL_COLOUR, 'white');
            properties.set(DEFAULT_MUTED_LABEL_COLOUR, 'rgb(140, 140, 140)');
            properties.set(DEFAULT_AXIS_GRID_COLOUR, 'rgb(224,234,241)');
            properties.set(DEFAULT_AXIS_LINE_COLOUR, 'rgb(195, 195, 195)');
            properties.set(DEFAULT_CROSS_LINES_COLOUR, 'rgb(70, 70, 70)');
            properties.set(DEFAULT_INSIDE_SERIES_LABEL_COLOUR, DEFAULT_BACKGROUND_FILL);
            properties.set(DEFAULT_BACKGROUND_COLOUR, DEFAULT_BACKGROUND_FILL);
            properties.set(DEFAULT_SHADOW_COLOUR, 'rgba(0, 0, 0, 0.5)');
            properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                DEFAULT_FILLS.ORANGE,
                DEFAULT_FILLS.YELLOW,
                DEFAULT_FILLS.GREEN,
            ]);
            properties.set(DEFAULT_HIERARCHY_FILLS, ['#ffffff', '#e0e5ea', '#c1ccd5', '#a3b4c1', '#859cad']);
            properties.set(DEFAULT_HIERARCHY_STROKES, ['#ffffff', '#c5cbd1', '#a4b1bd', '#8498a9', '#648096']);
            properties.set(DEFAULT_POLAR_SERIES_STROKE, DEFAULT_BACKGROUND_FILL);
            properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, ChartTheme.getWaterfallSeriesDefaultPositiveColors());
            properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, ChartTheme.getWaterfallSeriesDefaultNegativeColors());
            properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, ChartTheme.getWaterfallSeriesDefaultTotalColors());
            properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, ChartTheme.getWaterfallSeriesDefaultTotalColors().stroke);
            return {
                extensions,
                properties,
            };
        }
    }
    ChartTheme.cartesianAxisDefault = {
        number: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { line: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().line), { enabled: false }) }),
        log: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { base: 10, line: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().line), { enabled: false }) }),
        category: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { groupPaddingInner: 0.1, label: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().label), { autoRotate: true }), gridLine: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().gridLine), { enabled: false }) }),
        'grouped-category': Object.assign({}, ChartTheme.getAxisDefaults()),
        time: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults()), { gridLine: Object.assign(Object.assign({}, ChartTheme.getAxisDefaults().gridLine), { enabled: false }) }),
    };

    const DEFAULT_DARK_BACKGROUND_FILL = '#182732';
    const DEFAULT_DARK_FILLS = {
        BLUE: '#5090dc',
        ORANGE: '#ffa03a',
        GREEN: '#459d55',
        CYAN: '#34bfe1',
        YELLOW: '#e1cc00',
        VIOLET: '#9669cb',
        GRAY: '#b5b5b5',
        MAGENTA: '#bd5aa7',
        BROWN: '#8a6224',
        RED: '#ef5452',
    };
    const DEFAULT_DARK_STROKES = {
        BLUE: '#74a8e6',
        ORANGE: '#ffbe70',
        GREEN: '#6cb176',
        CYAN: '#75d4ef',
        YELLOW: '#f6e559',
        VIOLET: '#aa86d8',
        GRAY: '#a1a1a1',
        MAGENTA: '#ce7ab9',
        BROWN: '#997b52',
        RED: '#ff7872',
    };
    const palette$8 = {
        fills: Array.from(Object.values(DEFAULT_DARK_FILLS)),
        strokes: Array.from(Object.values(DEFAULT_DARK_STROKES)),
    };
    class DarkTheme extends ChartTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: DEFAULT_DARK_FILLS.BLUE,
                stroke: DEFAULT_DARK_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: DEFAULT_DARK_FILLS.ORANGE,
                stroke: DEFAULT_DARK_STROKES.ORANGE,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: DEFAULT_DARK_FILLS.GRAY,
                stroke: DEFAULT_DARK_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, DarkTheme.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, DarkTheme.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, DarkTheme.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, DarkTheme.getWaterfallSeriesDefaultTotalColors().stroke);
            result.properties.set(DEFAULT_POLAR_SERIES_STROKE, DEFAULT_DARK_BACKGROUND_FILL);
            result.properties.set(DEFAULT_LABEL_COLOUR, 'white');
            result.properties.set(DEFAULT_MUTED_LABEL_COLOUR, '#7D91A0');
            result.properties.set(DEFAULT_AXIS_GRID_COLOUR, '#545A6E');
            result.properties.set(DEFAULT_CROSS_LINES_COLOUR, 'white');
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                DEFAULT_DARK_FILLS.ORANGE,
                DEFAULT_DARK_FILLS.YELLOW,
                DEFAULT_DARK_FILLS.GREEN,
            ]);
            result.properties.set(DEFAULT_HIERARCHY_FILLS, ['#192834', '#253746', '#324859', '#3f596c', '#4d6a80']);
            result.properties.set(DEFAULT_HIERARCHY_STROKES, ['#192834', '#3b5164', '#496275', '#577287', '#668399']);
            result.properties.set(DEFAULT_BACKGROUND_COLOUR, DEFAULT_DARK_BACKGROUND_FILL);
            result.properties.set(DEFAULT_INSIDE_SERIES_LABEL_COLOUR, DEFAULT_DARK_BACKGROUND_FILL);
            return result;
        }
        getPalette() {
            return palette$8;
        }
        constructor(options) {
            super(options);
        }
    }

    const MATERIAL_DARK_FILLS = {
        BLUE: '#2196F3',
        ORANGE: '#FF9800',
        GREEN: '#4CAF50',
        CYAN: '#00BCD4',
        YELLOW: '#FFEB3B',
        VIOLET: '#7E57C2',
        GRAY: '#9E9E9E',
        MAGENTA: '#F06292',
        BROWN: '#795548',
        RED: '#F44336',
    };
    const MATERIAL_DARK_STROKES = {
        BLUE: '#90CAF9',
        ORANGE: '#FFCC80',
        GREEN: '#A5D6A7',
        CYAN: '#80DEEA',
        YELLOW: '#FFF9C4',
        VIOLET: '#B39DDB',
        GRAY: '#E0E0E0',
        MAGENTA: '#F48FB1',
        BROWN: '#A1887F',
        RED: '#EF9A9A',
    };
    const palette$7 = {
        fills: Array.from(Object.values(MATERIAL_DARK_FILLS)),
        strokes: Array.from(Object.values(MATERIAL_DARK_STROKES)),
    };
    class MaterialDark extends DarkTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: MATERIAL_DARK_FILLS.BLUE,
                stroke: MATERIAL_DARK_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: MATERIAL_DARK_FILLS.RED,
                stroke: MATERIAL_DARK_STROKES.RED,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: MATERIAL_DARK_FILLS.GRAY,
                stroke: MATERIAL_DARK_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, MaterialDark.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, MaterialDark.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, MaterialDark.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                MATERIAL_DARK_FILLS.ORANGE,
                MATERIAL_DARK_FILLS.YELLOW,
                MATERIAL_DARK_FILLS.GREEN,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, MaterialDark.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette$7;
        }
    }

    const MATERIAL_LIGHT_FILLS = {
        BLUE: '#2196F3',
        ORANGE: '#FF9800',
        GREEN: '#4CAF50',
        CYAN: '#00BCD4',
        YELLOW: '#FFEB3B',
        VIOLET: '#7E57C2',
        GRAY: '#9E9E9E',
        MAGENTA: '#F06292',
        BROWN: '#795548',
        RED: '#F44336',
    };
    const MATERIAL_LIGHT_STROKES = {
        BLUE: '#1565C0',
        ORANGE: '#E65100',
        GREEN: '#2E7D32',
        CYAN: '#00838F',
        YELLOW: '#F9A825',
        VIOLET: '#4527A0',
        GRAY: '#616161',
        MAGENTA: '#C2185B',
        BROWN: '#4E342E',
        RED: '#B71C1C',
    };
    const palette$6 = {
        fills: Array.from(Object.values(MATERIAL_LIGHT_FILLS)),
        strokes: Array.from(Object.values(MATERIAL_LIGHT_STROKES)),
    };
    class MaterialLight extends ChartTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: MATERIAL_LIGHT_FILLS.BLUE,
                stroke: MATERIAL_LIGHT_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: MATERIAL_LIGHT_FILLS.RED,
                stroke: MATERIAL_LIGHT_STROKES.RED,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: MATERIAL_LIGHT_FILLS.GRAY,
                stroke: MATERIAL_LIGHT_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, MaterialLight.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, MaterialLight.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, MaterialLight.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                MATERIAL_LIGHT_FILLS.ORANGE,
                MATERIAL_LIGHT_FILLS.YELLOW,
                MATERIAL_LIGHT_FILLS.GREEN,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, MaterialLight.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette$6;
        }
    }

    const POLYCHROMA_DARK_FILLS = {
        BLUE: '#436ff4',
        PURPLE: '#9a7bff',
        MAGENTA: '#d165d2',
        PINK: '#f0598b',
        RED: '#f47348',
        ORANGE: '#f2a602',
        YELLOW: '#e9e201',
        GREEN: '#21b448',
        CYAN: '#00b9a2',
        MODERATE_BLUE: '#00aee4',
    };
    const POLYCHROMA_DARK_STROKES = {
        BLUE: '#6698ff',
        PURPLE: '#c0a3ff',
        MAGENTA: '#fc8dfc',
        PINK: '#ff82b1',
        RED: '#ff9b70',
        ORANGE: '#ffcf4e',
        YELLOW: '#ffff58',
        GREEN: '#58dd70',
        CYAN: '#51e2c9',
        MODERATE_BLUE: '#4fd7ff',
    };
    const POLYCHROMA_DARK_FILL_GRAY = '#bbbbbb';
    const POLYCHROMA_DARK_STROKE_GRAY = '#eeeeee';
    const palette$5 = {
        fills: Array.from(Object.values(POLYCHROMA_DARK_FILLS)),
        strokes: Array.from(Object.values(POLYCHROMA_DARK_STROKES)),
    };
    class PolychromaDark extends DarkTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: POLYCHROMA_DARK_FILLS.BLUE,
                stroke: POLYCHROMA_DARK_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: POLYCHROMA_DARK_FILLS.RED,
                stroke: POLYCHROMA_DARK_STROKES.RED,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: POLYCHROMA_DARK_FILL_GRAY,
                stroke: POLYCHROMA_DARK_STROKE_GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, PolychromaDark.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, PolychromaDark.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, PolychromaDark.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                POLYCHROMA_DARK_FILLS.BLUE,
                POLYCHROMA_DARK_FILLS.RED,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, PolychromaDark.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette$5;
        }
    }

    const POLYCHROMA_LIGHT_FILLS = {
        BLUE: '#436ff4',
        PURPLE: '#9a7bff',
        MAGENTA: '#d165d2',
        PINK: '#f0598b',
        RED: '#f47348',
        ORANGE: '#f2a602',
        YELLOW: '#e9e201',
        GREEN: '#21b448',
        CYAN: '#00b9a2',
        MODERATE_BLUE: '#00aee4',
    };
    const POLYCHROMA_LIGHT_STROKES = {
        BLUE: '#2346c9',
        PURPLE: '#7653d4',
        MAGENTA: '#a73da9',
        PINK: '#c32d66',
        RED: '#c84b1c',
        ORANGE: '#c87f00',
        YELLOW: '#c1b900',
        GREEN: '#008c1c',
        CYAN: '#00927c',
        MODERATE_BLUE: '#0087bb',
    };
    const POLYCHROMA_LIGHT_FILL_GRAY = '#bbbbbb';
    const POLYCHROMA_LIGHT_STROKE_GRAY = '#888888';
    const palette$4 = {
        fills: Array.from(Object.values(POLYCHROMA_LIGHT_FILLS)),
        strokes: Array.from(Object.values(POLYCHROMA_LIGHT_STROKES)),
    };
    class PolychromaLight extends ChartTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: POLYCHROMA_LIGHT_FILLS.BLUE,
                stroke: POLYCHROMA_LIGHT_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: POLYCHROMA_LIGHT_FILLS.RED,
                stroke: POLYCHROMA_LIGHT_STROKES.RED,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: POLYCHROMA_LIGHT_FILL_GRAY,
                stroke: POLYCHROMA_LIGHT_STROKE_GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, PolychromaLight.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, PolychromaLight.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, PolychromaLight.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                POLYCHROMA_LIGHT_FILLS.BLUE,
                POLYCHROMA_LIGHT_FILLS.RED,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, PolychromaLight.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette$4;
        }
    }

    const SHEETS_DARK_FILLS = {
        BLUE: '#4472C4',
        ORANGE: '#ED7D31',
        GRAY: '#A5A5A5',
        YELLOW: '#FFC000',
        MODERATE_BLUE: '#5B9BD5',
        GREEN: '#70AD47',
        DARK_GRAY: '#7B7B7B',
        DARK_BLUE: '#264478',
        VERY_DARK_GRAY: '#636363',
        DARK_YELLOW: '#997300',
    };
    const SHEETS_DARK_STROKES = {
        BLUE: '#6899ee',
        ORANGE: '#ffa55d',
        GRAY: '#cdcdcd',
        YELLOW: '#ffea53',
        MODERATE_BLUE: '#82c3ff',
        GREEN: '#96d56f',
        DARK_GRAY: '#a1a1a1',
        DARK_BLUE: '#47689f',
        VERY_DARK_GRAY: '#878787',
        DARK_YELLOW: '#c0993d',
    };
    const palette$3 = {
        fills: Array.from(Object.values(SHEETS_DARK_FILLS)),
        strokes: Array.from(Object.values(SHEETS_DARK_STROKES)),
    };
    class SheetsDark extends DarkTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: SHEETS_DARK_FILLS.BLUE,
                stroke: SHEETS_DARK_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: SHEETS_DARK_FILLS.ORANGE,
                stroke: SHEETS_DARK_STROKES.ORANGE,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: SHEETS_DARK_FILLS.GRAY,
                stroke: SHEETS_DARK_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, SheetsDark.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, SheetsDark.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, SheetsDark.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                SHEETS_DARK_FILLS.ORANGE,
                SHEETS_DARK_FILLS.YELLOW,
                SHEETS_DARK_FILLS.GREEN,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, SheetsDark.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette$3;
        }
    }

    const SHEETS_LIGHT_FILLS = {
        BLUE: '#5281d5',
        ORANGE: '#ff8d44',
        GRAY: '#b5b5b5',
        YELLOW: '#ffd02f',
        MODERATE_BLUE: '#6aabe6',
        GREEN: '#7fbd57',
        DARK_GRAY: '#8a8a8a',
        DARK_BLUE: '#335287',
        VERY_DARK_GRAY: '#717171',
        DARK_YELLOW: '#a98220',
    };
    const SHEETS_LIGHT_STROKES = {
        BLUE: '#214d9b',
        ORANGE: '#c25600',
        GRAY: '#7f7f7f',
        YELLOW: '#d59800',
        MODERATE_BLUE: '#3575ac',
        GREEN: '#4b861a',
        DARK_GRAY: '#575757',
        DARK_BLUE: '#062253',
        VERY_DARK_GRAY: '#414141',
        DARK_YELLOW: '#734f00',
    };
    const palette$2 = {
        fills: Array.from(Object.values(SHEETS_LIGHT_FILLS)),
        strokes: Array.from(Object.values(SHEETS_LIGHT_STROKES)),
    };
    class SheetsLight extends ChartTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: SHEETS_LIGHT_FILLS.BLUE,
                stroke: SHEETS_LIGHT_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: SHEETS_LIGHT_FILLS.ORANGE,
                stroke: SHEETS_LIGHT_STROKES.ORANGE,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: SHEETS_LIGHT_FILLS.GRAY,
                stroke: SHEETS_LIGHT_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, SheetsLight.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, SheetsLight.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, SheetsLight.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                SHEETS_LIGHT_FILLS.ORANGE,
                SHEETS_LIGHT_FILLS.YELLOW,
                SHEETS_LIGHT_FILLS.GREEN,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, SheetsLight.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette$2;
        }
    }

    const VIVID_DARK_FILLS = {
        BLUE: '#0083ff',
        ORANGE: '#ff6600',
        GREEN: '#00af00',
        CYAN: '#00ccff',
        YELLOW: '#f7c700',
        VIOLET: '#ac26ff',
        GRAY: '#a7a7b7',
        MAGENTA: '#e800c5',
        BROWN: '#b54300',
        RED: '#ff0000',
    };
    const VIVID_DARK_STROKES = {
        BLUE: '#67b7ff',
        ORANGE: '#ffc24d',
        GREEN: '#5cc86f',
        CYAN: '#54ebff',
        VIOLET: '#c18aff',
        YELLOW: '#fff653',
        GRAY: '#aeaeae',
        MAGENTA: '#f078d4',
        BROWN: '#ba8438',
        RED: '#ff726e',
    };
    const palette$1 = {
        fills: Array.from(Object.values(VIVID_DARK_FILLS)),
        strokes: Array.from(Object.values(VIVID_DARK_STROKES)),
    };
    class VividDark extends DarkTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: VIVID_DARK_FILLS.BLUE,
                stroke: VIVID_DARK_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: VIVID_DARK_FILLS.ORANGE,
                stroke: VIVID_DARK_STROKES.ORANGE,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: VIVID_DARK_FILLS.GRAY,
                stroke: VIVID_DARK_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, VividDark.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, VividDark.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, VividDark.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                VIVID_DARK_FILLS.ORANGE,
                VIVID_DARK_FILLS.YELLOW,
                VIVID_DARK_FILLS.GREEN,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, VividDark.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette$1;
        }
    }

    const VIVID_FILLS = {
        BLUE: '#0083ff',
        ORANGE: '#ff6600',
        GREEN: '#00af00',
        CYAN: '#00ccff',
        YELLOW: '#f7c700',
        VIOLET: '#ac26ff',
        GRAY: '#a7a7b7',
        MAGENTA: '#e800c5',
        BROWN: '#b54300',
        RED: '#ff0000',
    };
    const VIVID_STROKES = {
        BLUE: '#0f68c0',
        ORANGE: '#d47100',
        GREEN: '#007922',
        CYAN: '#009ac2',
        VIOLET: '#bca400',
        YELLOW: '#753cac',
        GRAY: '#646464',
        MAGENTA: '#9b2685',
        BROWN: '#6c3b00',
        RED: '#cb0021',
    };
    const palette = {
        fills: Array.from(Object.values(VIVID_FILLS)),
        strokes: Array.from(Object.values(VIVID_STROKES)),
    };
    class VividLight extends ChartTheme {
        static getWaterfallSeriesDefaultPositiveColors() {
            return {
                fill: VIVID_FILLS.BLUE,
                stroke: VIVID_STROKES.BLUE,
            };
        }
        static getWaterfallSeriesDefaultNegativeColors() {
            return {
                fill: VIVID_FILLS.ORANGE,
                stroke: VIVID_STROKES.ORANGE,
            };
        }
        static getWaterfallSeriesDefaultTotalColors() {
            return {
                fill: VIVID_FILLS.GRAY,
                stroke: VIVID_STROKES.GRAY,
            };
        }
        getTemplateParameters() {
            const result = super.getTemplateParameters();
            result.properties.set(DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS, VividLight.getWaterfallSeriesDefaultPositiveColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS, VividLight.getWaterfallSeriesDefaultNegativeColors());
            result.properties.set(DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS, VividLight.getWaterfallSeriesDefaultTotalColors());
            result.properties.set(DEFAULT_DIVERGING_SERIES_COLOUR_RANGE, [
                VIVID_FILLS.ORANGE,
                VIVID_FILLS.YELLOW,
                VIVID_FILLS.GREEN,
            ]);
            result.properties.set(DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE, VividLight.getWaterfallSeriesDefaultTotalColors().stroke);
            return result;
        }
        getPalette() {
            return palette;
        }
    }

    const lightTheme = () => new ChartTheme();
    const darkTheme = () => new DarkTheme();
    const lightThemes = {
        undefined: lightTheme,
        null: lightTheme,
        'ag-default': lightTheme,
        'ag-sheets': () => new SheetsLight(),
        'ag-polychroma': () => new PolychromaLight(),
        'ag-vivid': () => new VividLight(),
        'ag-material': () => new MaterialLight(),
    };
    const darkThemes = {
        undefined: darkTheme,
        null: darkTheme,
        'ag-default-dark': darkTheme,
        'ag-sheets-dark': () => new SheetsDark(),
        'ag-polychroma-dark': () => new PolychromaDark(),
        'ag-vivid-dark': () => new VividDark(),
        'ag-material-dark': () => new MaterialDark(),
    };
    const themes$1 = Object.assign(Object.assign({}, darkThemes), lightThemes);
    function validateChartThemeObject(unknownObject) {
        if (unknownObject === null) {
            return undefined;
        }
        let valid = true;
        const { baseTheme, palette, overrides } = unknownObject;
        if (baseTheme !== undefined && typeof baseTheme !== 'string' && typeof baseTheme !== 'object') {
            Logger.warn(`invalid theme.baseTheme type ${typeof baseTheme}, expected (string | object).`);
            valid = false;
        }
        if (overrides !== undefined && typeof overrides !== 'object') {
            Logger.warn(`invalid theme.overrides type ${typeof overrides}, expected object.`);
            valid = false;
        }
        if (typeof palette === 'object') {
            if (palette !== null) {
                const { fills, strokes } = palette;
                if (!Array.isArray(fills)) {
                    Logger.warn(`theme.overrides.fills must be a defined array`);
                    valid = false;
                }
                if (!Array.isArray(strokes)) {
                    Logger.warn(`theme.overrides.strokes must be a defined array`);
                    valid = false;
                }
            }
        }
        else if (palette !== undefined) {
            Logger.warn(`invalid theme.palette type ${typeof palette}, expected object.`);
            valid = false;
        }
        if (valid) {
            return unknownObject;
        }
        return undefined;
    }
    function validateChartTheme(value) {
        if (value === undefined || typeof value === 'string' || value instanceof ChartTheme) {
            return value;
        }
        if (typeof value === 'object') {
            return validateChartThemeObject(value);
        }
        Logger.warn(`invalid theme value type ${typeof value}, expected object.`);
        return undefined;
    }
    function getChartTheme(unvalidatedValue) {
        var _a;
        // unvalidatedValue is either a built-in theme (`string | ChartTheme`) or a user defined
        // theme (`AgChartTheme`). In the latter case, we can't make any assumption about the
        // property types, hence why the input parameter is `unknown`. This abnormal validation
        // is tech debt; the ideal solution would be to integrate user themes with the @Validate
        // decorator like other chart options.
        let value = validateChartTheme(unvalidatedValue);
        if (value instanceof ChartTheme) {
            return value;
        }
        if (value === undefined || typeof value === 'string') {
            const stockTheme = themes$1[value];
            if (stockTheme) {
                return stockTheme();
            }
            Logger.warnOnce(`the theme [${value}] is invalid, using [ag-default] instead.`);
            return lightTheme();
        }
        // Flatten recursive themes.
        const overrides = [];
        let palette;
        while (typeof value === 'object') {
            overrides.push((_a = value.overrides) !== null && _a !== void 0 ? _a : {});
            // Use first palette found, they can't be merged.
            if (value.palette && palette == null) {
                palette = value.palette;
            }
            value = value.baseTheme;
        }
        overrides.reverse();
        const flattenedTheme = Object.assign({ baseTheme: value, overrides: jsonMerge(overrides) }, (palette ? { palette } : {}));
        const baseTheme = flattenedTheme.baseTheme ? getChartTheme(flattenedTheme.baseTheme) : lightTheme();
        return new baseTheme.constructor(flattenedTheme);
    }

    function takeColours(context, colours, maxCount) {
        const result = [];
        for (let count = 0; count < maxCount; count++) {
            result.push(colours[(count + context.colourIndex) % colours.length]);
        }
        return result;
    }
    const noDataCloneMergeOptions = {
        avoidDeepClone: ['data'],
    };
    function getGlobalTooltipPositionOptions(position) {
        // Note: we do not need to show a warning message if the validation fails. These global tooltip options
        // are already processed at the root of the chart options. Logging a message here would trigger duplicate
        // validation warnings.
        if (position === undefined || typeof position !== 'object' || position === null) {
            return {};
        }
        const { type, xOffset, yOffset } = position;
        const result = {};
        const AgTooltipPositionTypeMap = { pointer: true, node: true };
        const isTooltipPositionType = (value) => Object.keys(AgTooltipPositionTypeMap).includes(value);
        if (typeof type === 'string' && isTooltipPositionType(type)) {
            result.type = type;
        }
        if (typeof xOffset === 'number' && !isNaN(xOffset) && isFinite(xOffset)) {
            result.xOffset = xOffset;
        }
        if (typeof yOffset === 'number' && !isNaN(yOffset) && isFinite(yOffset)) {
            result.yOffset = yOffset;
        }
        return result;
    }
    function prepareOptions(options) {
        var _a, _b, _c, _d;
        sanityCheckOptions(options);
        // Determine type and ensure it's explicit in the options config.
        const type = optionsType(options);
        const globalTooltipPositionOptions = getGlobalTooltipPositionOptions((_a = options.tooltip) === null || _a === void 0 ? void 0 : _a.position);
        const checkSeriesType = (type) => {
            if (type != null && !(isSeriesOptionType(type) || isEnterpriseSeriesType(type) || getSeriesDefaults(type))) {
                throw new Error(`AG Charts - unknown series type: ${type}; expected one of: ${CHART_TYPES.seriesTypes}`);
            }
        };
        checkSeriesType(type);
        for (const { type: seriesType } of (_b = options.series) !== null && _b !== void 0 ? _b : []) {
            if (seriesType == null)
                continue;
            checkSeriesType(seriesType);
        }
        options = validateSoloSeries(Object.assign(Object.assign({}, options), { type }));
        let defaultSeriesType = 'line';
        if (isAgCartesianChartOptions(options)) {
            defaultSeriesType = 'line';
        }
        else if (isAgHierarchyChartOptions(options)) {
            defaultSeriesType = 'treemap';
        }
        else if (isAgPolarChartOptions(options)) {
            defaultSeriesType = 'pie';
        }
        let defaultOverrides = getSeriesDefaults(type);
        if (isDefaultAxisSwapNeeded(options)) {
            defaultOverrides = swapAxes(defaultOverrides);
        }
        defaultOverrides = executeCustomDefaultsFunctions(options, defaultOverrides);
        const conflictOverrides = resolveModuleConflicts(options);
        removeDisabledOptions(options);
        const { context, mergedOptions, axesThemes, seriesThemes, theme } = prepareMainOptions(defaultOverrides, options, conflictOverrides);
        // Special cases where we have arrays of elements which need their own defaults.
        // Apply series themes before calling processSeriesOptions() as it reduces and renames some
        // properties, and in that case then cannot correctly have themes applied.
        mergedOptions.series = processSeriesOptions(mergedOptions, ((_c = mergedOptions.series) !== null && _c !== void 0 ? _c : []).map((s) => {
            var _a;
            const type = (_a = s.type) !== null && _a !== void 0 ? _a : defaultSeriesType;
            const mergedSeries = mergeSeriesOptions(s, type, seriesThemes, globalTooltipPositionOptions);
            if (type === 'pie') {
                preparePieOptions(seriesThemes.pie, s, mergedSeries);
            }
            return mergedSeries;
        }))
            .map((s) => prepareSeries(context, s))
            .map((s) => theme.templateTheme(s));
        const checkAxisType = (type) => {
            const isAxisType = isAxisOptionType(type);
            if (!isAxisType) {
                Logger.warnOnce(`unknown axis type: ${type}; expected one of: ${AXIS_TYPES.axesTypes}, ignoring.`);
            }
            return isAxisType;
        };
        if ('axes' in mergedOptions) {
            let validAxesTypes = true;
            for (const { type: axisType } of (_d = mergedOptions.axes) !== null && _d !== void 0 ? _d : []) {
                validAxesTypes && (validAxesTypes = checkAxisType(axisType));
            }
            const axisSource = validAxesTypes ? mergedOptions.axes : defaultOverrides.axes;
            mergedOptions.axes = axisSource === null || axisSource === void 0 ? void 0 : axisSource.map((axis) => {
                var _a, _b, _c, _d, _e;
                const axisType = axis.type;
                let axisDefaults;
                if (validAxesTypes) {
                    axisDefaults = (_a = defaultOverrides.axes) === null || _a === void 0 ? void 0 : _a.find(({ type }) => type === axisType);
                }
                const axesTheme = jsonMerge([
                    (_b = axesThemes[axisType]) !== null && _b !== void 0 ? _b : {},
                    (_e = (_c = axesThemes[axisType]) === null || _c === void 0 ? void 0 : _c[(_d = axis.position) !== null && _d !== void 0 ? _d : 'unknown']) !== null && _e !== void 0 ? _e : {},
                    axisDefaults,
                ]);
                return prepareAxis(axis, axesTheme);
            });
            prepareLegendEnabledOption(options, mergedOptions);
        }
        prepareEnabledOptions(options, mergedOptions);
        return mergedOptions;
    }
    function sanityCheckOptions(options) {
        const deprecatedArrayProps = {
            yKeys: 'yKey',
            yNames: 'yName',
        };
        Object.entries(deprecatedArrayProps).forEach(([oldProp, newProp]) => {
            var _a;
            if ((_a = options.series) === null || _a === void 0 ? void 0 : _a.some((s) => s[oldProp] != null)) {
                Logger.warnOnce(`Property [series.${oldProp}] is deprecated, please use [series.${newProp}] and multiple series instead.`);
            }
        });
    }
    function hasSoloSeries(options) {
        for (const series of options) {
            if (isSoloSeries(series.type))
                return true;
        }
        return false;
    }
    function validateSoloSeries(options) {
        if (options.series === undefined || options.series.length <= 1 || !hasSoloSeries(options.series)) {
            return options;
        }
        // If the first series is a solo-series, remove all trailing series.
        // If the frist series is not a solo-series, remove all solo-series.
        let series = [...options.series];
        if (isSoloSeries(series[0].type)) {
            Logger.warn(`series[0] of type '${series[0].type}' is incompatible with other series types. Only processing series[0]`);
            series = series.slice(0, 1);
        }
        else {
            const rejects = Array.from(new Set(series.filter((s) => isSoloSeries(s.type)).map((s) => s.type)));
            Logger.warnOnce(`Unable to mix these series types with the lead series type: ${rejects}`);
            series = series.filter((s) => !isSoloSeries(s.type));
        }
        return Object.assign(Object.assign({}, options), { series });
    }
    function mergeSeriesOptions(series, type, seriesThemes, globalTooltipPositionOptions) {
        var _a, _b;
        const mergedTooltipPosition = jsonMerge([Object.assign({}, globalTooltipPositionOptions), (_a = series.tooltip) === null || _a === void 0 ? void 0 : _a.position], noDataCloneMergeOptions);
        return jsonMerge([
            (_b = seriesThemes[type]) !== null && _b !== void 0 ? _b : {},
            Object.assign(Object.assign({}, series), { type, tooltip: Object.assign(Object.assign({}, series.tooltip), { position: mergedTooltipPosition }) }),
        ], noDataCloneMergeOptions);
    }
    function prepareMainOptions(defaultOverrides, options, conflictOverrides) {
        const { theme, cleanedTheme, axesThemes, seriesThemes, userPalette } = prepareTheme(options);
        const context = { colourIndex: 0, palette: theme.palette, userPalette, theme };
        defaultOverrides = theme.templateTheme(defaultOverrides);
        const mergedOptions = jsonMerge([defaultOverrides, cleanedTheme, options, conflictOverrides], noDataCloneMergeOptions);
        if (!enterpriseModule.isEnterprise) {
            removeUsedEnterpriseOptions(mergedOptions);
        }
        return { context, mergedOptions, axesThemes, seriesThemes, theme };
    }
    function prepareTheme(options) {
        var _a;
        const theme = getChartTheme(options.theme);
        const themeConfig = theme.config[optionsType(options)];
        const seriesThemes = Object.entries(theme.config).reduce((result, [seriesType, { series }]) => {
            result[seriesType] = series;
            return result;
        }, {});
        const userTheme = options.theme;
        const userPalette = typeof userTheme === 'object' && userTheme.palette ? userTheme.palette : null;
        return {
            theme,
            axesThemes: (_a = themeConfig === null || themeConfig === void 0 ? void 0 : themeConfig['axes']) !== null && _a !== void 0 ? _a : {},
            seriesThemes: seriesThemes,
            cleanedTheme: jsonMerge([themeConfig !== null && themeConfig !== void 0 ? themeConfig : {}, { axes: DELETE, series: DELETE }]),
            userPalette,
        };
    }
    function prepareSeries(context, input, ...defaults) {
        const paletteOptions = calculateSeriesPalette(context, input);
        // Part of the options interface, but not directly consumed by the series implementations.
        const removeOptions = { stacked: DELETE, grouped: DELETE };
        return jsonMerge([...defaults, paletteOptions, input, removeOptions], noDataCloneMergeOptions);
    }
    function calculateSeriesPalette(context, input) {
        const paletteFactory = getSeriesPaletteFactory(input.type);
        if (!paletteFactory) {
            return {};
        }
        const { palette: { fills, strokes }, userPalette, theme, } = context;
        const colorsCount = Math.max(fills.length, strokes.length);
        return paletteFactory({
            userPalette,
            themeTemplateParameters: theme.getTemplateParameters(),
            colorsCount,
            takeColors: (count) => {
                const colors = {
                    fills: takeColours(context, fills, count),
                    strokes: takeColours(context, strokes, count),
                };
                context.colourIndex += count;
                return colors;
            },
        });
    }
    function prepareAxis(axis, axisTheme) {
        // Remove redundant theme overload keys.
        const removeOptions = { top: DELETE, bottom: DELETE, left: DELETE, right: DELETE };
        // Special cross lines case where we have an array of cross line elements which need their own defaults.
        if (axis.crossLines) {
            if (!Array.isArray(axis.crossLines)) {
                Logger.warn('axis[].crossLines should be an array.');
                axis.crossLines = [];
            }
            const { crossLines: crossLinesTheme } = axisTheme;
            axis.crossLines = axis.crossLines.map((crossLine) => jsonMerge([crossLinesTheme, crossLine]));
        }
        const cleanTheme = { crossLines: DELETE };
        return jsonMerge([axisTheme, cleanTheme, axis, removeOptions], noDataCloneMergeOptions);
    }
    function removeDisabledOptions(options) {
        // Remove configurations from all option objects with a `false` value for the `enabled` property.
        jsonWalk(options, (_, visitingUserOpts) => {
            if (visitingUserOpts.enabled === false) {
                Object.keys(visitingUserOpts).forEach((key) => {
                    if (key === 'enabled')
                        return;
                    delete visitingUserOpts[key];
                });
            }
        }, { skip: ['data', 'theme'] });
    }
    function prepareLegendEnabledOption(options, mergedOptions) {
        var _a, _b, _c, _d;
        // Disable legend by default for single series cartesian charts
        if (((_a = options.legend) === null || _a === void 0 ? void 0 : _a.enabled) !== undefined || ((_b = mergedOptions.legend) === null || _b === void 0 ? void 0 : _b.enabled) !== undefined) {
            return;
        }
        (_c = mergedOptions.legend) !== null && _c !== void 0 ? _c : (mergedOptions.legend = {});
        if (((_d = options.series) !== null && _d !== void 0 ? _d : []).length > 1) {
            mergedOptions.legend.enabled = true;
            return;
        }
        mergedOptions.legend.enabled = false;
    }
    function prepareEnabledOptions(options, mergedOptions) {
        // Set `enabled: true` for all option objects where the user has provided values.
        jsonWalk(options, (_, visitingUserOpts, visitingMergedOpts) => {
            if (!visitingMergedOpts)
                return;
            const { _enabledFromTheme } = visitingMergedOpts;
            if (_enabledFromTheme != null) {
                // Do not apply special handling, base enablement on theme.
                delete visitingMergedOpts._enabledFromTheme;
            }
            if (!('enabled' in visitingMergedOpts))
                return;
            if (_enabledFromTheme)
                return;
            if (visitingUserOpts.enabled == null) {
                visitingMergedOpts.enabled = true;
            }
        }, { skip: ['data', 'theme'] }, mergedOptions);
        // Cleanup any special properties.
        jsonWalk(mergedOptions, (_, visitingMergedOpts) => {
            if (visitingMergedOpts._enabledFromTheme != null) {
                // Do not apply special handling, base enablement on theme.
                delete visitingMergedOpts._enabledFromTheme;
            }
        }, { skip: ['data', 'theme'] });
    }
    function preparePieOptions(pieSeriesTheme, seriesOptions, mergedSeries) {
        if (Array.isArray(seriesOptions.innerLabels)) {
            mergedSeries.innerLabels = seriesOptions.innerLabels.map((ln) => {
                return jsonMerge([pieSeriesTheme.innerLabels, ln]);
            });
        }
        else {
            mergedSeries.innerLabels = DELETE;
        }
    }

    class PolarChart extends Chart {
        constructor(specialOverrides, resources) {
            super(specialOverrides, resources);
            this.padding = new Padding(40);
            this.axisGroup.zIndex = Layers.AXIS_FOREGROUND_ZINDEX;
        }
        performLayout() {
            const _super = Object.create(null, {
                performLayout: { get: () => super.performLayout }
            });
            return __awaiter(this, void 0, void 0, function* () {
                const shrinkRect = yield _super.performLayout.call(this);
                const fullSeriesRect = shrinkRect.clone();
                this.computeSeriesRect(shrinkRect);
                yield this.computeCircle(shrinkRect);
                this.axes.forEach((axis) => axis.update());
                this.hoverRect = shrinkRect;
                this.layoutService.dispatchLayoutComplete({
                    type: 'layout-complete',
                    chart: { width: this.scene.width, height: this.scene.height },
                    clipSeries: false,
                    series: { rect: fullSeriesRect, paddedRect: shrinkRect, visible: true },
                    axes: [],
                });
                return shrinkRect;
            });
        }
        updateAxes(cx, cy, radius) {
            var _a, _b;
            const angleAxis = this.axes.find((axis) => axis.direction === ChartAxisDirection.X);
            const radiusAxis = this.axes.find((axis) => axis.direction === ChartAxisDirection.Y);
            if (!(angleAxis instanceof PolarAxis) || !(radiusAxis instanceof PolarAxis)) {
                return;
            }
            const angleScale = angleAxis.scale;
            const angles = (_a = angleScale.ticks) === null || _a === void 0 ? void 0 : _a.call(angleScale).map((value) => angleScale.convert(value));
            const innerRadiusRatio = radiusAxis.innerRadiusRatio;
            angleAxis.innerRadiusRatio = innerRadiusRatio;
            (_b = angleAxis.computeRange) === null || _b === void 0 ? void 0 : _b.call(angleAxis);
            angleAxis.gridLength = radius;
            radiusAxis.gridAngles = angles;
            radiusAxis.gridRange = angleAxis.range;
            radiusAxis.range = [radius, radius * innerRadiusRatio];
            [angleAxis, radiusAxis].forEach((axis) => {
                axis.translation.x = cx;
                axis.translation.y = cy;
                axis.calculateLayout();
            });
        }
        computeSeriesRect(shrinkRect) {
            const { seriesArea: { padding }, } = this;
            shrinkRect.shrink(padding.left, 'left');
            shrinkRect.shrink(padding.top, 'top');
            shrinkRect.shrink(padding.right, 'right');
            shrinkRect.shrink(padding.bottom, 'bottom');
            this.seriesRect = shrinkRect;
            this.animationRect = shrinkRect;
        }
        computeCircle(seriesBox) {
            return __awaiter(this, void 0, void 0, function* () {
                const polarSeries = this.series.filter((series) => {
                    return series instanceof PolarSeries;
                });
                const polarAxes = this.axes.filter((axis) => {
                    return axis instanceof PolarAxis;
                });
                const setSeriesCircle = (cx, cy, r) => {
                    this.updateAxes(cx, cy, r);
                    polarSeries.forEach((series) => {
                        series.centerX = cx;
                        series.centerY = cy;
                        series.radius = r;
                    });
                    const pieSeries = polarSeries.filter((s) => s instanceof PieSeries);
                    if (pieSeries.length > 1) {
                        const innerRadii = pieSeries
                            .map((series) => {
                            const innerRadius = series.getInnerRadius();
                            return { series, innerRadius };
                        })
                            .sort((a, b) => a.innerRadius - b.innerRadius);
                        innerRadii[innerRadii.length - 1].series.surroundingRadius = undefined;
                        for (let i = 0; i < innerRadii.length - 1; i++) {
                            innerRadii[i].series.surroundingRadius = innerRadii[i + 1].innerRadius;
                        }
                    }
                };
                const centerX = seriesBox.x + seriesBox.width / 2;
                const centerY = seriesBox.y + seriesBox.height / 2;
                const initialRadius = Math.max(0, Math.min(seriesBox.width, seriesBox.height) / 2);
                let radius = initialRadius;
                setSeriesCircle(centerX, centerY, radius);
                const shake = ({ hideWhenNecessary = false } = {}) => __awaiter(this, void 0, void 0, function* () {
                    const labelBoxes = [];
                    for (const series of [...polarAxes, ...polarSeries]) {
                        const box = yield series.computeLabelsBBox({ hideWhenNecessary }, seriesBox);
                        if (box) {
                            labelBoxes.push(box);
                        }
                    }
                    if (labelBoxes.length === 0) {
                        setSeriesCircle(centerX, centerY, initialRadius);
                        return;
                    }
                    const labelBox = BBox.merge(labelBoxes);
                    const refined = this.refineCircle(labelBox, radius, seriesBox);
                    setSeriesCircle(refined.centerX, refined.centerY, refined.radius);
                    if (refined.radius === radius) {
                        return;
                    }
                    radius = refined.radius;
                });
                yield shake(); // Initial attempt
                yield shake(); // Precise attempt
                yield shake(); // Just in case
                yield shake({ hideWhenNecessary: true }); // Hide unnecessary labels
                yield shake({ hideWhenNecessary: true }); // Final result
                return { radius, centerX, centerY };
            });
        }
        refineCircle(labelsBox, radius, seriesBox) {
            const minCircleRatio = 0.5; // Prevents reduced circle to be too small
            const circleLeft = -radius;
            const circleTop = -radius;
            const circleRight = radius;
            const circleBottom = radius;
            // Label padding around the circle
            let padLeft = Math.max(0, circleLeft - labelsBox.x);
            let padTop = Math.max(0, circleTop - labelsBox.y);
            let padRight = Math.max(0, labelsBox.x + labelsBox.width - circleRight);
            let padBottom = Math.max(0, labelsBox.y + labelsBox.height - circleBottom);
            padLeft = padRight = Math.max(padLeft, padRight);
            padTop = padBottom = Math.max(padTop, padBottom);
            // Available area for the circle (after the padding will be applied)
            const availCircleWidth = seriesBox.width - padLeft - padRight;
            const availCircleHeight = seriesBox.height - padTop - padBottom;
            let newRadius = Math.min(availCircleWidth, availCircleHeight) / 2;
            const minHorizontalRadius = (minCircleRatio * seriesBox.width) / 2;
            const minVerticalRadius = (minCircleRatio * seriesBox.height) / 2;
            const minRadius = Math.min(minHorizontalRadius, minVerticalRadius);
            if (newRadius < minRadius) {
                // If the radius is too small, reduce the label padding
                newRadius = minRadius;
                const horizontalPadding = padLeft + padRight;
                const verticalPadding = padTop + padBottom;
                if (2 * newRadius + verticalPadding > seriesBox.height) {
                    const padHeight = seriesBox.height - 2 * newRadius;
                    if (Math.min(padTop, padBottom) * 2 > padHeight) {
                        padTop = padHeight / 2;
                        padBottom = padHeight / 2;
                    }
                    else if (padTop > padBottom) {
                        padTop = padHeight - padBottom;
                    }
                    else {
                        padBottom = padHeight - padTop;
                    }
                }
                if (2 * newRadius + horizontalPadding > seriesBox.width) {
                    const padWidth = seriesBox.width - 2 * newRadius;
                    if (Math.min(padLeft, padRight) * 2 > padWidth) {
                        padLeft = padWidth / 2;
                        padRight = padWidth / 2;
                    }
                    else if (padLeft > padRight) {
                        padLeft = padWidth - padRight;
                    }
                    else {
                        padRight = padWidth - padLeft;
                    }
                }
            }
            const newWidth = padLeft + 2 * newRadius + padRight;
            const newHeight = padTop + 2 * newRadius + padBottom;
            return {
                centerX: seriesBox.x + (seriesBox.width - newWidth) / 2 + padLeft + newRadius,
                centerY: seriesBox.y + (seriesBox.height - newHeight) / 2 + padTop + newRadius,
                radius: newRadius,
            };
        }
    }
    PolarChart.className = 'PolarChart';
    PolarChart.type = 'polar';

    const debug = Debug.create(true, 'opts');
    function chartType(options) {
        if (isAgCartesianChartOptions(options)) {
            return 'cartesian';
        }
        else if (isAgPolarChartOptions(options)) {
            return 'polar';
        }
        else if (isAgHierarchyChartOptions(options)) {
            return 'hierarchy';
        }
        throw new Error(`AG Chart - unknown type of chart for options with type: ${options.type}`);
    }
    /**
     * Factory for creating and updating instances of AgChartInstance.
     *
     * @docsInterface
     */
    class AgCharts {
        static licenseCheck(options) {
            var _a, _b, _c;
            if (this.licenseChecked)
                return;
            this.licenseManager = (_a = enterpriseModule.licenseManager) === null || _a === void 0 ? void 0 : _a.call(enterpriseModule, options);
            (_b = this.licenseManager) === null || _b === void 0 ? void 0 : _b.setLicenseKey(this.licenseKey);
            (_c = this.licenseManager) === null || _c === void 0 ? void 0 : _c.validateLicense();
            this.licenseChecked = true;
        }
        static setLicenseKey(licenseKey) {
            this.licenseKey = licenseKey;
        }
        /**
         * Create a new `AgChartInstance` based upon the given configuration options.
         */
        static create(options) {
            var _a, _b, _c;
            this.licenseCheck(options);
            const chart = AgChartsInternal.createOrUpdate(options);
            if ((_a = this.licenseManager) === null || _a === void 0 ? void 0 : _a.isDisplayWatermark()) {
                (_b = enterpriseModule.injectWatermark) === null || _b === void 0 ? void 0 : _b.call(enterpriseModule, (_c = options.document) !== null && _c !== void 0 ? _c : document, chart.chart.element, this.licenseManager.getWatermarkMessage());
            }
            return chart;
        }
        /**
         * Update an existing `AgChartInstance`. Options provided should be complete and not
         * partial.
         *
         * __NOTE__: As each call could trigger a chart redraw, multiple calls to update options in
         * quick succession could result in undesirable flickering, so callers should batch up and/or
         * debounce changes to avoid unintended partial update renderings.
         */
        static update(chart, options) {
            if (!AgChartInstanceProxy.isInstance(chart)) {
                throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);
            }
            AgChartsInternal.createOrUpdate(options, chart);
        }
        /**
         * Update an existing `AgChartInstance` by applying a partial set of option changes.
         *
         * __NOTE__: As each call could trigger a chart redraw, each individual delta options update
         * should leave the chart in a valid options state. Also, multiple calls to update options in
         * quick succession could result in undesirable flickering, so callers should batch up and/or
         * debounce changes to avoid unintended partial update renderings.
         */
        static updateDelta(chart, deltaOptions) {
            if (!AgChartInstanceProxy.isInstance(chart)) {
                throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);
            }
            AgChartsInternal.updateUserDelta(chart, deltaOptions);
        }
        /**
         * Starts a browser-based image download for the given `AgChartInstance`.
         */
        static download(chart, options) {
            if (!(chart instanceof AgChartInstanceProxy)) {
                throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);
            }
            AgChartsInternal.download(chart, options);
        }
        /**
         * Returns a base64-encoded image data URL for the given `AgChartInstance`.
         */
        static getImageDataURL(chart, options) {
            if (!(chart instanceof AgChartInstanceProxy)) {
                throw new Error(AgCharts.INVALID_CHART_REF_MESSAGE);
            }
            return AgChartsInternal.getImageDataURL(chart, options);
        }
    }
    AgCharts.INVALID_CHART_REF_MESSAGE = 'AG Charts - invalid chart reference passed';
    AgCharts.licenseChecked = false;
    /** @deprecated use AgCharts instead */
    class AgChart {
        static warnDeprecated(memberName) {
            const warnDeprecated = createDeprecationWarning();
            warnDeprecated(`AgChart.${memberName}`, `Use AgCharts.${memberName} instead`);
        }
        static create(options) {
            AgChart.warnDeprecated('create');
            return AgCharts.create(options);
        }
        static update(chart, options) {
            AgChart.warnDeprecated('update');
            return AgCharts.update(chart, options);
        }
        static updateDelta(chart, deltaOptions) {
            AgChart.warnDeprecated('updateDelta');
            return AgCharts.updateDelta(chart, deltaOptions);
        }
        static download(chart, options) {
            AgChart.warnDeprecated('download');
            return AgCharts.download(chart, options);
        }
        static getImageDataURL(chart, options) {
            AgChart.warnDeprecated('getImageDataURL');
            return AgCharts.getImageDataURL(chart, options);
        }
    }
    class AgChartsInternal {
        static initialiseModules() {
            if (AgChartsInternal.initialised)
                return;
            registerInbuiltModules();
            setupModules();
            AgChartsInternal.initialised = true;
        }
        static createOrUpdate(userOptions, proxy) {
            var _a;
            var _b;
            AgChartsInternal.initialiseModules();
            debug('>>> AgChartV2.createOrUpdate() user options', userOptions);
            const { overrideDevicePixelRatio, document, window: userWindow } = userOptions, chartOptions = __rest(userOptions, ["overrideDevicePixelRatio", "document", "window"]);
            const specialOverrides = { overrideDevicePixelRatio, document, window: userWindow };
            const processedOptions = prepareOptions(chartOptions);
            let chart = proxy === null || proxy === void 0 ? void 0 : proxy.chart;
            if (chart == null || chartType(chartOptions) !== chartType(chart.processedOptions)) {
                chart = AgChartsInternal.createChartInstance(processedOptions, specialOverrides, chart);
            }
            if (proxy == null) {
                proxy = new AgChartInstanceProxy(chart);
            }
            else {
                proxy.chart = chart;
            }
            if (Debug.check() && typeof window !== 'undefined') {
                (_a = (_b = window).agChartInstances) !== null && _a !== void 0 ? _a : (_b.agChartInstances = {});
                window.agChartInstances[chart.id] = chart;
            }
            const chartToUpdate = chart;
            chartToUpdate.queuedUserOptions.push(chartOptions);
            const dequeue = () => {
                // If there are a lot of update calls, `requestFactoryUpdate()` may skip callbacks,
                // so we need to remove all queue items up to the last successfully applied item.
                const queuedOptionsIdx = chartToUpdate.queuedUserOptions.indexOf(chartOptions);
                chartToUpdate.queuedUserOptions.splice(0, queuedOptionsIdx);
            };
            chartToUpdate.requestFactoryUpdate(() => __awaiter(this, void 0, void 0, function* () {
                // Chart destroyed, skip processing.
                if (chartToUpdate.destroyed)
                    return;
                const deltaOptions = jsonDiff(chartToUpdate.processedOptions, processedOptions);
                if (deltaOptions == null) {
                    dequeue();
                    return;
                }
                yield AgChartsInternal.updateDelta(chartToUpdate, deltaOptions, chartOptions);
                dequeue();
            }));
            return proxy;
        }
        static updateUserDelta(proxy, deltaOptions) {
            var _a;
            const { chart, chart: { queuedUserOptions }, } = proxy;
            const lastUpdateOptions = (_a = queuedUserOptions[queuedUserOptions.length - 1]) !== null && _a !== void 0 ? _a : chart.userOptions;
            const userOptions = jsonMerge([lastUpdateOptions, deltaOptions]);
            debug('>>> AgChartV2.updateUserDelta() user delta', deltaOptions);
            debug('AgChartV2.updateUserDelta() - base options', lastUpdateOptions);
            AgChartsInternal.createOrUpdate(userOptions, proxy);
        }
        /**
         * Returns the content of the current canvas as an image.
         * @param opts The download options including `width` and `height` of the image as well as `fileName` and `fileFormat`.
         */
        static download(proxy, opts) {
            const asyncDownload = () => __awaiter(this, void 0, void 0, function* () {
                const maybeClone = yield AgChartsInternal.prepareResizedChart(proxy, opts);
                const { chart } = maybeClone;
                chart.scene.download(opts === null || opts === void 0 ? void 0 : opts.fileName, opts === null || opts === void 0 ? void 0 : opts.fileFormat);
                if (maybeClone !== proxy) {
                    maybeClone.destroy();
                }
            });
            asyncDownload().catch((e) => Logger.errorOnce(e));
        }
        static getImageDataURL(proxy, opts) {
            return __awaiter(this, void 0, void 0, function* () {
                const maybeClone = yield AgChartsInternal.prepareResizedChart(proxy, opts);
                const { chart } = maybeClone;
                const result = chart.scene.canvas.getDataURL(opts === null || opts === void 0 ? void 0 : opts.fileFormat);
                if (maybeClone !== proxy) {
                    maybeClone.destroy();
                }
                return result;
            });
        }
        static prepareResizedChart(proxy, opts) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                const { chart } = proxy;
                let { width, height } = opts !== null && opts !== void 0 ? opts : {};
                const currentWidth = chart.width;
                const currentHeight = chart.height;
                const unchanged = (width === undefined && height === undefined) ||
                    (chart.scene.canvas.pixelRatio === 1 && currentWidth === width && currentHeight === height);
                if (unchanged) {
                    return proxy;
                }
                width !== null && width !== void 0 ? width : (width = currentWidth);
                height !== null && height !== void 0 ? height : (height = currentHeight);
                const options = Object.assign(Object.assign({}, chart.userOptions), { container: document.createElement('div'), width,
                    height, autoSize: false, overrideDevicePixelRatio: 1 });
                if (hasRegisteredEnterpriseModules()) {
                    // Disable enterprise features that may interfere with image generation.
                    (_a = options.animation) !== null && _a !== void 0 ? _a : (options.animation = {});
                    options.animation.enabled = false;
                }
                const clonedChart = AgChartsInternal.createOrUpdate(options);
                yield clonedChart.chart.waitForUpdate();
                return clonedChart;
            });
        }
        static createChartInstance(options, specialOverrides, oldChart) {
            const transferableResource = oldChart === null || oldChart === void 0 ? void 0 : oldChart.destroy({ keepTransferableResources: true });
            if (isAgCartesianChartOptions(options)) {
                return new CartesianChart(specialOverrides, transferableResource);
            }
            else if (isAgHierarchyChartOptions(options)) {
                return new HierarchyChart(specialOverrides, transferableResource);
            }
            else if (isAgPolarChartOptions(options)) {
                return new PolarChart(specialOverrides, transferableResource);
            }
            throw new Error(`AG Charts - couldn't apply configuration, check options are correctly structured and series types are specified`);
        }
        static updateDelta(chart, processedOptions, userOptions) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                if (processedOptions.type == null) {
                    processedOptions = Object.assign(Object.assign({}, processedOptions), { type: (_a = chart.processedOptions.type) !== null && _a !== void 0 ? _a : optionsType(processedOptions) });
                }
                if (chart.destroyed)
                    return;
                debug('AgChartV2.updateDelta() - applying delta', processedOptions);
                applyChartOptions(chart, processedOptions, userOptions);
            });
        }
    }
    AgChartsInternal.initialised = false;
    function applyChartOptions(chart, processedOptions, userOptions) {
        var _a, _b, _c, _d;
        const completeOptions = jsonMerge([(_a = chart.processedOptions) !== null && _a !== void 0 ? _a : {}, processedOptions], noDataCloneMergeOptions);
        const modulesChanged = applyModules(chart, completeOptions);
        const skip = ['type', 'data', 'series', 'listeners', 'theme', 'legend.listeners'];
        if (isAgCartesianChartOptions(processedOptions) || isAgPolarChartOptions(processedOptions)) {
            // Append axes to defaults.
            skip.push('axes');
        }
        else if (isAgHierarchyChartOptions(processedOptions)) ;
        else {
            throw new Error(`AG Charts - couldn't apply configuration, check type of options and chart: ${processedOptions['type']}`);
        }
        // Needs to be done before applying the series to detect if a seriesNode[Double]Click listener has been added
        if (processedOptions.listeners) {
            registerListeners(chart, processedOptions.listeners);
        }
        applyOptionValues(chart, processedOptions, { skip });
        let forceNodeDataRefresh = false;
        let seriesRecreated = false;
        if (processedOptions.series && processedOptions.series.length > 0) {
            seriesRecreated = applySeries(chart, processedOptions);
            forceNodeDataRefresh = true;
        }
        if ('axes' in completeOptions && Array.isArray(completeOptions.axes)) {
            const axesPresent = applyAxes(chart, completeOptions, seriesRecreated);
            if (axesPresent) {
                forceNodeDataRefresh = true;
            }
        }
        const seriesOpts = processedOptions.series;
        const seriesDataUpdate = !!processedOptions.data || (seriesOpts === null || seriesOpts === void 0 ? void 0 : seriesOpts.some((s) => s.data != null));
        const legendKeys = getLegendKeys();
        const optionsHaveLegend = Object.values(legendKeys).some((legendKey) => processedOptions[legendKey] != null);
        const otherRefreshUpdate = processedOptions.title != null && processedOptions.subtitle != null;
        forceNodeDataRefresh = forceNodeDataRefresh || seriesDataUpdate || optionsHaveLegend || otherRefreshUpdate;
        if (processedOptions.data) {
            chart.data = processedOptions.data;
        }
        if ((_b = processedOptions.legend) === null || _b === void 0 ? void 0 : _b.listeners) {
            Object.assign(chart.legend.listeners, (_c = processedOptions.legend.listeners) !== null && _c !== void 0 ? _c : {});
        }
        if (processedOptions.listeners) {
            chart.updateAllSeriesListeners();
        }
        chart.processedOptions = completeOptions;
        chart.userOptions = jsonMerge([(_d = chart.userOptions) !== null && _d !== void 0 ? _d : {}, userOptions], noDataCloneMergeOptions);
        const majorChange = forceNodeDataRefresh || modulesChanged;
        const updateType = majorChange ? ChartUpdateType.PROCESS_DATA : ChartUpdateType.PERFORM_LAYOUT;
        debug('AgChartV2.applyChartOptions() - update type', ChartUpdateType[updateType]);
        chart.update(updateType, { forceNodeDataRefresh, newAnimationBatch: true });
    }
    function applyModules(chart, options) {
        const matchingChartType = (module) => {
            return ((chart instanceof CartesianChart && module.chartTypes.includes('cartesian')) ||
                (chart instanceof PolarChart && module.chartTypes.includes('polar')) ||
                (chart instanceof HierarchyChart && module.chartTypes.includes('hierarchy')));
        };
        let modulesChanged = false;
        const processModules = (moduleType, add, remove) => {
            const modules = REGISTERED_MODULES.filter((m) => m.type === moduleType);
            for (const next of modules) {
                const shouldBeEnabled = matchingChartType(next) && options[next.optionsKey] != null;
                const isEnabled = chart.isModuleEnabled(next);
                if (shouldBeEnabled === isEnabled)
                    continue;
                modulesChanged = true;
                if (shouldBeEnabled) {
                    add(next);
                }
                else {
                    remove(next);
                }
            }
        };
        processModules('root', (next) => chart.addModule(next), (next) => chart.removeModule(next));
        processModules('legend', (next) => chart.addLegendModule(next), (next) => chart.removeLegendModule(next));
        return modulesChanged;
    }
    function applySeries(chart, options) {
        const optSeries = options.series;
        if (!optSeries) {
            return false;
        }
        const keysToConsider = ['type', 'direction', 'xKey', 'yKey', 'sizeKey', 'angleKey', 'stacked', 'stackGroup'];
        let matchingTypes = chart.series.length === optSeries.length;
        for (let i = 0; i < chart.series.length && matchingTypes; i++) {
            for (const key of keysToConsider) {
                matchingTypes && (matchingTypes = chart.series[i][key] === optSeries[i][key]);
            }
        }
        // Try to optimise series updates if series count and types didn't change.
        if (matchingTypes) {
            chart.series.forEach((s, i) => {
                var _a, _b, _c, _d;
                const previousOpts = (_c = (_b = (_a = chart.processedOptions) === null || _a === void 0 ? void 0 : _a.series) === null || _b === void 0 ? void 0 : _b[i]) !== null && _c !== void 0 ? _c : {};
                const seriesDiff = jsonDiff(previousOpts, (_d = optSeries[i]) !== null && _d !== void 0 ? _d : {});
                if (!seriesDiff) {
                    return;
                }
                debug(`AgChartV2.applySeries() - applying series diff idx ${i}`, seriesDiff);
                applySeriesValues(s, seriesDiff, { path: `series[${i}]`, index: i });
                s.markNodeDataDirty();
            });
            return false;
        }
        debug(`AgChartV2.applySeries() - creating new series instances`);
        chart.series = createSeries(chart, optSeries);
        return true;
    }
    function applyAxes(chart, options, forceRecreate) {
        const optAxes = options.axes;
        if (!optAxes) {
            return false;
        }
        const matchingTypes = !forceRecreate &&
            chart.axes.length === optAxes.length &&
            chart.axes.every((a, i) => a.type === optAxes[i].type);
        // Try to optimise series updates if series count and types didn't change.
        if (matchingTypes) {
            const oldOpts = chart.processedOptions;
            if (isAgCartesianChartOptions(oldOpts)) {
                chart.axes.forEach((a, i) => {
                    var _a, _b;
                    const previousOpts = (_b = (_a = oldOpts.axes) === null || _a === void 0 ? void 0 : _a[i]) !== null && _b !== void 0 ? _b : {};
                    const axisDiff = jsonDiff(previousOpts, optAxes[i]);
                    debug(`AgChartV2.applyAxes() - applying axis diff idx ${i}`, axisDiff);
                    const path = `axes[${i}]`;
                    const skip = ['axes[].type'];
                    applyOptionValues(a, axisDiff, { path, skip });
                });
                return true;
            }
        }
        chart.axes = createAxis(chart, optAxes);
        return true;
    }
    function createSeries(chart, options) {
        var _a;
        const series = [];
        const moduleContext = chart.getModuleContext();
        let index = 0;
        for (const seriesOptions of options !== null && options !== void 0 ? options : []) {
            const path = `series[${index++}]`;
            const type = (_a = seriesOptions.type) !== null && _a !== void 0 ? _a : 'unknown';
            if (isEnterpriseSeriesType(type) && !isEnterpriseSeriesTypeLoaded(type)) {
                continue;
            }
            const seriesInstance = getSeries(type, moduleContext);
            applySeriesOptionModules(seriesInstance, seriesOptions);
            applySeriesValues(seriesInstance, seriesOptions, { path, index });
            series.push(seriesInstance);
        }
        return series;
    }
    function applySeriesOptionModules(series, options) {
        const seriesOptionModules = REGISTERED_MODULES.filter((m) => m.type === 'series-option');
        for (const mod of seriesOptionModules) {
            const supportedSeriesTypes = mod.seriesTypes;
            if (mod.optionsKey in options && supportedSeriesTypes.includes(series.type)) {
                series.getModuleMap().addModule(mod);
            }
        }
    }
    function createAxis(chart, options) {
        const axes = [];
        const skip = ['axes[].type'];
        const moduleContext = chart.getModuleContext();
        let index = 0;
        for (const axisOptions of options !== null && options !== void 0 ? options : []) {
            const axis = getAxis(axisOptions.type, moduleContext);
            const path = `axes[${index++}]`;
            applyAxisModules(axis, axisOptions);
            applyOptionValues(axis, axisOptions, { path, skip });
            axes.push(axis);
        }
        return axes;
    }
    function applyAxisModules(axis, options) {
        let modulesChanged = false;
        const rootModules = REGISTERED_MODULES.filter((m) => m.type === 'axis-option');
        for (const next of rootModules) {
            const shouldBeEnabled = options[next.optionsKey] != null;
            const moduleMap = axis.getModuleMap();
            const isEnabled = moduleMap.isModuleEnabled(next);
            if (shouldBeEnabled === isEnabled)
                continue;
            modulesChanged = true;
            if (shouldBeEnabled) {
                moduleMap.addModule(next);
            }
            else {
                moduleMap.removeModule(next);
            }
        }
        return modulesChanged;
    }
    function registerListeners(source, listeners) {
        source.clearEventListeners();
        const entries = Object.entries(listeners !== null && listeners !== void 0 ? listeners : {});
        for (const [property, listener] of entries) {
            if (typeof listener !== 'function')
                continue;
            source.addEventListener(property, listener);
        }
    }
    function applyOptionValues(target, options, { skip, path } = {}) {
        const applyOpts = Object.assign(Object.assign(Object.assign({}, getJsonApplyOptions()), { skip }), (path ? { path } : {}));
        return jsonApply(target, options, applyOpts);
    }
    function applySeriesValues(target, options, { path, index } = {}) {
        var _a, _b;
        const skip = ['series[].listeners', 'series[].seriesGrouping'];
        const jsonApplyOptions = getJsonApplyOptions();
        const ctrs = (_a = jsonApplyOptions.constructors) !== null && _a !== void 0 ? _a : {};
        const seriesTypeOverrides = {
            constructors: Object.assign(Object.assign({}, ctrs), { title: target.type === 'pie' ? PieTitle : ctrs['title'] }),
        };
        const applyOpts = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, jsonApplyOptions), seriesTypeOverrides), { skip: ['series[].type', ...(skip !== null && skip !== void 0 ? skip : [])] }), (path ? { path } : {})), { idx: index !== null && index !== void 0 ? index : -1 });
        const result = jsonApply(target, options, applyOpts);
        if ((options === null || options === void 0 ? void 0 : options.listeners) != null) {
            registerListeners(target, options.listeners);
        }
        const { seriesGrouping } = options;
        if ('seriesGrouping' in (options !== null && options !== void 0 ? options : {})) {
            if (seriesGrouping) {
                target.seriesGrouping = Object.freeze(Object.assign(Object.assign({}, ((_b = target.seriesGrouping) !== null && _b !== void 0 ? _b : {})), seriesGrouping));
            }
            else {
                target.seriesGrouping = seriesGrouping;
            }
        }
        return result;
    }

    // DO NOT UPDATE MANUALLY: Generated from script during build time
    const VERSION = '9.0.1';

    const themes = Object.entries(themes$1).reduce((obj, [name, factory]) => {
        obj[name] = factory();
        return obj;
    }, {});

    var integratedChartsTheme = /*#__PURE__*/Object.freeze({
        __proto__: null,
        themes: themes,
        getChartTheme: getChartTheme,
        ChartTheme: ChartTheme,
        EXTENDS_CHART_DEFAULTS: EXTENDS_CHART_DEFAULTS,
        EXTENDS_LEGEND_DEFAULTS: EXTENDS_LEGEND_DEFAULTS,
        EXTENDS_LEGEND_ITEM_DEFAULTS: EXTENDS_LEGEND_ITEM_DEFAULTS,
        EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS: EXTENDS_LEGEND_ITEM_MARKER_DEFAULTS,
        EXTENDS_AXES_DEFAULTS: EXTENDS_AXES_DEFAULTS,
        EXTENDS_AXES_LABEL_DEFAULTS: EXTENDS_AXES_LABEL_DEFAULTS,
        EXTENDS_AXES_LINE_DEFAULTS: EXTENDS_AXES_LINE_DEFAULTS,
        EXTENDS_AXES_TICK_DEFAULTS: EXTENDS_AXES_TICK_DEFAULTS,
        EXTENDS_AXES_GRID_LINE_DEFAULTS: EXTENDS_AXES_GRID_LINE_DEFAULTS,
        EXTENDS_SERIES_DEFAULTS: EXTENDS_SERIES_DEFAULTS,
        EXTENDS_CARTESIAN_MARKER_DEFAULTS: EXTENDS_CARTESIAN_MARKER_DEFAULTS,
        OVERRIDE_SERIES_LABEL_DEFAULTS: OVERRIDE_SERIES_LABEL_DEFAULTS,
        DEFAULT_FONT_FAMILY: DEFAULT_FONT_FAMILY,
        DEFAULT_LABEL_COLOUR: DEFAULT_LABEL_COLOUR,
        DEFAULT_INVERTED_LABEL_COLOUR: DEFAULT_INVERTED_LABEL_COLOUR,
        DEFAULT_INSIDE_SERIES_LABEL_COLOUR: DEFAULT_INSIDE_SERIES_LABEL_COLOUR,
        DEFAULT_MUTED_LABEL_COLOUR: DEFAULT_MUTED_LABEL_COLOUR,
        DEFAULT_AXIS_GRID_COLOUR: DEFAULT_AXIS_GRID_COLOUR,
        DEFAULT_AXIS_LINE_COLOUR: DEFAULT_AXIS_LINE_COLOUR,
        DEFAULT_CROSS_LINES_COLOUR: DEFAULT_CROSS_LINES_COLOUR,
        DEFAULT_BACKGROUND_COLOUR: DEFAULT_BACKGROUND_COLOUR,
        DEFAULT_SHADOW_COLOUR: DEFAULT_SHADOW_COLOUR,
        DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS: DEFAULT_WATERFALL_SERIES_POSITIVE_COLOURS,
        DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS: DEFAULT_WATERFALL_SERIES_NEGATIVE_COLOURS,
        DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS: DEFAULT_WATERFALL_SERIES_TOTAL_COLOURS,
        DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE: DEFAULT_WATERFALL_SERIES_CONNECTOR_LINE_STROKE,
        DEFAULT_POLAR_SERIES_STROKE: DEFAULT_POLAR_SERIES_STROKE,
        DEFAULT_DIVERGING_SERIES_COLOUR_RANGE: DEFAULT_DIVERGING_SERIES_COLOUR_RANGE,
        DEFAULT_HIERARCHY_FILLS: DEFAULT_HIERARCHY_FILLS,
        DEFAULT_HIERARCHY_STROKES: DEFAULT_HIERARCHY_STROKES,
        FONT_SIZE: FONT_SIZE,
        BOLD: BOLD,
        NORMAL: NORMAL,
        BOTTOM: BOTTOM,
        CARTESIAN_AXIS_POSITIONS: CARTESIAN_AXIS_POSITIONS,
        CARTESIAN_AXIS_TYPES: CARTESIAN_AXIS_TYPES,
        POLAR_AXIS_TYPES: POLAR_AXIS_TYPES,
        CIRCLE: CIRCLE
    });

    var sparklinesScale = /*#__PURE__*/Object.freeze({
        __proto__: null,
        TimeScale: TimeScale,
        BandScale: BandScale,
        ContinuousScale: ContinuousScale,
        ColorScale: ColorScale,
        LinearScale: LinearScale
    });

    exports.AgChart = AgChart;
    exports.AgCharts = AgCharts;
    exports.AgErrorBarSupportedSeriesTypes = AgErrorBarSupportedSeriesTypes;
    exports.Marker = Marker;
    exports.VERSION = VERSION;
    exports._ModuleSupport = moduleSupport;
    exports._Scale = sparklinesScale;
    exports._Scene = integratedChartsScene;
    exports._Theme = integratedChartsTheme;
    exports._Util = sparklinesUtil;
    exports.__FORCE_MODULE_DETECTION = __FORCE_MODULE_DETECTION$1;
    exports.time = index;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
