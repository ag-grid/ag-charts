import type { SeriesConstructor, SeriesPaletteFactory } from '../../module/coreModules';
import type { ModuleContext } from '../../module/moduleContext';
import type { AgChartOptions } from '../../options/agChartOptions';
import type { SeriesOptionsTypes } from '../mapping/types';
import type { Series } from '../series/series';
import type { ChartType } from './chartTypes';
type DefaultsFunction = (opts: unknown) => AgChartOptions;
export declare function registerSeries(seriesType: NonNullable<SeriesOptionsTypes['type']>, chartType: ChartType, cstr: SeriesConstructor, defaults: {}, theme: {}, enterpriseTheme: {} | undefined, paletteFactory: SeriesPaletteFactory | undefined, solo: boolean | undefined, stackable: boolean | undefined, groupable: boolean | undefined, stackedByDefault: boolean | undefined, swapDefaultAxesCondition: ((opts: any) => boolean) | undefined, customDefaultsFunction: ((opts: any) => AgChartOptions) | undefined): void;
export declare function registerSeriesThemeTemplate(seriesType: NonNullable<SeriesOptionsTypes['type']>, themeTemplate: {}, enterpriseThemeTemplate?: {}): void;
export declare function getSeries(chartType: string, moduleCtx: ModuleContext): Series<any>;
export declare function getSeriesDefaults(chartType: string): {};
export declare function getSeriesThemeTemplate(chartType: string): {};
export declare function addSeriesPaletteFactory(seriesType: string, factory: SeriesPaletteFactory): void;
export declare function getSeriesPaletteFactory(seriesType: string): SeriesPaletteFactory<"line" | "scatter" | "bubble" | "area" | "bar" | "box-plot" | "histogram" | "heatmap" | "waterfall" | "range-bar" | "range-area" | "bullet" | "pie" | "radar-line" | "radar-area" | "radial-bar" | "radial-column" | "nightingale" | "treemap" | "sunburst">;
export declare function isSoloSeries(seriesType: SeriesOptionsTypes['type']): boolean;
export declare function isStackableSeries(seriesType: SeriesOptionsTypes['type']): boolean;
export declare function isGroupableSeries(seriesType: SeriesOptionsTypes['type']): boolean;
export declare function isSeriesStackedByDefault(seriesType: string): boolean;
export declare function addGroupableSeriesType(seriesType: SeriesOptionsTypes['type']): void;
export declare function addSoloSeriesType(seriesType: SeriesOptionsTypes['type']): void;
export declare function addStackableSeriesType(seriesType: SeriesOptionsTypes['type']): void;
export declare function addStackedByDefaultSeriesType(seriesType: string): void;
export declare function addSwapDefaultAxesCondition(seriesType: string, predicate: (opts: unknown) => boolean): void;
export declare function addCustomDefaultsFunctions(seriesType: string, predicate: DefaultsFunction): void;
export declare function isDefaultAxisSwapNeeded(opts: AgChartOptions): boolean | undefined;
export declare function executeCustomDefaultsFunctions(opts: AgChartOptions, initialDefaults: {}): {};
export {};
