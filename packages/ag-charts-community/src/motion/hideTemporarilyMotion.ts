import type { AnimationManager } from '../chart/interaction/animationManager';
import type { Node } from '../scene/node';
import type { Selection } from '../scene/selection';

/**
 * Makes a node invisible during the animation cycle.
 *
 * @param id prefix for all animation ids generated by this call
 * @param animationManager used to schedule generated animations
 * @param selections contains nodes to be animated
 */
export function hideTemporarilyMotion<N extends Node, D>(
    groupId: string,
    subId: string,
    animationManager: AnimationManager,
    selections: Selection<N, D>[]
) {
    for (const selection of selections) {
        for (const node of selection.nodes()) {
            animationManager.animate({
                id: `${groupId}_${subId}_${node.id}`,
                groupId,
                from: 0,
                to: 1,
                onUpdate(value) {
                    node.visible = value >= 1;
                },
                onStop() {
                    node.visible = true;
                },
                onComplete() {
                    selection.cleanup();
                },
            });
        }
    }
}
