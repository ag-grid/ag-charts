import type { AnimationManager } from '../chart/interaction/animationManager';
import type { Path } from '../scene/shape/path';
import * as easing from './easing';
import { FROM_TO_MIXINS, type NodeUpdateState } from './fromToMotion';

/**
 * Implements a per-path "to/from" animation.
 *
 * @param id prefix for all animation ids generated by this call
 * @param animationManager used to schedule generated animations
 * @param paths contains paths to be animated
 * @param intermediateFn callback to update path
 * @param extraOpts optional additional animation properties to pass to AnimationManager#animate.
 */
export function pathMotion(
    id: string,
    animationManager: AnimationManager,
    paths: Path[],
    fns: {
        addPhaseFn: (ratio: number, path: Path) => void;
        updatePhaseFn: (ratio: number, path: Path) => void;
        removePhaseFn: (ratio: number, path: Path) => void;
    }
) {
    const { defaultDuration } = animationManager;
    const { addPhaseFn, updatePhaseFn, removePhaseFn } = fns;

    const animate = (phase: NodeUpdateState, path: Path, updateFn: (ratio: number, path: Path) => void) => {
        animationManager.animate({
            id: `${id}_${path.id}_${phase}`,
            from: 0,
            to: 1,
            ease: easing.easeOut,
            onUpdate(ratio, preInit) {
                if (preInit && phase !== 'removed') return;

                path.path.clear({ trackChanges: true });
                updateFn(ratio, path);
                path.checkPathDirty();
            },
            onStop() {
                if (phase !== 'added') return;

                path.path.clear({ trackChanges: true });
                updateFn(1, path);
                path.checkPathDirty();
            },
            duration: FROM_TO_MIXINS[phase].animationDuration * defaultDuration,
            delay: FROM_TO_MIXINS[phase].animationDelay * defaultDuration,
        });
    };

    for (const path of paths) {
        if (!animationManager.isSkipped()) {
            animate('removed', path, removePhaseFn);
            animate('updated', path, updatePhaseFn);
        }
        animate('added', path, addPhaseFn);
    }
}
