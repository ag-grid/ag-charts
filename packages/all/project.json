{
  "name": "all",
  "$schema": "../../node_modules/nx/schemas/project-schema.json",
  "sourceRoot": "packages/all/src",
  "projectType": "library",
  "targets": {
    "build": {
      "executor": "nx:noop",
      "inputs": [],
      "outputs": [],
      "dependsOn": ["^build"]
    },
    "lint": {
      "executor": "nx:noop",
      "inputs": [],
      "outputs": [],
      "dependsOn": ["^lint"],
      "configurations": {
        "fix": {}
      }
    },
    "test": {
      "executor": "nx:noop",
      "inputs": [],
      "outputs": [],
      "dependsOn": ["^test"],
      "configurations": {
        "update": {}
      }
    },
    "pack": {
      "executor": "nx:noop",
      "inputs": [],
      "outputs": [],
      "dependsOn": ["^pack"],
      "configurations": {
        "production": {}
      }
    },
    "pack:extract": {
      "executor": "nx:noop",
      "inputs": [],
      "outputs": [],
      "dependsOn": ["^pack:extract"],
      "configurations": {
        "production": {}
      }
    },
    "pack:verify": {
      "executor": "nx:noop",
      "inputs": [],
      "outputs": [],
      "dependsOn": ["^pack:verify"],
      "configurations": {
        "production": {}
      }
    },
    "dev:setup": {
      "executor": "nx:run-commands",
      "dependsOn": ["^build:types"],
      "inputs": [],
      "outputs": [],
      "options": {
        "parallel": false,
        "commands": [
          "if (test \"${BUILD_BATCH}\" != \"0\") ; then nx run ag-charts-website:generate-examples --batch ; fi",
          "if (test \"${BUILD_BATCH}\" != \"0\") ; then nx run ag-charts-website:generate-thumbnails --batch ; fi"
        ]
      }
    },
    "dev": {
      "executor": "nx:run-commands",
      "dependsOn": ["dev:setup"],
      "inputs": [],
      "outputs": [],
      "options": {
        "parallel": true,
        "commands": [
          "while true ; do nx watch -p ag-charts-community,ag-charts-enterprise -- {projectRoot}/dev.sh \\${NX_PROJECT_NAME} ; done",
          "while (test \"${BUILD_FWS}\" == \"1\") ; do nx watch -p ag-charts-angular,ag-charts-react,ag-charts-vue,ag-charts-vue3 -- {projectRoot}/dev.sh \\${NX_PROJECT_NAME} ; done",
          "while true ; do nx watch -p ag-charts-website-* -- nx run \\${NX_PROJECT_NAME}:generate; done",
          "nx run ag-charts-website:dev"
        ]
      },
      "configurations": {
        "windows": {
          "commands": [
            {
              "command": "nx run ag-charts-website:dev --configuration watch"
            }
          ]
        }
      }
    },
    "format:check": {
      "executor": "nx:noop",
      "dependsOn": ["^format:check"],
      "inputs": [],
      "outputs": []
    },
    "blt": {
      "executor": "nx:run-commands",
      "dependsOn": ["build", "lint", "format-check"],
      "inputs": [],
      "cache": true,
      "options": {
        "parallel": false,
        "commands": ["nx run-many -t test --parallel 1", "nx run-many -t validate-examples"]
      }
    },
    "clean": { "command": "rimraf dist/ 'packages/*/dist/'" }
  },
  "implicitDependencies": [
    "ag-charts-community",
    "ag-charts-enterprise",
    "ag-charts-community-examples",
    "ag-charts-website",
    "ag-charts-angular",
    "ag-charts-react",
    "ag-charts-vue",
    "ag-charts-vue3",
    "ag-charts-task-autogen",
    "ag-charts-generate-code-reference-files",
    "ag-charts-generate-chart-thumbnail",
    "ag-charts-generate-example-files",
    "ag-charts-test"
  ],
  "tags": []
}
