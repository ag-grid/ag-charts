// markdoc.config.ts
import { component, defineMarkdocConfig, nodes } from "@astrojs/markdoc/config";

// plugins/prism.ts
import { Markdoc } from "@astrojs/markdoc/config";
import { runHighlighterWithAstro } from "@astrojs/prism/dist/highlighter";
import { unescapeHTML } from "astro/runtime/server/index.js";
function prism() {
  return {
    nodes: {
      fence: {
        attributes: Markdoc.nodes.fence.attributes,
        transform({ attributes: { language, content } }) {
          const { html, classLanguage } = runHighlighterWithAstro(language, content);
          return unescapeHTML(
            `<pre class="${classLanguage} code"><code class="${classLanguage}">${html}</code></pre>`
          );
        }
      }
    }
  };
}

// src/constants.ts
var FRAMEWORKS = ["react", "angular", "vue", "javascript"];
var DEFAULT_FRAMEWORK = FRAMEWORKS[0];
var _a;
var agChartsVersion = ((_a = import.meta.env) == null ? void 0 : _a.PUBLIC_PACKAGE_VERSION) ?? "unknown";
var _a2;
var agChartsReactVersion = ((_a2 = import.meta.env) == null ? void 0 : _a2.PUBLIC_PACKAGE_VERSION) ?? "unknown";
var _a3;
var agChartsAngularVersion = ((_a3 = import.meta.env) == null ? void 0 : _a3.PUBLIC_PACKAGE_VERSION) ?? "unknown";
var _a4;
var agChartsVueVersion = ((_a4 = import.meta.env) == null ? void 0 : _a4.PUBLIC_PACKAGE_VERSION) ?? "unknown";
var NPM_CDN = "https://cdn.jsdelivr.net/npm";
var PUBLISHED_URLS = {
  "ag-charts-react": `${NPM_CDN}/ag-charts-react@${agChartsReactVersion}/`,
  "ag-charts-angular": `${NPM_CDN}/ag-charts-angular@${agChartsAngularVersion}/`,
  "ag-charts-vue": `${NPM_CDN}/ag-charts-vue@${agChartsVueVersion}/`,
  "ag-charts-vue3": `${NPM_CDN}/ag-charts-vue3@${agChartsVueVersion}/`,
  "ag-charts-community": `${NPM_CDN}/ag-charts-community@${agChartsVersion}/dist/package/main.cjs.js`,
  "ag-charts-enterprise": `${NPM_CDN}/ag-charts-enterprise@${agChartsVersion}/dist/package/main.cjs.js`
};
var PUBLISHED_UMD_URLS = {
  "ag-charts-community": `${NPM_CDN}/ag-charts-community@${agChartsVersion}/dist/umd/ag-charts-community.js`,
  "ag-charts-enterprise": `${NPM_CDN}/ag-charts-enterprise@${agChartsVersion}/dist/umd/ag-charts-enterprise.js`
};
var DOCS_TAB_ITEM_ID_PREFIX = "reference-";
var _a5, _b;
var SITE_BASE_URL = (
  // Astro default env var (for build time)
  ((_a5 = import.meta.env) == null ? void 0 : _a5.BASE_URL) || // `.env.*` override (for client side)
  ((_b = import.meta.env) == null ? void 0 : _b.PUBLIC_BASE_URL.replace(/\/?$/, "/"))
);
var _a6, _b2;
var SITE_URL = ((_a6 = import.meta.env) == null ? void 0 : _a6.SITE_URL) || ((_b2 = import.meta.env) == null ? void 0 : _b2.PUBLIC_SITE_URL);
var STAGING_SITE_URL = "https://charts-staging.ag-grid.com";
var _a7;
var USE_PUBLISHED_PACKAGES = ["1", "true"].includes((_a7 = import.meta.env) == null ? void 0 : _a7.PUBLIC_USE_PUBLISHED_PACKAGES);
var SITE_BASE_URL_SEGMENTS = (SITE_BASE_URL == null ? void 0 : SITE_BASE_URL.split("/").filter(Boolean).length) || 0;
var _a8;
var ASTRO_ALGOLIA_APP_ID = (_a8 = import.meta.env) == null ? void 0 : _a8.PUBLIC_ASTRO_ALGOLIA_APP_ID;
var _a9;
var ASTRO_ALGOLIA_SEARCH_KEY = (_a9 = import.meta.env) == null ? void 0 : _a9.PUBLIC_ASTRO_ALGOLIA_SEARCH_KEY;
var GRID_URL = SITE_URL ? SITE_URL.includes("localhost:4600") ? "https://localhost:8000" : SITE_URL.includes(STAGING_SITE_URL) ? "https://grid-staging.ag-grid.com" : "https://ag-grid.com" : void 0;
var _a10;
var GALLERY_IMAGE_DPR_ENHANCEMENT = ((_a10 = import.meta.env) == null ? void 0 : _a10.PUBLIC_GALLERY_IMAGE_DPR_ENHANCEMENT) === "true";

// markdoc.config.ts
var markdoc_config_default = defineMarkdocConfig({
  extends: [prism()],
  nodes: {
    heading: {
      ...nodes.heading,
      // Preserve default anchor link generation
      render: component("./src/components/Heading.astro")
    },
    link: {
      ...nodes.link,
      render: component("./src/components/Link.astro")
    }
  },
  functions: {
    isFramework: {
      transform(parameters, context) {
        var _a11;
        const pageFramework = (_a11 = context.variables) == null ? void 0 : _a11.framework;
        const [framework] = Object.values(parameters);
        return framework === pageFramework;
      }
    },
    isNotJavascriptFramework: {
      transform(_, context) {
        var _a11;
        const pageFramework = (_a11 = context.variables) == null ? void 0 : _a11.framework;
        return pageFramework !== "javascript";
      }
    }
  },
  tags: {
    /**
     * External link that opens in a new tab
     */
    externalLink: {
      render: component("./src/components/ExternalLink.astro"),
      attributes: {
        href: { type: String, required: true }
      }
    },
    enterpriseIcon: {
      render: component("./src/components/icon/EnterpriseIcon.astro")
    },
    chartExampleRunner: {
      render: component("./src/features/docs/components/DocsExampleRunner.astro"),
      attributes: {
        title: { type: String, required: true },
        name: { type: String, required: true },
        type: { type: String },
        options: { type: Object }
      }
    },
    featureComparator: {
      render: component("./src/components/featureComparator/FeatureComparator.astro")
    },
    note: {
      render: component("./src/components/alert/Note")
    },
    warning: {
      render: component("./src/components/alert/Warning")
    },
    idea: {
      render: component("./src/components/alert/Idea")
    },
    imageCaption: {
      render: component("./src/components/image/ImageCaption"),
      attributes: {
        pageName: { type: String, required: true },
        imageName: { type: String, required: true },
        alt: { type: String, required: true },
        centered: { type: Boolean },
        constrained: { type: Boolean },
        descriptionTop: { type: Boolean },
        width: { type: String },
        height: { type: String },
        minWidth: { type: String },
        maxWidth: { type: String },
        filterDarkmode: { type: Boolean }
      }
    },
    apiReference: {
      render: component("./src/features/api-documentation/ApiReference.astro"),
      attributes: {
        id: { type: "String" },
        include: { type: "Array" },
        exclude: { type: "Array" },
        prioritise: { type: "Array" },
        hideHeader: { type: "Boolean" },
        hideRequired: { type: "Boolean" },
        specialTypes: { type: "Object" }
      }
    },
    tabs: {
      render: component("./src/components/tabs/TabsWithHtmlChildren.astro"),
      attributes: {
        omitFromOverview: { type: Boolean, default: false },
        tabItemIdPrefix: {
          type: String,
          default: DOCS_TAB_ITEM_ID_PREFIX
        }
      }
    },
    tabItem: {
      render: component("./src/components/tabs/TabHtmlContent", "TabHtmlContent"),
      attributes: {
        id: { type: String, required: true },
        label: { type: String }
      }
    },
    videoSection: {
      render: component("./src/components/video-section/VideoSection"),
      attributes: {
        id: { type: String, required: true },
        title: { type: String },
        header: { type: Boolean }
      }
    }
  }
});
export {
  markdoc_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
