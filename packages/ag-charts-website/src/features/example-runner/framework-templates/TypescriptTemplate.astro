---
import { getCacheBustingUrl } from '@utils/pages';
import { MetaData } from './lib/MetaData';
import { ExampleStyle } from './lib/ExampleStyle';
import { Styles } from './lib/Styles';
import { SystemJs } from './lib/SystemJs';
import { pathJoin } from '@utils/pathJoin';

interface Props {
    isDev: boolean;
    pageName: string;
    exampleName: string;

    modifiedTimeMs: number;
    isExecuting: boolean;
    options: any;
    entryFileName: string;

    styleFiles?: string[];
    indexFragment: string;
    appLocation: string;
    library: string;
    boilerplatePath: string;
}

const {
    pageName,
    exampleName,
    isDev,
    modifiedTimeMs,
    isExecuting,
    options,
    appLocation,
    entryFileName,
    styleFiles,
    indexFragment,
    library,
    boilerplatePath,
} = Astro.props as Props;

const startFile = pathJoin(appLocation, entryFileName);
---

<html lang="en">
    <head>
        <MetaData
            isDev={isDev}
            title={`Typescript - ${pageName} - ${exampleName}`}
            modifiedTimeMs={modifiedTimeMs}
            isExecuting={isExecuting}
            options={options}
        />
        <ExampleStyle />
        <Styles
            baseUrl={appLocation}
            files={isDev && styleFiles
                ? styleFiles
                      .filter((file: string) => !file.includes('style.css') && !file.includes('styles.css'))
                      .map((file: string) => getCacheBustingUrl(file, modifiedTimeMs))
                : []}
        />
    </head>
    <body>
        <Fragment set:html={indexFragment} />

        <script
            is:inline
            define:vars={{
                appLocation,
            }}
        >
            window.__basePath = appLocation;
        </script>

        <SystemJs
            isDev={isDev}
            library={library}
            boilerplatePath={boilerplatePath}
            appLocation={appLocation}
            startFile={startFile}
            framework={'typescript'}
            options={options}
        />
        <Styles
            baseUrl={appLocation}
            files={styleFiles
                ? styleFiles.filter((file: string) => file.includes('style.css') || file.includes('styles.css'))
                : []}
        />
    </body>
</html>
