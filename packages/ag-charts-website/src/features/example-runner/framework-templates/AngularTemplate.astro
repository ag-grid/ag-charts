---
import { MetaData } from './lib/MetaData';
import { ExampleStyle } from './lib/ExampleStyle';
import { Styles } from './lib/Styles';
import { SystemJs } from './lib/SystemJs';
import { pathJoin } from '@utils/pathJoin';
import { getCacheBustingUrl } from '@utils/chartLibraryPaths';
import type { Library } from '@ag-grid-types';
import { Scripts } from './lib/Scripts';

interface Props {
    isDev: boolean;
    title: string;

    modifiedTimeMs: number;
    entryFileName: string;

    styleFiles?: string[];
    scriptFiles: string[];
    appLocation: string;
    boilerplatePath: string;
    extraStyles?: string;
    children?: any;
    headFragment?: string;
}

const {
    title,
    isDev,
    modifiedTimeMs,
    appLocation,
    entryFileName,
    styleFiles,
    scriptFiles,
    boilerplatePath,
    extraStyles,
    headFragment,
} = Astro.props as Props;

const startFile = pathJoin(appLocation, entryFileName);
---

<html lang="en">
    <head>
        <MetaData isDev={isDev} title={`Angular Example - ${title}`} modifiedTimeMs={modifiedTimeMs} />
        <ExampleStyle rootSelector="my-app" extraStyles={extraStyles} />
        <Styles
            baseUrl={appLocation}
            files={isDev && styleFiles
                ? styleFiles
                      .filter((file: string) => !file.includes('style.css') && !file.includes('styles.css'))
                      .map((file: string) => getCacheBustingUrl(file, modifiedTimeMs))
                : []}
        />
        <Fragment set:html={headFragment} />
    </head>
    <body>
        <my-app></my-app>

        <script is:inline>
            document.write('<base href="' + document.location + '" />');
        </script>
        <script is:inline src="https://cdn.jsdelivr.net/npm/core-js-bundle@3.6.5/minified.js"></script>
        <script is:inline src="https://cdn.jsdelivr.net/npm/zone.js@0.11.2/dist/zone.min.js"></script>

        {scriptFiles && <Scripts baseUrl={appLocation} files={scriptFiles} />}
        <SystemJs
            isDev={isDev}
            boilerplatePath={boilerplatePath}
            appLocation={appLocation}
            startFile={startFile}
            internalFramework={'angular'}
        />
        <Styles
            baseUrl={appLocation}
            files={styleFiles
                ? styleFiles.filter((file: string) => file.includes('style.css') || file.includes('styles.css'))
                : []}
        />
        <slot />
    </body>
</html>
