---
import { MetaData } from './lib/MetaData';
import { Styles } from './lib/Styles';
import { SystemJs } from './lib/SystemJs';
import { pathJoin } from '@utils/pathJoin';
import { getCacheBustingUrl } from '@utils/chartLibraryPaths';
import type { Library } from '@ag-grid-types';
import { Scripts } from './lib/Scripts';

import examplebaseStyle from '@ag-website-shared/components/example-runner/example-base.css?raw';
import exampleControlsStyle from '@ag-website-shared/components/example-runner/example-controls.css?raw';

const css = String.raw;
interface Props {
    isDev: boolean;
    title: string;

    modifiedTimeMs: number;
    entryFileName: string;

    layout: 'grid' | 'toolbar' | 'none';

    styleFiles?: string[];
    scriptFiles: string[];
    appLocation: string;
    boilerplatePath: string;
    extraStyles?: string;
    children?: any;
    headFragment?: string;
    isExternal?: boolean;
}

const {
    title,
    isDev,
    modifiedTimeMs,
    appLocation,
    entryFileName,
    layout,
    styleFiles,
    scriptFiles,
    boilerplatePath,
    headFragment,
    isExternal,
} = Astro.props as Props;

const extraStylesArray: string[] = [];
extraStylesArray.push(css`
    ag-charts {
        display: block;
    }
`);

if (Astro.props.extraStyles != null) {
    extraStylesArray.push(Astro.props.extraStyles);
}

const extraStyles = extraStylesArray.join('\n\n');

const startFile = pathJoin(appLocation, entryFileName);
---

<html lang="en">
    <head>
        <MetaData isDev={isDev} title={`Angular Example - ${title}`} modifiedTimeMs={modifiedTimeMs} />
        <Styles
            baseUrl={appLocation}
            files={isDev && styleFiles
                ? styleFiles
                      .filter((file: string) => !file.includes('style.css') && !file.includes('styles.css'))
                      .map((file: string) => getCacheBustingUrl(file, modifiedTimeMs))
                : []}
        />

        <style set:html={examplebaseStyle}></style>
        {!isExternal && <style set:html={exampleControlsStyle} />}

        <Fragment set:html={headFragment} />
    </head>
    <body>
        <my-app></my-app>

        <script is:inline>
            document.write('<base href="' + document.location + '" />');
        </script>
        <script is:inline src="https://cdn.jsdelivr.net/npm/core-js-bundle@3.6.5/minified.js"></script>
        <script is:inline src="https://cdn.jsdelivr.net/npm/zone.js@0.11.2/dist/zone.min.js"></script>

        {scriptFiles && <Scripts baseUrl={appLocation} files={scriptFiles} />}
        <SystemJs
            isDev={isDev}
            boilerplatePath={boilerplatePath}
            appLocation={appLocation}
            startFile={startFile}
            internalFramework={'angular'}
        />
        <Styles
            baseUrl={appLocation}
            files={styleFiles
                ? styleFiles.filter((file: string) => file.includes('style.css') || file.includes('styles.css'))
                : []}
        />
        <slot />
    </body>
</html>
