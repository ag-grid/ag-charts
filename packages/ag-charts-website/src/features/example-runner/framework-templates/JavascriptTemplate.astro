---
interface Props {
    isDev: boolean;
    title: string;

    modifiedTimeMs: number;
    isEnterprise: boolean;

    /**
     * All script file names
     */
    scriptFiles?: string[];
    styleFiles?: string[];
    indexFragment: string;
    headFragment?: string;
    appLocation: string;
    extraStyles?: string;
    children?: any;
}

const {
    isDev,
    title,
    modifiedTimeMs,
    isEnterprise,
    styleFiles,
    scriptFiles,
    indexFragment,
    appLocation,
    extraStyles,
    headFragment,
} = Astro.props as Props;

import { MetaData } from './lib/MetaData';
import { ExampleStyle } from './lib/ExampleStyle';
import { Styles } from './lib/Styles';
import { Scripts } from './lib/Scripts';
import { SITE_BASE_URL } from '@constants';
import { pathJoin } from '@utils/pathJoin';
import { getCacheBustingUrl, getChartEnterpriseScriptPath, getChartScriptPath } from '@utils/chartLibraryPaths';

const siteUrl = Astro.site ? pathJoin(Astro.site, SITE_BASE_URL) : '/';

const chartScriptPath = getCacheBustingUrl(getChartScriptPath(siteUrl), modifiedTimeMs);
const chartScriptEnterprisePath = getCacheBustingUrl(getChartEnterpriseScriptPath(siteUrl), modifiedTimeMs);
---

<html lang="en">
    <head>
        <MetaData isDev={isDev} title={`JavaScript Example - ${title}`} modifiedTimeMs={modifiedTimeMs} />
        <ExampleStyle extraStyles={extraStyles} />
        <Styles
            baseUrl={appLocation}
            files={isDev && styleFiles
                ? styleFiles
                      .filter((file: string) => !file.includes('style.css') && !file.includes('styles.css'))
                      .map((file: string) => getCacheBustingUrl(file, modifiedTimeMs))
                : []}
        />
        <Fragment set:html={headFragment} />
    </head>
    <body>
        <Fragment set:html={indexFragment} />
        <script src={isEnterprise ? chartScriptEnterprisePath : chartScriptPath}></script>
        <Scripts baseUrl={appLocation} files={scriptFiles} />
        <Styles
            baseUrl={appLocation}
            files={styleFiles
                ? styleFiles.filter((file: string) => file.includes('style.css') || file.includes('styles.css'))
                : []}
        />
        <slot />
    </body>
</html>
