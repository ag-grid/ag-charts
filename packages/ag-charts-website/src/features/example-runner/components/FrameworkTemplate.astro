---
import { getBoilerPlateUrl } from '@utils/pages';
import type { InternalFramework } from '@ag-grid-types';
import JavascriptTemplate from '../framework-templates/JavascriptTemplate.astro';
import TypescriptTemplate from '../framework-templates/TypescriptTemplate.astro';
import { getIsDev } from '@utils/env';
import ReactTemplate from '../framework-templates/ReactTemplate.astro';
import VueTemplate from '../framework-templates/VueTemplate.astro';
import type { GeneratedContents } from '@features/examples-generator/types';
import AngularTemplate from '../framework-templates/AngularTemplate.astro';
import PostInitMessageScript from '@features/example-runner/components/PostInitMessageScript.astro';

interface Props {
    internalFramework: InternalFramework;
    pageName: string;
    exampleName: string;
    exampleUrl: string;
    generatedContents: GeneratedContents;
    /**
     * Whether to use relative paths for script files references
     */
    relativePath?: boolean;
    /**
     * Whether to add a script to post an `init` message to the parent
     */
    addInitMessageScript?: boolean;
}

const { internalFramework, pageName, exampleName, exampleUrl, generatedContents, relativePath, addInitMessageScript } =
    Astro.props as Props;

const isDev = getIsDev();

const library = 'charts';

const { entryFileName, files, scriptFiles, styleFiles, isEnterprise } = generatedContents || {};
const indexFragment = files && files['index.html'];
const appLocation = relativePath ? '' : exampleUrl;
const boilerPlateUrl = relativePath
    ? ''
    : getBoilerPlateUrl({
          library,
          internalFramework,
      });

const timeNow = Date.now();
---

{
    !generatedContents && (
        <p>
            Error generating content for: <a href={exampleUrl}>{exampleUrl}</a>
        </p>
    )
}

{
    internalFramework === 'vanilla' && (
        <JavascriptTemplate
            isDev={isDev}
            pageName={pageName}
            exampleName={exampleName}
            modifiedTimeMs={timeNow}
            isEnterprise={isEnterprise}
            scriptFiles={scriptFiles}
            styleFiles={styleFiles}
            indexFragment={indexFragment!}
            appLocation={appLocation}
        >
            {addInitMessageScript && <PostInitMessageScript pageName={pageName} exampleName={exampleName} />}
        </JavascriptTemplate>
    )
}

{
    internalFramework === 'typescript' && (
        <TypescriptTemplate
            isDev={isDev}
            pageName={pageName}
            exampleName={exampleName}
            modifiedTimeMs={timeNow}
            isEnterprise={isEnterprise}
            entryFileName={entryFileName!}
            styleFiles={styleFiles}
            indexFragment={indexFragment!}
            appLocation={appLocation}
            library={library}
            boilerplatePath={boilerPlateUrl}
        >
            {addInitMessageScript && <PostInitMessageScript pageName={pageName} exampleName={exampleName} />}
        </TypescriptTemplate>
    )
}

{
    ['react', 'reactFunctional', 'reactFunctionalTs'].includes(internalFramework) && (
        <ReactTemplate
            isDev={isDev}
            pageName={pageName}
            exampleName={exampleName}
            modifiedTimeMs={timeNow}
            isEnterprise={isEnterprise}
            entryFileName={entryFileName!}
            scriptFiles={scriptFiles}
            styleFiles={styleFiles}
            appLocation={appLocation}
            library={library}
            boilerplatePath={boilerPlateUrl}
        >
            {addInitMessageScript && <PostInitMessageScript pageName={pageName} exampleName={exampleName} />}
        </ReactTemplate>
    )
}

{
    internalFramework === 'angular' && (
        <AngularTemplate
            isDev={isDev}
            pageName={pageName}
            exampleName={exampleName}
            modifiedTimeMs={timeNow}
            isEnterprise={isEnterprise}
            entryFileName={entryFileName!}
            styleFiles={styleFiles}
            scriptFiles={scriptFiles}
            appLocation={appLocation}
            library={library}
            boilerplatePath={boilerPlateUrl}
        >
            {addInitMessageScript && <PostInitMessageScript pageName={pageName} exampleName={exampleName} />}
        </AngularTemplate>
    )
}

{
    (internalFramework === 'vue' || internalFramework === 'vue3') && (
        <VueTemplate
            isDev={isDev}
            pageName={pageName}
            exampleName={exampleName}
            modifiedTimeMs={timeNow}
            isEnterprise={isEnterprise}
            entryFileName={entryFileName!}
            scriptFiles={scriptFiles}
            styleFiles={styleFiles}
            appLocation={appLocation}
            library={library}
            boilerplatePath={boilerPlateUrl}
            vueFramework={internalFramework}
        >
            {addInitMessageScript && <PostInitMessageScript pageName={pageName} exampleName={exampleName} />}
        </VueTemplate>
    )
}
