@use 'sass:map';
@use '../../../design-system' as *;

.required {
    color: red;
    font-size: 0.7em;
    vertical-align: text-top;
}

.apiReferenceOuter {
    container-type: inline-size;
    width: 100%;

    + .apiReferenceOuter {
        margin-top: -1px;
    }

    > a[id] {
        scroll-margin-top: var(--anchor-offset, 0);
    }

    :global(.tabs-content) & table {
        margin-bottom: -$spacing-size-2;
        border-bottom: none;
    }
}

.propertyDescription {
    margin-top: -$spacing-size-2;
    margin-bottom: $spacing-size-6;
    color: var(--color-fg-secondary);
}

.apiReference {
    display: table; // remove after table > div refactor
    position: relative;
    table-layout: fixed;
    width: 100%;

    @container (max-width: #{$breakpoint-table-small}) {
        display: block;
    }

    @container (min-width: #{$breakpoint-table-small}) {
        height: 1px; // needed for divs to fit table cell heights correctly
    }

    pre:global(.code) {
        margin-top: $spacing-size-4;
        margin-bottom: $spacing-size-2;
    }

    .linkIcon {
        font-size: var(--font-size-large);
    }
}

.propertyRow {
    display: flex;
    flex-wrap: wrap;
    scroll-margin-top: var(--anchor-offset, 0);

    &:where(:not(:first-child)) {
        border-top: 1px solid var(--color-border-primary);
    }

    &:hover .linkIcon {
        opacity: 0.5;
    }

    @container (max-width: #{$breakpoint-table-small}) {
        display: block;
        width: 100%;
        padding-top: $spacing-size-2;
        padding-bottom: $spacing-size-2;
    }

    #{$selector-darkmode} & {
        border-top-color: var(--color-util-gray-400);
    }
}

.leftColumn {
    flex-shrink: 0;
    width: 40%;
    padding: $spacing-size-2 $spacing-size-4 $spacing-size-2 calc(var(--nested-path-depth, 0) * $spacing-size-2);

    @container (max-width: #{$breakpoint-table-small}) {
        width: 100%;
        padding-right: 0;
    }
}

.rightColumn {
    display: flex;
    flex-direction: column;
    width: 60%;
    padding: $spacing-size-2 0 $spacing-size-2 $spacing-size-4;

    @container (max-width: #{$breakpoint-table-small}) {
        width: 100%;
        padding-left: calc(var(--nested-path-depth, 0) * $spacing-size-2);
    }
}

.name {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    --parent-properties-color: var(--color-fg-secondary);
    --parent-properties-font-weight: var(--text-regular);

    position: relative;
    display: inline-block;
    margin-top: $spacing-size-1;
    padding-right: $spacing-size-6;
    font-family: var(--text-monospace-font-family);
    font-size: var(--font-size-large);
    font-weight: var(--text-bold);

    @container (min-width: #{$breakpoint-table-small}) {
        font-size: var(--font-size-medium);
    }

    :hover .linkIcon {
        opacity: 0.5;
    }

    .linkIcon {
        position: absolute;
        bottom: -0.125em;
    }
}

.parentProperties {
    font-weight: var(--parent-properties-font-weight);
    color: var(--parent-properties-color);
    line-break: anywhere;
}

.metaList {
    display: flex;
    flex-wrap: wrap;
    gap: $spacing-size-2 $spacing-size-6;

    h1 + & {
        margin-top: 16px;
    }
}

.metaItem {
    display: flex;
    flex-direction: column;
}

.metaLabel {
    font-size: var(--font-size-extra-small);
    color: var(--color-fg-secondary);
}

.metaValue {
    font-size: var(--font-size-small);
    font-family: var(--text-monospace-font-family);
    color: var(--color-fg-code);

    #{$selector-darkmode} & {
        font-weight: 600;
    }
}

.description {
    padding-top: $spacing-size-1;
}

.actions {
    display: flex;
    flex-wrap: wrap;
    gap: $spacing-size-4 $spacing-size-8;
    margin-top: auto;
    padding-top: $spacing-size-2;

    pre {
        min-width: 100%;
    }

    svg {
        --icon-size: 1em;

        margin: -0.1em 0 0;
        transition: fill $transition-default-timing;
    }
}

.seeMore {
    --text-color: var(--color-link);

    min-width: 10.5ch;
    transition: color $transition-default-timing;

    &:hover {
        --text-color: var(--color-link-hover);
    }
}

.highlightAnimate {
    animation: highlight-animation 3000ms ease-out;
}

@keyframes highlight-animation {
    0%,
    100% {
        background-color: inherit;
    }
    10%,
    50% {
        background-color: var(--color-util-brand-100);
    }
}

.isChildProp {
    border-top: 1px dashed var(--color-util-gray-200);

    .name {
        font-size: calc(var(--font-size-medium) * 0.92);
    }

    .description p,
    .actions button {
        font-size: calc(var(--font-size-medium) * 0.9);
    }

    .metaValue {
        font-size: calc(var(--font-size-small) * 0.92);
    }
}

@container (max-width: #{$breakpoint-table-small}) {
    .level-1 .rightColumn {
        padding-left: $spacing-size-2;
    }

    .level-2 .rightColumn {
        padding-left: $spacing-size-4;
    }

    .level-3 .rightColumn {
        padding-left: $spacing-size-6;
    }
}
