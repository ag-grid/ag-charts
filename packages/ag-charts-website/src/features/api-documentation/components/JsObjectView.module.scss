@use '../../../design-system/' as *;

$indent: 24px;

// Ignore padding & remove border if within tabbed container
:global(.tabs-outer) .expandableSnippet pre:global(.code) {
    margin: -$size-2;
    border: none;
}

.topBreadcrumb {
    color: var(--property-color);
    cursor: pointer;
}

.expandableSnippet header {
    position: sticky;
    top: 0;
    left: 0;
    width: 100%;
    padding: $size-2;
    background-color: var(--white);
    z-index: 2;
    border-bottom: 1px solid var(--platinum-gray);

    h3 {
        margin-bottom: 0;
    }

    p {
        line-height: var(--line-height-tight);
    }
}

.searchOuter {
    position: relative;
    display: flex;
    align-items: center;
}

input[type='search'].searchInput {
    padding-left: 2em;
}

.searchIcon {
    --icon-size: 1.25em;
    --text-color: var(--secondary-text-color);

    position: absolute;
    left: 0.625em;
}

.expandableSnippet input[type='search'] {
    width: 100%;
}

.expandableSnippet,
.expandableSnippet pre,
.expandableSnippet pre > code {
    --sticky-offset: 56px; // top bar height

    min-height: calc(100vh - var(--sticky-offset));
}

.expandableSnippet {
    position: sticky;
    top: var(--sticky-offset);
    width: 420px;
    height: calc(100vh - var(--sticky-offset));
    overflow-y: auto;
}

.expandableSnippet pre {
    margin-bottom: 0;
    border-radius: 0;
    border: none;
}

.expandableSnippet pre > code {
    --code-line-height: calc(28 / 16);

    padding-bottom: calc(var(--code-line-height) * 4 * 1em);
    line-height: var(--code-line-height);
    background-size: 1px calc(1em * var(--code-line-height) * 2);
}

.jsonProperty {
    position: relative;
}

.jsonProperty .jsonProperty::before {
    content: '';
    position: absolute;
    width: 24px;
    height: 2px;
    top: 12px;
    left: -34px;
    background-color: var(--platinum-gray);
}

.type-nested-object::before,
.expandable::before {
    width: 12px !important;
}

.type-nested-object > .jsonProperty {
    padding-left: $indent;
}

.jsonObjectUnion,
.jsonObject {
    padding-left: $indent;
}

.deprecated {
    text-decoration: line-through;
}

.expandable {
    cursor: pointer;
}

.unexpandable {
    cursor: default;
}

.expander {
    --icon-size: 1em;

    transition: transform $default-transition-timing;

    &.active {
        transform: rotate(90deg);
    }
}

.expanderBar {
    position: absolute;
    width: 8px;
    bottom: 12px;
    left: -12px;
    top: 19px;
    border-width: 2px;
    border-style: solid;
    border-color: var(--platinum-gray);
    border-top-width: 0;
    border-right-width: 0;
}

.propertyName {
    position: relative;
    color: var(--property-color);
    cursor: pointer;

    .expander {
        position: absolute;
        left: -18px;
        top: 3px;
    }
}

.jsonUnionItem {
    position: relative;

    .expander {
        position: absolute;
        left: -18px;
        top: 3px;
        font-weight: normal;
    }
}

.unionTypeProperty {
    color: var(--property-color);
}

.jsdocExpandable {
    font-size: var(--font-size-medium);
    font-family: $font-family;
    padding: $size-half 10px $size-half;
    white-space: normal;
    cursor: text;
}

.unionDiscriminator {
    color: var(--code-text-color);
}
