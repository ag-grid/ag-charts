@use 'sass:math';
@use 'sass:map';
@use '../core' as *;

fieldset#{$exclude-grid-selector} {
    margin: 0;
    padding: 0;
    border: none;

    &:not(:last-child) {
        margin-bottom: $spacing-size-4;
    }
}

legend#{$exclude-grid-selector} {
    padding: unset;
}

label#{$exclude-grid-selector} {
    fieldset & {
        display: block;
    }

    + input#{$exclude-grid-selector},
    + select#{$exclude-grid-selector} {
        margin-left: $spacing-size-2;
    }

    &[for*='radio'],
    &[for*='checkbox'],
    &[for*='switch'] {
        cursor: pointer;
    }

    .req {
        color: var(--color-input-error);
    }
}

input#{$exclude-grid-selector} {
    font-size: var(--font-size);
}

input[type='text']#{$exclude-grid-selector},
input[type='search']#{$exclude-grid-selector},
input[type='email']#{$exclude-grid-selector},
input[type='checkbox']#{$exclude-grid-selector},
input[type='radio']#{$exclude-grid-selector},
input[type='number']#{$exclude-grid-selector},
select#{$exclude-grid-selector} {
    color: var(--color-fg-primary);

    &:disabled,
    &[disabled],
    &.disabled {
        background-color: var(--color-bg-disabled_subtle);
    }
}

input[type='text'],
input[type='search'],
input[type='email'],
input[type='number'] {
    &#{$exclude-grid-selector} {
        padding: math.div(6em, 16) math.div(12em, 16);
        line-height: var(--line-height-normal);
        border-radius: var(--radius-sm);
        background-color: var(--input-background-color);
        border: 1px solid var(--color-input-border);
        outline: none;
        transition:
            border-color $transition-default-timing,
            box-shadow $transition-default-timing;

        &::placeholder {
            color: var(--color-fg-placeholder);
        }

        &:hover:not(:disabled):not([readonly]),
        &:focus:not(:disabled):not([readonly]),
        &:focus-visible:not(:disabled):not([readonly]),
        &.hover,
        &.focus {
            border-color: var(--color-input-border-hover);
        }

        &:focus:not(:disabled):not([readonly]),
        &:focus-visible:not(:disabled):not([readonly]),
        &.focus {
            box-shadow: 0 0 0 $spacing-size-1 var(--color-input-shadow-focus);
        }

        &:disabled,
        &[disabled],
        &.disabled {
            color: var(--color-input-disabled-fg);
            background-color: var(--color-input-disabled-bg);
            pointer-events: none;
            cursor: pointer;
        }
    }
}

input[type='checkbox']:not(.switch)#{$exclude-grid-selector},
input[type='checkbox'].switch#{$exclude-grid-selector},
input[type='radio']#{$exclude-grid-selector} {
    appearance: none;
    width: $spacing-size-5;
    height: $spacing-size-5;
    outline: none;

    &:focus:not(:disabled):not([readonly]),
    &:focus-visible:not(:disabled):not([readonly]),
    &.focus {
        box-shadow: 0 0 0 $spacing-size-1 var(--color-input-shadow-focus);
    }

    &:not(:disabled) {
        cursor: pointer;
    }

    &:disabled,
    &[disabled],
    &.disabled {
        border-color: var(--color-border-tertiary);
    }
}

input[type='checkbox']:not(.switch)#{$exclude-grid-selector},
input[type='checkbox'].switch#{$exclude-grid-selector} {
    &:checked {
        background-color: var(--color-input-bg-checked);
        border-color: var(--color-input-bg-checked);
    }
}

input[type='checkbox']:not(.switch)#{$exclude-grid-selector} {
    --svg-tick: url('data:image/svg+xml;utf8,<svg fill="none" stroke="%23fff" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M14.6673 6.5L8.25065 12.9167L5.33398 10"/></svg>');

    border-radius: var(--radius-sm);
    border: 1px solid var(--color-border-primary);
    transition:
        background-color $transition-default-timing,
        border-color $transition-default-timing,
        box-shadow $transition-default-timing;

    &:hover:not(:disabled):not([readonly]),
    &.hover,
    &:focus-visible:not(:disabled):not([readonly]),
    &.focus {
        border-color: var(--color-input-border-hover);
    }

    &:checked,
    &:disabled,
    &[disabled],
    &.disabled {
        background-image: var(--svg-tick);
    }

    &:disabled,
    &[disabled],
    &.disabled {
        --svg-tick: url('data:image/svg+xml;utf8,<svg fill="none" stroke="%23eaecf0" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M14.6673 6.5L8.25065 12.9167L5.33398 10"/></svg>');

        #{$darkmode-selector} & {
            --svg-tick: url('data:image/svg+xml;utf8,<svg fill="none" stroke="%23344054" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M14.6673 6.5L8.25065 12.9167L5.33398 10"/></svg>');
        }
    }
}

input[type='checkbox'].switch {
    $height: $spacing-size-6;

    width: 44px;
    height: $height;
    background-color: var(--color-bg-tertiary);
    border-radius: math.div($height, 2);
    background-image: radial-gradient(
        var(--color-bg-primary) calc($height / 2 - 3px),
        transparent calc($height / 2 - 3px)
    );
    background-repeat: no-repeat;
    background-size: $height $height;
    transition:
        background-position $transition-default-timing,
        background-color $transition-default-timing,
        box-shadow $transition-default-timing;

    &:checked {
        background-position: right;
        background-color: var(--color-input-bg-checked);
    }
}

input[type='radio']#{$exclude-grid-selector} {
    border-radius: var(--radius-full);
    border: 1px solid var(--color-border-primary);
    transition:
        background-color $transition-default-timing,
        border-color $transition-default-timing,
        box-shadow $transition-default-timing;

    &:hover:not(:disabled):not([readonly]),
    &.hover {
        border: 1px solid var(--color-input-border-hover);
    }

    &:checked:not(:disabled):not([readonly]) {
        border: 6px solid var(--color-input-bg-checked);
    }

    &:disabled,
    &[disabled],
    &.disabled {
        box-shadow: inset 0 0 0 1px var(--color-border-tertiary);
    }
}

select#{$exclude-grid-selector} {
    $svg-chevron-down: url('data:image/svg+xml;utf8,<svg fill="none" stroke="%23212529" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 26 30"><path d="m7.5 13.688 5.25 4.125L18 13.688"/></svg>');

    $svg-chevron-down-dark: url('data:image/svg+xml;utf8,<svg fill="none" stroke="%23f8f9fa" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 26 30"><path d="m7.5 13.688 5.25 4.125L18 13.688"/></svg>');

    appearance: none;
    padding: math.div(6em, 16) math.div(36em, 16) math.div(6em, 16) math.div(12em, 16);
    font-size: 1rem;
    line-height: var(--line-height-normal);
    border-radius: var(--border-radius);
    background-color: var(--color-bg-primary);
    background-image: $svg-chevron-down;
    background-repeat: no-repeat;
    background-position: center right;
    border: 2px solid var(--color-input-border);
    outline: none;
    transition:
        border-color $transition-default-timing,
        box-shadow $transition-default-timing;

    #{$darkmode-selector} & {
        border: 1px solid var(--color-input-border);
    }

    &:not(:disabled) {
        cursor: pointer;
    }

    &:invalid,
    &[disabled] {
        color: var(--color-fg-secondary);
    }

    &:hover:not(:disabled):not([readonly]),
    &:focus:not(:disabled):not([readonly]),
    &:focus-visible:not(:disabled):not([readonly]),
    &.hover,
    &.focus {
        border-color: var(--color-input-border-hover);
    }

    #{$darkmode-selector} & {
        background-image: $svg-chevron-down-dark;
    }
}

input[type='range']#{$exclude-grid-selector} {
    @mixin track {
        height: math.div(4em, 16);
        background-color: var(--color-input-border);
        border-radius: var(--border-radius);
    }

    @mixin thumb {
        appearance: none;
        width: 1em;
        height: 1em;
        margin-top: math.div(-6em, 16);
        border-radius: 50%;
        border: none;
        background-color: var(--color-input-bg-checked);
        transition: background-color $transition-default-timing;
    }

    appearance: none;
    min-height: $spacing-size-6;
    border-radius: var(--border-radius);
    background-color: transparent;
    outline: none;
    border: 2px solid transparent;
    cursor: pointer;
    transition:
        border-color $transition-default-timing,
        box-shadow $transition-default-timing;

    &:focus-visible:not(:disabled):not([readonly]),
    &.focus {
        border-color: var(--color-input-border-hover);
        box-shadow: 0 0 0 $spacing-size-1 var(--color-input-shadow-focus);
    }

    // Using mixins as -webkit & -moz properties cannot be used as comma seperted list
    &::-webkit-slider-runnable-track {
        @include track;
    }
    &::-moz-range-track {
        @include track;
    }
    &::-webkit-slider-thumb {
        @include thumb;
    }
    &::-moz-range-thumb {
        @include thumb;
    }

    &:hover::-webkit-slider-thumb,
    &:hover::-moz-range-thumb {
        background-color: var(--link-hover-color);
    }
}

.input-field {
    display: flex;
    flex-direction: column;

    label {
        margin-bottom: $spacing-size-1;
    }

    input,
    select {
        margin-left: 0;
    }

    select {
        align-self: flex-start;
    }

    &.inline {
        flex-direction: row;
        flex-wrap: wrap;
        align-items: center;
        gap: $spacing-size-1 $spacing-size-2;

        label {
            display: inline-block;
            margin-bottom: 0;
        }

        input[type='text'],
        input[type='search'],
        input[type='email'] {
            min-width: 280px;
        }
    }
}

.input-error {
    label {
        color: var(--color-input-error);
    }

    input,
    select {
        --color-border-primary: var(--color-input-error);
        --color-input-border-hover: var(--color-input-error);
    }

    .error {
        margin-top: $spacing-size-1;
        color: var(--color-input-error);
    }
}

.extra-info {
    margin-top: $spacing-size-1;
    color: var(--color-fg-secondary);
}
