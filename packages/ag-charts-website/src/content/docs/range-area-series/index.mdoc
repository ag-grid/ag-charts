---
title: 'Range Area Series'
enterprise: true
---

A Range Area Series shows an area between high and low data values. It's used to monitor data consistency or variability.

## Simple Range Area

The Range Area Series can be created using the `range-area` series type.

```js
series: [
    {
        type: 'range-area',
        xKey: 'month',
        yLowKey: 'low',
        yHighKey: 'high',
    },
];
```

The `xKey` retrieves X axis data, while `yLowKey` and `yHighKey` are used to retrieve the range of values for the Y axis.

{% chartExampleRunner title="Simple Range Area" name="simple-range-area" type="generated" options="{ \"enterprise\": true }" /%}

Series markers can be enabled using the `marker` options.

```js
series: [{
    ...
    marker: {
        enabled: true
    }
}]
```

## Labels

To display labels for the `yHighKey` and `yLowKey` values of each data point, set `label.enabled` to `true`.

```js
label: {
    enabled: true;
}
```

A label formatter can be used to customise the labels.

```js
label: {
    formatter: ({ itemId, value }) => {
        return `${itemId === 'low' ? 'L' : 'H'}: ${value.toFixed(0)}`;
    };
}
```

In the snippet:

-   The formatter converts the data value to an integer.
-   The params object passed into the formatter includes an `itemId` which is used to identify whether the value is a `high` or a `low` value.

This configuration generates labels as shown in the example below.

{% chartExampleRunner title="Range Area Labels" name="range-area-labels" type="generated" options="{ \"enterprise\": true }" /%}

## Multiple Range Area Series

Multiple Range Area Series can be combined into a single chart.

Note the example below:

-   Uses `yName` to control the text displayed in the legend.
-   Uses `yLowName` and `yHighName` to control the text displayed in the tooltip.

{% chartExampleRunner title="Multiple Range Area Series" name="multiple-range-areas" type="generated" options="{ \"enterprise\": true }" /%}

## Missing Data

The series handles missing or invalid data based on the presence or validity of `xKey`, `yLowKey` and `yHighKey` values in a data object.

When the axes are continuous (`'number'`, `'time'` or `'log'`), the `yLowKey`, `yHighKey` and `xKey` values in a data object are considered invalid if they are:

-   `+/-Infinity`
-   `null`
-   `undefined`
-   `NaN`

Data entries with invalid `yLowKey`, `yHighKey`, or `xKey` values will result in gaps in the series.

The following example demonstrates how missing data is handled in the context of a continuous time x-axis:

-   Initially all data is complete and valid for their respective axes.
-   Click the **Missing Y values** button and note that if either of the Y low or high values are missing, the data point is rendered as a gap in the series.
-   Click the **Missing X value** button and note that a missing X value on a continuous x-axis is skipped.

{% chartExampleRunner title="Range Area Missing Data" name="range-area-missing-data" type="generated" options="{ \"enterprise\": true }" /%}

## API Reference

{% interfaceDocumentation interfaceName="AgRangeAreaSeriesOptions" config="{ \"showSnippets\": false }" /%}
