---
title: 'Error Bars'
enterprise: true
---

Error Bars show the uncertainty of continuous data values. They can be enabled
on Line, Bar and Scatter Series.

## Single Error Bars

{% chartExampleRunner title="Line Series Error Bars" name="single" type="generated" options="{ \"enterprise\": true }" /%}

Error Bars can be enabled on supported series types using the `errorBars` key.

Categoric Line Series and Bar Series only support Error Bars on the Y axis.

The required `yLowerKey` and `yUpperKey` properties defines the keys used to
retrieve the error values from the data.

```js
data: [
    {
        month: 'Jan',
        temperature: 35,
        temperatureLower: 32,
        temperatureUpper: 37,
    }, ...
],
series: [
    {
        xKey: 'month',
        yKey: 'temperature' ,
        errorBar: {
            yLowerKey: 'temperatureLower',
            yUpperKey: 'temperatureUpper',
        },
    },
],
```

## Double Error Bars

{% chartExampleRunner title="Double Error Bars" name="double" type="generated" options="{ \"enterprise\": true }" /%}

Scatter Plots and Continuous Line Series support error bars on the X axis, the Y
axis, or both axes.

The properties `xLowerKey`, `xUpperKey`, `yLowerKey` and `yUpperKey` define the
keys used to retrieve the X and Y error values from the data.

```js
data: [
    {
        volume: 0.5,
        volumeLower: 0.45,
        volumeUpper: 0.55,
        pressure: 1.2,
        pressureLower: 1.1,
        pressureUpper: 1.4
    }, ...
],
series: [
    {
        type: 'scatter',
        xKey: 'volume',
        yKey: 'pressure',
        errorBar:  {
            xLowerKey: 'volumeLower',
            xUpperKey: 'volumeUpper',
            yLowerKey: 'pressureLower',
            yUpperKey: 'pressureUpper',
        },
    },
],
```

{% note %}
The X axis of Line Series is categoric by default. See the [Continuous
Data](./line-series#continuous-data) for more information on how to configure
this series.
{% /note %}


## Tooltip Parameters

{% chartExampleRunner title="Error Bars Tooltips" name="tooltips-error-bars" type="generated" options="{ \"enterprise\": true }" /%}

[Tooltips](./tooltips) are not shown by default, but Error Bar parameters are
provided to the `renderer` for customisation.

```js
function verbose_renderer(params) {
    const datum = params.datum;
    return {
        content:
            '<ul>' +
            `<li>${params.xUpperName}: ${datum[params.xUpperKey]}m³</li>` +
            `<li>${params.xLowerName}: ${datum[params.xLowerKey]}m³</li>` +
            `<li>${params.yUpperName}: ${datum[params.yUpperKey]}kPa</li>` +
            `<li>${params.yLowerName}: ${datum[params.yLowerKey]}kPa</li>` +
            '</ul>',
    };
}

const options = {
    series: [
        {
            errorBar:  {
                xLowerKey: 'volumeLower',
                xUpperKey: 'volumeUpper',
                yLowerKey: 'pressureLower',
                yUpperKey: 'pressureUpper',
                xLowerName: 'Volume (lower bound)',
                xUpperName: 'Volume (upper bound)',
                /* yLowerName implicitly defaults to 'pressureLower' */
                /* yUpperName implicitly defaults to 'pressureUpper' */
            },
            tooltip: { renderer: verbose_renderer },
        },
        ...
    ],
    ...
};
```

The `renderer` has access to all the key and names for the error data:

{% interfaceDocumentation interfaceName="AgErrorBarDataOptions" config="{\"description\":\"\", \"showSnippets\": false }" /%}

{% note %}All names are optional and will default to keys if unset.{% /note %}


## Customisation

### Styling

{% chartExampleRunner title="Styling Example" name="styling" type="generated" options="{ \"enterprise\": true }" /%}

The Error Bar's can be customised by setting styling options in the `errorBar`
properties. Styling options in `errorBar` property will apply to both the
Whiskers and Cap.

Styling options for the Caps can be overriden using the `errorBar.cap` property.

```js
errorBar: {
    stroke: 'orange',
    cap: {
        /* stroke implicitly set to 'orange' */
        strokeWidth: 4,
    },
},
```

### Cap Length

The default length of Cap is determined relative the shape representing the data
point. This varies depending the type of series used:

-   **Line and Scatter Series:** Cap length defaults to the Marker size.
-   **Vertical Bar Series:** Cap length defaults to half of Bar width.
-   **Horizontal Bar Series:** Cap length defaults to half of Bar height.

The Cap length can be customised as a ratio relative to series' shape or using
an absolute value.

#### Length Ratio

{% chartExampleRunner title="Length Ratio Example" name="cap-lengthRatio" type="generated" options="{ \"enterprise\": true }" /%}

The `cap.lengthRatio` property must be number between 0 and 1. If set, the Cap
length will be calculated by multiplying this ratio with the length of the shape
used by the series (Marker size, or Bar width/height).

```
errorBar: {
    cap: { lengthRatio: 1.0 },
},
```

In this configuration:

-   `lengthRatio` sets the Cap length 100% of the Bar widths.

#### Absolute Length

{% chartExampleRunner title="Absolute Length Example" name="cap-length" type="generated" options="{ \"enterprise\": true }" /%}

The `cap.length` property sets the absolute length of the Cap in pixels. If
defined, this propertiy takes priority over the `cap.lengthRatio` property.

```
errorBar: {
    cap: { length: 25 },
},
```

In this configuration:

-   `length` sets the length of all Caps to 25 pixels.

## API Reference

{% interfaceDocumentation interfaceName="AgErrorBarOptions" config="{ \"showSnippets\": false }" /%}
