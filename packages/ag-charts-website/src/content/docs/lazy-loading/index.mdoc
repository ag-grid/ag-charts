---
title: 'Lazy Loading'
---

Data can be lazily loaded in from remote APIs and in response to changes in the visible window.

{% chartExampleRunner title="Lazy Loading" name="lazy-loading" type="generated" /%}

```ts
{
    data: () => {
        return fetch('https://www.ag-grid.com/example-assets/olympic-winners.json')
            .then((response) => response.json())
            .then((json) => {
                // ... do some manipulation of the data ...
                return data;
            });
    },
}
```

In this example, json data is fetched from a remote url, formatted and returned to the chart. When the response is returned the chart displays the new data.

## Axis Domains

The parameters to the lazy loading function include the axis domains that define the visible window of the chart. This can be used with the [Navigator](./navigator) and [Zoom](./zoom) modules to load coarse or fine grained data based on the size of the window.

Zoom in to the chart below to see fine grained data being lazily loaded.

{% chartExampleRunner title="Lazy Loading Window" name="lazy-loading-window" type="generated" /%}

```ts
{
    data: ({ axes }) => {
        const timeAxis = axes?.find((a: any) => a.type === 'time');
        if (!timeAxis) return [];
        return getData(timeAxis.min, timeAxis.max);
    };
}
```

In this example, the lazy data function returns both the coarse data plus additional fine grained data for the visible time window at smaller intervals, based on the size of the time window.

{% note %}
The data returned from the lazy function should always include the coarse data set to ensure the chart knows the full extent of the data. If this is not provided users will not be able to zoom back out or pan around.

Alternatively, you can always provide the four data points that represent the full extents of your data set - the min and max values in each of the x and y directions.
{% /note %}

{% note %}
Only continuous time axes are provided in the parameters to the lazy loading function.
{% /note %}

### Initial Zoom

{% chartExampleRunner title="Lazy Loading Initial Zoom" name="lazy-loading-initial-zoom" type="generated" /%}

In this example, `min` and `max` have been provided to the [navigator](./navigator) and so the lazy data function is called with this initial axis domain range, immediately fetching the fine grained data.

## API Reference

{% tabs %}

{% tabItem id="AgBaseChartOptions" label="Data" %}
{% apiReference id="AgBaseChartOptions" include=["data"] hideHeader=true /%}
{% /tabItem %}

{% /tabs %}
