---
title: 'Quick Start'
description: 'Build $framework Charts with AG Grid, the best free, fast and flexible canvas-based $framework Charting library: Interactive, Animated, Accessible and Customisable.'
---

{% if isFramework("react") %}

Add React Charts and React Graphs to your application in 60 seconds.

{% /if %}

{% if isFramework("javascript") %}

Add JavaScript Charts and JavaScript Graphs to your application in 60 seconds.

{% /if %}

{% if isFramework("angular") %}

Add Angular Charts and Angular Graphs to your application in 60 seconds.

{% /if %}

{% if isFramework("vue") %}

Add Vue Charts and Vue Graphs to your application in 60 seconds.

{% /if %}

{% if isFramework("react") %}

## Your First React Chart

{% /if %}

{% if isFramework("angular") %}

## Your First Angular Chart

{% /if %}

{% if isFramework("javascript") %}

## Your First JavaScript Chart

{% /if %}

{% if isFramework("vue") %}

## Your First Vue Chart

{% /if %}

Add AG Charts to your application in these steps:

{% if isNotJavascriptFramework() %}

**1. Install**

{% if isFramework("react") %}

Install the AG Charts React library:

{% /if %}

{% if isFramework("angular") %}

Install the AG Charts Angular library:

{% /if %}

{% if isFramework("vue") %}

Install the AG Charts Vue library:

{% /if %}

{% tabs %}

{% tabItem id="js-npm" label="NPM" %}

<!-- REACT NPM Installation -->

{% if isFramework("react") %}

```bash
npm install ag-charts-react
```

{% /if %}

<!-- ANGULAR NPM Installation -->

{% if isFramework("angular") %}

```bash
npm install ag-charts-angular
```

{% /if %}

<!-- VUE NPM Installation -->

{% if isFramework("vue") %}

```bash
npm install ag-charts-vue3
```

{% /if %}

{% /tabItem %}

{% tabItem id="js-yarn" label="Yarn" %}

<!-- REACT Yarn Installation -->

{% if isFramework("react") %}

```bash
yarn add ag-charts-react
```

{% /if %}

<!-- ANGULAR Yarn Installation -->

{% if isFramework("angular") %}

```bash
yarn add ag-charts-angular
```

{% /if %}

<!-- VUE Yarn Installation -->

{% if isFramework("vue") %}

```bash
yarn add ag-charts-vue3
```

{% /if %}

{% /tabItem %}

{% /tabs %}

{% /if %}

{% if isFramework("javascript") %}

**1. Provide a Container**

Load the AG Charts library and create a blank container div:

```html
<!doctype html>
<html lang="en">
    <head>
        <title>AG Charts Quick Start</title>
        <!-- JavaScript Charts Core Library -->
        <script src="https://cdn.jsdelivr.net/npm/ag-charts-community/dist/umd/ag-charts-community.js"></script>
    </head>
    <body>
        <!-- Container for Chart -->
        <div id="myChart"></div>
        <!-- Charts configuration file -->
        <script src="index.js"></script>
    </body>
</html>
```

**2. Instantiating the JavaScript Chart**

Create the Chart inside of your container div using `create`.

```js
// Chart Options
const options = {};

// Create Chart
const chart = agCharts.AgCharts.create(options);
```

**3. Define Chart Data and Series**

```js
// Chart Options
const options = {
    // Container: HTML Element to hold the chart
    container: document.getElementById('myChart'),
    // Data: Data to be displayed in the chart
    data: [
        { month: 'Jan', avgTemp: 2.3, iceCreamSales: 162000 },
        { month: 'Mar', avgTemp: 6.3, iceCreamSales: 302000 },
        { month: 'May', avgTemp: 16.2, iceCreamSales: 800000 },
        { month: 'Jul', avgTemp: 22.8, iceCreamSales: 1254000 },
        { month: 'Sep', avgTemp: 14.5, iceCreamSales: 950000 },
        { month: 'Nov', avgTemp: 8.9, iceCreamSales: 200000 },
    ],
    // Series: Defines which chart type and data to use
    series: [{ type: 'bar', xKey: 'month', yKey: 'iceCreamSales' }],
};
```

{% /if %}

<!-- REACT Create -->

{% if isFramework("react") %}

**2. Import the React Chart**

```js
import React, { useState } from 'react';
import ReactDOM from 'react-dom/client';

import { AgCharts } from 'ag-charts-react';
```

**3. Define Chart Data and Series**

```js
const ChartExample = () => {
    // Chart Options: Control & configure the chart
    const [chartOptions, setChartOptions] = useState({
        // Data: Data to be displayed in the chart
        data: [
            { month: 'Jan', avgTemp: 2.3, iceCreamSales: 162000 },
            { month: 'Mar', avgTemp: 6.3, iceCreamSales: 302000 },
            { month: 'May', avgTemp: 16.2, iceCreamSales: 800000 },
            { month: 'Jul', avgTemp: 22.8, iceCreamSales: 1254000 },
            { month: 'Sep', avgTemp: 14.5, iceCreamSales: 950000 },
            { month: 'Nov', avgTemp: 8.9, iceCreamSales: 200000 },
        ],
        // Series: Defines which chart type and data to use
        series: [{ type: 'bar', xKey: 'month', yKey: 'iceCreamSales' }],
    });

    // ...
};
```

**4. React Chart Component**

Replace your `index.js` file (or root component) with the following code:

```jsx
// React Chart Component
  return (
    // AgCharts component with options passed as prop
    <AgCharts options={chartOptions} />
  );
}

// Render component inside root element
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<ChartExample />);
```

{% /if %}

<!-- ANGULAR Create -->

{% if isFramework("angular") %}

**2. Import the Angular Chart**

```js
import { Component } from '@angular/core';

import { AgCharts } from 'ag-charts-angular';
import { AgChartOptions } from 'ag-charts-community';
```

**3. Define Chart Data and Series**

```jsx
// Angular Chart Component
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgCharts],
  // ag-charts-angular component with chartOptions attribute
  template:``,
})
export class AppComponent {
  // Chart Options
  public chartOptions: AgChartOptions;
  constructor() {
    this.chartOptions = {
      // Data: Data to be displayed in the chart
      data: [
        { month: 'Jan', avgTemp: 2.3, iceCreamSales: 162000 },
        { month: 'Mar', avgTemp: 6.3, iceCreamSales: 302000 },
        { month: 'May', avgTemp: 16.2, iceCreamSales: 800000 },
        { month: 'Jul', avgTemp: 22.8, iceCreamSales: 1254000 },
        { month: 'Sep', avgTemp: 14.5, iceCreamSales: 950000 },
        { month: 'Nov', avgTemp: 8.9, iceCreamSales: 200000 },
      ],
      // Series: Defines which chart type and data to use
      series: [{ type: 'bar', xKey: 'month', yKey: 'iceCreamSales' }]
    };
  }
}
```

**4. Angular Charts Component**

Chart options is set as an `ag-grid-angular` component attribute.

```js

template:
  `<ag-charts
    style="height: 100%"
    [options]="chartOptions">
   </ag-charts>`,
})

```

{% /if %}

<!-- VUE Create -->

{% if isFramework("vue") %}

**2. Import the Vue Chart**

```html
<template>
    <!-- The AG Charts component with chartsOptions as an attribute -->
    <ag-charts :options="options"> </ag-charts>
</template>

<script>
    import { ref } from 'vue';

    import { AgCharts } from 'ag-charts-vue3';

    // Vue Chart Component
    export default {
        name: 'App',
        components: {
            'ag-charts': AgCharts,
        },
        setup() {},
    };
</script>
```

**3. Define Chart Data and Series**

```html
<template>
    <!-- The AG Charts component with chartsOptions as an attribute -->
    <ag-charts :options="options"> </ag-charts>
</template>

<script>
    setup() {
      // Chart Options
        const options = ref({
         // Data: Data to be displayed in the chart
         data: [
          { month: 'Jan', avgTemp: 2.3, iceCreamSales: 162000 },
          { month: 'Mar', avgTemp: 6.3, iceCreamSales: 302000 },
          { month: 'May', avgTemp: 16.2, iceCreamSales: 800000 },
          { month: 'Jul', avgTemp: 22.8, iceCreamSales: 1254000 },
          { month: 'Sep', avgTemp: 14.5, iceCreamSales: 950000 },
          { month: 'Nov', avgTemp: 8.9, iceCreamSales: 200000 },
        ],
        // Series: Defines which chart type and data to use
        series: [{ type: 'bar', xKey: 'month', yKey: 'iceCreamSales' }],
        });
      return {
        options,
      };
    },
</script>
```

**4. Vue Chart Component**

```html
<template>
    <!-- The AG Charts component with chartsOptions as an attribute -->
    <ag-charts :options="options"> </ag-charts>
</template>
```

{% /if %}

{% if isFramework("angular") %}
**5. Running the Angular Chart**
{% /if %}

{% if isFramework("react") %}
**5. Running the React Chart**
{% /if %}

{% if isFramework("vue") %}
**5. Running the Vue Chart**
{% /if %}

{% if isFramework("javascript") %}
**4. Running the JavaScript Chart**
{% /if %}

Below is a live example of the application running. Click `</> Code` to see the code.

{% chartExampleRunner title="Basic Chart Example" name="basic-example" type="generated" /%}

{% note %}
To live-edit the code, open the example in CodeSandbox or Plunker using the buttons to the lower-right.
{% /note %}

## Next Steps

-   Read our [Introductory Tutorial](./create-a-basic-chart/).

<!-- {% if isFramework("react") %}

-   [How to Create a Basic React Chart](./create-a-basic-chart/)

{% /if %}

{% if isFramework("angular") %}

-   [How to Create a Basic Angular Chart](./create-a-basic-chart/)

{% /if %}

{% if isFramework("vue") %}

-   [How to Create a Basic Vue Chart](./create-a-basic-chart/)

{% /if %}

{% if isFramework("javascript") %}

-   [How to Create a Basic JavaScript Chart](./create-a-basic-chart/)

{% /if %} -->
