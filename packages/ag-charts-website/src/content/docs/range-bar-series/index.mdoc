---
title: 'Range Bar Series'
enterprise: true
---

A Range Bar Series displays both the high and low values within the data using vertical or horizontal bars. This series type is used to monitor how consistent or variable the data is.

## Simple Range Bar

To create a Range Bar Series, use the `range-bar` series type.

```js
series: [
    {
        type: 'range-bar',
        xKey: 'date',
        yLowKey: 'low',
        yHighKey: 'high',
    },
];
```

The `xKey` is used to extract x-axis values from the data, while the `yLowKey` and `yHighKey` supply the numerical values for the y-axis.

The following example shows a Simple Range Bar Series using default options.

{% chartExampleRunner title="Simple Range Bar" name="simple-range-bar" type="generated" options="{ \"enterprise\": true }" /%}

## Labels

To display labels for the `yHighKey` and `yLowKey` values of each bar, set `label.enabled` to `true`.

```js
label: {
    enabled: true;
}
```

A label formatter can be used to customise the labels.

```js
label: {
    formatter: ({ itemId, value }) => {
        return `${itemId === 'low' ? 'L' : 'H'}: ${value.toFixed(0)}`;
    };
}
```

In the snippet:

-   The formatter converts the data value to an integer.
-   The params object passed into the formatter includes an `itemId` which is used to identify whether the value is a `high` or a `low` value.

This configuration generates labels as shown in the example below.

{% chartExampleRunner title="Range Column Label" name="range-bar-labels" type="generated" options="{ \"enterprise\": true }" /%}

## Multiple Range Bar Series

Multiple Range Bar Series can be combined into a single chart.

Note the example below:

-   Sets the category axis `groupPaddingInner` to `0` to close the gap between the two series.
-   Uses `yName` to control the text displayed in the legend.
-   Uses `yLowName` and `yHighName` to control the text displayed in the tooltip.

{% chartExampleRunner title="Multiple Range Bar Series" name="multiple-range-bars" type="generated" options="{ \"enterprise\": true }" /%}

## Missing Data

The series handles missing or invalid data based on the presence or validity of `xKey`, `yLowKey` and `yHighKey` values in a data object.

When the axes are continuous (`'number'`, `'time'` or `'log'`), the `yLowKey`, `yHighKey` and `xKey` values in a data object are considered invalid if they are:

-   `+/-Infinity`
-   `null`
-   `undefined`
-   `NaN`

Data entries with invalid `yLowKey`, `yHighKey`, or `xKey` values will result in gaps in the series.

The following example demonstrates how missing data is handled in the context of a continuous time x-axis:

-   Initially all data is complete and valid for their respective axes.
-   Click the **Missing Y values** button and note that if either of the Y low or high values are missing, the data point is rendered as a gap in the series.
-   Click the **Missing X value** button and note that a missing X value on a continuous x-axis is skipped.

{% chartExampleRunner title="Range Column Missing Data" name="range-bar-missing-data" type="generated" options="{ \"enterprise\": true }" /%}

## Horizontal Range Bar

To create a Horizontal Range Bar chart, set `direction: 'horizontal'`.

```js
series: [
    {
        type: 'range-bar',
        direction: 'horizontal',
        xKey: 'date',
        yLowKey: 'low',
        yHighKey: 'high',
    },
];
```

When the `direction` is `'horizontal'` the `xKey` will determine categories on the y-axis, while the `yLowKey` and `yHighKey` will be used to provide numerical values along the x-axis.

{% chartExampleRunner title="Horizontal Range Bar" name="horizontal-range-bar" type="generated" options="{ \"enterprise\": true }" /%}

## Multiple Horizontal Range Bar Series

Multiple Horizontal Range Bar Series can be combined into a single chart.

Note the example below:

-   Sets the category axis `groupPaddingInner` to `0` to close the gap between the two series.
-   Uses `yName` to control the text displayed in the legend.
-   Uses `yLowName` and `yHighName` to control the text displayed in the tooltip.

{% chartExampleRunner title="Multiple Horizontal Range Bar Series" name="multiple-horizontal-range-bars" type="generated" options="{ \"enterprise\": true }" /%}

## API Reference

{% tabs %}

{% tabItem label="Range Bar Series" %}
{% apiReference id="AgRangeBarSeriesOptions" /%}
{% /tabItem %}

{% /tabs %}
