---
title: 'Range Bar Series'
enterprise: true
---

A Range Bar series displays both the high and low values within the data using bars or columns. This series type is used to monitor how consistent or variable the data is.

## Range Column

To create a basic Range Column chart, use the `range-bar` series type and specify the `xKey`, `yLowKey` and `yHighKey` properties:

```js
series: [
    {
        type: 'range-bar',
        xKey: 'date',
        yLowKey: 'low',
        yHighKey: 'high',
    },
];
```

{% chartExampleRunner title="Basic Range Column" name="basic-range-bar" type="generated" options="{ \"enterprise\": true }" /%}

## Range Column Labels

It's possible to add labels to the range columns, by adding the following to the series config:

```js
label: {
}
```

By default, a label will be shown for the `yHighKey` value and `yLowKey` value of each column.

In the snippet below, a label formatter is used to return the integer part of the data value to display as the column labels.

-   The params object passed into the formatter includes an `itemId` which can be used to identify whether the value is a `high` or a `low` value:

```js
label: {
    formatter: ({ itemId, value }) => {
        return `${itemId === 'low' ? 'L' : 'H'}: ${value.toFixed(0)}`;
    };
}
```

The formatter above creates labels as seen in the provided example:
{% chartExampleRunner title="Range Column Label" name="range-bar-labels" type="generated" options="{ \"enterprise\": true }" /%}

## Multiple Range Column Series

It is possible to combine multiple range column series into a single chart.

Note that in the example below we:

-   Set the category axis `groupPaddingInner` to `0` to close the gap between the two series
-   Use `yName` to control the text that the legend displays
-   Use `yLowName` and `yHighName` to control the text that the tooltip displays

{% chartExampleRunner title="Multiple Range Column Series" name="multiple-range-bars" type="generated" options="{ \"enterprise\": true }" /%}

## Missing Data

Sometimes data for certain items or time periods might be missing.

The chart handles such cases based on whether the `xKey` or `yKey` value of a data point is missing or invalid.

The `yLowKey` and `yHighKey` values of a data point are invalid if they are `+/-Infinity`, `null`, `undefined` or not a number. A data point with an invalid `yLowKey` or `yHighKey` value will be rendered as a gap in the series.

The chart handles missing `xKey` values depending on the X-axis type:

-   For continuous X axes (either a `'time'` or `'number'` axis), the `xKey` value of a data point is invalid if itâ€™s `+/-Infinity`, `null`, `undefined` or `NaN`. In this case the data point will be skipped altogether.
-   For category X axes the data point will not be skipped. It will be rendered as a category along the X axis.

The following example demonstrates how missing data is handled for a continuous X axis type (time axis):

-   Initially there is no missing data, all values are valid for their associated axes.
-   Click the Missing Y values button and note that if either of the Y low or high values are missing, the data point is rendered as a gap in the chart.
-   Click the Missing X value button and note that a missing X value on a continuous X axis is skipped.

{% chartExampleRunner title="Range Column Missing Data" name="range-bar-missing-data" type="generated" options="{ \"enterprise\": true }" /%}

## Range Bar

To create a basic Range Bar chart, use the `range-bar` series type and specify the `direction`, `xKey`, `yLowKey` and `yHighKey` properties:

```js
series: [
    {
        type: 'range-bar',
        direction: 'horizontal',
        xKey: 'date',
        yLowKey: 'low',
        yHighKey: 'high',
    },
];
```

{% chartExampleRunner title="Basic Range Bar" name="basic-range-bar-horizontal" type="generated" options="{ \"enterprise\": true }" /%}

## Multiple Range Bar Series

It is possible to combine multiple range bar series into a single chart.

Note that in the example below we:

-   Set the category axis `groupPaddingInner` to `0` to close the gap between the two series
-   Use `yName` to control the text that the legend displays
-   Use `yLowName` and `yHighName` to control the text that the tooltip displays

{% chartExampleRunner title="Multiple Range Bar Series" name="multiple-range-bars" type="generated" options="{ \"enterprise\": true }" /%}

## API Reference

{% interfaceDocumentation interfaceName="AgRangeBarSeriesOptions" config="{ \"showSnippets\": false }" /%}
