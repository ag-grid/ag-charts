---
title: 'Localisation'
---

All the displayed text in the grid is customisable for the purposes of localisation. This is done by providing locale information to the grid for the required language. Either provide an object of key/value pairs via the `localeText` property, or provide a `getLocaleText` callback to hook the grid up to your application's localisation.

We include a minimal internationalisation implementation and full set of American English translations, each of which can be replaced. The built-in internationalisation implementation is optimised for file size, and only supports American English for formatting of numbers and dates.

## Installing a Locale

To change the locale, set the `localeText` property in `locale` options to one of the built-in locales.

```js
{
    locale: {
        localeText: AG_CHARTS_LOCALE_FR,
    }
}
```

If a locale is provided but is missing values, the default English will be used for the missing values.

## Customising Text Values

Overrides for individual translations can be done by applying overrides to an existing locale.

{% chartExampleRunner title="Custom Text Values" name="custom-text-values" type="generated" /%}

```js
{
    locale: {
        localeText: {
            ...AG_CHARTS_LOCALE_EN,
            contextMenuDownload: 'Save this Chart to My Computer',
        },
    }
}
```

In this configuration, `localeText` is a dictionary mapping translation keys to the translated text.

Some translations have parameters, which can be included in the translation using `'${value}'` syntax. Note your strings should not use backticks.

Values can be formatted by appending a format style in square brackets, like `'${value}[percent]'`. The available formatters are `[number]`, `[percent]`, `[date]`, `[time]`, and `[datetime]`.

```js
{
    locale: {
        localeText: {
            ...AG_CHARTS_LOCALE_EN,
            ariaAnnounceChart: 'chart with ${seriesCount} series',
            ariaValuePanRange: '${min}[percent] to ${max}[percent]',
        },
    }
}
```

Please see [All Built-In Translations](./localisation/#all-built-in-translations) for a full list of built-in translations.

## Using External Frameworks

You can integrate the internationalisation framework using the `getLocaleText` option within the `locale` options.

```js
{
    locale: {
        getLocaleText({ key, defaultValue, variables }) {
            return internationalisationFramework.getLocaleText({ key, defaultValue, variables });
        }
    }
}
```

If you return `undefined` from this function, it will fall back to the default behaviour of using `localeText` with the default formatter.

### Framework Integration Examples

{% tabs %}

{% if isFramework("javascript", "angular", "vue") %}

{% tabItem id="FormatJS" label="FormatJS" %}

{% flex direction="column" gap="size-6" %}

```js
import { createIntl } from '@formatjs/intl';

const intl = createIntl({
    locale: 'fr-FR',
    messages: {
        contextMenuDownload: 'Téléchargez une copie de ce tableau',
    },
});

AgCharts.create({
    // ...
    locale: {
        getLocaleText({ key, variables }) {
            if (!intl.messages[key]) {
                // Fallback to default behaviour for missing messages
                return undefined;
            }
            return intl.formatMessage({ id: key }, variables);
        },
    },
});
```

{% link href="https://codesandbox.io/p/devbox/ag-charts-formatjs-s88pll" isExternal=true %}View in CodeSandbox{% /link %}

{% /flex %}

{% /tabItem %}

{% tabItem id="I18Next" label="I18Next" %}

{% flex direction="column" gap="size-6" %}

```js
import i18next from 'i18next';

await i18next.init({
    lng: 'fr',
    resources: {
        fr: {
            translation: {
                contextMenuDownload: 'Téléchargez une copie de ce tableau',
            },
        },
    },
});

AgCharts.create({
    // ...
    locale: {
        getLocaleText({ key, variables }) {
            if (!i18next.exists(key)) {
                // Fallback to default behaviour for missing messages
                return undefined;
            }
            return i18next.t(key, variables);
        },
    },
});
```

{% link href="https://codesandbox.io/p/devbox/ag-charts-i18next-kxzhft" isExternal=true %}View in CodeSandbox{% /link %}

{% /flex %}

{% /tabItem %}

{% /if %}

{% if isFramework("react") %}

{% tabItem id="React Intl" label="React Intl" %}

{% flex direction="column" gap="size-6" %}

```jsx
import { IntlProvider, useIntl } from 'react-intl';

const messages = {
    'contextMenuDownload': 'Téléchargez une copie de ce tableau',
};

const MyChart = () => {
    const intl = useIntl();

    const options = {
        // ...
        locale: {
            getLocaleText({ key, variables }) {
                if (!intl.messages[key]) {
                    // Fallback to default behaviour for missing messages
                    return undefined;
                }
                return intl.formatMessage({ id: key }, variables);
            },
        },
    };

    return <AgCharts options={options} />;
}

const App = () => {
    return (
        <IntlProvider locale="fr-FR" messages={messages}>
            <MyChart />
        <IntlProvider>
    );
}
```

{% link href="https://codesandbox.io/p/devbox/ag-charts-formatjs-s88pll" isExternal=true %}View in CodeSandbox{% /link %}

{% /flex %}

{% /tabItem %}

{% tabItem id="React I18Next" label="React I18Next" %}

{% flex direction="column" gap="size-6" %}

```js
import i18next from 'i18next';
import { initReactI18next, useTranslation } from 'react-i18next';

await i18next.use(initReactI18next).init({
    lng: 'fr',
    resources: {
        fr: {
            translation: {
                contextMenuDownload: 'Téléchargez une copie de ce tableau',
            },
        },
    },
});

const MyChart = () => {
     const { i18n, t } = useTranslation();

    const options = {
        // ...
        locale: {
            getLocaleText({ key, variables }) {
                if (!i18n.exists(key)) {
                    // Fallback to default behaviour for missing messages
                    return undefined;
                }
                return t(key, variables);
            },
        },
    };

    return <AgCharts options={options} />;
}
```

{% link href="https://codesandbox.io/p/devbox/ag-charts-i18next-kxzhft" isExternal=true %}View in CodeSandbox{% /link %}

{% /flex %}

{% /tabItem %}

{% /if %}

{% /tabs %}

## API Reference

{% tabs %}

{% tabItem id="AgLocaleOptions" label="Locale" %}
{% apiReference id="AgLocaleOptions" /%}
{% /tabItem %}

{% /tabs %}

## All Built-In Translations

{% embedSnippet url="/dev/en.ts" language="ts" /%}
