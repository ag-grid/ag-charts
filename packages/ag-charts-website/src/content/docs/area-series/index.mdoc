---
title: 'Area Series'
description: '$framework Area Charts visualise continuous data to compare multiple datasets over time. Supports stacking and normalizing multiple areas. Handles missing data.'
---

An Area Series is used to visualise continuous data, and is primarily used to compare multiple datasets over time.

## Simple Area

{% chartExampleRunner title="Simple Area Series" name="simple-area" type="generated" /%}

To create an Area series use the `'area'` series type.

```js
series: [
    { type: 'area', xKey: 'month', yKey: 'subscriptions', yName: 'Subscriptions' },
    { type: 'area', xKey: 'month', yKey: 'services', yName: 'Services' },
    { type: 'area', xKey: 'month', yKey: 'products', yName: 'Products' },
],
```

In this configuration:

-   `xKey` defines the categories, and is mapped to the [Category Axis](./axes-types/#category).
-   `yKey` provides the numerical values for each dataset, corresponding to the [Number Axis](./axes-types/#number).
-   `yName` configures display names, reflected in [Tooltip Titles](./tooltips) and [Legend Items](./legend).

## Multiple Area Series

If multiple Area Series are provided, the series will be overlaid in the provided order, as seen in the above example. The default `fillOpacity` of an Area Series is `0.8`, to allow all series to be visible.

### Stacked Area Series

Setting `stacked: true` will enable the series stacking behaviour.

{% chartExampleRunner title="Stacked Area Series" name="stacked-area" type="generated" /%}

```js
series: [
    { type: 'area', xKey: 'month', yKey: 'subscriptions', yName: 'Subscriptions', stacked: true },
    { type: 'area', xKey: 'month', yKey: 'services', yName: 'Services', stacked: true },
    { type: 'area', xKey: 'month', yKey: 'products', yName: 'Products', stacked: true },
],
```

### Normalized Area Series

To normalize the totals of all Area Series in the chart, so that for any given category the stack will always sum to a certain value, use the `normalizedTo` option.
It is possible to normalize to any non-zero value.

{% chartExampleRunner title="Normalized Stacked Area Series" name="normalized-area" type="generated" /%}

```js
series: [
    { type: 'area', xKey: 'month', yKey: 'subscriptions', yName: 'Subscriptions', stacked: true, normalizedTo: 1000 },
    { type: 'area', xKey: 'month', yKey: 'services', yName: 'Services', stacked: true, normalizedTo: 1000 },
    { type: 'area', xKey: 'month', yKey: 'products', yName: 'Products', stacked: true, normalizedTo: 1000 },
],
```

## Customisation

It is possible to customise the appearance of the line, fill, labels and markers for each series.
{% chartExampleRunner title="Customised Area Series" name="customised-area" type="generated" /%}

In this example

-   All series have a custom `stroke` and `fill` colour.
-   A custom `lineDash` is provided for the Subscriptions series.
-   [Markers](#reference-AgAreaSeriesOptions-marker) are enabled for the Services series.
-   [Labels](#reference-AgAreaSeriesOptions-label) are enabled for the Products series.

### Line

A straight line is used to connect points by default in the Area Series. Use the `line` option to change the line style.

{% chartExampleRunner title="Customised Line Style" name="line-style" type="generated" /%}

```js
series: [
    {
        // ...
        line: {
            style: 'smooth'
        },
    },
],
```

Please see the the [API Reference](./area-series/#reference-AgLineSeriesOptions-line) for a list of all available line options.

### Missing Data

{% chartExampleRunner title="Area Series with Incomplete Data" name="missing-data-area" type="generated" /%}

-   Data points with a `yKey` value of positive or negative `Infinity`, `null`, `undefined` or `NaN` will be rendered as gaps. Set `connectMissingData: true` to draw a connection between points either side of a missing point.
-   Data points with invalid `xKey` values will be ignored.

## API Reference

{% tabs %}

{% tabItem id="AgAreaSeriesOptions" label="Area Series" %}
{% apiReference id="AgAreaSeriesOptions" /%}
{% /tabItem %}

{% /tabs %}
