---
title: 'Linear Gauge'
---

A Linear Gauge presents a single data point within a predefined range along a scale.
The data is represented by a bar indicating the value.

## Simple Linear Gauge

{% chartExampleRunner title="Simple Linear Gauge" name="simple-linear-gauge" type="generated" /%}

To create a Linear Gauge, use the `createGauge` API with the type `linear-gauge`.

{% if isFramework("javascript") %}

```js
const options = {
    type: 'linear-gauge',
    container: document.getElementById('myChart'),
    value: 80,
    scale: {
        min: 0,
        max: 100,
    },
};

AgCharts.createGauge(options);
```

{% /if %}

{% if isFramework("react") %}

```jsx
const [options, setOptions] = useState({
    type: 'linear-gauge',
    value: 80,
    scale: {
      min: 0,
      max: 100,
    },
});

return (
    <AgGauge options={options} />
);
```

{% /if %}

{% if isFramework("angular") %}

```js
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgGauge],
  template: `<ag-gauge [options]="options"></ag-gauge>`,
})
export class AppComponent {
  public options: AgLinearGaugeOptions;
  constructor() {
    this.options = {
        type: "linear-gauge",

        value: 80,
        scale: {
          min: 0,
          max: 100,
        },
    };
  }
}
```

{% /if %}

{% if isFramework("vue") %}

```js
template: `<ag-gauge:options="options"/>`,
components: {
    'ag-gauge': AgGauge,
},
data() {
    return {
        options: {
            type: "linear-gauge",

        value: 80,
        scale: {
          min: 0,
          max: 100,
        },
          }      ,
    };
}
```

{% /if %}

In this configuration:

-   `value` is the value displayed by the gauge.
-   `scale.min` defines the minimum value of the scale.
-   `scale.max` defines the maximum value of the scale.
-   The data is represented by a coloured bar displayed over a grey scale.

## Horizontal Linear Gauge

{% chartExampleRunner title="Horizontal Linear Gauge" name="horizontal-linear-gauge" type="generated" options={ "exampleHeight": 250 } /%}

To create a Horizontal Linear Gauge, set `direction: 'horizontal'`.

```js
const options = {
    type: 'linear-gauge',
    direction: 'horizontal',
    value: 80,
    scale: {
        min: 0,
        max: 100,
    },
};
```

## Customisation

### Thickness

{% chartExampleRunner title="Thickness" name="thickness" type="generated" options={ "exampleHeight": 250 } /%}

```js
const options = {
    type: 'linear-gauge',
    //...

    thickness: 50
    bar: {
        thickness: 25
    }
}

```

In the above configuration:

-   The thickness of the scale is specified as 50 pixels.
-   The thickness of the bar is specified as 25 pixels.
-   It is also possible to use `thicknessRatio` to specify the width of the bar as a proportion of the scale.

### Labels

//TODO

{% chartExampleRunner title="Labels" name="labels" type="generated" options={ "exampleHeight": 250 } /%}

```js
{
    scale: {
        label: {
            enabled: false,
        },
    },
}
```

In this configuration:

-   The scale labels are hidden using the `scale.label.enabled` option. See the [API Reference](#api-reference) for more details about customising the scale label style and interval.

### Colour Options

Both the bar and scale have the same colour options and are configured in the same way.

{% chartExampleRunner title="Colour Scales" name="color-scales" type="generated" options={ "exampleHeight": 300 } /%}

```js
{
    bar: {
        // fill: '#E84118', - sets a single colour
        fills: [
            { color: '#E84118' },
            { color: '#9C88FF' },
            { color: '#00A8FF' }
        ], //colours are allocated equally
        fillMode: 'discrete', //'discrete' | 'continuous'
    },
}
```

In this configuration:

-   Providing a `fill` value of a single string will result in a solid colour. This overrides the `fills` property.
-   Providing a `fills` array will equally divide the entire scale or bar into the provided colours.
-   The `fillMode` determines if the `fills` colours are shown as discrete blocks or as a continuous gradient.

To configure explicit colour stops, provide `stop` values within the `fills` array.

{% chartExampleRunner title="Scale Values" name="scale-values" type="generated" options={ "exampleHeight": 250 } /%}

```js
{
    bar: {
        fills: [
            { color: '#E84118', stop: 35 },
            { color: '#FBC531', stop: 45 },
            { color: '#4CD137', stop: 55 },
            { color: '#FBC531', stop: 65 },
            { color: '#E84118' },
        ],
        fillMode: 'discrete',
    },
}
```

In this configuration:

-   Each colour stops at the `stop` value, and the next colour begins at that point.
-   The last colour is used until the end of the scale or bar.
-   Both `discrete` and `continuous` modes can be used with colour stops.

### Segmentation

To split the gauge into segments, use the `segmentation` option.

{% chartExampleRunner title="Appearance" name="appearance" type="generated" options={ "exampleHeight": 300 } /%}

```js
{
    segmentation: {
        interval: {step: 4}
        spacing: 4,
    },
}
```

In this configuration:

-   `segmentation.interval` specifies where the gauge is segmented. Available options are:
    -   `step` - segments the gauge at a fixed interval.
    -   `count` - segments the gauge a fixed number of times.
    -   `values` - segments the gauge at specific scale values.
-   `spacing` defines the spacing between each segment.

### Corner Radius

{% chartExampleRunner title="Corner Radius" name="corner-radius" type="generated" options={ "exampleHeight": 350 } /%}

```js
{
    cornerRadius: 99,
    cornerMode: 'container',
}
```

In this configuration:

-   `cornerRadius` specifies the amount of curvature applied to each corner.
-   `cornerMode` can be set to `container` to apply rounded corners only to the start and end of the gauge, or `item` for all visual items within the gauge.

## Targets

Gauges often display targets or thresholds to provide context to the displayed data value. These can be added using the `targets` configuration array.

{% chartExampleRunner title="Targets" name="targets" type="generated" options={ "exampleHeight": 250 } /%}

```js
{
    targets: [
        {
            value: 70,
            text: 'Average',
        },
    ],
}
```

In this configuration:

-   `value` is the position for the target marker.
-   `text` is an optional string for the target label.

### Customisation

{% chartExampleRunner title="Target Customisation" name="custom-targets" type="generated" options={ "exampleHeight": 250 } /%}

```js
{
    targets: [
        {
            value: 30,
            shape: 'triangle',
            placement: 'outside',
            fill: 'white',
            strokeWidth: 2,
            spacing: 8,
        },
        {
            value: 75,
            placement: 'inside',
            shape: 'triangle',
            fill: 'white',
            strokeWidth: 2,
            spacing: 8,
        },
        {
            value: 90,
            placement: 'middle',
            shape: 'circle',
            fill: 'white',
            strokeWidth: 2,
            spacing: 8,
        },
    ],
}
```

In this configuration:

-   `shape` is a [marker shape](#reference-AgLinearGaugeOptions-targets-shape).
-   `placement` indicates the relative placement to the gauge - either `before`, `after`, or `middle`.
-   `size` is the size of the marker, in pixels.
-   `spacing` is spacing from the edge of the gauge to the marker. Ignored when `placement` is `middle`.

## Bullet Series

{% chartExampleRunner title="Bullet" name="bullet" type="generated" options={ "exampleHeight": 250 } /%}

To create a bullet chart, use the `line` shape for the target.

## API Reference

{% tabs %}

{% tabItem id="AgLinearGaugeOptions" label="Linear Gauge Options" %}
{% apiReference id="AgLinearGaugeOptions" /%}
{% /tabItem %}

{% /tabs %}
