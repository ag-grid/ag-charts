---
title: 'Layout'
description: 'Describes the components of a $framework chart and how they are managed by the $framework charts layout engine. Covers layout calculations and size changes.'
---

This section explains how the chart and its components are sized and laid out within the available space.

## Chart Size

The chart out of the box uses the minimal styling to ensure the chart is visible, and has a default minimum width and height of 300px.

Below is an example of a chart with no CSS applied. In this case, the default for CSS is to make the width as large as possible and the height as small as possible (the minimum of 300px).

{% chartExampleRunner title="Chart Size" name="chart-unsized" type="generated" /%}

If it is required, the minimum width and height can be adjusted with the `minWidth` and `minHeight` options.

```js
{
    minWidth: 100,
    minHeight: 100
}
```

An explicit size can be set using the `width` and `height` options. In this case, the `minWidth` and `minHeight` are ignored.

```js
{
    width: 400,
    height: 400
}
```

### Styling with Classes and Styles

Below is a chart sized using classes and inline styles.

{% chartExampleRunner title="Chart Size (Class)" name="chart-class" type="generated" /%}

{% if isFramework("javascript") %}

All attributes on the `container` element are left unchanged when calling `AgCharts.create`, including `class` and `style`.

```html
<div id="myChart" class="chart" style="width: 400px; height: 400px"></div>
```

```js
const options = {
    container: document.getElementById('myChart'),
};

AgCharts.create(options);
```

{% /if %}
{% if isFramework("react") %}

The `className` and `style` props can be used to style the chart.

```js
<AgCharts
    options={options}
    className="chart"
    style={{ width: "400px", height: "400px" }}
/>
```

{% /if %}
{% if isFramework("angular") %}

The `class` and `style` attributes can be used to style the chart.

```html
<ag-charts [options]="options" class="chart" style="width: 400px; height: 400px"></ag-charts>
```

{% /if %}
{% if isFramework("vue") %}

The `class` and `style` attributes can be used to style the chart.

```html
<ag-charts :options="options" class="chart" style="width: 400px; height: 400px"></ag-charts>
```

{% /if %}

### Styling with Grid

Below is an example of a chart styled using a grid on the parent element.

{% chartExampleRunner title="Chart Size (Parent Grid)" name="chart-parent-grid" type="generated" /%}

To use a grid layout, put the chart inside a parent element with `display: grid` on the parent element.

{% if isFramework("javascript") %}

```html
<div style="display: grid">
    <div id="myChart"></div>
</div>
```

{% /if %}
{% if isFramework("react") %}

```js
<div style={{ display: 'grid' }}>
    <AgCharts options={options} />
</div>
```

{% /if %}
{% if isFramework("angular") %}

```html
<div style="display: grid">
    <ag-charts [options]="options"></ag-charts>
</div>
```

{% /if %}
{% if isFramework("vue") %}

```html
<div style="display: grid">
    <ag-charts :options="options"></ag-charts>
</div>
```

{% /if %}

In this configuration, the grid has a single cell. By default, grid stretches child elements to fill the width and height of the cell.

## Chart Layout Calculation

{% imageCaption imagePath="resources/cartesian-chart-layout.png" alt="Chart Layout" maxWidth="80%" constrained=true centered=true enableDarkModeFilter=true /%}

Each chart is composed of a single or multiple series, and optionally a [Legend](./legend/), [Axes](./axes-types/), and captions, such as title, subtitle and footnote. All of these components are managed by the chart's layout engine. They are sized and positioned appropriately based on the chart's dimensions, the nature of the data and the configuration.

Components are laid out in the following order; earlier elements take up space that is then unavailable for the layout
of later elements:

-   Chart padding.
-   Title plus its configured spacing.
-   Subtitle plus its configured spacing.
-   Footnote plus its configured spacing.
-   [Legend](./legend/) plus its configured spacing.
-   [Toolbar](./financial-charts-toolbar/).
-   [Range Buttons](/range-buttons/).
-   [Navigator](./navigator/) plus its configured spacing.
-   Series area padding.
-   [Axes](./axes-types/).
-   Series area.

If any elements are disabled or not used, they do not consume any space during layout processing.

### Chart Padding

`padding` configuration is applied first, ensuring a clear boundary of all other components from the edge of the canvas.
Space is consumed on all sides of the available area based upon the `padding` configuration.

### Title

`title` configuration applies next, horizontally centring on the remaining space and consuming the
height of the title and its additional `title.spacing`.

### Subtitle

`subtitle` configuration applies next, horizontally centring on the remaining space and consuming the
height of the subtitle and its additional `subtitle.spacing`.

### Footnote

`footnote` configuration applies next, horizontally centring on the remaining space and consuming the height of the footnote and its additional `footnote.spacing` at the bottom.

### Legend

`legend` configuration is applied to the remaining space. The exact space consumed depends on how the
[Legend](./legend/) is configured.

`legend.spacing` can be used to adjust the space between the Legend and later components.

### Toolbar and Range Buttons

The Toolbar and Range Buttons are then placed next, taking up a fixed amount of space.

### Navigator

`navigator` configuration is applied next. The exact space consumed depends on how the
[Navigator](./navigator/) is configured.

`navigator.spacing` can be used to adjust the space between the Navigator and later components.

### Series Area Padding

`seriesArea.padding` configuration is applied. It can be used to avoid the overlapping of series items with [Legend](./legend/), title and [Axes labels](./axes-labels/).

### Axes

`axes` layout is then calculated based upon the remaining space and how the [Axes](./axes-types/) are
configured.

### Series Area

All remaining space is then dedicated to rendering of the configured `series` options.
