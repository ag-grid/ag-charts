---
title: 'Create a Basic Chart'
---

An introduction to the key concepts of AG Charts

## Overview

In this tutorial you will:

1. [Create a simple bar chart](#chart-basics)
2. [Add an additional line series to the bar chart](#combination-charts)
3. [Style the chart with themes, titles, legend, and formatted data](#styling)
4. [Format the axes](#formatting-axes)

By the end of this tutorial, you will have a basic combination chart, using a dark theme, with formatted values:

{% chartExampleRunner title="Complete Formatted Example" name="complete-formatted-example" type="generated" /%}

## Setup

{% note %}
To follow this tutorial complete our [Quick Start](quick-start) or fork the [CodeSandbox]() project
{% /note %}

## Chart Basics

Charts are configured via a single `AgChartOptions` object. There are lots of properties that can be used to configure your chart, but at a minimum you need to provide a **container**, some **data** and at least one **series**.

The **container** is the HTML element in which the chart should be rendered:

```html
<div id="myChart" style="height: 100%;"></div>
```

```js
const options = {
    container: document.getElementById('myChart'),
    // ...
};
```

_Note: By default, the chart will resize automatically to fill the container element. This behaviour can be customised using the [autoSize](../options/#reference-AgChartOptions-autoSize) property._

**Data** is the information that you would like present within a chart, _typically_ an array of data-points:

```js
const options = {
    data: [
        { month: 'Jan', avgTemp: 2.3, iceCreamSales: 162 },
        { month: 'Mar', avgTemp: 6.3, iceCreamSales: 302 },
        { month: 'May', avgTemp: 16.2, iceCreamSales: 800 },
        { month: 'Jul', avgTemp: 22.8, iceCreamSales: 1254 },
        { month: 'Sep', avgTemp: 14.5, iceCreamSales: 950 },
        { month: 'Nov', avgTemp: 8.9, iceCreamSales: 200 },
    ],
    // ...
};
```

**Series** defines the type of chart(s) that we want to display and links them to the data. There are three properties that need to be configured for _cartesian_ charts:

-   `type` Defines the type of chart to display (e.g. Line, Bar, etc...)
-   `xKey` The data to use for the X axis.
-   `yKey` The data to use for the Y axis.

To create a bar chart we can add an object to our `series` array within the `AgChartOptions` object:

```js
const options = {
    series: [{ type: 'bar', xKey: 'month', yKey: 'iceCreamSales' }],
    // ...
};
```

_Note: AG Charts provides a large number of [series](/gallery) which can each be configured with properties unique to that series_

The last thing we need to do is create the chart by calling the `create()` method, passing our complete `AgChartOptions` object:

```js
AgCharts.create(options);
```

Running our code at this point creates a simple bar chart:

{% chartExampleRunner title="Basic Example" name="basic-example" type="generated" /%}

_Note: Learn more about creating and updating charts in our [API docs](api-create-update)._

## Combination Charts

A chart can have more than one series, which can be useful when comparing datasets. To add another series to the chart, simply add another object to the series array, referencing the data to use:

```js
const options = {
    series: [
        // ...
        { type: 'line', xKey: 'month', yKey: 'avgTemp' },
    ],
    // ...
};
```

Running the chart at this point will show two series on the same chart:

{% chartExampleRunner title="Combination Charts Example" name="combination-charts-example" type="generated" /%}

### Configuring Secondary Axes

The chart above shows both series on a single chart, but given that the data-sets are quite different, it would make more sense to have a secondary axis for the second series. To do this, we need to configure three Axes: bottom, left & right:

```js
const options = {
    axes: [
        { type: 'category', position: 'bottom' },
        { type: 'number', position: 'left', keys: ['iceCreamSales'] },
        { type: 'number', position: 'right', keys: ['avgTemp'] },
    ],
    // ...
};
```

Let's breakdown whats happening here:

-   **Type:** The type of axis to use - one of [Category](axes-types#category), [Number](axes-types#number), [Time](axes-types#time) or [Log](axes-types#log).
-   **Position:** The position on the chart where the axis should be rendered, e.g. 'top', 'bottom', 'right' or 'left'.
-   **Keys:** Associates the axis with a given series, with the keys axis property linking the appropriate series to the axis.

Now when we run our chart, we should see both series & two axes:

{% chartExampleRunner title="Second Series Example" name="second-series-example" type="generated" /%}

## Styling

Now we have a chart complete with multiple series and axes, the last thing to do is style the chart.

### Choosing a Theme

AG Charts provide a number of [themes](themes) out of the box to easily control the style of the chart. To set a theme, add the `theme` property to the `AgChartOptions` object, with the value as your chosen theme:

```js
const options = {
    theme: 'ag-material-dark',
    // ...
};
```

Running the code at this point will display a dark chart:

{% chartExampleRunner title="Theme Example" name="theme-example" type="generated" /%}

_Note: Refer to the [theme](../themes-api) api docs for a full list of properties that can be configured_

### Titles

Titles and subtitles can also be added to the chart via the `title` and `subtitle` properties:

```js
const options = {
    title: { text: 'Ice Cream Sales' },
    subtitle: { text: 'UK Data from 2022' },
    // ...
};
```

{% chartExampleRunner title="Titles Example" name="title-example" type="generated" /%}

_Note: Refer to the [title](/options/#reference-AgChartOptions-title) and [subtitle](/options/#reference-AgChartOptions-subtitle) api docs for a full list of properties that can be configured_

### Legend

You may have noticed that the chart added a Legend when we added a second series to our chart. We can configure the legend using the `legend` property, to adjust its size, position, etc:

```js
const options = {
    legend: {
        enabled: true,
        position: 'right',
    },
    // ...
};
```

We should now see the legend displayed on the right hand side of the chart, rather than underneath it:

{% chartExampleRunner title="Legend Example" name="legend-example" type="generated" /%}

_Note: Refer to the [legend](legend) docs for more info_

### Renaming Series

As you can see, our legend uses the property name from the data directly. Usually, we'll want to show something more human readable, which can be done by adding the `yName` property to our series:

```js
const options = {
    series: [
        { type: 'bar', xKey: 'month', yKey: 'iceCreamSales', yName: 'Ice Cream Sales' },
        // ...
    ],
    // ...
};
```

Now we should see our Legend using the `yName` value as opposed to the `yKey`:

{% chartExampleRunner title="Formatting Series Example" name="format-series-example" type="generated" /%}

### Formatting Axes

Oftentimes we'll want to format our axes to make the chart more readable. We can control the format of our axes label by using a `formatter` on the `label` property, which is function that accepts the axis data and returns a formatted value.

For example, we can format our right-side Y axes to include ' °C' with the following function:

```js
const options = {
    axes: [
        // ...
        {
            type: 'number',
            position: 'right',
            keys: ['avgTemp'],
            label: {
                formatter: (params) => {
                    return params.value + ' °C';
                },
            }, // Label value as a formatter function
        },
    ],
    // ...
};
```

Now our chart should display formatted temperature values on the right-hand-side axis:

{% chartExampleRunner title="Second Series Formatted Example" name="second-series-formatted-example" type="generated" /%}

_Note: Refer to the [axes](../options/#reference-AgChartOptions-axes) api docs for a full list of properties that can be configured_

## Test your Knowledge

1. Change the theme to use 'ag-vivid-dark'

    _Hint: Theme is a property of `AgChartOptions`_

2. Format the 'avgTemp' series to 'Average Temperature (°C)'

    _Hint: use the `yName` property on the 'avgTemp' series_

If you're stuck, check the source code of the example:

{% chartExampleRunner title="Complete Formatted Example" name="complete-formatted-example" type="generated" /%}

## Summary

Congratulations, you've completed our introductory tutorial! By now, you should be familiar with a few key concepts of AG Charts:

-   **Data:** The data to be displayed within the chart.
-   **Series:** Controls the chart type and links it to the data. There can be multiple series for combination charts.
-   **Axes:** Controls the Axes and links it to the data.
-   **Styling & Formatting:** Controls the look and feel of the chart through themes, formatters, series properties, etc...

## Next Steps

Read our guides to dig deeper into the various features available in AG Charts:

-   Data
-   Series Types
-   Custom Themes
-   ...
