---
title: 'Financial Charts Overview'
enterprise: true
hideSideMenu: true
largeExamples: true
---

AG Charts provides fully featured Financial Charts, requiring minimum configuration to setup and use.

{% chartExampleRunner title="Basic Financial Chart" name="basic-financial-chart" type="generated" /%}

## Out of the box

Creating a financial chart could not be easier. The minimum configuration requires only an HTML container and data.

The data should include keys of 'open', 'high', 'low', 'close' and optionally 'volume'.

{% if isFramework("javascript") %}

```js
// Chart Options
const options = {
    // HTML Element to hold the chart
    container: document.getElementById('myChart'),
    // data
    data: getData(),
};

// Create Chart
const chart = AgCharts.createFinancialChart(options);
```

{% /if %}

{% if isFramework("react") %}

```jsx
import React, { useState } from 'react';
import { createRoot } from 'react-dom/client';
import { AgFinancialCharts } from 'ag-charts-react';
import { AgFinancialChartOptions } from 'ag-charts-enterprise';
import { getData } from './data';
import 'ag-charts-enterprise';

// React Chart Component
const ChartExample = () => {
  // Chart Options: Control & configure the chart
  const [options, setOptions] = useState({
    // data
    data: getData(),
  });

  return (
    // AgFinancialCharts component with options passed as prop
    <AgFinancialCharts options={options} />
  );
};

// Render component inside root element
const root = createRoot(document.getElementById('root'));
root.render(<ChartExample />);

```

{% /if %}

{% if isFramework("angular") %}

```js
import { Component } from '@angular/core';
import { AgFinancialCharts } from 'ag-charts-angular';
import { AgFinancialChartOptions } from 'ag-charts-enterprise';
import { getData } from './data';
import 'ag-charts-enterprise';

// Angular Chart Component
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgFinancialCharts],
  // ag-charts-angular component with chartOptions attribute
  template: `<ag-financial-charts
    [options]="options"
    class="chart"
  ></ag-financial-charts>`,
})
export class AppComponent {
  // Chart Options
  public options: AgFinancialChartOptions;
  constructor() {
    this.options = {
      // Data: Data to be displayed in the chart
      data: getData(),
    };
  }
}
```

{% /if %}

{% if isFramework("vue") %}

```js
import { createApp } from 'vue';

import 'ag-charts-enterprise';
import { AgFinancialCharts } from 'ag-charts-vue3';

const ChartExample = {
    template: `
      <ag-financial-charts
        :options="options"
        class="chart"
      />
  `,
    components: {
        'ag-financial-charts': AgFinancialCharts,
    },
    data() {
        return {
            options: {
                data: getData(),
            },
        };
    },
};

createApp(ChartExample).mount('#app');
```

{% /if %}

## Annotations

{% imageCaption pageName="financial-charts" imageName="annotations.gif" alt="Annotations" constrained=true/%}

Allow users to add, edit and customise their own trend, channel and crosslines for analysis with the option to save and restore.

## Zoom / Range

{% imageCaption pageName="financial-charts" imageName="zoom.gif" alt="Zoom" constrained=true/%}

Users can [Zoom](./zoom/) by interacting with the chart area, dragging the axis or clicking on the zoom buttons.

[Range buttons](./toolbar/) are also available.

## Chart types

Choose from a variety of financial chart types to visualise your data.

{% imageCaption pageName="financial-charts" imageName="chart-types.gif" alt="Chart Types" constrained=true/%}

Available series types are:

-   [Candlestick](./candlestick-series/) (default)
-   [Hollow Candlestick](./candlestick-series/#customisation)
-   [OHLC](./ohlc-series/)
-   [Line](./line-series/)
-   [Step Line](./line/#line)
-   [Range Area](./range-area-series/)
