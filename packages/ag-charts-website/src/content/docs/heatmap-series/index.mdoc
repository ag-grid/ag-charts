---
title: 'Heatmap Series'
enterprise: true
---

A Heatmap Series is using the colour-coding to represent numeric values in a form of a colourful matrix.

## Simple Heatmap

To plot a basic `heatmap` we need an array of data, where every item will have 2 category values and a single numeric value.

```js
series: [
    {
        type: 'heatmap',
        xKey: 'month',
        yKey: 'year',
        colorKey: 'temperature',
    },
],
```

In this configuration:

- `xKey` is set to 'month', which is the category for the X Axis.
- `yKey` is set to 'year', which is the category for the Y Axis.
- `colorKey` supplies numerical values for the Colour Scale (set to 'temperature' in this example).

The corresponding sample data looks like:

```js
data: [
    { year: '2010', month: 'January', temperature: 1.2 },
    { year: '2010', month: 'February', temperature: 1.9 },
],
```

The following example shows a simple Heatmap Series using default options.

{% chartExampleRunner title="Simple Heatmap" name="simple-heatmap" type="generated" options="{ \"enterprise\": true }" /%}

## Customisation

### Colour Range

Series items colours can be customised via the `colorRange` configuration array.

```js
series: [
    {
        type: 'heatmap',
        xKey: 'month',
        yKey: 'year',
        colorKey: 'temperature',
        colorRange: [
            '#4A90E2',
            '#FF6B6B',
        ],
    },
],
```

The example below demonstrates Colour Range customisations.

{% chartExampleRunner title="Customising Colour Range" name="customising-color-range" type="generated" options="{ \"enterprise\": true }" /%}

Colour Range can also have more than 2 values.

```js
series: [
    {
        type: 'heatmap',
        xKey: 'month',
        yKey: 'year',
        colorKey: 'temperature',
        colorRange: [
            '#4A90E2',
            '#FF6B6B',
            '#00FF6B',
            '#00FFFF',
        ],
    },
],
```

{% chartExampleRunner title="Colour Range With Many Values" name="color-range-with-many-values" type="generated" options="{ \"enterprise\": true }" /%}

### Colour Domain

The `colorDomain` property can help with a better mapping of colours and numeric values. By default the Colour Domain is automatically calculated based on minimal and maximal values from the data. Supplying values for Colour Domain will define the miminum and maximum numeric values that will map to the first and the last colours from the `colorRange`.

```js
series: [
    {
        type: 'heatmap',
        xKey: 'month',
        yKey: 'year',
        colorKey: 'temperature',
        colorRange: [
            '#4A90E2',
            '#FF6B6B',
        ],
        colorDomain: [
            0,
            20,
        ],
    },
],
```

{% chartExampleRunner title="Customising Colour Domain" name="customising-color-domain" type="generated" options="{ \"enterprise\": true }" /%}

Supplying 3 and more values to `colorDomain` will create a non-linear gradient.

```js
series: [
    {
        type: 'heatmap',
        xKey: 'month',
        yKey: 'year',
        colorKey: 'temperature',
        colorRange: [
            '#4A90E2',
            '#777777',
            '#FF6B6B',
        ],
        colorDomain: [
            -10,
            0,
            20,
        ],
    },
],
```

{% chartExampleRunner title="Colour Domain With Many Values" name="color-domain-with-many-values" type="generated" options="{ \"enterprise\": true }" /%}

{% note %}
When 3 or more values are supplied for the Colour Domain, the number of colours in the Colour Range should be exactly the same.
{% /note %}

## Gradient Legend

The Gradient Legend helps for better understanding of colour coding of the Heatmap Series. In order to add a Gradient Legend, `gradientLegend.enabled = true` should be added to the root of the chart options.

```js
series: [
    {
        type: 'heatmap',
        xKey: 'month',
        yKey: 'year',
        colorKey: 'temperature',
    },
],
gradientLegend: {
    enabled: true,
},
```

{% chartExampleRunner title="Gradient Legend" name="gradient-legend" type="generated" options="{ \"enterprise\": true }" /%}

### Position

By default the Gradient Legend is placed at the bottom of the chart. But it can be positioned to the side using the `position` config:

```js
gradientLegend: {
    enabled: true,
    position: 'right',
},
```

{% chartExampleRunner title="Gradient Legend Position" name="gradient-legend-position" type="generated" options="{ \"enterprise\": true }" /%}

### Controlling The Size of The Legend

There are a few options to control the size of the bar on the Gradient Legend.

```js
gradientLegend: {
    enabled: true,
    gradient: {
        thickness: 50,
        preferredLength: 400,
    },
},
```

- `thickness` controls the thickness (or width) of the gradient bar.
- `preferredLength` sets the initial length of the bar. It is called *preferred*, because if the Legend or it's labels appear outside of the chart, the bar will shrink.

{% chartExampleRunner title="Gradient Legend Size" name="gradient-legend-size" type="generated" options="{ \"enterprise\": true }" /%}

### Labels

There are a number of configs that affect font, colour and padding of the labels.

```js
gradientLegend: {
    enabled: true,
    stop: {
        label: {
            fontSize: 20,
            fontStyle: 'italic',
            fontWeight: 'bold',
            fontFamily: 'serif',
            color: 'red',
        },
        padding: 20,
    },
},
```

{% chartExampleRunner title="Gradient Legend Labels" name="gradient-legend-labels" type="generated" options="{ \"enterprise\": true }" /%}

## API Reference

{% interfaceDocumentation interfaceName="AgHeatmapSeriesOptions" config="{ \"showSnippets\": false }" /%}
