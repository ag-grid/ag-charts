---
title: 'Map Topology'
---

All Map Series support using GeoJSON for topology data.

[GeoJSON](https://geojson.org) is an industry-standard specification for representing geographic shapes, lines, and points. A GeoJSON file will contain a list of features, detailed below.

### Feature

Each feature with contains some geographic data (geometry) and a table of properties. There are seven geographic geometry types, each listed below.

| Type                            | Usage                                                                        | Series                                                           |
| ------------------------------- | ---------------------------------------------------------------------------- | ---------------------------------------------------------------- |
| `Polygon`, `MultiPolygon`       | Geographic areas. E.g. the border of the United Kingdom and all its islands. | [Map Shape Series](./map-shapes/)                                |
| `LineString`, `MultiLineString` | Routes and connections. E.g. flight paths, roads, or rivers.                 | [Map Line Series](./map-lines/)                                  |
| `Point`, `MultiPoint`           | Markers and points of interest. E.g. City centres, building locations.       | [Map Marker Series](./map-markers/)                              |
| `GeometryCollection`            | A collection of one or more feature types. Uncommon to encounter.            | Choose the series type for the feature types you wish to render. |

The properties of a feature is represented as a JSON object. While there's is no standard for which properties are included, they usually contain the name of the feature - and it's ususally called `name`.

```json
"properties": {
    "name": "United Kingdom",
    "code": "GB"
}
```

## Connecting Data

When using a Map Series that depends on topology, you provide both the topology and the data you want to visualise. Each item in the data must contain a value that is used to find its associated geometry.

```js
[
    { id: 'United Kingdom', population: 67330000 },
    { id: 'France', population: 67500000 },
    // ...
];
```

In the series definition must contain an `idKey` to extract values from the data and a `topologyIdKey` to extract values from the feature properties.

```js
{
    type: 'map-shape',
    idKey: 'id',
    topologyIdKey: 'name'
}
```

In this example, the first item will have a value of `United Kingdom`, and will look up a feature with `properties.name` equal to that.

Data items should always have a matching feature, and will log a warning to the console if they don't. Features that don't correspond to a data item are ignored without a warning.

## Useful Resources

-   [Map Shaper](https://mapshaper.org) - can simplify maps to reduce their filesize, convert other formats to GeoJSON, and has a command line to manipulate geographic data
-   [GeoJSON.io](https://geojson.io/) - draw shapes on a map and export GeoJSON
-   [GeoJSON Lint](https://geojsonlint.com) - validates GeoJSON
