---
title: 'Bar and Column Series'
---

A Bar Series visualises numerical data with proportional bars that can be grouped or stacked, and displayed in either
vertical or horizontal layouts.

## Simple Bar

By default, multiple bar series are grouped, enabling side-by-side comparison of various data sets in the same category.
To create a Bar Series, use the `bar` series type.

```js
series: [
    { type: 'bar', xKey: 'quarter', yKey: 'iphone', yName: 'iPhone' },
    { type: 'bar', xKey: 'quarter', yKey: 'mac', yName: 'Mac' },
    { type: 'bar', xKey: 'quarter', yKey: 'ipad', yName: 'iPad' },
    { type: 'bar', xKey: 'quarter', yKey: 'wearables', yName: 'Wearables' },
    { type: 'bar', xKey: 'quarter', yKey: 'services', yName: 'Services' },
];
```

In this configuration:

-   `xKey` defines the categories, and is mapped to the [Category Axis](/charts-axes-types/#category).
-   `yKey` provides the numerical values, corresponding to the [Number Axis](/charts-axes-types/#number).
-   `yName` configures display names, reflected in [Tooltip Headers](/tooltips) and [Legend Items](/legend).

{% chartExampleRunner title="Simple Bar" name="simple-bar" type="generated" /%}

## Stacked Bars

Stacked bars are useful for visualising data in a cumulative manner across different categories. To stack bars enable
the `stacked` series option.

```js
series: [
    { type: 'bar', xKey: 'quarter', yKey: 'iphone', stacked: true },
    { type: 'bar', xKey: 'quarter', yKey: 'mac', stacked: true },
    { type: 'bar', xKey: 'quarter', yKey: 'ipad', stacked: true },
    { type: 'bar', xKey: 'quarter', yKey: 'wearables', stacked: true },
    { type: 'bar', xKey: 'quarter', yKey: 'services', stacked: true },
];
```

{% chartExampleRunner title="Stacked Bars" name="stacked-bars" type="generated" /%}

## Grouped Stacks

The `stackGroup` property allows for stacking bars in distinct sets by specifying which series are grouped together.
Series with an unspecified `stackGroup` will be stacked together by default.

```js
series: [
    { type: 'bar', xKey: 'quarter', yKey: 'iphone', stackGroup: 'Devices' },
    { type: 'bar', xKey: 'quarter', yKey: 'mac', stackGroup: 'Devices' },
    { type: 'bar', xKey: 'quarter', yKey: 'ipad', stackGroup: 'Devices' },
    { type: 'bar', xKey: 'quarter', yKey: 'wearables' },
    { type: 'bar', xKey: 'quarter', yKey: 'services' },
];
```

{% chartExampleRunner title="Grouped Stack Series" name="grouped-stack" type="generated" /%}

## Grouped Stacks with a Shared Legend

Providing a matching `legendItemName` allows us to create multiple bar series that have synchronised legend items. When a legend item is clicked, all items that have a matching `legendItemName` will be toggled together.

{% chartExampleRunner title="Grouped Stacks with a Shared Legend" name="grouped-stack-shared" type="generated" /%}

## Normalized Columns

Going back to our [stacked column](#stacked-columns) example, if we wanted to normalize the totals so that each column's segments add up to a certain value, for example 100, we could add the following to our `series` config:

```js
normalizedTo: 100;
```

{% note %}
It's possible to use any non-zero value to normalize to.
{% /note %}

{% chartExampleRunner title="Normalized Column Series" name="normalized-column" type="generated" /%}

## Column Labels

It's possible to add labels to columns, by adding the following to the series config:

```js
label: {
}
```

That's it. The config can be empty like that. However, you might want to customise your labels. For example, by default the values are rounded to two decimal places for the labels, but in the example below even that is too much, so we use a label formatter that simply returns the integer part of the number:

```js
label: {
    formatter: function (params) {
        // if the data contains values that are not valid numbers,
        // the formatter's `value` will be `undefined`
        return params.value === undefined ? '' : params.value.toFixed(0);
    }
}
```

The above formatter produces an attractive chart where the labels don't stick out of their columns:

{% chartExampleRunner title="Column Series with Labels" name="labeled-column" type="generated" /%}

{% note %}
It's best to avoid using labels with grouped columns (or bars), because columns in grouped mode tend to be narrow and often won't fit a label.
{% /note %}

To learn more about label configuration please refer to the [API reference](#reference-AgBarSeriesOptions-label) below.

## Bar Series

`'bar'` series configuration is similar to the `'bar'` series configuration and all the same modes (stacked, grouped, normalized) apply to bars just as they do to columns.

To create a bar chart all you need to do is use `type: 'bar'` instead of `type: 'bar'` in the `series` options.

```js
series: [{
    type: 'bar',
    xKey: 'quarter',
    yKey: 'iphone',
    ...
}]
```

With this simple change we go from [stacked columns](#stacked-columns) to stacked bars:

{% chartExampleRunner title="Stacked Bar Series" name="stacked-bar" type="generated" /%}

## API Reference

### Bar Series

{% interfaceDocumentation interfaceName="AgBarSeriesOptions" config="{ \"showSnippets\": false }" /%}
