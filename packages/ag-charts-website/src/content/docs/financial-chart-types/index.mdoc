---
title: 'Financial Charts Types'
enterprise: true
---

Financial Charts can display the data using a variety of series types.

## Creating a Financial Chart

Creating a financial chart could not be easier. The minimum configuration requires only an HTML container and data.
The data should include keys of 'open', 'high', 'low', 'close' and optionally 'volume'.

{% if isFramework("javascript") %}

```js
// Chart Options
const options = {
    // HTML Element to hold the chart
    container: document.getElementById('myChart'),
    // data
    data: getData(),
};

// Create Chart
const chart = AgCharts.createFinancialChart(options);
```

{% /if %}

{% if isFramework("react") %}

```jsx
import React, { useState } from 'react';
import { createRoot } from 'react-dom/client';
import { AgFinancialCharts } from 'ag-charts-react';
import { AgFinancialChartOptions } from 'ag-charts-enterprise';
import { getData } from './data';
import 'ag-charts-enterprise';

// React Chart Component
const ChartExample = () => {
  // Chart Options: Control & configure the chart
  const [options, setOptions] = useState({
    // data
    data: getData(),
  });

  return (
    // AgFinancialCharts component with options passed as prop
    <AgFinancialCharts options={options} />
  );
};

// Render component inside root element
const root = createRoot(document.getElementById('root'));
root.render(<ChartExample />);

```

{% /if %}

{% if isFramework("angular") %}

```js
import { Component } from '@angular/core';
import { AgFinancialCharts } from 'ag-charts-angular';
import { AgFinancialChartOptions } from 'ag-charts-enterprise';
import { getData } from './data';
import 'ag-charts-enterprise';

// Angular Chart Component
@Component({
  selector: 'app-root',
  standalone: true,
  imports: [AgFinancialCharts],
  // ag-charts-angular component with chartOptions attribute
  template: `<ag-financial-charts
    [options]="options"
    class="chart"
  ></ag-financial-charts>`,
})
export class AppComponent {
  // Chart Options
  public options: AgFinancialChartOptions;
  constructor() {
    this.options = {
      // Data: Data to be displayed in the chart
      data: getData(),
    };
  }
}
```

{% /if %}

{% if isFramework("vue") %}

```js
import { createApp } from 'vue';

import 'ag-charts-enterprise';
import { AgFinancialCharts } from 'ag-charts-vue3';

const ChartExample = {
    template: `
      <ag-financial-charts
        :options="options"
        class="chart"
      />
  `,
    components: {
        'ag-financial-charts': AgFinancialCharts,
    },
    data() {
        return {
            options: {
                data: getData(),
            },
        };
    },
};

createApp(ChartExample).mount('#app');
```

{% /if %}

## Setting the Chart Type

By default, the price data is displayed in a candlestick series. To change this, use the `type` property.

{% chartExampleRunner title="Basic Financial Chart" name="switching-chart-types" type="generated" /%}

## Toggling Features

Each of the financial charts components can be toggled on or off in the options.

{% chartExampleRunner title="Toggling Features" name="toggle-financial-features" type="generated" /%}

## Customisation

{% chartExampleRunner title="Customised Financial Chart" name="customization" type="generated" /%}

Change the colour of the shown series by using the `up` and `down` options.

For additional customisation, use [Theme Override Options](/themes-api/) in the `theme` option.
The financial charts use the `ag-financial` and `ag-financial-dark` themes.

## API Reference

{% tabs %}

{% tabItem id="AgFinancialChartOptions" label="Options" %}
{% apiReference id="AgFinancialChartOptions" /%}
{% /tabItem %}

{% /tabs %}
