---
title: 'Treemap Series'
enterprise: true
---

A Treemap Series is used to render hierarchical data structures or trees. Each node in the
tree is represented by a rectangle, with the area of the rectangle representing the value.

## Simple Treemap

{% chartExampleRunner title="Simple Treemap" name="simple-treemap" type="generated" /%}

The Treemap Series is designed to display a single series and is created using the `treemap` series type.

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
    },
];
```

The data passed in should be an array of nodes, with each node optionally containing children.

```js
let data = [
    {
        title: 'Pensions',
        children: [
            { title: 'Sickness and disability', total: 61.2, change: 8.7 },
            { title: 'Old age', total: 141.8, change: 17.9 },
            { title: 'Survivors', total: 1.4, change: 0 },
        ],
    },
    {
        title: 'Health Care',
        // ...
    },
    // ...
];
```

The `labelKey` defines what will appear as the title for each tile.

{% note %}
Legend toggling is disabled in Treemap Series.
{% /note %}

## Sizing

By default, each leaf node's rectangle will have approximately the same area.

However, the treemap is best suited to providing size values to provide relative sizing between these rectangles.

{% chartExampleRunner title="Custom Sizing" name="sizing" type="generated" /%}

The `sizeKey` can be used to provide a numeric value to adjust the relative sizing.

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
        sizeKey: 'size',
        // ...
    },
];
```

Only the sizes of leaf nodes will be accounted for when computing the relative sizes. When sizes are used, the nodes will be re-ordered so larger nodes appear towards the top left corner.

## Colour Scales

Tiles can also be coloured using a scale. This lets you add an extra dimension of information to your chart.

{% chartExampleRunner title="Custom Colour Scale" name="color-scale" type="generated" /%}

Colouring can be customised by the `colorKey` and `colorRange` values in the series options.

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
        sizeKey: 'size',
        colorKey: 'change',
        colorRange: ['rgb(63, 145, 79)', 'rgb(253, 149, 63)'],
        // ...
    },
],
```

In this configuration:

-   `colorKey` supplies numeric values for the colour scale
-   `colorRange` supplies the colours for the colour scale (optional)

## Other Colours

It's possible to override the default colours, or the colours on a group or tile basis.

{% chartExampleRunner title="Other Colours" name="other-colors" type="generated" /%}

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
        sizeKey: 'total',
        fills: [
            '#FF3D00',
            '#FF9100',
            '#FFC400',
            '#FFEA00',
            '#C6FF00',
            '#76FF03',
            '#00E676',
            '#1DE9B6',
            '#00E5FF',
            '#00B0FF',
        ],
        strokes: [
            '#FF6E40',
            '#FFAB40',
            '#FFD740',
            '#FFFF00',
            '#EEFF41',
            '#B2FF59',
            '#69F0AE',
            '#64FFDA',
            '#18FFFF',
            '#40C4FF',
        ],
        // ...
    },
];
```

In this configuration:

-   `fills` and `strokes` are an array of colours to use for the fills and strokes, where node receives the colour indexed by the index of its root node
    -   Note when a `colorRange` is used, the `strokes` array is ignored, and a translucent black is used instead

## Labels

Both the labels for leaf and non-leaf nodes can be customised.

For leaf nodes only, they can contain secondary labels, and their labels can also be shrunk to fit in the available space.

{% chartExampleRunner title="Custom Labels" name="labels" type="generated" /%}

Labels can be customised through the `group` and `tile` properties for non-leaf nodes and leaf nodes, respectively.

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
        secondaryLabelKey: 'size',
        sizeKey: 'total',
        group: {
            label: {
                fontSize: 18,
                spacing: 2,
            },
        },
        tile: {
            label: {
                fontSize: 32,
                minimumFontSize: 18,
                spacing: 12,
            },
            secondaryLabel: {
                formatter: (params) => formatSize(params.datum),
            },
        },
        // ...
    },
];
```

In this configuration:

-   `fontSize` sets the size of the font
-   `minimumFontSize` will enable the font size to shrink down to the given value if there is not enough space (tiles only)
-   `spacing` controls the amount of space below a label
-   `padding` adds space between the edge of a group or tile and its contents
-   `formatter` allows customising the value of a label using a function

## Layout

Various spacing values can be adjusted to tweak the layout of the chart.

{% chartExampleRunner title="Custom Layout" name="layout" type="generated" /%}

```js
series: [
    {
        type: 'treemap',
        labelKey: 'title',
        sizeKey: 'total',
        group: {
            padding: 12,
            gap: 5,
        },
        tile: {
            padding: 10,
            gap: 2,
        },
        // ...
    },
],
```

In this configuration:

-   `group.padding` adjusts the padding between the edge of the group, its title, and the inner nodes
-   `group.gap` adjusts the gap between adjacent tiles where one or more nodes in the parent node are group nodes
-   `tile.padding` adjusts the padding between the edge of the tile and its labels
-   `tile.gap` adjusts the gap between adjacent tiles where all nodes in the parent node are leaf nodes

{% note %}
The default tile gap is set to `-1` so the borders overlap.
{% /note %}

## API Reference

{% tabs %}

{% tabItem id="AgTreemapSeriesOptions" label="Treemap Series" %}
{% apiReference id="AgTreemapSeriesOptions" /%}
{% /tabItem %}

{% /tabs %}
