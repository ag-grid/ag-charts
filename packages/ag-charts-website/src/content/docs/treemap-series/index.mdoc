---
title: 'Treemap Series'
enterprise: true
---

A Treemap Series is used to render hierarchical data structures or trees. Each node in the
tree is represented by a rectangle, with the area of the rectangle representing the value.

<!--
The bigger the value, the bigger the rectangle is relative to its siblings. Parent nodes
are represented by rectangles with areas that are the totals of their children.

If the nodes have no value, then their area is divided equally among siblings within their parent node.

The Treemap Series uses a popular "squarified" tiling algorithm which tries to keep
each node's rectangle as square as possible.
-->

## Simple Treemap

{% chartExampleRunner title="Simple Treemap" name="simple-treemap" type="generated" /%}

The Treemap Series is designed to display a single series and is created using the `treemap` series type.

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
    },
];
```

The data passed in should be an array of nodes, with each node optionally containing children.

```js
let data = [
    {
        name: 'Mariah Vaughan',
        children: [
            {
                name: 'Bushra Thomas',
                children: [
                    { name: 'Cyrus Henderson' },
                    { name: 'Dora Jordan' },
                    { name: 'Skyla Downs' },
                    { name: "Elissa O'Sullivan" },
                ],
            },
        ],
        // ...
    },
    {
        name: 'Nathanael Villa',
        // ...
    },
];
```

The `labelKey` defines what will appear as the title for each tile.

{% note %}
Legend toggling is disabled in Treemap Series.
{% /note %}

## Sizing

By default, each leaf node's rectangle will have approximately the same area.

However, the treemap is best suited to providing size values to provide relative sizing between these rectangles.

{% chartExampleRunner title="Custom Sizing" name="sizing" type="generated" /%}

The `sizeKey` can be used to provide a numeric value to adjust the relative sizing.

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
        sizeKey: 'size',
    },
];
```

Only the sizes of leaf nodes will be accounted for when computing the relative sizes. When sizes are used, the nodes will be re-ordered so larger nodes appear towards the top left corner.

## Colour Scales

Tiles can also be coloured using a scale. This lets you add an extra dimension of information to your chart.

{% chartExampleRunner title="Custom Colour Scale" name="color-scale" type="generated" /%}

Colouring can be customised by the `colorKey` and `colorRange` values in the series options.

```j
series: [
    {
        type: 'treemap',
        labelKey: 'name',
        sizeKey: 'size',
        colorKey: 'numberFiles',
        colorRange: ['rgb(63, 145, 79)', 'rgb(253, 149, 63)'],
    },
],
```

In this configuration:

-   `colorKey` supplies numeric values for the colour scale
-   `colorRange` supplies the colours for the colour scale (optional)

## Other Colours

It's possible to override the default colours, or the colours on a group or tile basis.

{% chartExampleRunner title="Other Colours" name="other-colors" type="generated" /%}

```js
series: [
    {
        type: 'treemap',
        colorRange: ['rgb(63, 145, 79)', 'rgb(253, 149, 63)'],
        fills: ['#455A64'],
        group: {
            stroke: '#37474F',
        },
    },
];
```

In this configuration:

-   `fills` and `strokes` are an array of colours to use for the fills and strokes, where node receives the colour indexed by the index of its root node
    -   Note when a `colorRange` is used, the `strokes` array is ignored, and a translucent black is used instead
-   `group.stroke` overrides the stroke colour

## Labels

Both the labels for leaf and non-leaf nodes can be customised.

For leaf nodes only, they can contain secondary labels, and their labels can also be shrunk to fit in the available space.

{% chartExampleRunner title="Custom Labels" name="labels" type="generated" /%}

Labels can be customised through the `group` and `tile` properties for non-leaf nodes and leaf nodes, respectively.

```js
series: [
    {
        type: 'treemap',
        labelKey: 'name',
        secondaryLabelKey: 'size',
        group: {
            label: {
                fontSize: 18,
                spacing: 2,
            },
            padding: 5,
        },
        tile: {
            label: {
                fontSize: 32,
                minimumFontSize: 18,
                spacing: 12,
            },
            secondaryLabel: {
                formatter: (params) => formatSize(params.datum),
            },
            padding: 10,
        },
    },
];
```

In this configuration:

-   `fontSize` sets the size of the font
-   `minimumFontSize` will enable the font size to shrink down to the given value if there is not enough space (tiles only)
-   `spacing` controls the amount of space below a label
-   `padding` adds space between the edge of a group or tile and its contents
-   `formatter` allows customising the value of a label using a function

## Layout

Various spacing values can be adjusted to tweak the layout of the chart.

{% chartExampleRunner title="Custom Layout" name="layout" type="generated" /%}

```js
series: [
    {
        type: 'treemap',
        group: {
            padding: 10,
        },
        tile: {
            padding: 10,
        },
        tileSpacing: 5,
    },
],
```

In this configuration:

-   `group.padding` adjusts the padding between the edge of the group, its title, and the inner nodes
-   `tile.padding` adjusts the padding between the edge of the tile and its labels
-   `tileSpacing` adjusts the space between groups and tiles

## API Reference

{% tabs %}

{% tabItem id="AgTreemapSeriesOptions" label="Treemap Series" %}
{% apiReference id="AgTreemapSeriesOptions" /%}
{% /tabItem %}

{% /tabs %}
