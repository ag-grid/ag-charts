---
title: 'Treemap Series'
enterprise: true
---

A Treemap Series is used to render hierarchical data structures or trees. Each node in the
tree is represented by a rectangle, with the area of the rectangle representing the value.

The bigger the value, the bigger the rectangle is relative to its siblings. Parent nodes
are represented by rectangles with areas that are the totals of their children.

If the nodes have no value, then their area is divided equally among siblings within their parent node.

The Treemap Series uses a popular "squarified" tiling algorithm which tries to keep
each node's rectangle as square as possible.

## Simple Treemap

### Data

A Treemap Series requires hierarchical data in a tree structure where parent nodes use the `children` property to list their children:

```js
let data = {
    label: 'Root',
    children: [
        {
            label: 'Utilities',
            children: [{
                label: 'AWK',
                size: 252
            }]
        },
        ...
    ]
}
```

### Configuration

A basic Treemap configuration would look like this:

```js
data, // the root node of the hierarchy
series: [{
    type: 'treemap',
    labelKey: 'label', // the name of the key to fetch the label value from
    sizeKey: 'size',   // the name of the key to fetch the value that will determine tile size
    colorKey: 'color', // the name of the key to fetch the value that will determine tile color
}]

```

Notice, that only the leaf nodes of a tree are required to have the `sizeKey` property.
The size of the parent nodes will be automatically determined.

{% chartExampleRunner title="Stock Market Index" name="stock-market-index" type="generated" /%}
Feel free to open this example in Plunker to enlarge the size of the component and notice how the Treemap reveals more data as it grows bigger.

## Colours

### Tile Colours

There are several ways to customise the colours of the Treemap tiles.

Use `colorKey` to point to the data field containing the colour. This colour will be used for the specific node.

```js
series: [
    {
        type: 'treemap',
        colorKey: 'color',
        data: [
            {
                children: [{ color: 'red' }, { color: '#fa5310' }],
            },
        ],
    },
];
```

`colorKey` can also specify a property containing a numeric value.
In this case the `colorDomain` and `colorRange` should be provided.

The colours in the `colourRange` will be interpolated into a gradient between the values provided in the `colorDomain`.

```js
series: [
    {
        type: 'treemap',
        colorKey: 'color',
        colorRange: ['red', 'yellow', 'green'],
        data: [
            {
                children: [{ color: 5 }, { color: 8 }, { color: 12 }],
            },
        ],
    },
];
```

### Group colours

The colour for the groups can be specified in `groupFill` property.
If `groupFill` is `undefined`, the group colour behaviour will match the one for tiles, using the `colorKey` value specified on the group node.

```js
series: [{
    type: 'treemap',
    colorKey: 'color',
    groupFill: 'black',
    ...
    groupFill: undefined,
    data: [{
        color: 'black',
        children: [
            { color: 'white' },
            { color: 'red' },
            { color: 'white' },
        ],
    }],
}]
```

## Strokes

There are several properties to control the tiles' and groups' stroke colors and widths.

```js
series: [
    {
        type: 'treemap',
        tileStroke: 'black',
        tileStrokeWidth: 2,
        groupStroke: 'transparent',
        groupStrokeWidth: 0,
    },
];
```

## Labels

### Tiles

Since tiles can have different sizes depending on layout,
there are `large`, `medium` and `small` label options to customise a specific sized label.
There is also a `value` option that applies to all labels.
The styles for all of them can be specified like:

```js
series: [
    {
        type: 'treemap',
        labels: {
            large: {
                color: 'black',
                fontWeight: 'bold',
            },
            medium: {
                color: 'black',
            },
            small: {
                color: 'gray',
                fontSize: 8,
            },
            value: {
                formatter: ({ datum }) => `${datum.size * 100}%`,
                style: {
                    color: 'orange',
                },
            },
        },
    },
];
```

### Groups

In addition the groups' titles can have their own styles:

```js
series: [
    {
        type: 'treemap',
        title: {
            color: 'black',
            fontWeight: 'bold',
        },
        subtitle: {
            color: 'black',
            fontSize: 8,
        },
    },
];
```

### Formatters

Use `formatter` function to change a colour for specific tiles.

```js
series: [
    {
        formatter: ({ datum, depth, labelKey, highlighted }) => {
            if (datum[labelKey] === 'Joel Cooper') {
                return { fill: highlighted ? 'white' : 'orchid' };
            }
        },
    },
];
```

Please see the API reference for more information.

{% chartExampleRunner title="Complex Colouring Chart" name="custom-colors" type="generated" /%}

## Tooltips

With no `tooltip` or `series[].tooltip` configuration, tooltip content will be taken from series
values:

-   `series[].labelKey` will be displayed as tooltip title.
-   `series[].labels.value.name` will be displayed as tooltip content.
-   `series[].labels.value.key` will be displayed as additional tooltip content with a `: ` prefix to separate it from the previous content.
-   `series[].labels.value.formatter` allows formatting of the additional tooltip content.

For more advanced configuration see the [Tooltips](../tooltips/) section.

## Padding

There are some properties to control the spacing of treemap tiles:

-   `nodeGap` controls the gap between the treemap tiles. This is the space between the sibling tiles within their parent.
-   `nodePadding` controls the padding of the inner content of treemap tiles. This is the space between the border of each tile and the contained labels and tiles.

```js
series: [{
    ...
    nodeGap: 10,
    nodePadding: 20,
}]
```

{% chartExampleRunner title="Tile Padding" name="tile-padding" type="generated" /%}

## Organisation Chart

Although not very common, the Treemap Series can be used to show the hierarchy without emphasizing size.
In such a case, you can set the `sizeKey` to `undefined`. This will make all sibling tiles within
the same parent have the same area (but not necessarily the same shape).

The org chart example below takes advantage of that by using the following config:

```js
series: [
    {
        type: 'treemap',
        labelKey: 'orgHierarchy',
        sizeKey: undefined, // make all siblings within a parent the same size
        colorKey: undefined, // use node depth value to determine the tile color
        groupFill: 'black', // the color of group tiles, retrieved from data if `undefined`
        colorRange: ['red', 'green', 'blue'], // tiles with a depth of 1 will be a blend of 'red' and 'green'

        // change the color of a particular tile
        formatter: ({ datum, labelKey, highlighted }) => {
            if (datum[labelKey] === 'Joel Cooper') {
                return { fill: highlighted ? 'white' : 'orchid' };
            }
        },
    },
];
```

{% chartExampleRunner title="Organizational Chart" name="org-chart" type="generated" /%}

## API Reference

{% tabs %}

{% tabItem id="AgTreemapSeriesOptions" label="Treemap Series" %}
{% apiReference id="AgTreemapSeriesOptions" /%}
{% /tabItem %}

{% /tabs %}
