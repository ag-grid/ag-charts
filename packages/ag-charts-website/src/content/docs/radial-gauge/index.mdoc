---
title: 'Radial Gauge'
---

A Radial Gauge presents a single data point within a predefined range. It employs a segment overlaid with either a bar or needle.

## Simple Radial Gauge

{% chartExampleRunner title="Simple Radial Gauge" name="simple-radial-gauge" type="generated" options={ "exampleHeight": 250 } /%}

To create a Radial Gauge, use the `createGauge` API using the type `radial-gauge`.

```js
const radialGauge = createGauge({
    type: 'radial-gauge',
    container: document.getElementById('myChart'),
    value: 80,
    scale: {
        min: 0,
        max: 100,
    },
});
```

In this configuration:

-   `value` is the value displayed by the gauge.
-   `scale.min` defines the minimum value displayable by the gauge.
-   `scale.max` defines the minimum value displayable by the gauge.

## Labels

Labels are used to show the current value of the gauge, or any other information to provide context.

{% chartExampleRunner title="Labels" name="labels" type="generated" options={ "exampleHeight": 250 } /%}

The scale labels can be configured with the `label` property within the `scale` configuration. Additionally. up to two inner labels can be configured with the `label` and `secondaryLabel` properties.

```js
{
    scale: {
        label: {
            enabled: false,
        },
    },
    label: {
        formatter({ value }) {
            return `${value.toFixed(0)}%`;
        },
    },
    secondaryLabel: {
        text: 'Test Score',
    },
}
```

In this configuration:

-   `enabled` provides the ability to remove labels.
-   `formatter` takes the current value as a number and returns a formatted value as a string.
-   `text` provides an explicit value for the label. Only available for inner labels.

## Radial Angles

{% chartExampleRunner title="Angles" name="angles" type="generated" options={ "exampleHeight": 300 } /%}

The `startAngle` and `endAngle` properties can be used to customise the position of the start and end of the gauge.

```js
{
    startAngle: 225,
    endAngle: 495,
}
```

In this configuration:-

-   `startAngle` is the number of degrees from 12 o'clock to start the gauge.
-   `endAngle` must be greater than `startAngle`.

## Needle

Needles can be used to indicate the value instead of the bar.

{% chartExampleRunner title="Needle" name="needle" type="generated" options={ "exampleHeight": 350 } /%}

A needle can be added to the gauge with the `needle` configuration.

When adding needles, it is common to disable the bar. This can be done with the `bar` configuration. When the bar is hidden, the colour stops are applied to the full range.

```js
{
    needle: {
        enabled: true,
    },
    bar: {
        enabled: false,
    },
}
```

## Targets

Targets indicate points on the gauge other than the current value.

{% chartExampleRunner title="Targets" name="targets" type="generated" options={ "exampleHeight": 250 } /%}

Targets can be added using the `targets` configuration array.

```js
{
    targets: [
        {
            value: 70,
            text: 'Average',
        },
    ],
}
```

In this configuration:

-   `value` is the position for the marker.
-   `text` is an optional string of some text accompanying the marker.

### Customisation

{% chartExampleRunner title="Target Customisation" name="custom-targets" type="generated" options={ "exampleHeight": 250 } /%}

```js
{
    targets: [
        {
            value: 30,
            shape: 'triangle',
            placement: 'outside',
            fill: 'white',
            strokeWidth: 2,
            spacing: 8,
        },
        {
            value: 75,
            placement: 'inside',
            shape: 'triangle',
            fill: 'white',
            strokeWidth: 2,
            spacing: 8,
        },
        {
            value: 90,
            placement: 'middle',
            shape: 'circle',
            fill: 'white',
            strokeWidth: 2,
            spacing: 8,
        },
    ],
}
```

-   `shape` is a marker shape.
-   `placement` indicates the relative placement to the gauge - either `inside`, `outside`, or `middle`.
-   `size` is the size of the marker, in pixels
-   `spacing` is spacing from the edge of the gauge to the marker. Ignored when `placement` is `middle`.

## Appearance

{% chartExampleRunner title="Appearance" name="appearance" type="generated" options={ "exampleHeight": 300 } /%}

```js
{
    segmentation: {
        spacing: 2,
    },
}
```

In this configuration:

-   `segments` specifies the number of segments to use for a segmented appearance.
-   `sectorSpacing` defines the spacing between sectors for the `segmented` appearance.

### Colour Scales

The bar is coloured using a scale.

{% chartExampleRunner title="Colour Scales" name="color-scales" type="generated" options={ "exampleHeight": 300 } /%}

The colour scale can be customised using the `colorRange` property.

```js
{
    bar: {
        fills: [{ color: '#E84118' }, { color: '#9C88FF' }, { color: '#00A8FF' }],
        fillMode: 'discrete',
    },
}
```

### Colour Stops

{% chartExampleRunner title="Scale Values" name="scale-values" type="generated" options={ "exampleHeight": 250 } /%}

To show explicit colour stops, use the `scale.values` property in combination with the `colorStops` property.

```js
{
    scale: {
        min: 0,
        max: 100,
    },
    bar: {
        fills: [
            { color: '#E84118', stop: 35 },
            { color: '#FBC531', stop: 45 },
            { color: '#4CD137', stop: 55 },
            { color: '#FBC531', stop: 65 },
            { color: '#E84118' },
        ],
        fillMode: 'discrete',
    },
}
```

In this configuration:

-   `segments` specifies the exact position of the segments to use for a segmented appearance.

{% note %}
To ensure the provided colours are not interpolated, there should be one more colour in the `colourRange` than the total number of `segments`.
{% /note %}

### Corner Radius

{% chartExampleRunner title="Corner Radius" name="corner-radius" type="generated" options={ "exampleHeight": 350 } /%}

The corner radius can be customised with the `cornerRadius` property. This can be used in conjunction with `cornerMode` property to specify which elements have corner radii.

```js
{
    cornerRadius: 99,
    cornerMode: 'container',
}
```

In this configuration:

-   `cornerRadius` specifies the amount of curvature on each corner. It is clamped to the maximum value that will fit.
-   `cornerMode` can be set to `container` to apply rounded corners only to the start and end of the gauge, or `item` for all visual items within the gauge.

## API Reference

{% tabs %}

{% tabItem id="AgRadialGaugeOptions" label="Radial Gauge Options" %}
{% apiReference id="AgRadialGaugeOptions" /%}
{% /tabItem %}

{% /tabs %}
