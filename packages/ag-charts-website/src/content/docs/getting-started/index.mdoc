---
title: 'Get Started with AG Charts'
---

AG Charts is a powerful standalone component with no dependencies. The charts factory API can be used to seamlessly create and update data visualizations independently of the grid.

### Quick Look Code Example

{% if isFramework("javascript") %}
<tabs>

<div tabs-links="true">
<open-in-cta type="plunker" href="https://plnkr.co/edit/4RA1NMI4unVHfRaV?preview" />
</div>

<div tab-label="main.js">
```javascript
const data = [
    {
        beverage: 'Coffee',
        Q1: 700,
        Q2: 600,
        Q3: 560,
        Q4: 450
    },
    {
        beverage: 'Tea',
        Q1: 520,
        Q2: 450,
        Q3: 380,
        Q4: 270
    },
    {
        beverage: 'Milk',
        Q1: 200,
        Q2: 190,
        Q3: 170,
        Q4: 180
    },
];

const options = {
container: document.getElementById('myChart'),
data: data,
title: {
text: 'Beverage Expenses'
},
subtitle: {
text: 'per quarter'
},
footnote: {
text: 'Based on a sample size of 200 respondents'
},
padding: {
top: 40,
right: 40,
bottom: 40,
left: 40
},
series: [
{ type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
{ type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
{ type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
{ type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
],
legend: {
spacing: 40
},
};

agCharts.AgChart.create(options);

````
</div>

<div tab-label="index.html">
```html
<!DOCTYPE html>
<html lang="en">
    <head>
        <title>AG Charts Basic Example</title>
        <script src="https://cdn.jsdelivr.net/npm/ag-charts-community/dist/ag-charts-community.min.js">
        </script>
    </head>
    <body>
        <div id="myChart" style="position: absolute; top: 0; right: 0; bottom: 0; left: 0;"></div>
        <script src="main.js"></script>
    </body>
</html>
````

</div>

</tabs>
{% /if %}

{% if isFramework("react") %}
<tabs>

<div tabs-links="true">
<open-in-cta type="codesandbox" href="https://codesandbox.io/s/ag-charts-react-example-w77z55" />
</div>

<div tab-label="index.js">
```javascript
import React, { Component } from 'react';
import { AgChartsReact } from 'ag-charts-react';

export default class ChartExample extends Component {
data = [
{
beverage: 'Coffee',
Q1: 700,
Q2: 600,
Q3: 560,
Q4: 450
},
{
beverage: 'Tea',
Q1: 520,
Q2: 450,
Q3: 380,
Q4: 270
},
{
beverage: 'Milk',
Q1: 200,
Q2: 190,
Q3: 170,
Q4: 180
},
];

    constructor(props) {
        super(props);

        this.state = {
            options: {
                data: this.data,
                title: { text: 'Beverage Expenses' },
                subtitle: { text: 'per quarter' },
                footnote: { text: 'Based on a sample size of 200 respondents' },
                padding: {
                    top: 40,
                    right: 40,
                    bottom: 40,
                    left: 40,
                },
                series: [
                    { type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
                    { type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
                    { type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
                    { type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
                ],
                legend: { spacing: 40 },
            },
        };
    }

    render() {
        return <AgChartsReact options={this.state.options} />;
    }

}

````
</div>

<div tab-label="index.html">
```html
<div id="root"></div>
````

</div>
</tabs>
{% /if %}

{% if isFramework("angular") %}
<tabs>

<div tabs-links="true">
<open-in-cta type="codesandbox" href="https://codesandbox.io/p/sandbox/ag-charts-example-w87ylv?file=%2Fsrc%2Fapp%2Fapp.component.ts%3A1%2C1" />
</div>

<div tab-label="app.component.ts">
```javascript
import { Component } from '@angular/core';
import { AgChartOptions } from 'ag-charts-community';

@Component({
selector: 'my-app',
templateUrl: './app.component.html'
})
export class AppComponent {
public options: AgChartOptions;

    beverageSpending = [
        {
            beverage: 'Coffee',
            Q1: 450,
            Q2: 560,
            Q3: 600,
            Q4: 700,
        },
        {
            beverage: 'Tea',
            Q1: 270,
            Q2: 380,
            Q3: 450,
            Q4: 520,
        },
        {
            beverage: 'Milk',
            Q1: 180,
            Q2: 170,
            Q3: 190,
            Q4: 200,
        },
    ];
    constructor() {
        this.options = {
            data: this.beverageSpending,
            title: {
                text: 'Beverage Expenses',
            },
            subtitle: {
                text: 'per quarter',
            },
            footnote: {
                text: 'Based on a sample size of 200 respondents',
            },
            series: [
                { type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
                { type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
                { type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
                { type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
            ],
        };
    }

}

````
</div>

<div tab-label="app.module.ts">
```jsx
import { BrowserModule } from '@angular/platform-browser';
import { NgModule } from '@angular/core';
import { AgChartsAngularModule } from 'ag-charts-angular';
import { AppComponent } from './app.component';

@NgModule({
    imports: [
        BrowserModule,
        AgChartsAngularModule
    ],
    declarations: [AppComponent],
    bootstrap: [AppComponent],
})
export class AppModule {
}
````

</div>

<div tab-label="app.component.html">
```html
<ag-charts-angular
    style="position: absolute; top: 0; right: 0; bottom: 0; left: 0;"
    [options]="options">
</ag-charts-angular>
```
</div>

</tabs>
{% /if %}

{% if isFramework("vue") %}
<tabs>

<div tabs-links="true">
<open-in-cta type="codesandbox" href="https://codesandbox.io/s/ag-charts-vue-hello-world-cfoehv" />
</div>

<div tab-label="App.vue">
```html
<template>
   <ag-charts-vue :options="options"></ag-charts-vue>
</template>

<script>
    import { AgChartsVue } from "ag-charts-vue3";

    export default {
        name: 'App',
        components: {
            AgChartsVue,
        },
        data: function () {
            return {
                options: {
                    data: [
                      {
                        beverage: 'Coffee',
                        Q1: 700,
                        Q2: 600,
                        Q3: 560,
                        Q4: 450
                      },
                      {
                        beverage: 'Tea',
                        Q1: 520,
                        Q2: 450,
                        Q3: 380,
                        Q4: 270
                      },
                      {
                        beverage: 'Milk',
                        Q1: 200,
                        Q2: 190,
                        Q3: 170,
                        Q4: 180
                      },
                    ],
                    title: {
                      text: 'Beverage Expenses',
                    },
                    subtitle: {
                      text: 'per quarter',
                    },
                    footnote: {
                      text: 'Based on a sample size of 200 respondents',
                    },
                    padding: {
                      top: 40,
                      right: 40,
                      bottom: 40,
                      left: 40,
                    },
                    series: [
                      { type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
                      { type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
                      { type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
                      { type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
                    ],
                    legend: { spacing: 40 },
                },
            };
        },
    };
</script>

<style>
html,
body {
 margin: 0;
 padding: 0;
 height: 100%;
}
#app {
 font-family: Avenir, Helvetica, Arial, sans-serif;
 -webkit-font-smoothing: antialiased;
 -moz-osx-font-smoothing: grayscale;
 text-align: center;
 color: #2c3e50;
 height: inherit;
}
</style>

````
</div>

<div tab-label="main.js">
```javascript
import { createApp } from 'vue'
import App from './App.vue'

createApp(App).mount('#app')
````

</div>

</tabs>
{% /if %}

## Getting Started

{% if isFramework("javascript") %}
In this article we will walk through the necessary steps to add AG Charts to an existing JavaScript project and produce your first chart.

## Your First Chart

Let's say you want to visualise how much you spend on coffee each quarter and that you have the following data:

```
const data = [
    {
        quarter: 'Q1',
        spending: 700,
    },
    {
        quarter: 'Q2',
        spending: 600,
    },
    {
        quarter: 'Q3',
        spending: 560,
    },
    {
        quarter: 'Q4',
        spending: 450,
    },
];
```

To render it we can use this simple chart factory configuration:

```
agCharts.AgChart.create({
    data: data,
    container: document.getElementById('myChart'),
    series: [{
        xKey: 'quarter',
        yKey: 'spending',
    }],
});
```

Here we pass in the `data` we want to render, the `container` element for the chart (our chart won't be attached to the DOM without it) and the `series` to use to plot the data.

The series `type` defaults to `'line'` so the only series configuration we need to specify is which keys to use to fetch the data to be plotted along the horizontal (x) and vertical (y) axes.

{% /if %}

{% if isFramework("angular") %}
In this article we will walk through the necessary steps to add AG Charts to an existing Angular project and produce your first charts.

## Add AG Charts to Your Project

For the purposes of this tutorial, we are going to scaffold an Angular app with the [Angular CLI](https://cli.angular.io/).

Don't worry if your project has a different configuration - AG Charts and its Angular wrapper are distributed as NPM packages and work with all common Angular project setups.

Let's follow the [Angular CLI instructions](https://github.com/angular/angular-cli#installation) and run the following in your terminal:

```bash
npm install -g @angular/cli
ng new my-app --routing false
cd my-app
ng serve
```

If everything goes well, `ng serve` has started the web server. You can open your app at {% externalLink href="http://localhost:4200" %}localhost:4200{% /externalLink %}.

As a next step, let's add the AG Charts NPM packages. If you are not using the latest version of Angular check the [compatibility table](#compatible-versions) below. Run the following command in `my-app` (you may need a new instance of the terminal):

```bash
npm install --save ag-charts-community ag-charts-angular
npm install # in certain circumstances npm will perform an "auto prune". This step ensures all expected dependencies are present
```

After a few seconds of waiting, you should be good to go. Let's get to the actual coding! As a first step, let's add the AG Charts Angular module to our app module (`src/app/app.module.ts`):

```ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AgChartsAngularModule } from 'ag-charts-angular';

import { AppComponent } from './app.component';

@NgModule({
    imports: [BrowserModule, AgChartsAngularModule],
    declarations: [AppComponent],
    bootstrap: [AppComponent],
})
export class AppModule {}
```

Next, let's declare the basic chart configuration. Edit `src/app.component.ts`:

```ts
import { Component } from '@angular/core';

@Component({
    selector: 'app-root',
    templateUrl: './app.component.html',
})
export class AppComponent {
    public options: any;

    data = [
        {
            quarter: 'Q1',
            spending: 700,
        },
        {
            quarter: 'Q2',
            spending: 600,
        },
        {
            quarter: 'Q3',
            spending: 560,
        },
        {
            quarter: 'Q4',
            spending: 450,
        },
    ];

    constructor() {
        this.options = {
            data: this.data,
            series: [
                {
                    xKey: 'quarter',
                    yKey: 'spending',
                },
            ],
        };
    }
}
```

Here we'll provide the `options` we want to use for our chart, including the `series` to use to plot the data.

The series `type` defaults to `'line'`, so the only series configuration we need to specify is to tell the series which keys to use to fetch the data to be plotted along the horizontal (x) and vertical (y) axes.

Finally, let's add the component definition to our template. Edit `app/app.component.html` and remove the scaffold code:

```html
<ag-charts-angular style="position: absolute; top: 0; right: 0; bottom: 0; left: 0;" [options]="options">
</ag-charts-angular>
```

{% /if %}

{% if isFramework("react") %}
In this article we will walk through the necessary steps to add AG Charts to an existing React project and produce your first charts.

## Add AG Charts to Your Project

For the purposes of this tutorial, we are going to scaffold a React app with [create-react-app](https://github.com/facebook/create-react-app).

Don't worry if your project has a different configuration - AG Charts and the React wrapper are distributed as NPM packages, which should work with any common React project module bundler setup.

Let's follow the [create-react-app instructions](https://github.com/facebook/create-react-app#quick-overview) and run the following commands in your terminal:

```bash
npx create-react-app my-app
cd my-app
npm start
```

If everything goes well, `npm start` has started the web server and conveniently opened a browser pointing to {% externalLink href="http://localhost:3000" %}localhost:3000{% /externalLink %}.

As a next step, let's add the AG Charts NPM packages. Run the following command in `my-app` (you may need a new instance of the terminal):

```bash
npm install --save ag-charts-community ag-charts-react
```

After a few seconds of waiting, you should be good to go. Let's get to the actual coding! Open `src/App.js` in your favourite text editor and change its contents to the following:

```jsx
import React, { Component } from 'react';
import { AgChartsReact } from 'ag-charts-react';

export default class ChartExample extends Component {
    data = [
        {
            quarter: 'Q1',
            spending: 700,
        },
        {
            quarter: 'Q2',
            spending: 600,
        },
        {
            quarter: 'Q3',
            spending: 560,
        },
        {
            quarter: 'Q4',
            spending: 450,
        },
    ];

    constructor(props) {
        super(props);

        this.state = {
            options: {
                data: this.data,
                series: [
                    {
                        xKey: 'quarter',
                        yKey: 'spending',
                    },
                ],
            },
        };
    }

    render() {
        return <AgChartsReact options={this.state.options} />;
    }
}
```

Here we'll provide the `options` we want to use for our chart, including the `series` to use to plot the data.

The series `type` defaults to `'line'` so the only series configuration we need to specify is to tell the series which keys to use to fetch the data to be plotted along the horizontal (x) and vertical (y) axes.

{% /if %}

{% if isFramework("vue") %}
In this article we will walk through the necessary steps to add AG Charts to an existing Vue project and produce your first charts.

## Add AG Charts to Your Project

For the purposes of this tutorial, we are going to scaffold an Vue app with the [Vue CLI](https://cli.vuejs.org/).

Don't worry if your project has a different configuration. AG Charts and its Vue wrapper are distributed as NPM packages and work with any common Vue project setup.

Let's follow the [Vue CLI instructions](https://cli.vuejs.org/) and run the following in your terminal:

```bash
npm install -g @vue/cli
vue create my-project

```

When prompted choose `default (babel, eslint)`:

{% imageCaption pageName="charts-getting-started" imageName="vue-cli-step.png" alt="Select Default Features" maxWidth="40rem" constrained=true /%}

We're now ready to start our application:

```bash
cd my-project
npm run serve

```

If everything goes well, `npm run serve` has started the web server. You can open the default app at {% externalLink href="http://localhost:8080" %}localhost:8080{% /externalLink %}.

Let's add the AG Charts NPM packages. Run the following command in `my-project` (you may need a new instance of the terminal):

```bash
npm install --save ag-charts-community ag-charts-vue3 vue-property-decorator
```

After a few seconds of waiting, you should be good to go. Let's get to the actual coding! As a first step, let's add the AG Charts module. As this will be a simple example we can delete the `src/components` directory. Our example application will live in `src/App.vue`.

Let's add the component definition to our template. Edit `src/App.vue` and replace the scaffold code:

```html
<template>
    <div id="app">
        <ag-charts-vue :options="options"></ag-charts-vue>
    </div>
</template>
```

Next, let's declare the basic charts configuration. Edit `src/App.vue`:

```html
<script>
    import { AgChartsVue } from 'ag-charts-vue3';

    export default {
        name: 'App',
        components: {
            AgChartsVue,
        },
        data() {
            return {
                options: {
                    data: [
                        {
                            quarter: 'Q1',
                            spending: 700,
                        },
                        {
                            quarter: 'Q2',
                            spending: 600,
                        },
                        {
                            quarter: 'Q3',
                            spending: 560,
                        },
                        {
                            quarter: 'Q4',
                            spending: 450,
                        },
                    ],
                    series: [
                        {
                            xKey: 'quarter',
                            yKey: 'spending',
                        },
                    ],
                },
            };
        },
    };
</script>
```

&nbsp;
Here we'll provide the `options` we want to use for our chart, including the `series` to use to plot the data.
&nbsp;
The series `type` defaults to `'line'` so the only series configuration we need to specify is to tell the series which keys to use to fetch the data to be plotted along the horizontal (x) and vertical (y) axes.</p>
{% /if %}

The `series` property is an array because it is possible to supply multiple series (including mixed kinds!) into a single chart.

The default `axes` configuration is a `category` axis on the bottom and `number` axis on the left of a chart, both of which are exactly what we need in this case, so we don't need to supply these here.

## Legend

By default, the chart displays a legend when there is more than one series present. To enable the legend for a chart with a single series, set `legend.enabled` to `true`.

The chart legend uses the `yKey` for the series, which in this case is `'spending'`. This can be renamed using the `yName` property.

{% if isFramework("javascript") %}

```diff
agCharts.AgChart.create({
    data: data,
    container: document.getElementById('myChart'),
    series: [{
        xKey: 'quarter',
        yKey: 'spending',
+        yName: 'Coffee Spending',
    }],
+    legend: {
+        enabled: true,
+    },
});
```

{% /if %}

{% if isFramework("angular") %}

```diff
constructor() {
    this.options = {
        data: this.data,
        series: [{
            xKey: 'quarter',
            yKey: 'spending',
+            yName: 'Coffee Spending',
        }],
+        legend: {
+            enabled: true,
+        },
    };
}
```

{% /if %}

{% if isFramework("react") %}

```diff
constructor(props) {
    super(props);

    this.state = {
        options: {
            data: this.data,
            series: [{
                xKey: 'quarter',
                yKey: 'spending',
+                yName: 'Coffee Spending',
            }],
+            legend: {
+                enabled: true,
+            },
        }
    }
}
```

{% /if %}

{% if isFramework("vue") %}

```diff
data() {
  return {
    options: {
      data: [
        {
          quarter: 'Q1',
          spending: 700,
        },
        {
          quarter: 'Q2',
          spending: 600,
        },
        {
          quarter: 'Q3',
          spending: 560,
        },
        {
          quarter: 'Q4',
          spending: 450,
        },
      ],
      series: [{
        xKey: 'quarter',
        yKey: 'spending',
+        yName: 'Coffee Spending',
      }],
+      legend: {
+        enabled: true,
+      },
    },
  };
}
```

{% /if %}

{% chartExampleRunner title="Line Chart" name="line-chart-legend" type="generated" /%}

## Basic Column Chart

Now let's try something more interesting. Let's say you want to visualise how much is spent on coffee, milk and tea in your company each quarter and in total. Your data might look something like this:

```
const data = [
    {
        beverage: 'Coffee',
        Q1: 700,
        Q2: 600,
        Q3: 560,
        Q4: 450
    },
    {
        beverage: 'Tea',
        Q1: 520,
        Q2: 450,
        Q3: 380,
        Q4: 270
    },
    {
        beverage: 'Milk',
        Q1: 200,
        Q2: 190,
        Q3: 170,
        Q4: 180
    },
];
```

{% if isFramework("javascript") %}

This time, let's choose another series type to plot the data: stacked columns. Here's the chart factory configuration we can use to do
that:

```
agCharts.AgChart.create({
    data: data,
    container: document.getElementById('myChart'),
    series: [
        { type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
        { type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
        { type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
        { type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
    ],
});
```

{% /if %}

{% if isFramework("frameworks") %}
This time, let's choose another series type to plot the data: stacked columns. Here's the chart configuration we can use to do that:
{% /if %}

{% if isFramework("angular") %}

```ts
constructor() {
    this.options = {
        data: this.data,
        series: [
            { type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
            { type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
            { type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
            { type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
        ],
    };
}
```

{% /if %}

{% if isFramework("react") %}

```
constructor(props) {
    super(props);

    this.state = {
        options: {
            data: this.data,
            series: [
                { type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
                { type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
                { type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
                { type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
            ],
        }
    }

}

```

{% /if %}

{% if isFramework("vue") %}

```js
data() {
  return {
    options: {
      data: [
        {
          beverage: 'Coffee',
          Q1: 700,
          Q2: 600,
          Q3: 560,
          Q4: 450
        },
        {
          beverage: 'Tea',
          Q1: 520,
          Q2: 450,
          Q3: 380,
          Q4: 270
        },
        {
          beverage: 'Milk',
          Q1: 200,
          Q2: 190,
          Q3: 170,
          Q4: 180
        },
      ],
      series: [
          { type: 'bar', xKey: 'beverage', yKey: 'Q1', stacked: true },
          { type: 'bar', xKey: 'beverage', yKey: 'Q2', stacked: true },
          { type: 'bar', xKey: 'beverage', yKey: 'Q3', stacked: true },
          { type: 'bar', xKey: 'beverage', yKey: 'Q4', stacked: true },
      ],
    },
  };
}
```

{% /if %}

Chart tooltips are enabled by default so you can hover over a block to see its value.

{% chartExampleRunner title="Column Chart" name="beverage-expenses-no-labels" type="generated" /%}

## Labels and Titles

We can enhance our chart by providing a label for each block segment. We can set a label's `fontSize`, `fontFamily` and other properties, but for now we'll just accept the default values:

{% if isFramework("javascript") %}

```diff
agCharts.AgChart.create({
    data: data,
    container: document.getElementById('myChart'),
    series: [
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q1',
            stacked: true,
+            label: {},
        },
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q2',
            stacked: true,
+            label: {},
        },
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q3',
            stacked: true,
+            label: {},
        },
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q4',
            stacked: true,
+            label: {},
        },
    ],
});
```

{% /if %}

{% if isFramework("angular") %}

```diff
constructor() {
    this.options = {
        data: this.data,
        series: [
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q1',
                stacked: true,
+                label: {},
            },
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q2',
                stacked: true,
+                label: {},
            },
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q3',
                stacked: true,
+                label: {},
            },
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q4',
                stacked: true,
+                label: {},
            },
        ],
    };
}
```

{% /if %}

{% if isFramework("react") %}

```diff
constructor(props) {
    super(props);

    this.state = {
        options: {
            data: this.data,
            series: [
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q1',
                    stacked: true,
+                    label: {},
                },
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q2',
                    stacked: true,
+                    label: {},
                },
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q3',
                    stacked: true,
+                    label: {},
                },
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q4',
                    stacked: true,
+                    label: {},
                },
            ],
        }
    }
}
```

{% /if %}

{% if isFramework("vue") %}

```diff
data() {
  return {
    options: {
      data: [
        {
          beverage: 'Coffee',
          Q1: 700,
          Q2: 600,
          Q3: 560,
          Q4: 450
        },
        {
          beverage: 'Tea',
          Q1: 520,
          Q2: 450,
          Q3: 380,
          Q4: 270
        },
        {
          beverage: 'Milk',
          Q1: 200,
          Q2: 190,
          Q3: 170,
          Q4: 180
        },
      ],
      series: [
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q1',
          stacked: true,
+          label: {},
        },
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q2',
          stacked: true,
+          label: {},
        },
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q3',
          stacked: true,
+          label: {},
        },
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q4',
          stacked: true,
+          label: {},
        },
      ],
    },
  };
}
```

{% /if %}

{% chartExampleRunner title="Column Chart With Labels" name="beverage-expenses-labels" type="generated" /%}

If we then want to add a title and subtitle to the chart, we can simply add this to our chart config:

{% if isFramework("javascript") %}

```diff
agCharts.AgChart.create({
    data: data,
    container: document.getElementById('myChart'),
+    title: {
+        text: 'Beverage Expenses',
+    },
+    subtitle: {
+        text: 'per quarter',
+    },
+    footnote: {
+        text: 'Based on a sample size of 200 respondents',
+    },
    series: [
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q1',
            stacked: true,
            label: {},
        },
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q2',
            stacked: true,
            label: {},
        },
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q3',
            stacked: true,
            label: {},
        },
        {
            type: 'bar',
            xKey: 'beverage',
            yKey: 'Q4',
            stacked: true,
            label: {},
        },
    ],
});
```

{% /if %}

{% if isFramework("angular") %}

```diff
constructor() {
    this.options = {
        data: this.data,
+        title: {
+            text: 'Beverage Expenses',
+        },
+        subtitle: {
+            text: 'per quarter',
+        },
+        footnote: {
+            text: 'Based on a sample size of 200 respondents',
+        },
        series: [
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q1',
                stacked: true,
                label: {},
            },
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q2',
                stacked: true,
                label: {},
            },
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q3',
                stacked: true,
                label: {},
            },
            {
                type: 'bar',
                xKey: 'beverage',
                yKey: 'Q4',
                stacked: true,
                label: {},
            },
        ],
    };
}
```

{% /if %}

{% if isFramework("react") %}

```diff
constructor(props) {
    super(props);

    this.state = {
        options: {
            data: this.data,
+              title: {
+                  text: 'Beverage Expenses',
+              },
+              subtitle: {
+                  text: 'per quarter',
+              },
+              footnote: {
+                  text: 'Based on a sample size of 200 respondents',
+              },
            series: [
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q1',
                    stacked: true,
                    label: {},
                },
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q2',
                    stacked: true,
                    label: {},
                },
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q3',
                    stacked: true,
                    label: {},
                },
                {
                    type: 'bar',
                    xKey: 'beverage',
                    yKey: 'Q4',
                    stacked: true,
                    label: {},
                },
            ],
        }
    }
}
```

{% /if %}

{% if isFramework("vue") %}

```diff
data() {
  return {
    options: {
      data: [
        {
          beverage: 'Coffee',
          Q1: 700,
          Q2: 600,
          Q3: 560,
          Q4: 450
        },
        {
          beverage: 'Tea',
          Q1: 520,
          Q2: 450,
          Q3: 380,
          Q4: 270
        },
        {
          beverage: 'Milk',
          Q1: 200,
          Q2: 190,
          Q3: 170,
          Q4: 180
        },
      ],
+      title: {
+        text: 'Beverage Expenses',
+      },
+      subtitle: {
+        text: 'per quarter',
+      },
+      footnote: {
+        text: 'Based on a sample size of 200 respondents',
+      },
      series: [
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q1',
          stacked: true,
          label: {},
        },
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q2',
          stacked: true,
          label: {},
        },
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q3',
          stacked: true,
          label: {},
        },
        {
          type: 'bar',
          xKey: 'beverage',
          yKey: 'Q4',
          stacked: true,
          label: {},
        },
      ],
    },
  };
}
```

{% /if %}

{% chartExampleRunner title="Column Chart With Captions" name="beverage-expenses-captions" type="generated" /%}

{% if isFramework("javascript") %}

## Install AG Charts with NPM

To install AG Charts and update your package.json file run:

```bash
npm install --save ag-charts-community
```

Then `import` the module as follows:

```
import * as agCharts from 'ag-charts-community';
```

Creating charts is done using the `agCharts.AgChart` factory as shown in the example above, i.e.

```
agCharts.AgChart.create(options);
```

{% /if %}

{% if isFramework("angular") %}

## Compatible Versions

The table below gives the ranges of compatible versions of AG Charts with Angular versions.

{% note %}
AG Charts Legacy is only required for apps on Angular v8-11 that wish to use AG Charts v6-7. See [AG Grid Legacy](./angular-compatibility/#ag-grid-legacy) for more details about our legacy packages.
{% /note %}

Angular AG Charts AG Charts Package

---

+14 6 - 8+ ag-charts-angular  
12 - 13 6 - 8 ag-charts-angular  
8 - 11 6 - 7 ag-charts-angular-legacy
8 - 11 2 - 5 ag-charts-angular

{% /if %}

Now that you've had a taste of what it's like to use AG Charts, we encourage you to explore our documentation to learn more.
