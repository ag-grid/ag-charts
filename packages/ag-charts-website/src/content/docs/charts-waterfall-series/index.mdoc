---
title: "Waterfall Series"
enterprise: true
---

Waterfall series show how positive and negative data values accumulate, using bars that rise or fall, resembling a cascading waterfall.

## Waterfall Column

To create a basic waterfall column chart, use the `waterfall-column` series type and specify the `xKey` and `yKey` properties:

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
}]
```

{% chartExampleRunner title="Basic Waterfall Column" name="basic-waterfall-column" type="generated" options="{ \"enterprise\": true }" /%}

<note>
| Waterfall series are designed for only a single series in a given chart. For Waterfall Column series, the Y-Axis is a [Number](../charts-axes-types/number) axis and the X-Axis is a [Category](../charts-axes-types/category) axis.
</note>

## Total / Subtotal Values

Total shows the cumulative value from `0` to the current data position, while subtotal shows the cumulative value from the previous subtotal value to the current position.
Total and subtotal values are calculated automatically based on previous items in the data array and help to break down the cumulative effect of multiple changes at any point in the data.

To differentiate regular positive or negative data points from total and subtotal data points, you can use a `typeKey` in the `series` options.

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
    typeKey: 'datumType'
}]
```
This `typeKey` should be included in the data objects that represent total or subtotal values. The value of the `typeKey` in the data can be `total` or `subtotal`.

```js
data: [
    {
        xKey: 'date',
        datumType: 'total',
    },
    {
        xKey: 'date',
        datumType: 'subtotal',
    },
]
```

{% chartExampleRunner title="Waterfall Column Total and Subtotal" name="waterfall-column-total-subtotal" type="generated" options="{ \"enterprise\": true }" /%}

## Customisation

The positive and negative data values can be customised using `series.positiveItem` and `series.negativeItem` options, respectively.
Total and subtotal data values can be customised using the `series.total` options object.

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
    typeKey: 'datumType',
    totalItem: {
        label: {
            enabled: true,
            formatter: ({ value }) => `${value.toFixed(0)}`
        },
        tooltip: {
            renderer: ({ yValue, itemId }: any) =>  ({
                content: `${itemId === 'subtotal' ? 'Subtotal' : 'Total'}: ${yValue}`
            })
        }
    },
}]
```

{% chartExampleRunner title="Waterfall Column Customisation" name="waterfall-column-customisation" type="generated" options="{ \"enterprise\": true }" /%}

## Legend

The legend shows items for positive, negative, and total/subtotal values. However, these items are not toggleable.

## Waterfall Bar

To create a basic waterfall bar chart, use the `waterfall-bar` series type and specify the `xKey` and `yKey` properties:

```js
series: [{
    type: 'waterfall-bar',
    xKey: 'date',
    yKey: 'amount',
}]
```

{% chartExampleRunner title="Basic Waterfall Bar" name="basic-waterfall-bar" type="generated" options="{ \"enterprise\": true }" /%}

### API Reference

{/*  TODO: replace with usual api reference component  */}

```ts
/** Configuration for waterfall series. */
export interface AgWaterfallSeriesTooltipRendererParams extends AgCartesianSeriesTooltipRendererParams {
    /** The Id to distinguish the type of datum. This can be `positive`, `negative`, `total` or `subtotal`. */
    itemId: string;
}

export interface AgWaterfallSeriesTooltip extends AgSeriesTooltip {
    /** Function used to create the content for tooltips. */
    renderer?: (params: AgWaterfallSeriesTooltipRendererParams) => string | AgTooltipRendererResult;
}

export interface AgWaterfallSeriesItemTooltip {
    /** Function used to create the content for tooltips. */
    renderer?: (params: AgWaterfallSeriesTooltipRendererParams) => string | AgTooltipRendererResult;
}

export interface AgWaterfallSeriesLabelOptions extends AgCartesianSeriesLabelOptions {
    /** Where to render series labels relative to the segments. */
    placement?: AgWaterfallSeriesLabelPlacement;
    /** Padding in pixels between the label and the edge of the bar. */
    padding?: PixelSize;
}

export type AgWaterfallSeriesLabelPlacement = 'start' | 'end' | 'inside';

/** Configuration for Waterfall series. */
export interface AgWaterfallSeriesOptions<DatumType = any> extends AgBaseSeriesOptions<DatumType> {
    /** Configuration for the Waterfall series. */
    type?: 'waterfall-bar' | 'waterfall-column';
    /** The key to use to retrieve x-values from the data. */
    xKey?: string;
    /** The key to use to retrieve y-values from the data. */
    yKey?: string;
    /** The key to use to retrieve type-values from the data. */
    typeKey?: string;
    /** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */
    xName?: string;
    /** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */
    yName?: string;
    /** The key to use to retrieve values from the data to use as labels for the bars. */
    labelKey?: string;
    /** A human-readable description of the label values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */
    labelName?: string;
    /** Configuration for the negative series items. */
    negativeItem?: AgWaterfallSeriesItemOptions<DatumType>;
    /** Configuration for the positive series items. */
    positiveItem?: AgWaterfallSeriesItemOptions<DatumType>;
    /** Configuration for the total and subtotal series items. */
    totalItem?: AgWaterfallSeriesItemOptions<DatumType>;
    /** Configuration for the connector lines. */
    line?: AgWaterfallSeriesLineOptions;
    /** The title to use for the series. Defaults to `yName` if it exists, or `yKey` if not. */
    title?: string;
    /** Series-specific tooltip configuration. */
    tooltip?: AgWaterfallSeriesTooltip;
    /** A map of event names to event listeners. */
    listeners?: AgSeriesListeners<DatumType>;
    /** Configuration for the waterfall series items when they are hovered over. */
    highlightStyle?: AgSeriesHighlightStyle;
}

export interface AgWaterfallSeriesItemOptions<DatumType> {
    /** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */
    name?: string;
    /** Configuration for the labels shown on top of data points. */
    label?: AgWaterfallSeriesLabelOptions;
    /** The fill colour to use for the bars. */
    fill?: CssColor;
    /** Opacity of the bars. */
    fillOpacity?: Opacity;
    /** The colour to use for the bars. */
    stroke?: CssColor;
    /** The width in pixels of the bars. */
    strokeWidth?: PixelSize;
    /** Opacity of the bars. */
    strokeOpacity?: Opacity;
    /** Defines how the strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */
    lineDash?: PixelSize[];
    /** The initial offset of the dashed line in pixels. */
    lineDashOffset?: PixelSize;
    /** Configuration for the shadow used behind the series items. */
    shadow?: AgDropShadowOptions;
    /** Function used to return formatting for individual Waterfall series item cells, based on the given parameters. If the current cell is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */
    formatter?: (params: AgWaterfallSeriesFormatterParams<DatumType>) => AgWaterfallSeriesFormat;
    /** Series item specific tooltip configuration. */
    tooltip?: AgWaterfallSeriesItemTooltip;
}

export interface AgWaterfallSeriesLineOptions {
    /** Whether or not the connector lines should be shown. */
    enabled?: boolean;
    /** The colour to use for the connector lines. */
    stroke?: CssColor;
    /** The width in pixels of the connector lines. */
    strokeWidth?: PixelSize;
    /** Opacity of the line stroke. */
    strokeOpacity?: Opacity;
    /** Defines how the strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */
    lineDash?: PixelSize[];
    /** The initial offset of the dashed line in pixels. */
    lineDashOffset?: PixelSize;
}