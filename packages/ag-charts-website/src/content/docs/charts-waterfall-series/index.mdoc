---
title: "Waterfall Series"
enterprise: true
---

Waterfall series show how positive and negative data values accumulate, using bars that rise or fall, resembling a cascading waterfall.

## Waterfall Column

To create a basic waterfall column chart, use the `waterfall-column` series type and specify the `xKey` and `yKey` properties:

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
}]
```

{% chartExampleRunner title="Basic Waterfall Column" name="basic-waterfall-column" type="generated" options="{ \"enterprise\": true }" /%}

<note>
| Waterfall series are designed to display only a single waterfall series in a given chart. Waterfall series should be used with a [Category](../charts-axes-types/category) axis.
</note>

## Total / Subtotal Values

Total shows the cumulative value from `0` to the current data position, while subtotal shows the cumulative value from the previous total or subtotal value to the current position.
Total and subtotal values are calculated automatically based on previous items in the data array and help to break down the cumulative effect of multiple changes at any point in the data.

To add total and subtotal values at a specific position in the chart, add the configuration to the `totals` array on the series options object.

Use `totalType` in the configuration with values `total` or `subtotal` to determine whether to display a total or subtotal value after the data object at the specified index:

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
    totals: [{
        totalType: 'subtotal',
        index: 4,
        axisLabel: 'Subtotal 1'
    }]
}]
```

{% chartExampleRunner title="Waterfall Column Total and Subtotal" name="waterfall-column-total-subtotal" type="generated" options="{ \"enterprise\": true }" /%}

<note>
| The `axisLabel` property value must be unique because it is used as a category value on the category axis.
</note>

## Customisation

### Positive, Negative and Total Items

The positive and negative data values can be customised using `series.item.positive` and `series.item.negative` options, respectively.
Total and subtotal values can be customised using the `series.item.total` options object.

If the legend is enabled, the `name` property in these configuration objects will be used as the label for the legend item.

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
    typeKey: 'datumType',
    item: {
        total: {
            name: 'Total / Subtotal',
            fill: '#EE6666',
            stroke: '#EE6666',
        }
    },
}]
```

{% chartExampleRunner title="Waterfall Column Customisation" name="waterfall-column-customisation" type="generated" options="{ \"enterprise\": true }" /%}

### Connector Lines

The connector lines can be customised using the `line` property.

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
    line: {
        strokeWidth: 4,
        stroke: '#7290C4',
        lineDash: [4, 2],
    }
}]
```

{% chartExampleRunner title="Waterfall Column Connector Lines" name="waterfall-column-connector-lines" type="generated" options="{ \"enterprise\": true }" /%}

To remove the connector lines, set `line.enabled` to `false`:

```js
series: [{
    type: 'waterfall-column',
    xKey: 'date',
    yKey: 'amount',
    line: {
        enabled: false
    }
}]
```

## Legend

The legend shows items for positive, negative, and total/subtotal values. However, these items are not toggleable.

The legend item label can be configured using the `name` property in the item configuration objects.

## Waterfall Bar

To create a basic waterfall bar chart, use the `waterfall-bar` series type and specify the `xKey` and `yKey` properties:

```js
series: [{
    type: 'waterfall-bar',
    xKey: 'date',
    yKey: 'amount',
}]
```

{% chartExampleRunner title="Basic Waterfall Bar" name="basic-waterfall-bar" type="generated" options="{ \"enterprise\": true }" /%}

### API Reference

{/*  TODO: replace with usual api reference component  */}

```ts
/** Configuration for waterfall series. */
export interface AgWaterfallSeriesTooltipRendererParams extends AgCartesianSeriesTooltipRendererParams {
    /** The Id to distinguish the type of datum. This can be `positive`, `negative`, `total` or `subtotal`. */
    itemId: string;
}

export interface AgWaterfallSeriesTooltip extends AgSeriesTooltip {
    /** Function used to create the content for tooltips. */
    renderer?: (params: AgWaterfallSeriesTooltipRendererParams) => string | AgTooltipRendererResult;
}

export interface AgWaterfallSeriesItemTooltip {
    /** Function used to create the content for tooltips. */
    renderer?: (params: AgWaterfallSeriesTooltipRendererParams) => string | AgTooltipRendererResult;
}

export interface AgWaterfallSeriesLabelOptions extends AgCartesianSeriesLabelOptions {
    /** Where to render series labels relative to the bars. */
    placement?: AgWaterfallSeriesLabelPlacement;
    /** Padding in pixels between the label and the edge of the bar. */
    padding?: PixelSize;
}

export type AgWaterfallSeriesLabelPlacement = 'start' | 'end' | 'inside';

/** Configuration for Waterfall series. */
export interface AgWaterfallSeriesOptions<DatumType = any> extends AgBaseSeriesOptions<DatumType> {
    /** Configuration for the Waterfall series. */
    type?: 'waterfall-bar' | 'waterfall-column';
    /** The key to use to retrieve x-values from the data. */
    xKey?: string;
    /** The key to use to retrieve y-values from the data. */
    yKey?: string;
    /** The key to use to retrieve type-values from the data. */
    typeKey?: string;
    /** A human-readable description of the x-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */
    xName?: string;
    /** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */
    yName?: string;
    /** Configuration of total and subtotal values. */
    totals?: WaterfallSeriesTotalMeta[];
    /** Configuration used for the waterfall series item types. */
    item: {
        /** Configuration for the negative series items. */
        negative?: AgWaterfallSeriesItemOptions<DatumType>;
        /** Configuration for the positive series items. */
        positive?: AgWaterfallSeriesItemOptions<DatumType>;
        /** Configuration for the total and subtotal series items. */
        total?: AgWaterfallSeriesItemOptions<DatumType>;
    };
    /** Configuration for the connector lines. */
    line?: AgWaterfallSeriesLineOptions;
    /** The title to use for the series. Defaults to `yName` if it exists, or `yKey` if not. */
    title?: string;
    /** Series-specific tooltip configuration. */
    tooltip?: AgWaterfallSeriesTooltip;
    /** A map of event names to event listeners. */
    listeners?: AgSeriesListeners<DatumType>;
    /** Configuration for the waterfall series items when they are hovered over. */
    highlightStyle?: AgSeriesHighlightStyle;
}


export interface WaterfallSeriesTotalMeta {
    /** Configuration for the calculation of the value. This can be `total` or `subtotal`, `total` shows the cumulative value from `0` to the current data position, while `subtotal` shows the cumulative value from the previous subtotal value to the current position.
     */
    totalType: 'subtotal' | 'total';
    /** The index after which the total item will be displayed. */
    index: number;
    /** The label to display at the axis position where the total value is positioned. */
    axisLabel: any;
}


export interface AgWaterfallSeriesItemOptions<DatumType> {
    /** A human-readable description of the y-values. If supplied, this will be shown in the default tooltip and passed to the tooltip renderer as one of the parameters. */
    name?: string;
    /** Configuration for the labels shown on top of data points. */
    label?: AgWaterfallSeriesLabelOptions;
    /** The fill colour to use for the bars. */
    fill?: CssColor;
    /** Opacity of the bars. */
    fillOpacity?: Opacity;
    /** The colour to use for the bars. */
    stroke?: CssColor;
    /** The width in pixels of the bars. */
    strokeWidth?: PixelSize;
    /** Opacity of the bars. */
    strokeOpacity?: Opacity;
    /** Defines how the strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */
    lineDash?: PixelSize[];
    /** The initial offset of the dashed line in pixels. */
    lineDashOffset?: PixelSize;
    /** Configuration for the shadow used behind the series items. */
    shadow?: AgDropShadowOptions;
    /** Function used to return formatting for individual Waterfall series item cells, based on the given parameters. If the current cell is highlighted, the `highlighted` property will be set to `true`; make sure to check this if you want to differentiate between the highlighted and un-highlighted states. */
    formatter?: (params: AgWaterfallSeriesFormatterParams<DatumType>) => AgWaterfallSeriesFormat;
    /** Series item specific tooltip configuration. */
    tooltip?: AgWaterfallSeriesItemTooltip;
}

export interface AgWaterfallSeriesLineOptions {
    /** Whether or not the connector lines should be shown. */
    enabled?: boolean;
    /** The colour to use for the connector lines. */
    stroke?: CssColor;
    /** The width in pixels of the connector lines. */
    strokeWidth?: PixelSize;
    /** Opacity of the line stroke. */
    strokeOpacity?: Opacity;
    /** Defines how the strokes are rendered. Every number in the array specifies the length in pixels of alternating dashes and gaps. For example, `[6, 3]` means dashes with a length of `6` pixels with gaps between of `3` pixels. */
    lineDash?: PixelSize[];
    /** The initial offset of the dashed line in pixels. */
    lineDashOffset?: PixelSize;
}