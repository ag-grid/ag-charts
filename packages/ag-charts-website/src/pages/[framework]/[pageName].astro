---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { getDocPages, getDocPagesList } from '../../utils/pages';
import { PagesNavigation } from '../../components/pages-navigation/PagesNavigation';
import { Header } from '../../components/docs/Header';
import { getFrameworkDisplayText } from '../../utils/framework';
import type { Framework } from '../../types/ag-grid';

export async function getStaticPaths() {
    const pages = await getCollection('docs');
    return getDocPages(pages);
}

const { page } = Astro.props;
const { framework } = Astro.params;
const { title, enterprise, sideMenu = true } = page.data;

const { Content } = await page.render();

const allDocPages = await getCollection('docs');
const pages = getDocPagesList(allDocPages);
---

<Layout title={`${getFrameworkDisplayText(framework as Framework)} Charts: AG Charts`} showTopBar={true}>
    <PagesNavigation client:load slot="aside" pages={pages} framework={framework!} />

    <div id="doc-page-wrapper" class="docPageWrapper">
        <div
            id="doc-content"
            class:list={[
                'docPage',
                {
                    noSideMenu: !sideMenu,
                },
            ]}
        >
            <Header title={title} framework={framework} isEnterprise={enterprise} />

            {/* Wrapping div is a hack to target "intro" section of docs page */}
            <div class="pageSections">
                <Content framework={framework} page={page} />
            </div>
        </div>

        {sideMenu && <div class="sideMenu">TODO: Side menu</div>}
    </div>
</Layout>

<style lang="scss">
    @use '../../design-system' as *;

    .docPageWrapper {
        --docs-page-max-width: 68em;

        display: flex;
        justify-content: space-between;

        @media screen and (max-width: $breakpoint-docs-nav-medium) {
            @include page-horizontal-margins();
        }

        @media screen and (min-width: $breakpoint-docs-nav-medium) and (max-width: $breakpoint-docs-nav-large) {
            padding-right: var(--horizontal-margin);
        }

        @media screen and (min-width: $breakpoint-docs-nav-extra-large) {
            --docs-page-max-width: 74em;
        }
    }

    %enterprise-icon {
        display: inline-block;
        background-image: url('../images/enterprise.svg');
        text-indent: -10000px;
        background-position-y: center;
        background-repeat: no-repeat;
        content: 'e';
    }

    .docPage {
        flex: 1 1 0px;
        min-width: 0px;
        padding-top: $size-4 + $size-half;
        padding-bottom: $size-7;

        @media screen and (min-width: $breakpoint-docs-nav-large) {
            padding-right: $size-7;
            max-width: var(--docs-page-max-width);
        }

        &.noSideMenu {
            @media screen and (min-width: $breakpoint-docs-nav-large) {
                padding-right: $horizontal-margin;
                max-width: none;
            }

            @media screen and (min-width: 1600px) {
                padding-right: calc(50vw - $max-page-width / 2);
            }
        }

        h1,
        h2,
        h3,
        h4,
        h5,
        h6 {
            &:hover :global(.docs-header-icon) {
                opacity: 0.5;
            }
        }

        :global(.docs-header-icon) {
            position: relative;
            padding-left: 0;
            margin-left: $size-1;
            font-size: inherit;
            opacity: 0;
            transition: opacity 0.33s ease-in-out;

            &:hover {
                opacity: 1 !important;
            }

            svg {
                position: relative;
                width: 0.85em;
                height: 0.85em;
                top: -0.1em;
                visibility: visible;
                fill: var(--azure-blue);
            }
        }

        enterprise-icon::after {
            @extend %enterprise-icon;

            width: 1rem;
            margin-left: 0.25rem;
        }

        a {
            &:hover {
                text-decoration: none;
                color: var(--ag-grid-orange);
            }
        }

        :global(.nav-link) {
            p {
                margin: 0;
            }
        }

        ul li > p {
            margin-bottom: 0.25rem;
        }

        :global(.alert) {
            margin-bottom: $size-2;
        }
    }

    // Align two column markdown tables
    .pageSections > :global(article) > :global(table) {
        table-layout: fixed;
    }

    // Hack to target "intro" section of docs page
    .pageSections > :global(article) > :global(p:first-child) {
        --font-size-extra-large: #{$font-size-extra-large};

        font-size: var(--font-size-extra-large);
        margin-bottom: $size-4;

        code {
            font-size: 0.8em;
        }
    }

    // Hack to target markdown images and not images within components
    .pageSections > :global(article) > :global(div) *:not([class]) :global(img) {
        max-width: 100%;
    }

    .pageSections > :global(article) {
        > h2 {
            margin-top: $size-6;
        }

        > h3,
        > h4 {
            margin-top: $size-4;
        }

        p,
        > ul,
        > ol,
        > table,
        > pre {
            font-size: var(--font-size-medium);
        }

        > h1,
        > h2,
        > h3,
        > h4,
        > h5,
        > h6,
        > p,
        > ul,
        > ol,
        > table,
        > hr {
            @media screen and (min-width: $max-page-width) {
                @include font-size-responsive();
            }
        }
    }

    .sideMenu {
        padding-top: $size-4 + $size-half;
    }
</style>
