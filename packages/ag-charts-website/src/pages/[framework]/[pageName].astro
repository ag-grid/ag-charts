---
import { getCollection, getEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { PagesNavigation } from '@components/pages-navigation/components/PagesNavigation';
import { Header } from '@features/docs/components/Header';
import { getFrameworkDisplayText } from '@utils/framework';
import type { Framework } from '@ag-grid-types';
import { getDocsPages } from '@features/docs/utils/pageData';
import { SideNavigation } from '@components/pages-navigation/components/SideNavigation';
import { getHeadings } from '@utils/markdoc/getHeadings';
import { getFirstParagraphText } from '@utils/markdoc/getFirstParagraphText';
import { DOCS_TAB_ITEM_ID_PREFIX } from '@constants';
import styles from '@ag-website-shared/components/page-styles/docs.module.scss';

export async function getStaticPaths() {
    const pages = await getCollection('docs');
    return getDocsPages(pages);
}

const { page } = Astro.props;
const currentFramework = Astro.params.framework as Framework;
const pageName = Astro.params.pageName as Framework;
const path = Astro.url.pathname;
const { title, enterprise, hideSideMenu, hidePageMenu, largeExamples, headings: pageHeadings } = page.data;

const { Content } = await page.render();
const headings =
    pageHeadings ||
    getHeadings({
        title,
        markdocContent: page.body,
        framework: currentFramework,
        getTabItemSlug: (id) => `${DOCS_TAB_ITEM_ID_PREFIX}${id}`,
    });

const { data: menuData } = await getEntry('menu', 'data');
const menuItems = Object.values(menuData);

const { data: versionsData } = await getEntry('versions', 'ag-charts-versions');
const version = versionsData[0]?.version;
const frameworkDisplayText = getFrameworkDisplayText(currentFramework);
const seoTagline = `Download AG Charts v${version} today: The best ${frameworkDisplayText} Charts and ${frameworkDisplayText} Graphs, in the world.`;
const description = page.data.description
    ? page.data.description.replace('$framework', frameworkDisplayText) // Use front-matter description
    : getFirstParagraphText(page.body, currentFramework); // Default to 1st paragraph text
const descriptionWithSeoTagline = `${description} ${seoTagline}`;
---

<Layout
    title={`${getFrameworkDisplayText(currentFramework)} Charts: ${title} | AG Charts`}
    description={descriptionWithSeoTagline}
    showTopBar={true}
    showSearchBar={true}
    showDocsNav={!hidePageMenu}
>
    <div
        class:list={[
            hidePageMenu && styles.noLeftMenu,
            styles.contentViewport,
            'layout-grid',
            largeExamples && 'largeExamples',
        ]}
    >
        {
            !hidePageMenu && (
                <PagesNavigation client:load menuData={menuData} framework={currentFramework} pageName={pageName} />
            )
        }
        <div
            id="doc-content"
            class:list={[
                styles.docPage,
                {
                    noSideMenu: styles.hideSideMenu,
                },
            ]}
        >
            <Header
                client:load
                title={title}
                framework={currentFramework}
                isEnterprise={enterprise}
                path={path}
                menuItems={menuItems}
            />

            {/* Wrapping div is a hack to target "intro" section of docs page */}
            <div class={styles.pageSections}>
                <Content framework={currentFramework} page={page} />
            </div>
        </div>

        {!hideSideMenu && <SideNavigation client:load headings={headings} delayedScrollSpy={Boolean(pageHeadings)} />}
    </div>
</Layout>
