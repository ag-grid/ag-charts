---
import { getCollection } from 'astro:content';
import { getDocExamplePages, getExampleUrl, getBoilerPlateUrl } from '../../../../utils/pages';
import type { InternalFramework } from '../../../../types/ag-grid';
import JavascriptTemplate from '../../../../features/example-runner/framework-templates/JavascriptTemplate.astro';
import TypescriptTemplate from '../../../../features/example-runner/framework-templates/TypescriptTemplate.astro';
import { getGeneratedContents } from '../../../../features/examples-generator/examplesGenerator';
import { getIsDev } from '../../../../utils/env';

interface Props {
    /**
     * Whether to use relative paths for script files references
     */
    relativePath?: boolean;
}

const internalFramework = Astro.params.internalFramework! as InternalFramework;
const pageName = Astro.params.pageName!;
const exampleName = Astro.params.exampleName!;
const { relativePath } = Astro.props as Props;

export async function getStaticPaths() {
    const pages = await getCollection('docs');
    return getDocExamplePages({
        pages,
    });
}

const isDev = getIsDev();

const library = 'charts';

const { entryFileName, files, scriptFiles, styleFiles, isEnterprise } =
    (await getGeneratedContents({
        internalFramework,
        pageName,
        exampleName,
    })) || {};
const indexFragment = files && files['index.html'];
const exampleUrl = getExampleUrl({
    internalFramework,
    pageName,
    exampleName,
});
const appLocation = relativePath ? './' : exampleUrl;

const boilerPlateUrl = getBoilerPlateUrl({
    library,
    internalFramework,
});

// TODO: Can remove, once we support all frameworks
const supportedInternalFrameworks: InternalFramework[] = ['vanilla', 'typescript'];
---

{
    internalFramework === 'vanilla' && (
        <JavascriptTemplate
            isDev={isDev}
            pageName={pageName}
            exampleName={exampleName}
            modifiedTimeMs={Date.now()}
            isExecuting={true}
            options={{
                enterprise: isEnterprise,
            }}
            scriptFiles={scriptFiles}
            styleFiles={styleFiles}
            indexFragment={indexFragment!}
            appLocation={appLocation}
        />
    )
}

{
    internalFramework === 'typescript' && (
        <TypescriptTemplate
            isDev={isDev}
            pageName={pageName}
            exampleName={exampleName}
            modifiedTimeMs={Date.now()}
            isExecuting={true}
            options={{
                enterprise: isEnterprise,
            }}
            entryFileName={entryFileName!}
            styleFiles={styleFiles}
            indexFragment={indexFragment!}
            appLocation={appLocation}
            library={library}
            boilerplatePath={boilerPlateUrl + '/'}
        />
    )
}

{
    !supportedInternalFrameworks.includes(internalFramework) && (
        <h1>
            TODO: [{internalFramework}] {pageName} - {exampleName}
        </h1>
    )
}
