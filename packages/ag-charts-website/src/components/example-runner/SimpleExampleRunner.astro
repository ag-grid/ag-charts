---
import { getInternalFramework } from '../../utils/framework';
import { getExampleUrl } from '../../utils/pages';
import { getGeneratedContents } from '../../features/examples-generator/examplesGenerator';
import { ExampleIFrame } from './ExampleIFrame';
import { FRAMEWORK_PATH_INDEX, PAGE_NAME_PATH_INDEX } from '../../constants';

const { name } = Astro.props;

// TODO: Get this from framework selector
const pathSegments = Astro.url.pathname.split('/');
const framework = pathSegments[FRAMEWORK_PATH_INDEX];
const pageName = pathSegments[PAGE_NAME_PATH_INDEX];

// TODO: Create framework selector
const useFunctionalReact = false;
const useVue3 = false;
const useTypescript = true; // TODO: Only showing typescript for javascript framework for now

const internalFramework = getInternalFramework({
    framework,
    useFunctionalReact,
    useVue3,
    useTypescript,
});

const exampleUrl = getExampleUrl({ internalFramework, pageName, exampleName: name });

const generatedContents = await getGeneratedContents({
    internalFramework,
    pageName,
    exampleName: name,
});

const { files, entryFileName } = generatedContents || {};
const entryFile = files && entryFileName && files[entryFileName];
---

{
    entryFile ? (
        <div class="container">
            <div class="controls">
                <a href={exampleUrl} target="_blank">
                    Open in New Tab
                </a>
            </div>

            <ExampleIFrame client:only url={exampleUrl} />
        </div>
    ) : (
        `No entryfile for ${exampleUrl}`
    )
}
<style>
    .container {
        border: 1px solid gray;
        padding: 8px;
    }
    .controls {
        display: flex;
        gap: 1rem;
    }
</style>
