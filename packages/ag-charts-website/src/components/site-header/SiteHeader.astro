---
import { getIsDev } from '../../utils/env';
import { HeaderNav } from './HeaderNav';
import { getEntry } from 'astro:content';
import { FRAMEWORKS } from '@constants';
import gridStyles from './gridSiteHeader.module.scss';
import { SiteLogo } from './SiteLogo';
import Search from '../search/Search';
import { getFrameworkFromPath } from '../../features/docs/utils/urlPaths';
import { urlWithBaseUrl } from '@utils/urlWithBaseUrl';
import { isDynamicFrameworkPath, replaceDynamicFrameworkPath } from '@utils/framework';
import { DarkModeToggle } from './DarkModeToggle';

const { pathname } = Astro.url;
const { data: menuData } = await getEntry('menu', 'data');
const topNavItems = menuData.header.items;
const framework = getFrameworkFromPath(pathname);
const isDev = getIsDev();
const apiPaths = menuData.api.items.flatMap(({ path }) => {
    const pathWithBaseUrl = urlWithBaseUrl(path);

    if (isDynamicFrameworkPath(pathWithBaseUrl)) {
        return FRAMEWORKS.map((framework) => ({
            title: 'API',
            path: replaceDynamicFrameworkPath({ dynamicFrameworkPath: pathWithBaseUrl, framework }),
        }));
    }

    return {
        title: 'API',
        path: urlWithBaseUrl(path),
    };
});
const frameworkPaths = FRAMEWORKS.map((framework) => ({
    title: 'Docs',
    path: urlWithBaseUrl(framework),
}));
const allPaths = [
    ...topNavItems,
    // NOTE: Prioritise API paths over framework paths - for doc pages which are in
    //  the API section
    ...apiPaths,
    ...frameworkPaths,
];

export interface Props {
    showSearchBar?: boolean;
}
const { showSearchBar } = Astro.props;
---

<header class:list={[gridStyles.header, 'site-header']}>
    <div class:list={gridStyles.headerInner}>
        <SiteLogo client:load />

        {showSearchBar && <Search client:only currentFramework={framework} isDev={isDev} />}

        <HeaderNav currentPath={pathname} items={topNavItems} allPaths={allPaths} client:load>
            <li class:list={[gridStyles.navItem, gridStyles.buttonItem, 'darkModeItem']}>
                <DarkModeToggle client:only />
            </li>
        </HeaderNav>
    </div>
</header>

<style lang="scss">
    .darkModeItem {
        min-width: 48px;
    }
</style>
