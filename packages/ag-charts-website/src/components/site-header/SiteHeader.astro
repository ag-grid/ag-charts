---
import { Icon } from '@components/icon/Icon';
import { HeaderNav } from './HeaderNav';
import { getEntry } from 'astro:content';
import { FRAMEWORKS } from '@constants';
import gridStyles from '@design-system/modules/SiteHeader.module.scss';
import { SiteLogo } from './SiteLogo';
import Search from '../search/Search';
import { getFrameworkFromPath } from '../../features/docs/utils/urlPaths';
import { urlWithBaseUrl } from '@utils/urlWithBaseUrl';
import { isDynamicFrameworkPath, replaceDynamicFrameworkPath } from '@utils/framework';
import { DarkModeToggle } from './DarkModeToggle';
import { ProductDropdown } from '../productDropdown/ProductDropdown';

const { pathname } = Astro.url;
const { data: menuData } = await getEntry('menu', 'data');
const topNavItems = menuData.header.items;
const framework = getFrameworkFromPath(pathname);
const apiPaths = menuData.api.items.flatMap(({ path }) => {
    const pathWithBaseUrl = urlWithBaseUrl(path);

    if (isDynamicFrameworkPath(pathWithBaseUrl)) {
        return FRAMEWORKS.map((framework) => ({
            title: 'API',
            path: replaceDynamicFrameworkPath({ dynamicFrameworkPath: pathWithBaseUrl, framework }),
        }));
    }

    return {
        title: 'API',
        path: urlWithBaseUrl(path),
    };
});
const frameworkPaths = FRAMEWORKS.map((framework) => ({
    title: 'Docs',
    path: urlWithBaseUrl(framework),
}));
const allPaths = [
    ...topNavItems,
    // NOTE: Prioritise API paths over framework paths - for doc pages which are in
    //  the API section
    ...apiPaths,
    ...frameworkPaths,
];

export interface Props {
    showSearchBar?: boolean;
}
const { showSearchBar, showDocsNav } = Astro.props;

const dropdownItems = [
    {
        title: 'AG Grid',
        description: 'Best JavaScript Grid in the World',
        icon: 'icon',
        link: 'https://ag-grid.com',
    },
    {
        title: 'AG Charts',
        description: 'Best JavaScript Charts in the World',
        icon: 'icon',
        link: 'https://charts.ag-grid.com',
    },
];
---

<header class:list={[gridStyles.header, 'site-header']}>
    <div class={gridStyles.headerInner}>
        <SiteLogo client:load />

        <ProductDropdown client:load items={dropdownItems} children={null} />

        {
            (showDocsNav || showSearchBar) && (
                <div class={gridStyles.docsNavBtnSearchContainer}>
                    {showDocsNav && (
                        <button
                            id="top-bar-docs-button"
                            class:list={[gridStyles.mobileNavButton, 'button-secondary']}
                            type="button"
                            data-toggle="collapse"
                            data-target="#side-nav"
                            aria-controls="side-nav"
                            aria-expanded="false"
                            aria-label="Toggle docs page navigation"
                        >
                            <span>Docs</span>
                            <Icon name="collapseCategories" />
                        </button>
                    )}

                    {showSearchBar && framework && <Search client:load />}
                </div>
            )
        }

        <HeaderNav currentPath={pathname} items={topNavItems} allPaths={allPaths} client:load>
            <li class:list={[gridStyles.navItem, gridStyles.buttonItem, 'darkModeItem']}>
                <DarkModeToggle client:only />
            </li>
        </HeaderNav>
    </div>
</header>

<style lang="scss">
    @use '../../design-system' as *;

    // Required to stop mobile docs nav flash on page load
    @media screen and (min-width: $breakpoint-docs-nav-medium) {
        #top-bar-docs-button {
            display: none;
        }
    }
</style>
