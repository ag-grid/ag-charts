name: Prepare Release Branch

on:
    workflow_dispatch:
        inputs:
            version:
                type: string
                required: true
                default: '9.3.0'
            type:
                type: 'choice'
                required: true
                default: 'create'
                options:
                    - 'create'
                    - 'update'
            update_tag:
                type: 'choice'
                required: true
                default: 'true'
                options:
                    - 'true'
                    - 'false'

env:
    NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
    NX_NO_CLOUD: true
    NX_CLOUD_ACCESS_TOKEN: x
    NX_BRANCH: ${{ github.ref }}
    BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
    prepare:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              id: checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Setup Node.js
              id: setup_node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: 'yarn'

            - name: Install Dependencies
              run: |
                  yarn install --ignore-scripts

            - name: Reset Package Version
              id: reset_version
              if: ${{ github.event.inputs.type == 'create' }}
              run: |
                  ./tools/bump-versions.sh ${{ github.event.inputs.version }}

            - name: Update Release Information
              id: release_info
              if: ${{ github.event.inputs.type == 'create' }}
              run: |
                  node ./tools/update-release-info.js

            - name: Update Package Version
              id: update_version
              run: |
                  NEW_VERSION=$(node ./tools/calculate-next-version.js)
                  ./tools/bump-versions.sh ${NEW_VERSION}
                  echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
                  echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
                  echo "tag=b${NEW_VERSION}" >> $GITHUB_OUTPUT

            - name: Commit Changes
              id: commit_changes
              run: |
                  git add .
                  git commit -m "Release prep for ${{ steps.update_version.outputs.version }}."
                  git push -f origin ${BRANCH_NAME}

            - name: Tag Latest Successful Commit For Publish
              if: success() && github.event.inputs.update_tag == 'true'
              run: |
                  git tag -f latest-beta-version
                  git push origin -f latest-beta-version
