name: e2e

on:
    workflow_dispatch: {}
    push:
        tags: ['latest-success']
    schedule:
        - cron: '0 7 * * 1-5'

env:
    NX_REJECT_UNKNOWN_LOCAL_CACHE: 0
    NX_NO_CLOUD: true
    NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}
    NX_BRANCH: ${{ github.ref }}
    # Set to --batch to enable batch execution.
    NX_BATCH_FLAG: '--batch'

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: ${{ github.ref != 'refs/heads/latest' }}

jobs:
    e2e:
        runs-on: ubuntu-24.04
        strategy:
            fail-fast: false
            matrix:
                shard: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        name: test (${{ matrix.shard }}/${{ strategy.job-total }})
        env:
            NX_PARALLEL: 1
        steps:
            - name: Checkout
              id: checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Cache node_modules
              id: cache
              uses: actions/cache@v3
              with:
                  path: |
                      node_modules/
                      packages/*/node_modules/
                      plugins/*/node_modules/
                      libraries/*/node_modules/
                  key: node_modules-${{hashFiles('yarn.lock','patches/*.patch', 'packages/*/package.json', 'plugins/*/package.json')}}
                  restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
            - name: Cache Nx
              uses: actions/cache@v3
              with:
                  path: .nx/cache
                  key: cache-nx-v17-${{ hashFiles('yarn.lock','patches/*.patch', 'packages/*/package.json', 'plugins/*/package.json') }}-${{ github.sha }}
                  restore-keys: cache-nx-v17-${{ hashFiles('yarn.lock','patches/*.patch', 'packages/*/package.json', 'plugins/*/package.json') }}-
            - name: Setup Node.js
              id: setup_node
              uses: actions/setup-node@v4
              with:
                  node-version: '20'
                  cache: ${{ github.event.inputs.clean_checkout != 'true' && steps.cache.outputs.cache-hit != 'true' && 'yarn' || '' }}
            - name: yarn install
              if: steps.cache.outputs.cache-hit != 'true'
              id: yarn_install
              run: (yarn check --integrity && yarn postinstall) || yarn install --ci
            - name: yarn postinstall
              if: steps.cache.outputs.cache-hit == 'true'
              run: yarn postinstall
            - name: playwright install
              run: npx playwright install chromium --with-deps

            - name: nx run generate-gallery-thumbnail
              run: yarn nx run generate-gallery-thumbnail --example simple-bar

            - name: nx test:e2e
              run: |
                  yarn nx run --output-style=streamed ag-charts-website:test:e2e --configuration=ci --shard=${{ matrix.shard }}/${{ strategy.job-total }}
              timeout-minutes: 20

            - name: Perist test results
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: test-results-e2e-shard-${{matrix.shard}}
                  path: |
                      reports/

    report:
        runs-on: ubuntu-24.04
        needs: [e2e]
        if: cancelled() != true
        steps:
            - name: Checkout
              id: checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
            - name: Fetch Refs
              run: git fetch origin latest-success latest

            - uses: actions/download-artifact@v4
              with:
                  path: test-results/

            - name: Merge JUnit Report XMLs
              run: |
                  ls -R test-results/
                  yarn global add junit-report-merger
                  reports=$(find test-results/ -name \*.xml -type f -exec basename \{\} \; | sort | uniq)
                  mkdir -p reports/
                  echo "$reports" | (while read name ; do
                    yarn exec -s jrm reports/${name} "test-results/**/${name}"
                  done)

            - name: Test Report
              uses: dorny/test-reporter@v1
              if: needs.e2e.result == 'success' || needs.e2e.result == 'failure'
              id: testReport
              continue-on-error: true
              with:
                  name: 'Tests Results'
                  path: reports/*.xml
                  reporter: jest-junit

            - name: Check last job status
              id: lastJobStatus
              if: always() && github.ref == 'refs/heads/latest'
              run: |
                  WORKFLOW_STATUS="success"
                  if [[ "${{ needs.e2e.result }}" == "failure" ]] ; then
                    WORKFLOW_STATUS="failure"
                  fi
                  echo "workflowStatus=${WORKFLOW_STATUS}" >> $GITHUB_OUTPUT

                  LAST_WORKFLOW_STATUS=$(gh run list --workflow .github/workflows/e2e.yml -b latest | grep -oh "completed.*" | grep -v "cancelled" | head -1 | awk '{print $2}')
                  if [ "$GITHUB_RUN_ATTEMPT" -ge 2 ]; then
                    # Handle re-run cases - there is no way to query the previous run status, so we assume the most
                    # common scenario will be re-run after failure.
                    LAST_WORKFLOW_STATUS="failure"
                  fi
                  if [ "$LAST_WORKFLOW_STATUS" != "$WORKFLOW_STATUS" ]; then
                    echo "status changed from $LAST_WORKFLOW_STATUS to $WORKFLOW_STATUS"
                    echo "changedState=true" >> $GITHUB_OUTPUT
                  else
                    echo "status is still $WORKFLOW_STATUS"
                    echo "changedState=false" >> $GITHUB_OUTPUT
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Slack Notification
              uses: rtCamp/action-slack-notify@v2
              if: always() && job.status != 'cancelled' && github.ref == 'refs/heads/latest' && steps.lastJobStatus.outputs.changedState == 'true'
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                  SLACK_COLOR: ${{ steps.lastJobStatus.outputs.workflowStatus }}
                  SLACK_ICON: https://avatars.slack-edge.com/2020-11-25/1527503386626_319578f21381f9641cd8_192.png
                  SLACK_USERNAME: ag-charts CI
                  SLACK_FOOTER: ''
                  SLACK_MESSAGE: >
                      E2E: ${{ needs.e2e.outputs.build == 'success' && '✅' || needs.e2e.outputs.build == 'failure' && '❌' || 'NA' }}
