name: CI

on:
    push:
        branches: [latest]
    pull_request:
        branches: [latest]

concurrency:
    group: ${{ github.workflow }}-${{ github.event.number || github.ref }}
    cancel-in-progress: true

jobs:
    execute_blt:
        runs-on: ubuntu-latest
        outputs:
            nx_base: ${{ steps.nx_config.outputs.base }}
            test_check_id: ${{ steps.init_test.outputs.check_id }}
            build: ${{ steps.build.outcome || '' }}
            lint: ${{ steps.lint.outcome || '' }}
            format: ${{ steps.format.outcome || '' }}
            test_count: ${{ steps.test_count.outputs.test_count }}
        steps:
            - id: init_format
              name: Update Status (format)
              uses: LouisBrunner/checks-action@v1.6.1
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  name: format
                  status: queued
            - id: init_lint
              name: Update Status (lint)
              uses: LouisBrunner/checks-action@v1.6.1
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  name: lint
                  status: queued
            - id: init_build
              name: Update Status (build)
              uses: LouisBrunner/checks-action@v1.6.1
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  name: build
                  status: queued

            - name: Checkout
              id: checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Nx Affected SHA Setup
              id: nx_config
              run: |
                  if [[ $(git branch --show-current) == 'latest' ]] ; then
                    echo "base=latest-success" >> $GITHUB_OUTPUT
                  else
                    echo "base=origin/latest" >> $GITHUB_OUTPUT
                  fi
            - name: Cache node_modules
              id: cache
              uses: actions/cache@v3
              with:
                  path: |
                      node_modules/
                      packages/*/node_modules/
                  key: node_modules-${{hashFiles('yarn.lock')}}
                  restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
            - name: Cache Nx
              uses: actions/cache@v3
              with:
                  path: node_modules/.cache/nx
                  key: cache-nx-${{ hashFiles('yarn.lock') }}-${{ github.sha }}
                  restore-keys: |
                      cache-nx-${{ hashFiles('yarn.lock') }}-
            - name: Setup Node.js
              id: setup_node
              uses: actions/setup-node@v3
              with:
                  node-version: '18'
                  cache: ${{ steps.cache.outputs.cache-hit != 'true' && 'yarn' || '' }}

            - name: yarn install
              if: steps.cache.outputs.cache-hit != 'true'
              id: yarn_install
              run: yarn install --ci --prefer-offline

            - name: nx format:check
              id: format
              if: steps.yarn_install.outcome == 'success' || steps.yarn_install.outcome == 'skipped'
              run: yarn nx format:check --base ${{ steps.nx_config.outputs.base }}
            - name: Update Status (format)
              uses: LouisBrunner/checks-action@v1.6.1
              if: always()
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  check_id: ${{ steps.init_format.outputs.check_id }}
                  conclusion: ${{ steps.format.outcome }}

            - name: nx lint
              id: lint
              if: steps.yarn_install.outcome == 'success' || steps.yarn_install.outcome == 'skipped'
              run: yarn nx affected --base ${{ steps.nx_config.outputs.base }} -t lint --parallel=3
            - name: Update Status (lint)
              uses: LouisBrunner/checks-action@v1.6.1
              if: always()
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  check_id: ${{ steps.init_lint.outputs.check_id }}
                  conclusion: ${{ steps.lint.outcome }}

            - name: nx build
              id: build
              if: steps.yarn_install.outcome == 'success' || steps.yarn_install.outcome == 'skipped'
              run: yarn nx affected --base ${{ steps.nx_config.outputs.base }} -t build --parallel=3
            - name: Update Status (build)
              uses: LouisBrunner/checks-action@v1.6.1
              if: always()
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}
                  check_id: ${{ steps.init_build.outputs.check_id }}
                  conclusion: ${{ steps.build.outcome }}

            - name: Archive gallery thumbnails
              if: steps.build.outcome == 'success'
              uses: actions/upload-artifact@v3
              with:
                  name: ag-charts-website-gallery-thumbnails
                  path: dist/packages/ag-charts-website/gallery/examples/

            - name: Count test targets to run
              id: test_count
              run: |
                  echo "test_count=$(yarn -s nx show projects --affected --base ${{ steps.nx_config.outputs.base }} -t test | wc -l)" >> $GITHUB_OUTPUT

    test:
        runs-on: ubuntu-latest
        needs: execute_blt
        if: needs.execute_blt.outputs.test_count > 0
        strategy:
            matrix:
                shard: [1, 2, 3, 4]
        name: test (${{ matrix.shard }}/${{ strategy.job-total }})
        steps:
            - name: Checkout
              id: checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0
            - name: Cache node_modules
              id: cache
              uses: actions/cache@v3
              with:
                  path: |
                      node_modules/
                      packages/*/node_modules/
                  key: node_modules-${{hashFiles('yarn.lock')}}
                  restore-keys: node_modules- # Take any latest cache if failed to find it for current yarn.lock
            - name: Cache Nx
              uses: actions/cache@v3
              with:
                  path: node_modules/.cache/nx
                  key: cache-nx-${{ hashFiles('yarn.lock') }}-${{matrix.shard}}-${{ github.sha }}
                  restore-keys: |
                      cache-nx-${{ hashFiles('yarn.lock') }}-
            - name: nx test
              id: test
              run: yarn nx affected --base ${{ needs.execute_blt.outputs.nx_base }} -t test --configuration=ci --exclude all --shard=${{ matrix.shard }}/${{ strategy.job-total }}
            - name: Perist test results
              uses: actions/upload-artifact@v3
              with:
                  name: test-shard-result-${{matrix.shard}}
                  path: reports/

    report:
        runs-on: ubuntu-latest
        needs: [execute_blt, test]
        if: always()
        steps:
            - name: Checkout
              id: checkout
              uses: actions/checkout@v3
              with:
                  fetch-depth: 0

            - name: Test Report
              uses: dorny/test-reporter@v1
              if: needs.test.result == 'success' || needs.test.result == 'failure'
              continue-on-error: true
              with:
                  name: 'Tests Results $1'
                  artifact: test-shard-result-*
                  path: *.xml
                  reporter: jest-junit

            - name: Tag Latest Successful Commit
              if: success() && github.ref == 'refs/heads/latest'
              uses: EndBug/latest-tag@latest
              with:
                  ref: latest-success
                  description: Latest commit to pass GitHub Actions workflow on latest branch.

            - name: Check last job status
              id: lastJobStatus
              if: always() && github.ref == 'refs/heads/latest'
              run: |
                  LAST_JOB_STATUS=$(gh run list --workflow .github/workflows/ci.yml -b latest | grep -oh "completed.*" | grep -v "cancelled" | head -1 | awk '{print $2}')
                  THIS_JOB_STATUS="${{ job.status }}"
                  if [ "$LAST_JOB_STATUS" != "$THIS_JOB_STATUS" ]; then
                    echo "status changed from $LAST_JOB_STATUS to $THIS_JOB_STATUS"
                    echo "changedState=true" >> $GITHUB_OUTPUT
                  else
                    echo "status is still $THIS_JOB_STATUS"
                    echo "changedState=false" >> $GITHUB_OUTPUT
                  fi
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Commit History
              id: commits
              if: always() && job.status != 'cancelled' && github.ref == 'refs/heads/latest' && steps.lastJobStatus.outputs.changedState == 'true'
              run: |
                  GIT_LOG=$(git log HEAD ^${{ needs.execute_blt.outputs.nx_base }} --format="%an (%h) %s")
                  echo "GIT_LOG<<EOF" >> $GITHUB_ENV
                  echo "$GIT_LOG" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

            - name: Slack Notification
              uses: rtCamp/action-slack-notify@v2
              if: always() && job.status != 'cancelled' && github.ref == 'refs/heads/latest' && steps.lastJobStatus.outputs.changedState == 'true'
              env:
                  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
                  SLACK_COLOR: ${{ job.status }}
                  SLACK_ICON: https://avatars.slack-edge.com/2020-11-25/1527503386626_319578f21381f9641cd8_192.png
                  SLACK_USERNAME: ag-charts CI
                  SLACK_FOOTER: ''
                  SLACK_MESSAGE: >
                      Build: ${{ needs.execute_blt.outputs.build == 'success' && '✅' || needs.execute_blt.outputs.build == 'failure' && '❌' || 'NA' }}
                      Lint: ${{ needs.execute_blt.outputs.lint == 'success' && '✅' || needs.execute_blt.outputs.lint == 'failure' && '❌' || 'NA' }}
                      Format: ${{ needs.execute_blt.outputs.format == 'success' && '✅' || needs.execute_blt.outputs.format == 'failure' && '❌' || 'NA' }}
                      Test: ${{ needs.test.result == 'success' && '✅' || needs.test.result == 'failure' && '❌' || 'NA' }}

                      *Changes:*

                      ${{ env.GIT_LOG }}
